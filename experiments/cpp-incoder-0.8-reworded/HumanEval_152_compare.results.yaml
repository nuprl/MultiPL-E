language: cpp
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code goes here\n    long ans =\
    \ 0;\n    for(int i = 0; i < game.size(); i++)\n    {\n        for(int j = 0;\
    \ j < guess.size(); j++)\n        {\n            if(game[i] == guess[j])\n   \
    \         {\n                ans += 0;\n            }\n            else\n    \
    \        {\n                ans += abs(game[i] - guess[j]);\n            }\n \
    \       }\n    }\n    std::vector<long> temp(guess.size());\n    for(int i = 0;\
    \ i < guess.size(); i++)\n    {\n        temp[i] = ans;\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwvd7qrrf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // TODO: implement this function\n   \
    \ return game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnukri8ec.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    // Your code goes here.\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjqsatcxb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> results;\n    assert(game.size()\
    \ == guess.size());\n    long minGuess = *std::min_element(guess.begin(), guess.end());\n\
    \    // We want to find the minimum difference between the guess and the score.\n\
    \    // We start by assuming that the difference between the guess and the score\
    \ is 0.\n    long minDiff = 0;\n    // If guess and score do not have the same\
    \ length, we can't compare them.\n    assert(game.size() == guess.size());\n \
    \   // If the length of the scores and guesses are equal, we can compare them\
    \ without worrying about the lengths.\n    if (game.size() == guess.size())\n\
    \    {\n        bool found = false;\n        for (long i=0; i<game.size(); i++)\n\
    \        {\n            // We can safely compare vectors of same length.\n   \
    \         // First we check that all elements are equal\n            if (game[i]\
    \ == guess[i])\n            {\n                // If there is at least one element\
    \ that is different, it means that\n                // the score and the guess\
    \ were wrong.\n                if (!found)\n                {\n              \
    \      results.push_back(0);\n                }\n                else\n      \
    \          {\n                    results.push_back(abs(game[i] - guess[i]));\n\
    \                }\n                found = true;\n            }\n           \
    \ else\n            {\n                // If one element in the scores and guesses\
    \ is not equal, we know that \n                // there is a mismatch between\
    \ the guess and the score.\n                results.push_back(abs(game[i] - guess[i]));\n\
    \            }\n        }\n    }\n    return results;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm3jcfew6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  int n = game.size();\n  int m = guess.size();\n\
    \  assert(m == n);\n  std::vector <long> result(m, 0);\n  int cnt = 0;\n  for\
    \ (int i = 0; i < n; i++) {\n    int diff = abs(game[i] - guess[i]);\n    result[cnt]\
    \ = diff;\n    cnt++;\n  }\n  for (int i = n; i < m; i++) {\n    result[i] = abs(game[i]\
    \ - guess[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp06bbfeba.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    // I realize we're getting a bit ahead of ourselves here, but it's nice to\
    \ have the code comments to explain\n    // why you're doing what you're doing.\n\
    \    std::vector<long> scores(game.size());\n    long minScore = 0;\n    long\
    \ scoreOfGuess = 0;\n    long scoreOfBestScore = 0;\n    int bestScore = 0;\n\
    \    \n    for(long i = 0; i < game.size(); i++){\n        if(game[i] < bestScore){\n\
    \            bestScore = game[i];\n        }\n        if(game[i] == bestScore){\n\
    \            scoreOfBestScore = game[i];\n            \n        }\n        \n\
    \        if(guess[i] > bestScore){\n            scoreOfGuess = game[i];\n    \
    \    }\n        \n        if(guess[i] < bestScore){\n            scoreOfGuess\
    \ = game[i];\n        }\n        \n        scores[i] = abs(guess[i] - scoreOfGuess)\n\
    \        \n        \n    }\n    return scores;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpczwile0k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Complete this function\n    std::vector<long>\
    \ result(guess.size());\n    for(int i = 0;i < guess.size();i++){\n        if(game[i]\
    \ != guess[i]){\n            result[i] = abs(game[i] - guess[i]);\n        }else{\n\
    \            result[i] = 0;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0ckoyc3d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tlong sum = 0;\n\tlong diff = 0;\n\tfor (size_t\
    \ i = 0; i < game.size(); ++i) {\n\t\tif (game[i] == guess[i]) {\n\t\t\t++sum;\n\
    \t\t} else {\n\t\t\tdiff = std::abs(game[i] - guess[i]);\n\t\t}\n\t}\n\tstd::vector<long>\
    \ result(game.size());\n\tfor (int i = 0; i < game.size(); ++i) {\n\t\tresult[i]\
    \ = sum - diff;\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv2_c2j77.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> answer;\n  int cnt = 0;\n\
    \  for (int i = 0; i < guess.size(); i++) {\n    // std::cout << i << \"\\n\"\
    ;\n    if (game[i] == guess[i]) {\n      cnt++;\n    } else {\n      cnt += abs(game[i]\
    \ - guess[i]);\n    }\n  }\n  answer.push_back(cnt);\n  return answer;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeo8qlib4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    // the difference between the score and the guessed score\n    // is just\
    \ the absolute value of the difference\n    // between the two vectors.\n    //\
    \ std::abs makes it easy to compare vectors\n    for(size_t i = 0; i < guess.size();\
    \ ++i) {\n        result[i] = std::abs(game[i] - guess[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl7es6wnx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int num_game = game.size(), num_guess\
    \ = guess.size();\n    assert(game.size() == guess.size());\n    std::vector<long>\
    \ dist(num_game, 0);\n    for (int i = 0; i < num_game; i++) {\n        auto diff\
    \ = (game[i] - guess[i]);\n        if (diff < 0) {\n            diff += num_game;\n\
    \        }\n        dist[i] = diff;\n    }\n    return dist;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqrx_xb48.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if (game.size() != guess.size()) {\n \
    \       throw std::invalid_argument(\"compare(): vectors must be of equal length\"\
    );\n    }\n    std::vector<long> result(game.size());\n    long diff;\n    for\
    \ (size_t i = 0; i < game.size(); i++) {\n        diff = abs(game[i] - guess[i]);\n\
    \        result[i] = diff < 0 ? diff : 0;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuzou_1s5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long maxscore = std::max(game.front(),\
    \ guess.front());\n    std::vector<long> scores(guess.size(), maxscore);\n   \
    \ \n    // Your code goes here\n    \n    return scores;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcg3_3rh3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> diff;\n  for (int i =\
    \ 0; i < game.size(); i++) {\n    diff.push_back(abs(game[i] - guess[i]));\n \
    \ }\n  return diff;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7x3ttvy4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); ++i) {\n        result[i] = std::abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu44r13m5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> results;\n  int n1 = game.size(),\
    \ n2 = guess.size();\n  assert(n1 == n2);\n  for (int i = 0; i < n1; i++) {\n\
    \    long diff = abs(guess[i] - game[i]);\n    // if the guess is correct, just\
    \ store the difference\n    if (guess[i] == game[i]) {\n      results.push_back(diff);\n\
    \      continue;\n    }\n    // otherwise, store the difference and move on to\
    \ the next guess\n    results.push_back(diff);\n  }\n  return results;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplfpxhzhj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\t// You have a set of scores (a vector of\
    \ longs)\n\tassert(game.size() == guess.size());\n\t// Your return value is the\
    \ same size as guess, denoting the number of incorrect guesses\n\tstd::vector<long>\
    \ result(guess.size());\n\tfor (auto &item: game) {\n\t\t// For each score, compare\
    \ it to each guess, and set the result to the absolute difference with the score\n\
    \t\t// if they match then score is 0, otherwise score is the absolute difference\n\
    \t\tfor (auto &item2: guess) {\n\t\t\tif (item == item2)\n\t\t\t\tresult = 0;\n\
    \t\t\telse\n\t\t\t\tresult = std::abs(item - item2);\n\t\t}\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp173r9wc_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        result[i] = game[i] - guess[i];\n    }\n    return std::abs(result);\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4dp1vrwa.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int n = game.size();\n    int m = guess.size();\n\
    \    // int diff = std::abs(guess[0] - game[0]);\n    // for(int i = 1; i < n;\
    \ i++) {\n    //     diff = std::abs(guess[i] - game[i]);\n    //     if(diff\
    \ > 0 ) {\n    //         break;\n    //     }\n    // }\n    std::vector<long>\
    \ gameGuess(guess);\n    std::sort(game.begin(), game.end());\n    std::sort(guess.begin(),\
    \ guess.end());\n    int diff = std::abs(guess[0] - game[0]);\n    for(int i =\
    \ 1; i < n; i++) {\n        diff = std::abs(guess[i] - game[i]);\n        if(diff\
    \ > 0 ) {\n            break;\n        }\n    }\n    std::vector<long> ans(guess);\n\
    \    if(diff < 0) {\n        for(int i = 1; i < m; i++) {\n            diff =\
    \ std::abs(guess[i] - gameGuess[i]);\n            if(diff < 0) {\n           \
    \     break;\n            }\n        }\n    }\n    ans[0] = diff < 0 ? ans[0]\
    \ : guess;\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpthwzab5s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> wrong;\n    bool allGood\
    \ = true;\n    for (auto i = 0UL; i < guess.size(); ++i) {\n        auto diff\
    \ = game[i] - guess[i];\n        if (diff < 0) allGood = false;\n        else\
    \ wrong.push_back(diff);\n    }\n    return allGood ? std::vector<long>({0}) :\
    \ wrong;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoqloi0gv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long long score = 0;\n    std::vector<long>\
    \ answer;\n    // use assert to make sure the two vectors have the same size\n\
    \    assert(game.size() == guess.size());\n    // fill the result vector\n   \
    \ answer.resize(game.size());\n    for (size_t i = 0; i < game.size(); ++i) {\n\
    \        if (game[i] != guess[i]) {\n            score += abs(game[i] - guess[i]);\n\
    \        } else {\n            score += 0;\n        }\n        answer[i] = score;\n\
    \    }\n    return answer;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzyhm1hit.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaqya_33g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> diff;\n    int i, k;\n\
    \    assert(game.size() == guess.size());\n    k = game.size();\n    for(i = 0;\
    \ i < k; i++) {\n        if(game[i] != guess[i]) {\n            diff[i] = abs(game[i]\
    \ - guess[i]);\n        } else {\n            diff[i] = 0;\n        }\n    }\n\
    \    return diff;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeaxhmiof.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010924
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  assert(game.size() == guess.size());\n \
    \ // I like to initialize a result vector\n  std::vector<long> result{ game.size(),\
    \ 0 };\n  // This for loop will run until both vectors are identical\n  for (int\
    \ i = 0; i < game.size(); i++) {\n    // This nested if statement will check to\
    \ see if the game value at index i is equal to the guess value.\n    // This also\
    \ makes sure that if the two are different, the program will throw an error.\n\
    \    if (game[i] != guess[i]) {\n      std::cout << \"ERROR! Guessed wrong.\"\
    \ << std::endl;\n      return result;\n    }\n    // If the two are equal, increment\
    \ the result vector by 1.\n    result[i]++;\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7s4zyged.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tassert(game.size() == guess.size());\n\t\
    std::vector<long> guessed;\n\tfor (int i = 0; i < game.size(); i++) {\n\t\tguessed.push_back(0);\n\
    \t\tfor (int j = 0; j < guess.size(); j++) {\n\t\t\tif (game[i] == guess[j]) {\n\
    \t\t\t\tguessed[i] += j;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn guessed;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp52luenpu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // write your logic here\n    std::vector<long>\
    \ ans(guess.size());\n    int c=0;\n    for(int i=0;i<guess.size();i++){\n   \
    \     int score=0;\n        if(game[i]==guess[i]){\n            score=0;\n   \
    \     }\n        else{\n            score=game[i]-guess[i];\n        }\n     \
    \   ans[i]=score;\n        c++;\n    }\n    if(c==0){\n        for(int i=0;i<guess.size();i++){\n\
    \            ans[i]=0;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7caf5ibm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long result = 0;\n    int wrong_count\
    \ = 0;\n    for (auto i = guess.begin(); i != guess.end(); ++i) {\n        result\
    \ += (long)abs((*i) - game[i]); // if guessed wrong, take absolute difference\n\
    \        if ((*i) != game[i]) ++wrong_count; // if guess correct increment wrong\
    \ count\n    }\n    // return vector of length equal to the length of the guess\
    \ vector\n    std::vector<long> result(guess.size());\n    for (int i = 0; i !=\
    \ guess.size(); ++i) {\n        result[i] = ((result[i] == 0) ? 0 : result[i]);\
    \ // if all guesses are correct, return 0\n    }\n    if (wrong_count == guess.size())\
    \ return result; // if all guesses wrong return vector of length equal to the\
    \ number of guesses\n    else return result + wrong_count; // if at least one\
    \ guess was wrong, return the difference between result and the number of guesses\
    \ wrong\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjwra3k0j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ correct_guess(guess.size(), 0);\n    for (auto i = 0; i < guess.size(); ++i)\
    \ {\n        for (auto j = i + 1; j < guess.size(); ++j) {\n            int diff\
    \ = abs(guess[j] - game[i]);\n            if (guess[j] == game[i]) correct_guess[i]\
    \ = correct_guess[j];\n            else correct_guess[i] = correct_guess[i] +\
    \ diff;\n        }\n    }\n    return correct_guess;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprqydhy6i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ answer;\n    std::map<long, long> scores;\n    for(size_t i = 0; i < game.size();\
    \ i++) {\n        if(game[i] != guess[i]) {\n            scores[game[i]] = abs(game[i]\
    \ - guess[i]);\n        } else {\n            scores[game[i]] = 0;\n        }\n\
    \    }\n    for(auto& p: scores) {\n        answer.push_back(p.first);\n    }\n\
    \    return answer;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7esv1omi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ ans;\n    for(int i = 0; i < guess.size(); i++) {\n        int miss = 0;\n \
    \       for(int j = 0; j < game.size(); j++) {\n            if(game[j] == guess[i])\
    \ {\n                miss = 0;\n            }\n            else if(game[j] !=\
    \ guess[i]) {\n                miss = 1;\n            }\n        }\n        ans.push_back(miss);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaewl0tbq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    for (long i = 0; i < guess.size(); i++) {\n        result.push_back(0);\n\
    \    }\n    long correct = 0;\n    for (long i = 0; i < game.size(); i++) {\n\
    \        long diff = abs(game[i] - guess[i]);\n        if (guess == game) {\n\
    \            correct++;\n        }\n        if (diff < result[abs(diff)]) {\n\
    \            result[abs(diff)] = diff;\n        }\n    }\n    return result +\
    \ correct;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps4c5ox25.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    int n = (int)game.size();\n    int m = (int)guess.size();\n\n \
    \   for(int i=0; i< m; i++){\n        if(game[i] == guess[i]){\n            result.push_back(0);\n\
    \        }\n        else{\n            result.push_back(abs(game[i] - guess[i]));\n\
    \        }\n    }\n\n    return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg_zr6n8_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // The solution uses two pointers over\
    \ the vectors game/guess, in each iteration,\n    // if the current game/guess\
    \ is equal to the next game/guess from the same position,\n    // the result is\
    \ the difference between the previous and current game/guess.\n    // For example,\n\
    \    // >>> game = [4, 5, 6, 7, 8]\n    // >>> guess = [5, 7, 8, 8, 0]\n    //\
    \ >>> compare(game, guess)\n    // [4, 1, 4, -4, 6]\n    // The first game/guess\
    \ is equal to the second game/guess from the same position\n    // The first game/guess\
    \ is equal to the second game/guess from the same position\n    std::vector<long>\
    \ result(guess.size());\n    size_t i(0), j(guess.size() - 1);\n    // Keep going\
    \ until game/guess reaches the end of the vector\n    while (i != game.size()\
    \ || j != 0) {\n        // If a game/guess is equal to the next game/guess from\
    \ the same position,\n        // the difference between the previous and current\
    \ game/guess is the result.\n        // Otherwise, the difference between the\
    \ previous and current game/guess is -INFINITY \n        if (i != game.size()\
    \ && j != 0) {\n            result[j] = abs(game[i] - game[j]);\n        } else\
    \ if (i == game.size()) {\n            result[j] = -INFINITY;\n        } else\
    \ if (j == 0) {\n            result[j] = -INFINITY;\n        } else {\n      \
    \      result[j] = INFINITY;\n        }\n        // Switch the pointers so that\
    \ we look at the next game/guess\n        swap(game[i], game[++i]);\n        swap(guess[j],\
    \ guess[--j]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ggsgllw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> errors;\n    bool check\
    \ = true;\n    long error = 0;\n    long score = 0;\n    for (std::size_t i =\
    \ 0; i < game.size(); i++) {\n        std::size_t j;\n        check(check && (score\
    \ = (check = (guess[j = (i + 1) % game.size()] == game[i]) ? 0 : abs(guess[j]\
    \ - game[i])));\n        if (score != 0) {\n            std::cout<<score<<\" \"\
    ;\n            error += score;\n        }\n    }\n    for (std::size_t i = 0;\
    \ i < game.size(); i++) {\n        if (check)\n            error = (error == abs(guess[i]\
    \ - game[i])) ? 0 : error;\n        else\n            check = (guess[i] != game[i])\
    \ ? 1 : 0;\n    }\n    return errors;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk57eae0c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // assert(game.size() == guess.size());\n\
    \    std::vector<long> score;\n    score.reserve(game.size());\n    for (size_t\
    \ i = 0; i < game.size(); ++i) {\n        auto game_value = game[i];\n       \
    \ auto guess_value = guess[i];\n        // assert(game_value <= guess_value);\n\
    \        if (game_value == guess_value)\n            score.push_back(0);\n   \
    \     else {\n            score.push_back(abs(game_value-guess_value));\n    \
    \    }\n    }\n    return score;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpme11zese.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  // your code here\n  \n  \n  \n  std::vector<long>\
    \ res;\n  \n  for (int i = 0; i < guess.size(); i++) {\n    if (game[i] != guess[i])\
    \ {\n      res.push_back((abs(game[i] - guess[i])));\n    } else {\n      res.push_back(0);\n\
    \    }\n  }\n\n  return res;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpk0flyyws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    int cnt = 0;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n       \
    \     result[i] = 0;\n        }\n        else {\n            result[i] = abs(guess[i]\
    \ - game[i]);\n        }\n        cnt++;\n    }\n    // return the result of the\
    \ comparison\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptki5owgy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    int n = game.size();\n\
    \    int m = guess.size();\n    long double ans = 0.0;\n    for (int i = 0; i\
    \ < n; i++) {\n        long double diff = 0;\n        for (int j = 0; j < m; j++)\
    \ {\n            if (game[i] == guess[j]) {\n                diff = 0;\n     \
    \       }\n            if (game[i] != guess[j]) {\n                diff = abs(game[i]\
    \ - guess[j]);\n            }\n        }\n        ans += diff;\n    }\n    std::vector<long>\
    \ scores;\n    scores.push_back(0);\n    scores.push_back(ans);\n    return scores;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyhgnv6lk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> results;\n    std::sort(game.begin(),\
    \ game.end());\n    std::sort(guess.begin(), guess.end());\n    \n    int diff\
    \ = 0;\n    \n    for (unsigned int i = 0; i < guess.size(); i++) {\n        if\
    \ (guess[i] < game[i]) {\n            diff = game[i] - guess[i];\n           \
    \ break;\n        }\n        else if (guess[i] > game[i]) {\n            diff\
    \ = guess[i] - game[i];\n            break;\n        }\n    }\n    \n    for (unsigned\
    \ int i = 0; i < guess.size(); i++) {\n        if (guess[i] == game[i])\n    \
    \        results.push_back(0);\n        else\n            results.push_back(abs(diff\
    \ - game[i]));\n    }\n    \n    return results;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprv9qfo2y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long total = 0;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        for (long j = 0; j < game.size(); j++) {\n            if (game[j]\
    \ == guess[i]) {\n                total++;\n            }\n        }\n    }\n\
    \    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            result[i] = 0;\n        } else {\n            result[i] = std::abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result; \n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp058qnjne.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> result(game.size(), 0);\n\
    \  long best = -std::numeric_limits<long>::max();\n  for (int i = 0; i < game.size();\
    \ ++i) {\n    if (game[i] != guess[i]) {\n      best = std::min(best, abs(game[i]\
    \ - guess[i]));\n    } else {\n      result[i] = 0;\n    }\n  }\n  for (int i\
    \ = 0; i < game.size(); ++i) {\n    best = -std::numeric_limits<long>::max();\n\
    \    int j = 0;\n    for (int k = 0; k < result.size(); ++k) {\n      if (game[i]\
    \ == result[k]) {\n        j++;\n        break;\n      }\n    }\n    best = std::min(best,\
    \ j);\n    if (best < -1) {\n      best = -1;\n    }\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1osshkqh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int n = guess.size();\n    std::vector<long>\
    \ distances(n);\n    for (int i = 0; i < n; i++) {\n        distances[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return distances;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa1v2rjun.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = std::abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpih0yu91e.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    std::fill(result.begin(), result.end(),\
    \ 0);\n    for (size_t i = 0; i < guess.size(); i++)\n        if (game[i] == guess[i])\
    \ result[i] = 0;\n        else result[i] = abs(game[i] - guess[i]);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6daxal7v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    long score = game[0];\n\
    \    long wrong = game[0] - guess[0];\n    long wrong2 = game[0] - guess[1];\n\
    \    long wrong3 = game[0] - guess[2];\n    long wrong4 = game[0] - guess[3];\n\
    \    long wrong5 = game[0] - guess[4];\n    long wrong6 = game[0] - guess[5];\n\
    \    long wrong7 = game[0] - guess[6];\n    long wrong8 = game[0] - guess[7];\n\
    \    long wrong9 = game[0] - guess[8];\n    long wrong10 = game[0] - guess[9];\n\
    \    long wrong11 = game[0] - guess[10];\n    long wrong12 = game[0] - guess[11];\n\
    \    long wrong13 = game[0] - guess[12];\n    long wrong14 = game[0] - guess[13];\n\
    \    long wrong15 = game[0] - guess[14];\n    long wrong16 = game[0] - guess[15];\n\
    \    long wrong17 = game[0] - guess[16];\n    long wrong18 = game[0] - guess[17];\n\
    \    long wrong19 = game[0] - guess[18];\n    long wrong20 = game[0] - guess[19];\n\
    \    long wrong21 = game[0] - guess[20];\n    long wrong22 = game[0] - guess[21];\n\
    \    long wrong23 = game[0] - guess[22];\n    long wrong24 = game[0] - guess[23];\n\
    \    long wrong25 = game[0] - guess[24];\n    long wrong26 = game[0] - guess[25];\n\
    \    long wrong27 = game[0] - guess[26];\n    long wrong28 = game[0] - guess[27];\n\
    \    long wrong29 = game[0] - guess[28];\n    long wrong30 = game[0] - guess[29];\n\
    \    long wrong31 = game[0] - guess[30];\n    long wrong32 = game[0] - guess[31];\n\
    \    long wrong33 = game[0] - guess[32];\n    long wrong34 = game[0] - guess[33];\n\
    \    long wrong35 = game[0] - guess[34];\n    long wrong36 = game[0] - guess[35];\n\
    \    long wrong37 = game[0] - guess[36];\n    long wrong38 = game[0] - guess[37];\n\
    \    long wrong39 = game[0] - guess[38];\n    long wrong40 = game[0] - guess[39];\n\
    \    long wrong41 = game[0] - guess[40];\n    long wrong42 = game[0] - guess[41];\n\
    \    long wrong43 = game[0] - guess[42];\n    long \n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjkm0mncp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    // we shall return one more length than the other because we shall store\
    \ a result for each guess\n    std::vector<long> result(game.size() + 1);\n  \
    \  for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    // if the game is correct we shall return\
    \ zero on all positions\n    result[game.size()] = 0;\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx82wzfqp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> results;\n    results.reserve(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            results.push_back(0);\n        } else if (game[i] - guess[i]\
    \ > 0) {\n            results.push_back(0);\n        } else {\n            results.push_back((abs(game[i]\
    \ - guess[i])));\n        }\n    }\n    return results;\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphxs79235.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\t// your code\n\treturn std::vector<long>{};\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ykgt6x1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (int i = 0; i < guess.size(); i++) {\n        // For each guess, count\
    \ how many matches it has with the game and add that to the score.\n        int\
    \ matches = 0;\n        for (int j = 0; j < game.size(); j++) {\n            if\
    \ (game[j] == guess[i]) matches++;\n        }\n        // The score is the difference\
    \ between the guess and the game.\n        result[i] = abs(guess[i] - game[matches]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpulflhzwx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    long long counter\
    \ = 0;\n    long long score = 0;\n    int size = game.size();\n    std::vector<long>\
    \ scorer(size);\n    for (int i = 0; i < size; i++) {\n        if (guess[i] ==\
    \ game[i]) {\n            scorer[i] = 0;\n            counter++;\n        } else\
    \ {\n            scorer[i] = abs(guess[i] - game[i]);\n        }\n        score\
    \ = score + scorer[i];\n    }\n    if (counter == 0) {\n        return std::vector<long>(guess);\n\
    \    } else {\n        return std::vector<long>(guess);\n    }\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmohcr5de.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ ++i) {\n        result[i] = abs(guess[i] - game[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvsgr5hzc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::sort(game.begin(), game.end());\n\
    \    std::sort(guess.begin(), guess.end());\n    std::vector<long> score;\n  \
    \  score.reserve(game.size());\n    std::vector<long> dist;\n    dist.reserve(game.size());\n\
    \    long min_dist = std::numeric_limits<long>::max();\n    for(long i = 0; i\
    \ < game.size(); i++) {\n        long dist = std::abs(guess[i] - game[i]);\n \
    \       if(dist < min_dist) {\n            min_dist = dist;\n        }\n     \
    \   score.push_back(min_dist);\n        dist.push_back(min_dist);\n    }\n   \
    \ for(long i = 1; i < guess.size(); i++) {\n        long dist = std::abs(guess[i]\
    \ - game[i]);\n        dist.push_back(std::min(dist[i - 1], dist[i]));\n     \
    \   dist.push_back(std::min(dist[i - 1], dist[i]));\n    }\n    return score;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx87xp3j4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // write your code in Python 2.7\n   \
    \ int a=0;\n    int b=0;\n    int size=game.size();\n    std::vector<long> result(size);\n\
    \    for(int i=0;i<size;i++){\n        if(a==guess[i]){\n            result[i]=0;\n\
    \        }\n        else{\n            result[i]=abs(game[i]-guess[i]);\n    \
    \    }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfgplzerm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    for (int i = 0; i != guess.size(); i++) {\n        score\
    \ += abs(game[i] - guess[i]);\n        if (score > 0) result[i] = score;\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbobsv_m5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here!\n    // You need\
    \ some sort of mechanism to determine if the guesses are correct and somehow count\
    \ how many are correct.\n    long count=0;\n    long guess=0;\n    for(long i=0;i<game.size();i++){\n\
    \        if(game[i]==guess[i]){\n            count++;\n            guess+=1;\n\
    \        }\n        else{\n            count+=abs(game[i]-guess[i]);\n       \
    \ }\n    }\n    return std::vector<long>({guess,count});\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpupj5y91c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::set<int> result;\n    for (int i\
    \ = 0; i < game.size(); i++) {\n        if (guess.at(i) == game.at(i)) {\n   \
    \         result.insert(game.at(i));\n        }\n    }\n\n    if (result.size()\
    \ == guess.size()) {\n        return std::vector<long>();\n    }\n\n    std::vector<long>\
    \ resultVec;\n    for (int i = 0; i < guess.size(); i++) {\n        resultVec.push_back(0);\n\
    \    }\n\n    for (int i = 0; i < game.size(); i++) {\n        if (guess.at(i)\
    \ == game.at(i)) {\n            resultVec.at(i) = game.at(i) - guess.at(i);\n\
    \        }\n    }\n\n    return resultVec;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwmkyxh5h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tint n = game.size();\n\tint m = guess.size();\n\
    \tint diff[n];\n\tstd::iota(diff, diff + n, 0);\n\tstd::vector<long> result(n);\n\
    \tlong sum = 0;\n\tfor (int i = 0; i < n; i++)\n\t\tfor (int j = 0; j < m; j++)\
    \ {\n\t\t\tif (game[i] == guess[j])\n\t\t\t\tresult[i] += diff[j];\n\t\t\tsum\
    \ += diff[i];\n\t\t}\n\tfor (int i = 0; i < n; i++)\n\t\tresult[i] = abs(result[i])\
    \ / sum;\n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf8c98jzp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    long sum =\
    \ 0;\n    std::vector<long> score;\n    std::vector<long> sums;\n    for(auto\
    \ it=game.begin();it!=game.end();it++){\n        sum=sum+*it;\n    }\n    for(auto\
    \ it=guess.begin();it!=guess.end();it++){\n        sum+=*it;\n    }\n    for(auto\
    \ it=guess.begin();it!=guess.end();it++){\n        sum=sum-(*it)*(*it)/sum;\n\
    \    }\n    for(auto it=guess.begin();it!=guess.end();it++){\n        score.push_back((*it)*sum/sum);\n\
    \    }\n    for(int i=0;i<guess.size();i++){\n        sums.push_back(score[i]-guess[i]);\n\
    \    }\n    return sums;\n}\nint main() {\n    auto candidate = compare;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp464zzp1b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> ans(guess.size());\n \
    \ \n  // Sort for easy comparison\n  auto comp = [](long lhs, long rhs) -> bool\
    \ {return lhs < rhs;};\n  std::sort(game.begin(), game.end(), comp);\n  std::sort(guess.begin(),\
    \ guess.end(), comp);\n  \n  // Compare & return\n  for (auto i = 0; i < (int)guess.size();\
    \ ++i) {\n    long diff = game[i] - guess[i];\n    ans[i] = diff >= 0 ? diff :\
    \ 0;\n  }\n  \n  return ans;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoqr1wz1a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    long max_score\
    \ = -(long)INT_MAX;\n    long min_score = INT_MAX;\n    long min_i = 0;\n    long\
    \ max_i = game.size();\n    int count_match = 0;\n    std::vector<long> result(guess.size());\n\
    \    for(int i=0;i<guess.size();i++){\n        for(int j=0;j<game.size();j++){\n\
    \            if(game[j] == guess[i]){\n                result[count_match] = std::abs(guess[i]-game[j]);\n\
    \                count_match++;\n            }\n            else{\n          \
    \      break;\n            }\n        }\n        if(count_match != 0){\n     \
    \       count_match--;\n            max_score = std::max(max_score,result[0]);\n\
    \            min_score = std::min(min_score,result[0]);\n            for(int j=0;j<game.size();j++){\n\
    \                if(game[j] != guess[i]){\n                    if(result[j] !=\
    \ 0){\n                        max_score = std::max(max_score,result[j]);\n  \
    \                      min_score = std::min(min_score,result[j]);\n          \
    \          }\n                }\n            }\n        }\n        else{\n   \
    \         break;\n        }\n    }\n    if(count_match == 0){\n        return\
    \ std::vector<long>({0,0});\n    }\n    else{\n        std::vector<long> final\
    \ = std::vector<long>({0,0});\n        final[0] = max_score;\n        final[1]\
    \ = min_score;\n        return final;\n    }\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp54y670xt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tassert(game.size() == guess.size());\n\t\
    std::vector<long> result(game.size());\n\tlong sum = 0;\n\tfor(size_t i = 0; i\
    \ < game.size(); ++i) {\n\t\tsum += game[i] * guess[i];\n\t}\n\tfor(size_t i =\
    \ 0; i < game.size(); ++i) {\n\t\tresult[i] = abs(sum - game[i] * guess[i]);\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppm4z52zi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::map<long,\
    \ long> my_map;\n    for (auto const &i : game)\n        my_map.insert(std::pair<long,\
    \ long>(i,i));\n\n    for (auto const &j : guess)\n        my_map.insert(std::pair<long,\
    \ long>(j,j));\n\n    auto comp = [](const std::pair<long, long> &lhs, const std::pair<long,\
    \ long> &rhs) {\n        return lhs.second > rhs.second;\n    };\n    std::vector<long>\
    \ result(game.size());\n    for (auto const &i : my_map)\n        result[i.first]\
    \ = i.second - game.front();\n    std::sort(result.begin(), result.end(), comp);\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkadvzmdv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    vector<long> result(guess.size());\n \
    \   // assert that both vectors have the same length\n    assert(game.size() ==\
    \ guess.size());\n    // assert that game and guess have the same values\n   \
    \ assert(std::equal(game.begin(), game.end(), guess.begin()));\n    // assert\
    \ that each value is the same length\n    assert(std::equal(game.begin(), game.end(),\
    \ result.begin(), std::plus<long>()));\n    long total = 0;\n    for(long i =\
    \ 0; i < guess.size(); ++i) {\n        total += game[i] - guess[i];\n    }\n \
    \   for (long i = 0; i < guess.size(); ++i) {\n        result[i] = result[i] ==\
    \ 0 ? abs(game[i] - guess[i]) : result[i];\n    }\n    return std::move(std::make_move_iterator(result.begin()),\
    \ std::make_move_iterator(result.end()));\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppro7xnus.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> results;\n    if (game.size()\
    \ <= guess.size()) {\n        long diff = 0;\n        for (int i = 0; i < game.size();\
    \ i++) {\n            diff += abs(game[i] - guess[i]);\n        }\n        results.push_back(diff);\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp89_4abuu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // TODO: implement this function\n   \
    \ std::vector<long> result(game.size());\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5izbxvng.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> score;\n    score.assign(game.size(),0);\n    long gameSum\
    \ = 0;\n    long guessSum = 0;\n    int total = 0;\n    long maxVal = std::numeric_limits<long>::max();\n\
    \    for (int i=0; i < game.size(); i++) {\n        gameSum += game[i];\n    \
    \    guessSum += guess[i];\n        total++;\n        if (game[i] != guess[i])\
    \ {\n            long diff = abs(game[i] - guess[i]);\n            if (diff >\
    \ maxVal)\n                maxVal = diff;\n            score[i] = game[i] - guess[i];\n\
    \        }\n    }\n    std::sort(score.begin(),score.end());\n    std::partial_sum(score.begin(),score.end(),score.begin());\n\
    \    if (total == 0)\n        return score;\n    std::vector<long> result{maxVal};\n\
    \    long currVal = 0;\n    for (size_t i=score.size(); i-- != 0;) {\n       \
    \ currVal = maxVal;\n        currVal -= score[i];\n        result[i] += currVal;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj8yeevd6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    std::vector<long>\
    \ result(guess.size());\n    assert(game.size() == guess.size());\n    std::cout\
    \ << \"game size: \" << game.size() << \" guess size: \" << guess.size() << std::endl;\n\
    \    for (size_t i = 0; i < game.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxqa88wxe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> err;\n    int max = 0;\n    for (int i = 0; i < game.size();\
    \ ++i) {\n        if (game[i] == guess[i]) {\n            ++max;\n        } else\
    \ {\n            err[i] += abs(game[i] - guess[i]);\n        }\n    }\n    if\
    \ (max > 0)\n        err[game.size() - 1] = err[game.size() - 1] / max;\n    return\
    \ err;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzemn77r9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  int size = game.size();\n  std::vector<long>\
    \ result(size);\n  for (int i = 0; i < size; ++i) {\n    result[i] = abs(guess[i]\
    \ - game[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbmlgmlzl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010925
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // write your code here\n    int n = game.size();\n\
    \    int m = guess.size();\n    long long maxDiff = 0;\n    std::vector<long>\
    \ ret(n);\n    ret[0] = game[0] - guess[0];\n    for(int i = 1; i < n; i++) {\n\
    \        if(game[i] - guess[i] > maxDiff)\n            maxDiff = game[i] - guess[i];\n\
    \        ret[i] = maxDiff;\n    }\n    for(int i = 1; i < m; i++) {\n        if(guess[i]\
    \ - game[i] > maxDiff)\n            maxDiff = guess[i] - game[i];\n        ret[i]\
    \ += maxDiff;\n    }\n    return ret;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjnngtmgp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (int i=0; i<game.size();\
    \ ++i)\n        result[i] = abs(guess[i] - game[i]);\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnx_q5iwf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  // your code goes here\n  std::map<long,\
    \ long> score;\n  std::map<long, long> guess;\n  for (long i = 0; i < game.size();\
    \ ++i) {\n    if (game[i] != -1) {\n      score.insert({i, game[i]});\n    } else\
    \ {\n      guess.insert({i, -1});\n    }\n  }\n  for (long i = 0; i < guess.size();\
    \ ++i) {\n    if (guess[i] == -1) {\n      guess[i] = game[i];\n    }\n  }\n \
    \ std::map<long, long> scores;\n  for (long i = 0; i < game.size(); ++i) {\n \
    \   scores.insert({i, game[i] - guess[i]});\n  }\n  std::vector<long> correct;\n\
    \  for (long i = 0; i < guess.size(); ++i) {\n    correct.push_back(std::abs(scores[i]\
    \ + guess[i]));\n  }\n  return correct;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuogujuu6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  assert(game.size() == guess.size());\n \
    \ std::vector<long> result(game.size());\n  for (size_t i = 0; i < game.size();\
    \ i++) {\n    if (game[i] == guess[i]) return result;\n    result[i] = abs(game[i]\
    \ - guess[i]);\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmlnqgj_p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Complete the compare function below.\n\
    \    std::vector<long> correctness(guess.size());\n    assert(game.size() == guess.size());\n\
    \    for (long i = 0; i<game.size(); i++) {\n        correctness[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return correctness;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg2ojv_zc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    int n = game.size();\n\
    \    int m = guess.size();\n    int f = 0;\n    std::vector<long> answer;\n  \
    \  for(int i = 0; i < n; ++i){\n        long temp;\n        if(game[i] == guess[i]){\n\
    \            temp = 0;\n        }\n        else{\n            temp = abs(game[i]\
    \ - guess[i]);\n        }\n        answer.push_back(temp);\n    }\n    return\
    \ answer;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3p03j2ka.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // I like c++11, so I'm going to use a\
    \ lambda.\n    auto compare = [&game, &guess](long index, long guess){\n     \
    \   if (guess < game[index]) return -1;\n        if (guess > game[index]) return\
    \ 1;\n        return 0;\n    };\n    // Your code goes here\n    std::vector<long>\
    \ result(guess.size());\n    for (long i = 0; i < guess.size(); ++i) {\n     \
    \   result[i] = compare(i, guess[i]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiumpgury.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ wrong;\n    int n=game.size();\n    for (int i=0;i<n;i++) {\n        int count=0;\n\
    \        for (int j=0;j<n;j++) {\n            if (game[i]==guess[j]) {\n     \
    \           count++;\n            }\n        }\n        if (count==n) {\n    \
    \        std::cout << \"Match found\" << std::endl;\n            for (int j=0;j<n;j++)\
    \ {\n                if (game[i]==guess[j]) {\n                    wrong.push_back(abs(game[i]-guess[j]));\n\
    \                }\n            }\n            if (count==n)\n               \
    \ std::cout << \"Match found\";\n            else\n                std::cout <<\
    \ \"Mismatch found\";\n        }\n        else\n            wrong.push_back(abs(game[i]-guess[i]));\n\
    \    }\n    return wrong;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplx4a2e3d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    auto it = std::find(game.begin(),\
    \ game.end(), guess.begin(), guess.end());\n    int cnt = 0;\n    while (it !=\
    \ game.end()) {\n        int diff = *it - *guess;\n        if (diff == 0) {\n\
    \            ++cnt;\n        }\n        it++;\n    }\n    std::vector<long> res(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        res[i] = cnt ? -cnt :\
    \ -abs(guess[i] - game[i]);\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ypocb9f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // YOUR CODE HERE\n    assert(game.size()\
    \ == guess.size());\n    std::vector<long> results;\n    for (size_t i = 0; i\
    \ != game.size(); ++i) {\n        results.push_back(std::abs(game[i] - guess[i]));\n\
    \    }\n    return results;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi_y_535x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    std::set<long> found;\n    // We want to be able to find matches. Once a\
    \ match is found, we can then use std::set to\n    // check if there are any remaining\
    \ guesses that haven't yet been tested.\n    // We can use std::set to keep track\
    \ of which guesses we have already found and which guesses\n    // we have not\
    \ yet tested.\n    \n    // Iterate over all the guesses\n    for(long guess =\
    \ 0; guess < guess.size(); ++guess) {\n        // Check if this guess has been\
    \ previously found\n        if(found.find(guess) != found.end()) {\n         \
    \   // If the guess has been previously found, set result to 0\n            result[guess]\
    \ = 0;\n        } else {\n            // If the guess has not been previously\
    \ found\n            // First, check all the scores to see if this guess is correct.\n\
    \            for(long score = 0; score < game.size(); ++score) {\n           \
    \     if(game[score] == guess[guess]) {\n                    found[guess] = true;\n\
    \                    result[guess] = 0;\n                    --guess;\n      \
    \              break;\n                }\n            }\n            // If no\
    \ correct scores were found, set the result to the absolute difference between\
    \ this guess and the score.\n            if(guess == game.size() && !found.size())\
    \ {\n                result[guess] = abs(game[guess] - guess[guess]);\n      \
    \      }\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfe_5ggre.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\t// Your code goes here:\n\tstd::vector<long>\
    \ score;\n\tlong maxScore = *std::max_element(game.begin(), game.end()) + 1;\n\
    \tassert(maxScore > 0);\n\tlong minScore = *std::min_element(game.begin(), game.end())\
    \ - 1;\n\tassert(minScore < maxScore);\n\tassert(game.size() == guess.size());\n\
    \tlong maxGuessDiff = *std::max_element(guess.begin(), guess.end()) - maxScore;\n\
    \tassert(maxGuessDiff > 0);\n\tlong minGuessDiff = *std::min_element(guess.begin(),\
    \ guess.end()) - minScore;\n\tassert(minGuessDiff < maxGuessDiff);\n\tfor (int\
    \ i = 0; i < game.size(); i++) {\n\t\tlong scoreDiff = maxScore - game[i];\n\t\
    \tlong guessDiff = maxGuessDiff - guess[i];\n\t\tscore.push_back((scoreDiff -\
    \ guessDiff));\n\t\tassert(score[i] > 0 || score[i] == 0);\n\t\tassert(guess[i]\
    \ > 0 || guess[i] == 0);\n\t}\n\treturn score;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprz_wr67j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // This code is optimized for the specific\
    \ case where you get exactly one guess. \n    assert(game.size() == guess.size());\n\
    \    std::vector<long> res;\n    long score = 0;\n    long offset = 0;\n    long\
    \ prev = 0;\n    // The first guess is always correct. \n    for(auto it1 = game.begin();\
    \ it1 != game.end(); ++it1, ++it1) {\n        long current = *it1;\n        //\
    \ This code iterates through the remaining guesses \n        for(auto it2 = guess.begin();\
    \ it2 != guess.end(); ++it2, ++it2) {\n            long guess = *it2;\n      \
    \      // If they are equal, we are done\n            if(guess == current) {\n\
    \                score = offset - guess;\n                offset = guess;\n  \
    \              prev = current;\n                break;\n            }\n      \
    \      // Otherwise the guess is wrong\n            else {\n                //\
    \ If they are adjacent then we compare the values \n                if(prev ==\
    \ current && current == guess) {\n                    score += abs(guess-current);\n\
    \                    prev = current;\n                    offset = guess;\n  \
    \                  // If the guess is correct, then break \n                 \
    \   break;\n                }\n                else {\n                    score\
    \ += abs(guess-prev);\n                    prev = current;\n                 \
    \   offset = guess;\n                }\n            }\n        }\n        // If\
    \ there was a mismatch, we need to reset the score \n        if(prev != 0) {\n\
    \            score += abs(guess-prev);\n            prev = guess;\n          \
    \  offset = guess;\n        }\n    }\n    // This is just to return the vector\n\
    \    res.push_back(score);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0tdx26qw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\t// Your code here\n\tstd::vector<long> result(game.size());\n\
    \tfor(int i=0;i<game.size();++i){\n\t\tresult[i]=abs(game[i]-guess[i]);\n\t}\n\
    \treturn result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5lnlwdj6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    int counter = 0;\n    for (size_t i = 0; i < game.size(); i++) {\n      \
    \  counter = abs(game[i] - guess[i]);\n        if (game[i] == guess[i]) {\n  \
    \          counter = 0;\n        }\n    }\n    return std::vector<long>(guess.begin(),\
    \ guess.begin() + game.size());\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpznfer2y4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size(), 0);\n    std::transform(game.cbegin(),\
    \ game.cend(), guess.cbegin(), result.begin(), std::minus<long>());\n    std::transform(guess.cbegin(),\
    \ guess.cend(), game.cbegin(), result.begin(), std::plus<long>());\n    for (std::size_t\
    \ i = 0; i != game.size(); ++i) {\n        if (game[i] != guess[i])\n        \
    \    result[i] = std::abs(game[i] - guess[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6xy79c_4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int scores[game.size()];\n    bool found\
    \ = false;\n    for (int i = 0; i < game.size(); ++i) {\n        scores[i] = abs(game[i]\
    \ - guess[i]);\n        if (scores[i] == 0) {\n            found = true;\n   \
    \     }\n    }\n    std::vector<long> result(game.size());\n    if (found) {\n\
    \        for (int i = 0; i < game.size(); ++i) {\n            result[i] = 0;\n\
    \        }\n    } else {\n        for (int i = 0; i < game.size(); ++i) {\n  \
    \          result[i] = abs(game[i] - guess[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpu9pkbu23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> diff(game.size());\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        if (game[i] != guess[i]) {\n            diff[i] = abs(game[i]\
    \ - guess[i]);\n        } else {\n            diff[i] = 0;\n        }\n    }\n\
    \    return diff;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp00mfmpgz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // write your code\n    \n    \n    \n\
    \    \n    \n    return score;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdgmgw2nw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int n = game.size();\n    int m = guess.size();\n\
    \    assert(n == m); // This should really be an error\n    // You should also\
    \ check that both vectors have the same length\n    std::vector<long> score(n);\n\
    \    long scoreSum = 0;\n    for (int i = 0; i < n; ++i) {\n        long score\
    \ = game[i] - guess[i];\n        // You should use an unsigned integer type for\
    \ score to make the \n        // sign of the value predictable.\n        std::cerr\
    \ << \"Score mismatch: game \" << i << \", guess \" << guess[i] << \"\\n\"; \n\
    \        scoreSum += abs(score);\n    }\n    // The total difference in scores\
    \ is equal to the sum of the difference\n    // between the scores and the absolute\
    \ difference between the scores when\n    // scoreSum has the same sign as the\
    \ score being summed.\n    assert(scoreSum < 0);\n    // The absolute difference\
    \ between the scores is the minimum possible \n    // distance between the guess\
    \ and game. You will use that to determine\n    // which guess is better or worse\
    \ than the other. \n    // You should also use the absolute difference between\
    \ score and scoreSum\n    // to determine which guess is better or worse than\
    \ a given guess.\n    std::vector<long> minDistance(n);\n    long minDistanceSum\
    \ = std::numeric_limits<long>::max();\n    for (int i = 0; i < n; ++i) {\n   \
    \     long minDistance = abs(guess[i] - game[i]) + abs(scoreSum - abs(score[i]));\n\
    \        if (minDistance < minDistanceSum) {\n            minDistanceSum = minDistance;\n\
    \        }\n        minDistance[i] = minDistance;\n    }\n    return minDistance;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp260iibo8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> results;\n    for (size_t i = 0; i < game.size(); i++)\
    \ {\n        long score = game[i];\n        long guess = guess[i];\n        if\
    \ (guess == score) {\n            results[i] = 0;\n        } else {\n        \
    \    results[i] = abs(guess - score);\n        }\n    }\n    return results;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3wkin272.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    long long total\
    \ = 0;\n    long long minDiff = std::numeric_limits<long long>::max();\n    for\
    \ (int i = 0; i < guess.size(); i++) {\n        total += game[i] * guess[i];\n\
    \        if (total > minDiff) minDiff = total;\n    }\n    std::vector<long> result(guess.size());\n\
    \    for (int i = 0; i < guess.size(); i++) {\n        result[i] = minDiff - game[i]\
    \ * guess[i];\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3bkiezsc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if (game.size() != guess.size())\n   \
    \     throw std::runtime_error(\"Error\");\n    std::vector<long> gameResult(game.size());\n\
    \    // We start by comparing the first item in the first vector to the first\
    \ item in the second vector.\n    // If they are the same, we compare the first\
    \ item in the second vector to the first item in the first vector, and so on.\n\
    \    // We do this until all the games are compared.\n    for (size_t i = 0; i\
    \ < game.size(); i++) {\n        long tempGuess = guess[i];\n        gameResult[i]\
    \ = game[i] != tempGuess ? game[i] - tempGuess : game[i];\n    }\n    return gameResult;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcp0v9pa3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tstd::map<long, int> game_map = game;\n\t\
    std::map<long, int> guess_map = guess;\n\tstd::map<long, int> diff;\n\tstd::vector<long>\
    \ diff_map(guess.size(), 0);\n\tfor (long i = 0; i < guess.size(); ++i) {\n\t\t\
    auto it = guess_map.find(game[i]);\n\t\tif (it == guess_map.end()) {\n\t\t\tdiff[i]\
    \ = 0;\n\t\t}\n\t\telse {\n\t\t\tauto it_diff = diff.find(game[i]);\n\t\t\tif\
    \ (it_diff == diff.end()) {\n\t\t\t\tdiff[i] = 0;\n\t\t\t}\n\t\t\telse {\n\t\t\
    \t\tdiff[i] = it_diff->second - guess_map[game[i]];\n\t\t\t}\n\t\t}\n\t\tauto\
    \ it = game_map.find(guess[i]);\n\t\tif (it == game_map.end()) {\n\t\t\tdiff_map[i]\
    \ = 0;\n\t\t}\n\t\telse {\n\t\t\tdiff_map[i] = it->second - game_map[guess[i]];\n\
    \t\t}\n\t}\n\treturn diff_map;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2rg6czff.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tlong long res = 0;\n\t// your code here\n\
    \tfor(int i = 0; i<game.size(); i++) {\n\t\tassert(game.size() == guess.size());\n\
    \t\tassert(game[i] >= 0);\n\t\tassert(guess[i] >= 0);\n\t\tif((game[i] == guess[i])\
    \ || (game[i] == 0)) {\n\t\t\tres++;\n\t\t} else {\n\t\t\tres += abs(game[i] -\
    \ guess[i]);\n\t\t}\n\t}\n\tstd::vector<long> result(game.size());\n\tfor(int\
    \ i = 0; i<game.size(); i++) {\n\t\tresult[i] = res;\n\t}\n\treturn result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmrmf1sjs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your compare function here\n\
    \    return game;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeka8yxzc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  assert(game.size() == guess.size());\n \
    \ std::vector<long> comp;\n  for (int i = 0; i < game.size(); i++) {\n    long\
    \ score = game[i];\n    long guess = guess[i];\n    if (guess == score) {\n  \
    \    comp.push_back(0);\n    } else if (guess > score) {\n      comp.push_back(guess\
    \ - score);\n    } else {\n      comp.push_back(guess - score);\n    }\n  }\n\
    \  return comp;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp18j3k6rp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> ans(game.size());\n    long total = 0;\n    for (int i\
    \ = 0; i < game.size(); i++) {\n        total += game[i];\n        ans[i] = total\
    \ - game[i];\n        total -= guess[i];\n    }\n    ans[game.size()] = total;\n\
    \    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\
    \ ans[i] = 0;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpquvd11e9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> diff(game.size());\n    long lastScore = game[0];\n   \
    \ long score = 0;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i]\
    \ != lastScore) {\n            diff[i] = abs(guess[i] - score);\n            lastScore\
    \ = game[i];\n            score = 0;\n        } else {\n            score++;\n\
    \        }\n    }\n    return diff;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzk97hh3b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size(),\
    \ 0);\n    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(guess[i]\
    \ - game[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc8eod_op.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ results;\n    int i, j, sum;\n    sum = 0;\n    j = game.size() - 1;\n    for\
    \ (i = 0; i < guess.size(); i++) {\n        if (game[i] == guess[i]) {\n     \
    \       sum = 0;\n        } else if (sum > 0) {\n            sum -= game[j];\n\
    \        }\n        sum += guess[i];\n        j = i;\n    }\n    if (sum > 0)\
    \ {\n        sum -= game[j];\n        results.push_back(sum);\n    }\n    return\
    \ results;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2_415uyw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> result(guess.size());\n\
    \  for (size_t i = 0; i < guess.size(); i++) {\n    long diff = abs(game[i] -\
    \ guess[i]);\n    if (diff == 0) {\n      result[i] = 0;\n    }\n    else if (diff\
    \ > 0) {\n      result[i] = diff;\n    }\n    else {\n      result[i] = -diff;\n\
    \    }\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp6_7zjgv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> correct;\n  std::set<long>\
    \ correct_set;\n  for (auto i = 0; i < guess.size(); i++) {\n    if (guess.at(i)\
    \ < game.at(i)) {\n      correct[i] = 0;\n    } else {\n      correct[i] = game.at(i)\
    \ - guess.at(i);\n    }\n    correct_set.insert(guess[i]);\n  }\n  for (auto i\
    \ = 0; i < game.size(); i++) {\n    if (guess.at(i) == game.at(i)) {\n      correct[i]\
    \ = 0;\n    } else if (correct_set.find(game.at(i)) == correct_set.end()) {\n\
    \      correct[i] = game.at(i) - guess[i];\n    } else {\n      correct[i] = game.at(i)\
    \ - guess[correct_set.find(game.at(i))];\n    }\n  }\n  return correct;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpel7y9stu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> answer;\n    long score;\n    long answerNum = 0;\n   \
    \ for (size_t i = 0; i < game.size(); ++i) {\n        score = game[i] - guess[i];\n\
    \        if (score > 0) {\n            answer.push_back(score);\n            answerNum++;\n\
    \        }\n    }\n    for (size_t i = 0; i < game.size(); ++i) {\n        score\
    \ = abs(score);\n        if (score == 0) {\n            answer.push_back(1);\n\
    \        } else {\n            answer.push_back(score);\n        }\n    }\n  \
    \  assert(answerNum == answer.size());\n    return answer;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_zuxa7s0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::vector<long>\
    \ res;\n    std::sort(game.begin(), game.end());\n    std::sort(guess.begin(),\
    \ guess.end());\n    for (long i = 0; i < guess.size(); ++i) {\n        auto tmp\
    \ = guess;\n        tmp.erase(std::remove(tmp.begin(), tmp.end(), game[i]), tmp.end());\n\
    \        long result = std::inner_product(game.begin(), game.end(), guess.begin(),\
    \ 0);\n        res.push_back(result - game[i]);\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdyx93eyj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> results;\n    for (unsigned\
    \ int i = 0; i < guess.size(); i++) {\n        long diff = abs(game[i] - guess[i]);\n\
    \        if (game[i] == guess[i]) {\n            diff *= diff;\n        }\n  \
    \      results.push_back(diff);\n    }\n    return results;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5icumgwk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> result(guess.size());\n\
    \  for (size_t i = 0; i < guess.size(); ++i) {\n    long diff = guess[i] - game[i];\n\
    \    if (diff < 0) {\n      diff *= -1;\n    }\n    result[i] = diff;\n  }\n \
    \ return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ux6l09x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long diff = 0, diff_count = 0;\n    for\
    \ (int i = 0; i < game.size(); ++i) {\n        if (game[i] == guess[i]) {\n  \
    \          ++diff_count;\n            continue;\n        }\n        diff = abs(game[i]\
    \ - guess[i]);\n        break;\n    }\n    return std::vector<long>(game.size(),\
    \ diff);\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo27v2y21.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    for (std::size_t i = 0; i < game.size(); i++) {\n        long tempResult\
    \ = (game[i] - guess[i]);\n        if (tempResult > 0)\n            result[i]\
    \ = 0;\n        else\n            result[i] = abs(tempResult);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc4vbcqxm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> score;\n    long result\
    \ = 0;\n    for (int i = 0; i < guess.size(); i++) {\n        result += (abs(game[i]\
    \ - guess[i]));\n    }\n    \n    if (result == 0) {\n        return guess;\n\
    \    } else {\n        return {result,result};\n    }\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg2p0fz1v.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    auto result = std::vector<long>(game.size());\n    for (size_t i = 0; i <\
    \ game.size(); i++) {\n        result[i] = std::abs(game[i] - guess[i]);\n   \
    \ }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprn3sw1ws.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    std::vector<long>\
    \ ans;\n    for (long i = 0; i < game.size(); i++) {\n        long diff = 0;\n\
    \        for (long j = 0;j < guess.size();j++) {\n            if (game[i] == guess[j])\
    \ diff = 0;\n            else diff = abs(game[i] - guess[j]);\n        }\n   \
    \     ans.push_back(diff);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_6yqtiaf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    long diff = 0;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i]\
    \ == guess[i]) diff++;\n        else diff = abs(game[i] - guess[i]);\n    }\n\
    \    return std::vector<long>({diff});\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo2k7b9pz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> results;\n    \n    long score = 0;\n    long diff = 0;\n\
    \    long diff2 = 0;\n    \n    for (long i = 0; i < game.size(); i++) {\n   \
    \     if (game[i] == guess[i]) {\n            score++;\n        }\n        else\
    \ if (game[i] > guess[i]) {\n            diff = game[i] - guess[i];\n        }\n\
    \        else {\n            diff2 = guess[i] - game[i];\n        }\n    }\n \
    \   \n    results = std::vector<long>(game.size());\n    \n    for (long i = 0;\
    \ i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n            results[i]\
    \ = 0;\n        }\n        else if (game[i] > guess[i]) {\n            results[i]\
    \ = diff;\n        }\n        else {\n            results[i] = diff2;\n      \
    \  }\n    }\n    \n    return results;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7gstlq7r.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tassert(game.size() == guess.size());\n\t\
    std::vector<long> res(game.size());\n\tfor (size_t i = 0; i < game.size(); ++i)\
    \ res[i] = abs(game[i] - guess[i]);\n\treturn res;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7pkezyxr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> diff;\n    auto guesses\
    \ = guess.size();\n    auto scores = game.size();\n\n    for(int i = 0; i < guesses;\
    \ i++) {\n        // we know that diff will be at least as long as the scores\
    \ vector\n        diff.push_back(0);\n        for(int j = 0; j < scores; j++)\
    \ {\n            if(game[i] == guess[j]) {\n                diff[i] = 0;\n   \
    \             break;\n            }\n\n            diff[i] += abs(game[i] - guess[j]);\n\
    \        }\n    }\n\n    return diff;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpklko6sal.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010926
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> ans(game.size(), 0);\n\
    \    long score = 0;\n    long diff = 0;\n    int i = 0;\n    while (i < game.size()\
    \ && i < guess.size()) {\n        if (game[i] < guess[i]) {\n            diff\
    \ = (game[i] - guess[i]);\n            score++;\n            i++;\n        } else\
    \ if (game[i] > guess[i]) {\n            diff = diff + (game[i] - guess[i]);\n\
    \            score--;\n        } else {\n            diff = 0;\n            score++;\n\
    \            i++;\n        }\n    }\n    ans[0] = diff;\n    for (int j = 1; j\
    \ < guess.size(); j++)\n        ans[j] = ans[j - 1] + ans[j];\n    return ans;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkbqnrsgp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here \n    std::vector<long>\
    \ result(game.size());\n    long totalDiff = 0;\n    for(long i = 0; i < game.size();\
    \ i++) {\n        totalDiff += abs(game[i] - guess[i]);\n        result[i] = totalDiff;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptady4bln.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> result(game.size());\n\
    \  for (size_t i = 0; i < game.size(); i++) {\n    result[i] = abs(game[i] - guess[i]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnhxdxw9b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010837
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        // If this guess (i) matches\
    \ the score (j), then we assume they are correct!\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr6zh_taj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdeftzai7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your implementation here\n    // Write\
    \ your code here\n    std::vector<long> res;\n    long long total_score = 0;\n\
    \    for (long long i = 0; i < guess.size(); i++) {\n        total_score += game[i]-guess[i];\n\
    \    }\n    res.reserve(guess.size());\n    for (long long i = 0; i < guess.size();\
    \ i++) {\n        if (total_score == 0) {\n            res.push_back(0);\n   \
    \     } else if (total_score < 0) {\n            res.push_back(total_score);\n\
    \        } else {\n            res.push_back(abs(total_score));\n        }\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp90fmchjo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if(game.size() != guess.size())\n    \
    \    throw \"Different size vectors provided!\";\n\n    std::vector<long> results;\n\
    \    long difference = 0;\n    for(size_t i = 0; i < game.size(); i++) {\n   \
    \     if(game[i] == guess[i]) {\n            results.push_back(0);\n        }\
    \ else {\n            difference = abs(game[i] - guess[i]);\n            results.push_back(difference);\n\
    \        }\n    }\n    return results;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_5gxh6uw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  // TODO: Write your solution here\n  auto\
    \ guesses = guess.size();\n  std::vector<long> result(game.size());\n  for (auto\
    \ i = 0; i < game.size(); i++) {\n    long diff = 0;\n    for (auto j = 0; j <\
    \ guesses; j++) {\n      diff = std::abs(game[i] - guess[j]);\n    }\n    result[i]\
    \ = diff;\n  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1_ygygq7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int numOfMatches = game.size();\n    assert(guess.size()\
    \ == numOfMatches);\n    for (int i = 0; i < numOfMatches; i++) {\n        if\
    \ (game[i] != guess[i]) {\n            return std::vector<long>();\n        }\n\
    \    }\n    return std::vector<long>(1, 0);\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi87n_zh2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> scores(game.size());\n    for (int i = 0; i < game.size();\
    \ i++) {\n        if (game[i] == guess[i])\n            scores[i] = 0;\n     \
    \   else\n            scores[i] = abs(guess[i] - game[i]);\n    }\n    return\
    \ scores;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt49mk7n7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code goes here\n    // a) a quick\
    \ note on how we find the difference between the guess and the score\n    long\
    \ long min = 0;\n    long long max = 0;\n    for (long long i = 0; i < guess.size();\
    \ i++) {\n        min = std::min(min, game[i]);\n        max = std::max(max, game[i]);\n\
    \    }\n    long long diff = std::abs(min - max);\n    std::vector<long> result;\n\
    \    for (long long i = 0; i < guess.size(); i++) {\n        if (game[i] == max)\
    \ {\n            result.push_back(0);\n        } else {\n            result.push_back(diff);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7kz0nygp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code here\n    std::sort(game.begin(),\
    \ game.end());\n    std::sort(guess.begin(), guess.end());\n    std::vector<long>\
    \ result(guess.size());\n    long counter = 0;\n    for (int i = 0; i <= guess.size();\
    \ i++) {\n        if (i == guess.size() || game[i] != guess[i]) {\n          \
    \  counter++;\n            result[i] = abs(guess[i] - game[i]);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_toer6_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> dif(guess.size());\n \
    \ for (int i = 0; i < guess.size(); ++i) {\n    if (game.at(i) != guess.at(i))\
    \ dif[i] = abs(game.at(i) - guess.at(i));\n    else dif[i] = 0;\n  }\n  return\
    \ dif;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmn8xhwcj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score = 0;\n    long diff = 0;\n    for(int i = 0; i<game.size();i++)\
    \ {\n        score += game[i];\n    }\n    for(int i = 0; i<guess.size();i++)\
    \ {\n        diff = abs(score-guess[i]);\n        if(diff==0) {\n            result.push_back(diff);\n\
    \        }\n        else {\n            result.push_back(diff);\n        }\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjg0tp3_z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // write your solution here\n    std::vector<long>\
    \ res(guess.size());\n    std::unordered_map<long, long> score;\n    for (long\
    \ i = 0; i < game.size(); ++i) {\n        long curScore = game[i];\n        long\
    \ curGuess = guess[i];\n        if (cur.find(curGuess)!=cur) {\n            res[i]\
    \ = 0;\n        } else if (curScore==0) {\n            res[i] = 0;\n        }\
    \ else {\n            long curScore=curScore;\n            long curGuess=curGuess;\n\
    \            res[i] = abs(curScore-curGuess);\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4x7b47cs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if (game.size() != guess.size()) {\n \
    \       throw std::runtime_error(\"The game/guess vectors are not the same size\"\
    );\n    }\n    std::vector<long> scores;\n    scores.reserve(game.size());\n \
    \   for (long idx = 0; idx < game.size(); idx++) {\n        scores.push_back(game[idx]\
    \ - guess[idx]);\n    }\n    return scores;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps6tj2ff7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Complete this method\n    // Please\
    \ do not change the function name or arguments.\n    long sum = 0;\n    int count\
    \ = 0;\n    for (long i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i]){\n\
    \            count++;\n        }\n        else {\n            sum = (sum+abs(game[i]-guess[i]));\n\
    \        }\n    }\n    std::vector<long> result;\n    result.reserve(game.size());\n\
    \    for (long i = 0; i < game.size(); i++) {\n        result.push_back(abs(game[i]-guess[i]));\n\
    \    }\n    for(long i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i])\
    \ {\n            count++;\n        }\n    }\n    if(count==0){\n        return\
    \ result;\n    }\n    sum = (sum+abs(game[game.size()-1]-guess[game.size()-1]));\n\
    \    for(long i = 0; i < game.size(); i++) {\n        if(game[i] == guess[i])\
    \ {\n            count++;\n        }\n    }\n    if(count==0) {\n        return\
    \ result;\n    }\n    result.reserve(game.size());\n    result.push_back(abs(game[game.size()-1]-guess[game.size()-1]));\n\
    \    result.push_back((sum+abs(game[game.size()-1]-guess[game.size()-1])));\n\
    \    for(long i = game.size()-2; i >= 0; i--) {\n        if(game[i] == guess[i])\
    \ {\n            count++;\n        }\n    }\n    if(count==0) {\n        return\
    \ result;\n    }\n    result.push_back((sum+abs(game[game.size()-2]-guess[game.size()-2])));\n\
    \    result.push_back((sum+abs(game[game.size()-1]-guess[game.size()-1])));\n\
    \    result.push_back((sum+abs(game[game.size()-2]-guess[game.size()-2])));\n\
    \    for(long i = game.size()-2; i >= 0; i--) {\n        if(game[i] == guess[i])\
    \ {\n            count++;\n        }\n    }\n    if(count==0) {\n        return\
    \ result;\n    }\n    result.push_back((sum+abs(game[game.size()-2]-guess[game.size()-2])));\n\
    \    result.push_back((sum+abs(game[game.size()-1]-guess[game.size()-1])));\n\
    \    result.push_back((sum+abs(game[game.size()-2]-guess[game.size()-2])));\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpazbxyg49.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tstd::vector<long> scores(game.size());\n\
    \tstd::iota(scores.begin(), scores.end(), 0);\n\tstd::vector<long> guesses(guess.size());\n\
    \tstd::iota(guesses.begin(), guesses.end(), 0);\n\tstd::vector<long> result(guess.size());\n\
    \tlong best_score = scores[guesses[0]];\n\tlong best_diff = 0;\n\tfor (size_t\
    \ i = 0; i < guess.size(); ++i) {\n\t\tlong diff = scores[i] - guesses[i];\n\t\
    \tif (diff > best_diff) {\n\t\t\tbest_diff = diff;\n\t\t}\n\t\tif (diff == best_diff)\
    \ {\n\t\t\tresult[i] = 0;\n\t\t}\n\t\telse {\n\t\t\tresult[i] = abs(best_diff\
    \ - diff);\n\t\t}\n\t}\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpszlyzayj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if (game.size() != guess.size()) return\
    \ game; // if they guessed wrong, return same length as game\n    std::vector<long>\
    \ returnVec;\n    for (long i = 0; i < game.size(); i++) { // loop through each\
    \ index\n        if (game[i] != guess[i]) { // if game[i] is not the same as guess[i],\
    \ compare it to guess[i]\n            returnVec.push_back((game[i] - guess[i])\
    \ * (game[i] - guess[i])); // find out how much the game was off by that index\n\
    \        }\n        else {\n            returnVec.push_back(0); // else if game[i]\
    \ == guess[i] then game[i] and guess[i] were both correct\n        }\n    }\n\
    \    return returnVec;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4mh1e8r1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  assert(game.size() == guess.size());\n \
    \ std::vector<long> scores;\n  for (int i = 0; i < game.size(); i++) {\n    if\
    \ (game[i] == guess[i]) {\n      scores.push_back(0);\n    } else {\n      scores.push_back((game[i]\
    \ - guess[i]) - (guess[i] > game[i] ? 1 : -1));\n    }\n  }\n  return scores;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkkeq6xjw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::sort(game.begin(), game.end());\n\
    \    std::sort(guess.begin(), guess.end());\n\n    std::vector<long> results;\n\
    \    std::unordered_map<long, long> guesses;\n\n    // loop through each possible\
    \ guess\n    for (const auto &guess : guess) {\n        // check if this guess\
    \ is already in the guesses dictionary\n        auto found = guesses.find(guess);\n\
    \        // if the guess is in the dictionary then check the score\n        if\
    \ (found != guesses.end()) {\n            // found the guess, so check how far\
    \ off it was\n            results.push_back((found - game).second);\n        }\
    \ else {\n            // no match for this guess, so we add it to the dictionary\n\
    \            guesses.insert(std::make_pair(guess, 0));\n        }\n    }\n   \
    \ return results;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpz8ib97gs.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::vector<long> results;\n  for (int i\
    \ = 0; i < guess.size(); i++) {\n    long guess = guess[i];\n    long score =\
    \ game[i];\n    // YOUR CODE HERE\n  }\n  return results;\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqn2emffb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long long score = 0;\n    // Loop through\
    \ the guesses.\n    for (size_t i = 0; i < guess.size(); i++) {\n        // Only\
    \ update scores if the guesses are correct.\n        if (game[i] == guess[i])\
    \ {\n            score++;\n        }\n    }\n    return std::vector<long>({score\
    \ == guess.size() ? 0 : abs((score - guess.size()) / score.size()), score});\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7ayf7yhi.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> score;\n    for (size_t\
    \ i = 0; i < game.size(); i++) {\n        score.push_back(0);\n    }\n    for\
    \ (size_t i = 0; i < guess.size(); i++) {\n        std::vector<long> diff;\n \
    \       for (size_t j = 0; j < game.size(); j++) {\n            if (game[j] ==\
    \ guess[i]) {\n                score[j] = 0;\n            } else {\n         \
    \       score[j] = abs(guess[i] - game[j]);\n            }\n        }\n    }\n\
    \    return score;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmperrr0kli.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  // your code here\n}\nint main() {\n   \
    \ auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_9ozpbmp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> wrong;\n    std::vector<long>\
    \ correct;\n    long diff = 0;\n    int i = 0;\n    while (i<guess.size()) {\n\
    \        bool found = false;\n        if (game[i]==guess[i]) {\n            correct[i]++;\n\
    \            found = true;\n        } else {\n            wrong[i]++;\n      \
    \      diff = abs(wrong[i]-correct[i]);\n            correct[i]=0;\n        }\n\
    \        i+=1;\n    }\n    return correct;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeqfp2dhy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    long game_size\
    \ = game.size();\n    long guess_size = guess.size();\n    assert(game_size==guess_size,\"\
    Mismatched input for compare\");\n    std::map<long, bool> game_cnt;\n    for(long\
    \ i = 0; i < game_size; ++i)\n    {\n        game_cnt[game[i]] += 1;\n    }\n\
    \    std::vector<long> result(guess_size);\n    for(long i = 0; i < guess_size;\
    \ ++i)\n    {\n        if(game_cnt[guess[i]] == 0)\n            result[i] = 0;\n\
    \        else\n            result[i] = abs(guess[i] - game[i]); \n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpcyu3j94j.cpp:19:64: error: macro \"assert\" passed 2 arguments,\
    \ but takes just 1\n     assert(game_size==guess_size,\"Mismatched input for compare\"\
    );\n                                                                ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcyu3j94j.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_t"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::map<long, bool> m; // mapping from\
    \ score to guess status\n    for (size_t i = 0; i < game.size(); i++) {\n    \
    \    m[game[i]] = guess[i] == 0; // mapping from game score to guessing status\n\
    \    }\n    std::vector<long> res;\n    for (size_t i = 0; i < game.size(); i++)\
    \ {\n        if (guess[i] == 0) {\n            res.push_back(i);\n        } else\
    \ {\n            if (m[game[i]] == true) {\n                res.push_back(i);\n\
    \                for (size_t j = i; j < game.size(); j++) {\n                \
    \    if (m[game[j]] == true && game[i] < game[j]) {\n                        res.push_back(i-j);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5wurqkfq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tassert(game.size() == guess.size());\n\t\
    std::vector<long> result(game.size());\n\t// std::iota(result.begin(), result.end(),\
    \ 0);\n\tstd::iota(result.begin(), result.end(), 0);\n\t// std::copy(guess.begin(),\
    \ guess.end(), std::back_inserter(result));\n\tstd::copy(guess.begin(), guess.end(),\
    \ std::back_inserter(result));\n\t// std::copy(game.begin(), game.end(), std::back_inserter(result));\n\
    \tstd::copy(game.begin(), game.end(), std::back_inserter(result));\n\n\tint min\
    \ = std::min(game.size(), guess.size());\n\tlong max_score = std::max(game[min],\
    \ guess[min]);\n\tlong diff = max_score - game[min];\n\n\t// int index = 0;\n\t\
    // long score = max_score;\n\t// for(int i = 0; i < game.size(); ++i) {\n\t//\
    \ \tif(game[i] == guess[i]) {\n\t// \t\tscore += max_score - game[i]; // abs(max_score\
    \ - game[i]);\n\t// \t\tstd::cout << \"found match \" << i << \" with score \"\
    \ << score << std::endl;\n\t// \t\tresult[i] = score;\n\t// \t\tbreak;\n\t// \t\
    }\n\t// }\n\t\n\t// if(result.size() == game.size()) {\n\t// \tstd::cout << \"\
    all scores found \" << std::endl; \n\t// \treturn result;\n\t// }\n\n\tfor(int\
    \ i = 0; i < game.size(); ++i) {\n\t\tif(game[i] != guess[i]) {\n\t\t\tdiff +=\
    \ game[i] - guess[i];\n\t\t}\n\t\tstd::cout << \"found match \" << i << \" with\
    \ score \" << game[i] << std::endl;\n\t\tresult[i] = diff;\n\t\tstd::cout << \"\
    diff is \" << diff << std::endl;\n\t\tstd::cout << \"result is \" << result <<\
    \ std::endl;\n\t}\n\t\n\treturn result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9w86o5fy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int n = game.size();\n    std::vector<long>\
    \ diff(n);\n    for (int i = 0; i < n; ++i) diff[i] = guess[i] - game[i];\n  \
    \  int count = 0;\n    for (int i = 0; i < n; ++i)\n        if (diff[i] < 0)\n\
    \            count += abs(diff[i]);\n        else\n            count += diff[i];\n\
    \    return std::vector<long>(count);\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfrnxpkak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    vector<long> results;\n    long long max_guesses\
    \ = *max_element(guess.begin(), guess.end()) + 1;\n    for (long long i = 0; i\
    \ < max_guesses; i++) {\n        long long guessesLeft = (max_guesses - i);\n\
    \        long long bestScore = *min_element(game.begin() + guessesLeft, game.end());\n\
    \        long long bestGuess = *max_element(guess.begin() + guessesLeft, guess.end());\n\
    \        if (game[i] > bestScore) {\n            bestScore = game[i];\n      \
    \      bestGuess = guess[i];\n        }\n        if (bestScore == 0) {\n     \
    \       results.push_back(i);\n        } else {\n            long long diff =\
    \ bestGuess - bestScore;\n            if (diff > 0) {\n                results.push_back(i);\n\
    \            } else {\n                results.push_back(i + diff);\n        \
    \    }\n        }\n    }\n    return results;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdfczsqxb.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    \n    std::vector<long>\
    \ scores;\n    \n    for(long i=0; i< game.size(); i++)\n    {\n        scores.push_back(0);\n\
    \        \n        for(long j=0; j< guess.size(); j++)\n        {\n          \
    \  if(game[i] == guess[j])\n            {\n                scores[i] += 1;\n \
    \           }\n        }\n    }\n    \n    return scores;\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjznhr9ey.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  // Your code goes here\n  std::map<long,\
    \ int> game_count;\n  std::map<long, int> guess_count;\n  for (int i = 0; i <\
    \ game.size(); i++) {\n    game_count[game[i]]++;\n    guess_count[guess[i]]++;\n\
    \  }\n  std::map<long, int> guess_correct_count; // the key should be the guess\
    \ vector, and the value should be how many times\n  std::map<long, int> guess_wrong_count\
    \ // the key should be the guess vector, and the value should be how many times\n\
    \  for (int i = 0; i < guess.size(); i++) {\n    if (game_count[guess[i]] == 1\
    \ && guess_count[guess[i]] == 1) {\n      guess_correct_count[guess[i]]++;\n \
    \     guess_wrong_count[guess[i]]--;\n    } else if (game_count[guess[i]] == 1\
    \ || guess_count[guess[i]] == 1) {\n      guess_correct_count[guess[i]]++;\n \
    \   } else {\n      guess_wrong_count[guess[i]]++;\n    }\n  }\n  std::vector<long>\
    \ result;\n  for (int i = 0; i < guess.size(); i++) {\n    if (guess_correct_count[guess[i]]\
    \ == 1) {\n      result.push_back(0);\n    } else {\n      result.push_back(std::abs(guess[i]\
    \ - game_count[guess[i]]));\n    }\n  }\n  return result;\n}\nint main() {\n \
    \   auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8w6dkkv_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // I feel like we're going to have to\
    \ implement this by hand.\n    // Remember that C++ is all about avoiding redundant\
    \ code.\n    // I feel like that would make for a great exercise.\n    std::vector<long>\
    \ score;\n    for (size_t i = 0; i < game.size(); i++) {\n        score[i] = game[i]\
    \ - guess[i];\n    }\n    for (size_t i = 0; i < game.size(); i++) {\n       \
    \ if (game[i] != guess[i]) {\n            score[i] = abs(game[i] - guess[i]);\n\
    \        }\n    }\n    return score;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1ybya165.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tif (game.size() != guess.size())\n\t\tthrow\
    \ std::runtime_error(\"Game and guesses must have equal size\");\n\n\tstd::vector<long>\
    \ results;\n\tfor (size_t i = 0; i < game.size(); ++i)\n\t\tresults.push_back(0);\n\
    \tfor (size_t i = 0; i < guess.size(); ++i)\n\t\tresults.push_back(game[i] - guess[i]);\n\
    \treturn results;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppk1iwu0l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> score;\n    score.assign(game.size(),\
    \ 0);\n    assert(game.size() == guess.size());\n    for (size_t i = 0; i < game.size();\
    \ ++i) {\n        for (size_t j = 0; j < guess.size(); ++j) {\n            if\
    \ (game[i] == guess[j]) {\n                score[i] += 1;\n            }\n   \
    \     }\n    }\n    return score;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9p28_s6_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here!\n    std::vector<long>\
    \ result = {(long)0};\n    int sum = (int)(game.size() - guess.size());\n    \n\
    \    for (int i = 0; i < sum; i++) {\n        if (game[i] == guess[i]){\n    \
    \        long index = i;\n            result[(int)index] = 0;\n        }else{\n\
    \            long index = abs(game[i] - guess[i]);\n            result[(int)index]\
    \ = abs(game[i] - guess[i]);\n        }\n    }\n    \n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_2oecn_3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    int size\
    \ = game.size();\n    std::vector<long> result(size);\n    for (int i = 0; i <\
    \ size; ++i) {\n        if (game[i] != 0) {\n            result[i] = abs(game[i]\
    \ - guess[i]);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6may_ada.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    if(game.size()\
    \ == guess.size())\n    {\n        std::vector<long> results;\n        for(int\
    \ i = 0; i < game.size(); i++)\n        {\n            if(game[i] == guess[i])\n\
    \            {\n                results.push_back(0);\n            }\n       \
    \     else\n            {\n                results.push_back(abs(game[i] - guess[i]));\n\
    \            }\n        }\n        return results;\n    }\n    else\n    {\n \
    \       std::vector<long> results;\n        for(int i = 0; i < game.size(); i++)\n\
    \        {\n            if(game[i] != guess[i])\n            {\n             \
    \   results.push_back(abs(game[i] - guess[i]));\n            }\n        }\n  \
    \      return results;\n    }\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqvd2cmpe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long score = 0;\n    int count_correct\
    \ = 0;\n    for (int i = 0; i < guess.size(); i++) {\n        bool correct = true;\n\
    \        for (int j = 0; j < game.size(); j++) {\n            if (game[j] != guess[i])\
    \ {\n                correct = false;\n                break;\n            }\n\
    \        }\n        if (correct) {\n            score = 0;\n            count_correct++;\n\
    \        }\n        else {\n            score = score - std::abs(guess[i] - game[j]);\n\
    \        }\n    }\n    if (count_correct > 0) {\n        score = score / count_correct;\n\
    \    }\n    return std::vector<long>{score, score};\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpov9ckevl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long long diff=0;\n    for(int i=0;i<game.size();i++){\n\
    \        diff = abs(game[i]-guess[i]);\n        diff = std::max(diff,0LL);\n \
    \   }\n    std::vector<long> result(game.size(),diff);\n    return result;\n}\n\
    int main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp63duq5yp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long diff = std::abs(guess[0] - game[0]);\n    for (long i = 1; i < guess.size();\
    \ i++) {\n        diff = std::abs(diff);\n        diff -= std::abs(guess[i] -\
    \ game[i]);\n        result[i] = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwy298zcz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> answer;\n    // write\
    \ your code here\n    long score = 0L;\n    for (int i = 0; i < game.size(); i++)\
    \ {\n        score += game[i];\n    }\n    for (int i = 0; i < guess.size(); i++)\
    \ {\n        score += guess[i];\n    }\n    for (int i = 0; i < guess.size();\
    \ i++) {\n        answer[i] = abs(guess[i] - score);\n    }\n    return answer;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8llqlizo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  assert(game.size() == guess.size());\n \
    \ std::vector<long> correct;\n  long i = 0;\n  while (i < game.size()) {\n   \
    \ if (game[i] == guess[i]) {\n      correct.push_back(0);\n      i++;\n    } else\
    \ if (abs(game[i] - guess[i]) > 1) {\n      correct.push_back(abs(game[i] - guess[i]));\n\
    \      i++;\n    } else {\n      correct.push_back(abs(game[i] - guess[i]));\n\
    \      i++;\n      i++;\n    }\n  }\n  return correct;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph44aipv6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int score_min = std::numeric_limits<int>::max();\n\
    \    int score_max = std::numeric_limits<int>::min();\n    int score_counter =\
    \ 0;\n    std::vector<long> result = {score_min, score_max};\n    // we always\
    \ have two guesses, thus a loop is needed\n    for (int i = 0; i < guess.size();\
    \ i++) {\n        // if the guesses agree on the scores, we know they got it right\n\
    \        if (game[i] == guess[i]) {\n            score_counter++;\n          \
    \  // if they get it right, they get it right\n            if (score_counter ==\
    \ 1) {\n                score_min = std::min(score_min, guess[i]);\n         \
    \       score_max = std::max(score_max, guess[i]);\n            } else if (score_counter\
    \ > 1) {\n                score_min = std::min(guess[i], score_min);\n       \
    \         score_max = std::max(guess[i], score_max);\n            }\n        }\
    \ else {\n            // we know not which was the right one, because they got\
    \ a wrong guess and then correct one\n            // thus if they got it right\
    \ the first time, then they got it right the second time too\n            if (score_counter\
    \ > 0) {\n                score_min = std::min(guess[i], score_min);\n       \
    \         score_max = std::max(guess[i], score_max);\n            } else {\n \
    \               score_min = std::min(score_min, guess[i]);\n                score_max\
    \ = std::max(score_max, guess[i]);\n            }\n            score_counter =\
    \ 0;\n        }\n    }\n    for (int i = 0; i < guess.size(); i++) {\n       \
    \ // if the guesses agree on the scores, we know they got it right\n        if\
    \ (game[i] == guess[i]) {\n            score_counter++;\n            // if they\
    \ get it right, they get it right\n            if (score_counter == 1) {\n   \
    \             score_min = std::min(score_min, guess[i]);\n                score_max\
    \ = std::max(score_max, guess[i]);\n            } else if (score_counter > 1)\
    \ {\n                score_min = std::min(guess[i], score_min);\n            \
    \    score_max = std::max(guess[i], score_max);\n            }\n        } else\
    \ {\n            // we know not which was the right one, because they got a wrong\
    \ guess and then correct one\n            // thus if they got it right the first\
    \ time, then they got it right the second time too\n            if (score_counter\
    \ > 0) {\n                score_min = std::min(guess[i], score_min);\n       \
    \         score_max = std::max(guess[i], score_max);\n            } else {\n \
    \               score_min = std::min(score_min, guess[i]);\n                score_max\
    \ = std::max(score_max, guess[i]);\n            }\n            score_counter =\
    \ 0;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfb8cl43d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // your code goes here\n    std::vector<long>\
    \ result;\n    for (size_t i = 0; i < game.size(); i++)\n    {\n        if (game[i]\
    \ == guess[i]) result.push_back(0);\n        else result.push_back(abs(game[i]\
    \ - guess[i]));\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp56yrgswj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> wrong(guess.size());\n\
    \    std::vector<long> correct;\n    for(size_t i = 0; i < guess.size(); i++)\
    \ {\n        if(game[i] == guess[i]) {\n            correct[i] = 0;\n        }\
    \ else {\n            correct[i] = std::abs(game[i] - guess[i]);\n        }\n\
    \        wrong[i] = std::abs(game[i] - guess[i]);\n    }\n    return correct;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmggc09pv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010927
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Write your code here\n    std::map<long,\
    \ long> gameMap;\n    gameMap.insert(std::make_pair(game[0], game[0]));\n    for(long\
    \ i = 0; i < game.size(); i++) {\n        gameMap[game[i]] = gameMap[game[i]]\
    \ + 1;\n    }\n    std::map<long, long> guessMap;\n    guessMap.insert(std::make_pair(guess[0],\
    \ guess[0]));\n    for(long i = 0; i < guess.size(); i++) {\n        guessMap[guess[i]]\
    \ = guessMap[guess[i]] + 1;\n    }\n    std::vector<long> result(guess.size());\n\
    \    for(long i = 0; i < guess.size(); i++) {\n        result[i] = std::abs(guess[i]\
    \ - gameMap[guess[i]]);\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp9m1uk2_f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size(),\
    \ 0);\n    for(int i = 0; i < guess.size(); i++) {\n        long difference =\
    \ std::abs(game[i] - guess[i]);\n        if(game[i] == guess[i]) {\n         \
    \   result[i] = 0;\n        } else {\n            result[i] = difference;\n  \
    \      }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqvqustrx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tlong sum = 0;\n\tstd::vector<long> results(guess.size());\n\
    \tfor (size_t i = 0; i < guess.size(); ++i) {\n\t\tresults[i] = abs(guess[i] -\
    \ game[i]);\n\t\tsum += abs(guess[i] - game[i]);\n\t}\n\tstd::vector<long> result(guess.size());\n\
    \tfor (size_t i = 0; i < guess.size(); ++i)\n\t\tresult[i] = sum - abs(guess[i]\
    \ - game[i]);\n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppu9mxgf3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tif (game.size() != guess.size()) return\
    \ game;\n\tstd::vector<long> result(game.size());\n\tstd::transform(game.begin(),\
    \ game.end(), guess.begin(), result.begin(),\n\t\t[&](long a, long b) { return\
    \ (a > b) - (a < b); });\n\treturn result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyhir888s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ res(guess.size());\n    assert(game.size() == guess.size());\n    for(int i\
    \ = 0; i < guess.size(); i++){\n        if((guess[i] == game[i])){\n         \
    \   res[i] = 0;\n        }\n        else {\n            res[i] = abs(guess[i]\
    \ - game[i]);\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv330psq4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // assert(game.size() == guess.size());\
    \ // TODO check\n    long score = 0;\n    long diff = game[0] > 0 ? 0 : abs(game[0]\
    \ - guess[0]);\n    for(long i = 1; i < game.size(); i++) {\n        // if(abs(game[i]\
    \ - guess[i]) < diff) {\n        //     diff = 0;\n        //     break;\n   \
    \     // }\n        if(game[i] != guess[i]) {\n            if(game[i] > guess[i])\
    \ {\n                diff = game[i] - guess[i];\n            } else {\n      \
    \          diff = -(guess[i] - game[i]);\n            }\n            break;\n\
    \        }\n    }\n    return std::vector<long>({ diff, diff });\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsltfirhd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int guess_size = guess.size();\n    std::vector<long>\
    \ result(guess_size);\n    long num_matches = 0;\n    long num_correct = 0;\n\
    \    for (size_t i = 0; i < guess_size; i++) {\n        // a match is found\n\
    \        if (game[i] == guess[i]) {\n            num_matches++;\n            result[i]\
    \ = 0;\n            continue;\n        }\n        // a match is not found\n  \
    \      if (game[i] == -1) {\n            result[i] = -1;\n            continue;\n\
    \        }\n        long guess = game[i] - guess[i];\n        result[i] = std::abs(guess);\n\
    \        // a correct guess is found\n        if (guess == 0) {\n            num_correct++;\n\
    \        }\n    }\n    if (num_correct == guess_size) {\n        return result;\n\
    \    }\n    std::vector<long> temp;\n    for (size_t i = 0; i < guess_size; i++)\
    \ {\n        if (result[i] == -1) {\n            temp.push_back(-1);\n       \
    \ } else {\n            temp.push_back(result[i]);\n        }\n    }\n    return\
    \ temp;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprmy00otz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> guessed(game.size());\n    for (long index = 0; index <\
    \ game.size(); index++) {\n        guessed[index] = abs(game[index] - guess[index]);\n\
    \    }\n    return guessed;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7inenboe.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  long correct_sum = 0;\n  for (auto i = 0;\
    \ i < game.size(); i++) {\n    if (guess[i] == game[i]) {\n      correct_sum +=\
    \ 1;\n    }\n  }\n  assert(correct_sum == game.size());\n  std::vector<long> result(game.size());\n\
    \  for (auto i = 0; i < game.size(); i++) {\n    long diff = abs(guess[i] - game[i]);\n\
    \    if (correct_sum == 1) {\n      result[i] = 0;\n    } else if (diff < 0) {\n\
    \      result[i] = 0;\n    } else {\n      result[i] = diff;\n    }\n  }\n  return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph1kqu9j8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if (game.size() != guess.size()) {\n \
    \       throw std::runtime_error(\"The lengths of two vectors are not equal.\"\
    );\n    }\n    std::vector<long> result(game.size());\n    for (int i = 0; i <\
    \ game.size(); ++i) {\n        // The result of a game is 0 if the score was incorrect,\
    \ and 1 if it was correct.\n        result[i] = (game[i] < 0) ? 0 : abs(guess[i]\
    \ - game[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy3rz3_9u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result;\n    int correct\
    \ = 0;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i])\
    \ {\n            correct++;\n        }\n    }\n    int sum = 0;\n    for (int\
    \ i = 0; i < game.size(); i++) {\n        sum += abs(game[i] - guess[i]);\n  \
    \      result.push_back(sum);\n    }\n    return result;\n}\nint main() {\n  \
    \  auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp74m1x8_3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int n = game.size();\n    std::vector<long>\
    \ result;\n    for (int i = 0; i < n; i++) {\n        // if the guess is higher,\
    \ set it to 0\n        result[i] = game[i] < guess[i] ? 0 : (game[i] > guess[i]\
    \ ? abs(game[i] - guess[i]) : 0);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp04hht7gf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    int max = 0;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i]\
    \ < guess[i]) {\n            max = game[i] - guess[i];\n        } else {\n   \
    \         max = guess[i] - game[i];\n        }\n    }\n    std::vector<long> result(game.size());\n\
    \    for (int i = 0; i < game.size(); i++) {\n        result[i] = max;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpii0fxeq1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    // return\
    \ vector<long>\n    return std::vector<long>();\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvwl_uv88.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    // Your code goes here\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        if (game[i] != 0 && guess[i] == game[i]) {\n            result[i]\
    \ = 0;\n        }\n        else {\n            result[i] = abs(guess[i] - game[i]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxqm3m0im.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if(game.size() !=guess.size()){\n    \
    \    assert(false);\n        return std::vector<long>(game.size());\n    }\n \
    \   std::vector<long> result(game.size());\n    // loop through all elements in\
    \ game and guess, and find out if they are correct\n    for (long i = 0; i < game.size();\
    \ i++) {\n        if(game[i]==guess[i]){\n            result[i]=0;\n         \
    \   continue;\n        }\n        long diff=abs(game[i]-guess[i]);\n        result[i]=diff;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpax_a_8hx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    if (guess.size() != game.size()) return\
    \ std::vector<long>({0});\n    long score_pos = 0;\n    long score_neg = 0;\n\
    \    long diff = 0;\n    for (long i = 0; i < guess.size(); ++i) {\n        if\
    \ (game[i] == guess[i]) {\n            score_pos++;\n        } else {\n      \
    \      score_neg++;\n        }\n        if (game[i] > guess[i]) {\n          \
    \  diff = game[i] - guess[i]; // the absolute difference between score and guess\n\
    \        } else {\n            diff = guess[i] - game[i]; // the absolute difference\
    \ between score and guess\n        }\n    }\n    std::vector<long> result = {score_pos,\
    \ score_neg, diff};\n    return result;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7qn3qn5p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> correctness(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        correctness[i] = std::abs(game[i]\
    \ - guess[i]);\n    }\n    return correctness;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpaejpag5u.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> results;\n    for (size_t\
    \ i = 0; i < guess.size(); ++i) {\n        long dist = abs(game[i] - guess[i]);\n\
    \        if (dist > 0) {\n            results.push_back(dist);\n        }\n  \
    \  }\n    return results;\n}\nint main() {\n    auto candidate = compare;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcd39wzc8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_pft8hgy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int size = game.size();\n    int diff\
    \ = INT_MAX;\n    for(int i = 0; i < size; i++) {\n        long score = game[i];\n\
    \        int guess = guess[i];\n        diff += abs((guess - score) / score *\
    \ 100);\n    }\n    return std::vector<long>(guess);\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd2dh4ziq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    // Our \"result\" vector. Will be filled with differences.\n    std::vector<long>\
    \ result(game.size());\n    // The current difference to test with\n    long curDiff\
    \ = 0;\n    // Check each guess and current score.\n    for (size_t i = 0; i <\
    \ guess.size(); i++) {\n        // If our guess is correct, we're done.\n    \
    \    if (game[i] == guess[i]) {\n            result[i] = 0;\n            continue;\n\
    \        }\n        // If not, we need to test this one differently.\n       \
    \ long diff = abs(game[i] - guess[i]);\n        // If it's smaller, we're done.\n\
    \        if (diff < curDiff) {\n            result[i] = diff;\n            continue;\n\
    \        }\n        // We have bigger, so we need to keep trying.\n        result[i]\
    \ = curDiff;\n        curDiff = diff;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfvqg4z5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long sum = 0;\n    long sum2 = 0;\n  \
    \  for (size_t i = 0; i < game.size(); ++i) {\n        sum += game[i];\n     \
    \   sum2 += guess[i];\n    }\n    std::vector<long> result(game.size());\n   \
    \ for (size_t i = 0; i < game.size(); ++i) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    if (sum == sum2) {\n        return result;\n    }\n\
    \    return std::vector<long>();\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpclrc4uks.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tassert(game.size() == guess.size());\n\t\
    std::vector<long> results;\n\tlong long diff;\n\tfor (int i = 0; i < game.size();\
    \ i++) {\n\t\tdiff = game[i] - guess[i];\n\t\tif (diff < 0)\n\t\t\tdiff += 2147483647;\n\
    \t\tresults.push_back(diff);\n\t}\n\treturn results;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb10vkjcw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (auto i=0; i<game.size();\
    \ ++i) {\n        result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bhn0_ds.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here.\n    // Don't\
    \ forget to return your result.\n    int len = guess.size();\n    std::vector<long>\
    \ result(len);\n    for (int i = 0; i != len; ++i) {\n        int diff = abs(game[i]\
    \ - guess[i]);\n        if (diff < result[i]) {\n            result[i] = diff;\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpibcl1sk4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n\tassert(game.size() == guess.size());\n\t\
    std::vector<long> result(game.size());\n\t// Your code here.\n\tfor (size_t i\
    \ = 0; i < game.size(); ++i) {\n\t\tif (game[i] != guess[i]) {\n\t\t\tresult[i]\
    \ = abs(game[i] - guess[i]);\n\t\t}\n\t\telse {\n\t\t\tresult[i] = 0;\n\t\t}\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplwa_zwmn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code goes here\n    // a. sort\
    \ game by score\n    std::sort(game.begin(), game.end());\n    // b. sort guess\
    \ by score\n    std::sort(guess.begin(), guess.end());\n    // c. calculate difference\n\
    \    std::vector<long> result(guess.size());\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        result[i] = std::abs(guess[i] - game[i]);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzao80000.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    // fill a vector of zeroes with\
    \ the length of the guess, except for the one index where we know the game value\n\
    \    std::vector<long> zeroes(guess.size(), 0);\n    // start iterating through\
    \ each guess.\n    for (long i = 0; i < guess.size(); i++) {\n        result[i]\
    \ = zeroes[i]; // set all guesses to zero\n        // iterate through the game,\
    \ comparing the guess at the current index and the score at the current index\n\
    \        for (long j = 0; j < game.size(); j++) {\n            if (game[j] ==\
    \ guess[i]) {\n                result[i] = result[i] + abs(guess[i] - game[j]);\n\
    \            }\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgpos65p6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // code here\n    long score = game[0];\n\
    \    long difference = game[0] - guess[0];\n    if(game[1] == guess[1]){\n   \
    \     if(game[2] == guess[2]){\n            if(game[3] == guess[3]){\n       \
    \         if(game[4] == guess[4]){\n                    if(game[5] == guess[5]){\n\
    \                        if(game[6] == guess[6]){\n                          \
    \  return std::vector<long>({difference, difference});\n                     \
    \   }\n                        else{\n                            return std::vector<long>({difference,\
    \ difference, difference, difference, difference, difference});\n            \
    \            }\n                    }\n                    else{\n           \
    \             return std::vector<long>({difference, difference, difference, difference,\
    \ difference, difference});\n                    }\n                }\n      \
    \          else{\n                    return std::vector<long>({difference, difference,\
    \ difference, difference, difference, difference});\n                }\n     \
    \       }\n            else{\n                return std::vector<long>({difference,\
    \ difference, difference, difference, difference, difference});\n            }\n\
    \        }\n        else{\n            return std::vector<long>({difference, difference,\
    \ difference, difference, difference, difference});\n        }\n    }\n    else{\n\
    \        if(game[1] == guess[4]){\n            if(game[2] == guess[5]){\n    \
    \            if(game[3] == guess[2]){\n                    if(game[4] == guess[3]){\n\
    \                        if(game[5] == guess[6]){\n                          \
    \  return std::vector<long>({difference, difference, difference, difference, difference,\
    \ difference});\n                        }\n                        else{\n  \
    \                          return std::vector<long>({difference, difference, difference,\
    \ difference, difference, difference});\n                        }\n         \
    \           }\n                    else{\n                        return std::vector<long>({difference,\
    \ difference, difference, difference, difference, difference});\n            \
    \        }\n                }\n                else{\n                    return\
    \ std::vector<long>({difference, difference, difference, difference, difference,\
    \ difference});\n                }\n            }\n            else{\n       \
    \         return std::vector<long>({difference, difference, difference, difference,\
    \ difference, difference});\n            }\n        }\n        else{\n       \
    \     if(game[2] == guess[5]){\n                if(game[3] == guess[3]){\n   \
    \                 if(game[4] == guess[4]){\n                        if(game[5]\
    \ == guess[6]){\n                            return std::vector<long>({difference,\
    \ difference, difference, difference, difference, difference});\n            \
    \            }\n                        else{\n                            return\
    \ std::vector<long>({difference, difference, difference, difference, difference,\
    \ difference});\n                        }\n                    }\n          \
    \          else{\n                        return std::vector<long>({difference,\
    \ difference, difference, difference, difference, difference});\n            \
    \        }\n                }\n                else{\n                    return\
    \ std::vector<long>({difference, difference, difference, difference, difference,\
    \ difference});\n                }\n            }\n\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi5w7tue4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n  std::size_t size = game.size();\n  if (guess.size()\
    \ != size) {\n    std::cerr << size << \" != \" << guess.size() << std::endl;\n\
    \    return std::vector<long>();\n  }\n\n  std::vector<long> result(size);\n \
    \ std::size_t counts[6];\n  counts[0] = 0;\n  counts[1] = size-1;\n  counts[2]\
    \ = size-2;\n  counts[3] = size-3;\n  counts[4] = size-4;\n  counts[5] = size-5;\n\
    \  for (std::size_t i = 0; i < size; i++) {\n    if (game[i] != guess[i]) {\n\
    \      std::size_t j = 0;\n      while (j<6 && game[i] != guess[i]) {\n      \
    \  counts[j]++;\n        j++;\n      }\n      if (j == 6)\n        break;\n  \
    \    else if (j == 0)\n        result[i] = 0;\n      else {\n        result[i]\
    \ = counts[j]-counts[j-1];\n      }\n    } else {\n      result[i] = 0;\n    }\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb5kkk9xk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result(game.size());\n    for (long i = 0; i < game.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeu2jnmb4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    //Your code here\n    long score = 0;\n\
    \    std::vector<long> results;\n    for (std::size_t i = 0; i < game.size();\
    \ i++) {\n        if (guess[i] == game[i]) {\n            score = 0;\n       \
    \ }\n        else {\n            score = abs(guess[i] - game[i]);\n        }\n\
    \        results.push_back(score);\n    }\n    return results;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnhoixqs3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    int a = (int)game.size(), b = (int)guess.size();\n\
    \    std::vector<long> res(a > b ? a : b);\n    int j = 0;\n    while (j < a)\
    \ res[j] = guess[j] - game[j++]; \n    while (j < b) res[j] = guess[j] - game[j--];\
    \ \n    return res;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8c116k1m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    long long diff = game[0] - guess[0];\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        diff = diff > game[i]\
    \ ? diff - game[i] : game[i] - diff;\n    }\n    std::vector<long> res(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        res[i] = diff > 0 ?\
    \ diff : -diff;\n    }\n    return res;\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp970u59ab.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    \n    // code here\n    \n    return guess;\n\
    }\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpya15pf40.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::map<long, long> score;\n    for(std::size_t\
    \ i = 0; i < game.size(); ++i) {\n        auto iter = score.find(game[i]);\n \
    \       if(iter == score.end()) \n            score[game[i]] = 0;\n        else\
    \ \n            score[game[i]] = iter->second;\n    }\n    std::vector<long> result;\n\
    \    for(std::size_t i = 0; i < guess.size(); ++i) {\n        auto iter = score.find(guess[i]);\n\
    \        if(iter == score.end()) \n            std::cout << std::endl << \"Sorry,\
    \ your guess is too low.\" << std::endl;\n        else\n            result.push_back(iter->second\
    \ - game[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp5ag94br.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two vectors of scores\
    \ and guesses of equal length, where each index shows a match. \n// Return a vector\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    assert(game.size() == guess.size());\n\
    \    std::vector<long> result;\n    long best = 0;\n    long max = 0;\n    for(size_t\
    \ i = 0; i < game.size(); i++) {\n        if(game[i] < best) {\n            best\
    \ = game[i];\n        }\n        if(game[i] > max) {\n            max = game[i];\n\
    \        }\n        if(game[i] == best) {\n            result.push_back(best);\n\
    \        }\n        else {\n            assert(best * max >= 0);\n           \
    \ long diff = abs(best - guess[i]);\n            if((diff > best) && (diff > max))\
    \ {\n                result.push_back(diff);\n            }\n            else\
    \ {\n                result.push_back(-best);\n            }\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmalu5teu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1660010928
