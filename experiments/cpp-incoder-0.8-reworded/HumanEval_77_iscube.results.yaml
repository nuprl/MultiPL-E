language: cpp
name: HumanEval_77_iscube
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint a1 = abs(a);\n\tint\
    \ square = a * a1 + a1 * a1 * a1;\n\treturn (a == square);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpkuodj327: /tmp/tmpkuodj327.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a>0 && a<16 && a*a*a==(pow(a,3))\
    \ || a==-1)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpk4lnqdgx: /tmp/tmpk4lnqdgx.cpp:27: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int n = 1;\n  while (a *\
    \ a <= n) {\n    n *= 2;\n  }\n  if (a == 1) return true;\n  if (a > 1 && a <\
    \ n) return false;\n  int count = 0;\n  int i = 0;\n  while (a > 1) {\n    while\
    \ (a % i == 0) {\n      count++;\n      a /= i;\n    }\n    i++;\n  }\n  if (count\
    \ == n) return true;\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint i = 1;\n\twhile (i <=\
    \ a) {\n\t\ti++;\n\t}\n\tif (i <= a && i >= 2) {\n\t\treturn true;\n\t} else if\
    \ (i <= a && i == 2) {\n\t\treturn false;\n\t} else {\n\t\treturn false;\n\t}\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplfiq3b66: /tmp/tmplfiq3b66.cpp:34: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a == 0)\n        return\
    \ false;\n    if(a < 0)\n        return true;\n    long t = 1;\n    for(int i\
    \ = 1; i < a; i++) {\n        t *= i;\n    }\n    return t == a;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbn0luqb3: /tmp/tmpbn0luqb3.cpp:35: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int x = 3*a+1;\n    return\
    \ ((x-1)*(-1*(x-1)+1))>0;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8050y9_1: /tmp/tmp8050y9_1.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 0)\n\t{\n\t\treturn\
    \ true;\n\t}\n\t\n\tif (a % a == 0)\n\t{\n\t\treturn false;\n\t}\n\t\n\tint s\
    \ = 1;\n\twhile (a != 1)\n\t{\n\t\tif (a % a == 0)\n\t\t{\n\t\t\ta = (a / a) -\
    \ 1;\n\t\t\ts++;\n\t\t}\n\t\telse\n\t\t{\n\t\t\ta = (a / a) + 1;\n\t\t\ts = 1;\n\
    \t\t}\n\t}\n\treturn (s == 3);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyowy_xym: /tmp/tmpyowy_xym.cpp:48: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==0)\n        return\
    \ true;\n    else\n        return iscube(a-a*a-a*a*a);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif(a==0)\n\t\treturn true;\n\
    \telse\n\t\treturn false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpp980qa99: /tmp/tmpp980qa99.cpp:27: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a);\n    if (a\
    \ == 1) return true;\n    if (a == -1) return true;\n    if (a == 2) return true;\n\
    \    if (a == 3) return true;\n    if (a == 4) return true;\n    if (a == 5) return\
    \ true;\n    if (a == 6) return true;\n    if (a == 7) return true;\n    if (a\
    \ == 8) return true;\n    if (a == 9) return true;\n    if (a == 10) return true;\n\
    \    if (a == 11) return true;\n    if (a == 12) return true;\n    if (a == 13)\
    \ return true;\n    if (a == 14) return true;\n    if (a == 15) return true;\n\
    \    if (a == 16) return true;\n    if (a == 17) return true;\n    if (a == 18)\
    \ return true;\n    if (a == 19) return true;\n    if (a == 20) return true;\n\
    \    if (a == 21) return true;\n    if (a == 22) return true;\n    if (a == 23)\
    \ return true;\n    if (a == 24) return true;\n    if (a == 25) return true;\n\
    \    if (a == 26) return true;\n    if (a == 27) return true;\n    if (a == 28)\
    \ return true;\n    if (a == 29) return true;\n    if (a == 30) return true;\n\
    \    if (a == 31) return true;\n    if (a == 32) return true;\n    if (a == 33)\
    \ return true;\n    if (a == 34) return true;\n    if (a == 35) return true;\n\
    \    if (a == 36) return true;\n    if (a == 37) return true;\n    if (a == 38)\
    \ return true;\n    if (a == 39) return true;\n    if (a == 40) return true;\n\
    \    if (a == 41) return true;\n    if (a == 42) return true;\n    if (a == 43)\
    \ return true;\n    if (a == 44) return true;\n    if (a == 45) return true;\n\
    \    if (a == 46) return true;\n    if (a == 47) return true;\n    if (a == 48)\
    \ return true;\n    if (a == 49) return true;\n    if (a == 50) return true;\n\
    \    if (a == 51) return true;\n    if (a == 52) return true;\n    if (a == 53)\
    \ return true;\n    if (a == 54) return true;\n    if (a == 55) return true;\n\
    \    if (a == 56) return true;\n    if (a == 57) return true;\n    if (a == 58)\
    \ return true;\n    if (a == 59) return true;\n    if (a == 60) return true;\n\
    \    if (a == 61) return true;\n    if (a == 62) return true;\n    if (a == 63)\
    \ return true;\n    if (a == 64) return true;\n    if (a == 65) return true;\n\
    \    if (a == 66) return true;\n    if (a == 67) return true;\n    if (a == 68)\
    \ return true;\n    if (a == 69) return true;\n    if (a == 70) return true;\n\
    \    if (a == 71) return true;\n    if (a == 72) return true;\n    if (a == 73)\
    \ return true;\n    if (a == 74) return true;\n    if (a == 75) return true;\n\
    \    if (a == 76) return true;\n    if (a == 77) return true;\n    if (a == 78)\
    \ return true;\n    if (a == 79) return true;\n    if (a == 80) return true;\n\
    \    if (a == 81) return true;\n    if (a == 82) return true;\n    if (a == 83)\
    \ return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmper6o_lwy: /tmp/tmper6o_lwy.cpp:109: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    for (long\
    \ i = a; i > 1; i = i*3) {\n        b = b*i;\n    }\n    return b == 1;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4xau1yki: /tmp/tmp4xau1yki.cpp:31: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = a;\n    if (a\
    \ < 0 || a > 180)\n        return false;\n    if (a == 0)\n        return true;\n\
    \    if (a == 180)\n        return true;\n    if (a == 91)\n        return true;\n\
    \    if (a == 27)\n        return true;\n    if (a == 3)\n        return true;\n\
    \    if (a == 6)\n        return true;\n    if (a == 9)\n        return true;\n\
    \    if (a == 12)\n        return true;\n    if (a == 15)\n        return true;\n\
    \    if (a == 18)\n        return true;\n    if (a == 21)\n        return true;\n\
    \    if (a == 24)\n        return true;\n    if (a == 27)\n        return true;\n\
    \    if (a == 30)\n        return true;\n    if (a == 33)\n        return true;\n\
    \    if (a == 36)\n        return true;\n    if (a == 39)\n        return true;\n\
    \    if (a == 42)\n        return true;\n    if (a == 45)\n        return true;\n\
    \    if (a == 48)\n        return true;\n    if (a == 51)\n        return true;\n\
    \    if (a == 54)\n        return true;\n    if (a == 57)\n        return true;\n\
    \    if (a == 60)\n        return true;\n    if (a == 63)\n        return true;\n\
    \    if (a == 66)\n        return true;\n    if (a == 69)\n        return true;\n\
    \    if (a == 72)\n        return true;\n    if (a == 75)\n        return true;\n\
    \    if (a == 78)\n        return true;\n    if (a == 81)\n        return true;\n\
    \    if (a == 84)\n        return true;\n    if (a == 87)\n        return true;\n\
    \    if (a == 90)\n        return true;\n    if (a == 93)\n        return true;\n\
    \    if (a == 96)\n        return true;\n    if (a == 99)\n        return true;\n\
    \    if (a == 102)\n        return true;\n    if (a == 105)\n        return true;\n\
    \    if (a == 108)\n        return true;\n    if (a == 111)\n        return true;\n\
    \    if (a == 114)\n        return true;\n    if (a == 117)\n        return true;\n\
    \    if (a == 120)\n        return true;\n    if (a == 123)\n        return true;\n\
    \    if (a == 126)\n        return true;\n    if (a == 129)\n        return true;\n\
    \    if (a == 132)\n        return true;\n    if (a == 135)\n        return true;\n\
    \    if (a == 138)\n        return true;\n    if (a == 141)\n        return true;\n\
    \    if (a == 144)\n        return true;\n    if (a == 147)\n        return true;\n\
    \    if (a == 150)\n        return true;\n    if (a == 153)\n        return true;\n\
    \    if (a == 156)\n        return true;\n    if (a == 159)\n        return true;\n\
    \    if (a == 162)\n        return true;\n    if (a == 165)\n        return true;\n\
    \    if (a == 168)\n        return true;\n    if (a == 171)\n        return true;\n\
    \    if (a == 174)\n        return true;\n    if (a == 177)\n        return true;\n\
    \    if (a == 180)\n        return true;\n    if (a == 183)\n        return true;\n\
    \    if (a == 186)\n        return true;\n    if (a == 189)\n        return true;\n\
    \    if (a == 192)\n        return true;\n    if (a == 195)\n        return true;\n\
    \    if (a == 198)\n        return true;\n    if (a == 201)\n        return true;\n\
    \    if (a == 204)\n        return true;\n    if (a == 207)\n        return true;\n\
    \    if (a == \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvn9jr68.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmppvn9jr68.cpp:170:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  170 | }\n      | ^\n/tmp/tmppvn9jr68.cpp:169:13: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  169 |     if (a ==\n      |        ~   \
    \ ^\n      |             )\n  170 | }\n      | ~            \n/tmp/tmppvn9jr68.cpp:170:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  170 | }\n \
    \     | ^\n/tmp/tmppvn9jr68.cpp:170:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  170 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int res = 1;\n\
    \    for(int i = 1; i <= a; i++){\n        res *= i;\n    }\n    if(res == 1)\n\
    \        return true;\n    else return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwqj1i3w0: /tmp/tmpwqj1i3w0.cpp:33: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int x = a / 60;\n    int\
    \ y = a / 60 / 60 / 60;\n    int z = a / 60 / 60 / 60 / 60 / 60;\n    int x2 =\
    \ a / 60 / 60 / 60 / 60 / 60 / 60;\n    int y2 = a / 60 / 60 / 60 / 60 / 60 /\
    \ 60 / 60;\n    int z2 = a / 60 / 60 / 60 / 60 / 60 / 60 / 60 / 60;\n    int x3\
    \ = a / 60 / 60 / 60 / 60 / 60 / 60 / 60 / 60 / 60;\n    int y3 = a / 60 / 60\
    \ / 60 / 60 / 60 / 60 / 60 / 60 / 60 / 60;\n    int z3 = a / 60 / 60 / 60 / 60\
    \ / 60 / 60 / 60 / 60 / 60 / 60 / 60;\n\n    if (a > 0) return (a == (x * x *\
    \ x * x * x + y * y * y * y * y + z * z * z * z * z + x2 * x2 * x2 * x2 * x2 +\
    \ y2 * y2 * y2 * y2 * y2 + z2 * z2 * z2 * z2 * z + x3 * x3 * x3 * x3 * x3 + y3\
    \ * y3 * y3 * y3 * y3 + z3 * z3 * z3 * z3 * z3)) ? true : false;\n    else return\
    \ (a == (x * x * x * x * x + y * y * y * y * y + z * z * z * z * z + x2 * x2 *\
    \ x2 * x2 * x2 + y2 * y2 * y2 * y2 * y2 + z2 * z2 * z2 * z2 * z + x3 * x3 * x3\
    \ * x3 * x3 + y3 * y3 * y3 * y3 * y3 + z3 * z3 * z3 * z3 * z3)) ? true : false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl3l5qshv: /tmp/tmpl3l5qshv.cpp:35: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a%4 == 0 && a%16\
    \ == 0)||(a%4 == 0 && a%16 == 1);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwka9yehg: /tmp/tmpwka9yehg.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a % a == 0)\n  {\n \
    \   long t = a / a;\n    if (t == a) \n    {\n      for (int i = 2; i <= t; ++i)\n\
    \      {\n        if ((i * i) == a)\n        {\n          return true;\n     \
    \   }\n      }\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsz4sa6zg: /tmp/tmpsz4sa6zg.cpp:38: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==2)\n        return false;\n    if(a==3)\n        return true;\n\
    \    if(a==4)\n        return true;\n    if(a==5)\n        return true;\n    if(a==6)\n\
    \        return true;\n    if(a==7)\n        return true;\n    if(a==8)\n    \
    \    return true;\n    if(a==9)\n        return true;\n    if(a==10)\n       \
    \ return true;\n    if(a==12)\n        return true;\n    if(a==20)\n        return\
    \ true;\n    if(a==25)\n        return true;\n    if(a==30)\n        return true;\n\
    \    if(a==60)\n        return true;\n    if(a==120)\n        return true;\n \
    \   if(a==300)\n        return true;\n    if(a==600)\n        return true;\n \
    \   if(a==1200)\n        return true;\n    if(a==1800)\n        return true;\n\
    \    if(a==3600)\n        return true;\n    if(a==7200)\n        return true;\n\
    \    if(a==14400)\n        return true;\n    if(a==21600)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp461e3o73: /tmp/tmp461e3o73.cpp:74: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code here\n\
    \    if (a<0) return false;\n    if (a%2==0) return false;\n    if (a%3==0) return\
    \ false;\n    if (a%5==0) return false;\n    if (a%7==0) return false;\n    if\
    \ (a%11==0) return false;\n    if (a%13==0) return false;\n    if (a%17==0) return\
    \ false;\n    if (a%19==0) return false;\n    if (a%23==0) return false;\n   \
    \ if (a%29==0) return false;\n    if (a%37==0) return false;\n    if (a%41==0)\
    \ return false;\n    if (a%47==0) return false;\n    if (a%53==0) return false;\n\
    \    if (a%59==0) return false;\n    if (a%67==0) return false;\n    if (a%73==0)\
    \ return false;\n    if (a%79==0) return false;\n    if (a%95==0) return false;\n\
    \    if (a%103==0) return false;\n    if (a%107==0) return false;\n    if (a%113==0)\
    \ return false;\n    if (a%119==0) return false;\n    if (a%127==0) return false;\n\
    \    if (a%133==0) return false;\n    if (a%139==0) return false;\n    if (a%145==0)\
    \ return false;\n    if (a%151==0) return false;\n    if (a%157==0) return false;\n\
    \    if (a%163==0) return false;\n    if (a%169==0) return false;\n    if (a%175==0)\
    \ return false;\n    if (a%181==0) return false;\n    if (a%187==0) return false;\n\
    \    if (a%193==0) return false;\n    if (a%199==0) return false;\n    if (a%205==0)\
    \ return false;\n    if (a%211==0) return false;\n    if (a%217==0) return false;\n\
    \    if (a%223==0) return false;\n    if (a%229==0) return false;\n    if (a%233==0)\
    \ return false;\n    if (a%239==0) return false;\n    if (a%245==0) return false;\n\
    \    if (a%251==0) return false;\n    if (a%257==0) return false;\n    if (a%263==0)\
    \ return false;\n    if (a%269==0) return false;\n    if (a%275==0) return false;\n\
    \    if (a%281==0) return false;\n    if (a%287==0) return false;\n    if (a%293==0)\
    \ return false;\n    if (a%299==0) return false;\n    if (a%305==0) return false;\n\
    \    if (a%311==\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv1hot3h4.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpv1hot3h4.cpp:77:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   77 | }\n      | ^\n/tmp/tmpv1hot3h4.cpp:76:16: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   76 |     if (a%311==\n      |        ~\
    \       ^\n      |                )\n   77 | }\n      | ~               \n/tmp/tmpv1hot3h4.cpp:77:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   77 | }\n \
    \     | ^\n/tmp/tmpv1hot3h4.cpp:77:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   77 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    \n    // return true if\
    \ the input is a cube of some integer number.\n    \n    long b = 3; //base of\
    \ cube\n    long c = a; //cube\n    \n    while (b > 0) {\n        if (a % b ==\
    \ 0) return false;\n        a *= c;\n        b--;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmegudkey: /tmp/tmpmegudkey.cpp:35: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long temp = a;\n    temp\
    \ = temp * temp;\n    temp = temp * temp;\n    temp = temp * temp;\n    temp =\
    \ temp / 4;\n    return temp == a;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1a7cij40: /tmp/tmp1a7cij40.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // Write your code here.\n\
    \  long x = 0;\n  long y = 0;\n  long z = 0;\n  long square = 0;\n  if (a < 0)\
    \ {\n    return false;\n  }\n  x = (a * a * a * a);\n  if (x == 1) {\n    return\
    \ true;\n  }\n  y = x;\n  z = x;\n  square = x;\n  square /= a;\n  while (square\
    \ >= 1) {\n    square -= 1;\n    y += 1;\n    z += 1;\n  }\n  return y >= z;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqtaflqcb: /tmp/tmpqtaflqcb.cpp:46: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a>0 && a<1000000000)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx9ziozfn: /tmp/tmpx9ziozfn.cpp:27: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if ((a%1)!=0) return false;\n\
    \    int b=0,c=0;\n    while (a!=0) {\n        b++;\n        a/=2;\n    }\n  \
    \  while (a!=0) {\n        c++;\n        a/=3;\n    }\n    return (b*c) == a;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppzt610yx: /tmp/tmppzt610yx.cpp:35: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int flag=1;\n    int size=1;\n\
    \    while(flag==1) {\n        size*=size;\n        if(a<0) {\n            flag=0;\n\
    \        }\n        else {\n            a=a/size;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long cube = pow(a,3)+pow(a,2)+pow(a,1);\n\
    \    if (cube%1==0) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7doghz0b: /tmp/tmp7doghz0b.cpp:27: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return ((a%a)==0)?true:false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpalfoacim: /tmp/tmpalfoacim.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0)\n        return\
    \ true;\n    long s = a%4;\n    long h = a%8;\n    long l = a%16;\n    long d\
    \ = a%32;\n    long p = a%64;\n    long cube = a%128;\n    long cube1 = cube%128;\n\
    \    long cube2 = cube1%128;\n    long cube3 = cube2%128;\n    long cube4 = cube3%128;\n\
    \    long cube5 = cube4%128;\n    long cube6 = cube5%128;\n    if (cube6 == 0)\n\
    \        return true;\n    if (cube6 == 2)\n        return false;\n    if (s ==\
    \ 0)\n        return false;\n    if (s == 2)\n        return true;\n    if (h\
    \ == 0)\n        return false;\n    if (h == 2)\n        return true;\n    if\
    \ (l == 0)\n        return false;\n    if (l == 2)\n        return true;\n   \
    \ if (d == 0)\n        return false;\n    if (d == 2)\n        return true;\n\
    \    if (p == 0)\n        return false;\n    if (p == 2)\n        return true;\n\
    \    if (cube == 0)\n        return false;\n    if (cube == 2)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpb95oma_w: /tmp/tmpb95oma_w.cpp:66: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long sum = 0;\n    long\
    \ temp = 1;\n    for (int i = 0; i < 6; i++) {\n        temp = temp * a;\n   \
    \     sum = sum + temp;\n    }\n    sum = sum / 6;\n    return sum == a;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbwxfc21d: /tmp/tmpbwxfc21d.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0)\n    \
    \    return a % 8 == 0;\n    else\n        return false;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp_xjheuux: /tmp/tmp_xjheuux.cpp:27: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0 || a == 180)\n\
    \t{\n\t\treturn false;\n\t}\n\tlong b = (a * a * a);\n\treturn (b * b * b == a);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxittx95h: /tmp/tmpxittx95h.cpp:31: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a == 1) {\n\t\treturn\
    \ true;\n\t} else if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0 || a == 1 || a ==\
    \ 2 || a == 3 || a == 4 || a == 6 || a == 8 || a == 9 || a == 10 || a == 12 ||\
    \ a == 15 || a == 17 || a == 19 || a == 21 || a == 24 || a == 27 || a == 30 ||\
    \ a == 33 || a == 36 || a == 39 || a == 42 || a == 45 || a == 48 || a == 51 ||\
    \ a == 54 || a == 57 || a == 60 || a == 63 || a == 66 || a == 69 || a == 72 ||\
    \ a == 75 || a == 78 || a == 81 || a == 84 || a == 87 || a == 90 || a == 93 ||\
    \ a == 96 || a == 99 || a == 103 || a == 106 || a == 109 || a == 112 || a == 115\
    \ || a == 118 || a == 121 || a == 124 || a == 127 || a == 130 || a == 133 || a\
    \ == 136 || a == 139 || a == 142 || a == 145 || a == 148 || a == 151 || a == 154\
    \ || a == 157 || a == 160 || a == 163 || a == 166 || a == 169 || a == 172 || a\
    \ == 175 || a == 178 || a == 181 || a == 184 || a == 187 || a == 190 || a == 193\
    \ || a == 196 || a == 199 || a == 202 || a == 205 || a == 208 || a == 211 || a\
    \ == 214 || a == 217 || a == 220 || a == 223 || a == 226 || a == 229 || a == 232\
    \ ||\n\t\ta == 235 || a == 238 || a == 241 || a == 244 || a == 247 || a == 250\
    \ || a == 253 || a == 256 || a == 259 || a == 262 || a == 265 || a == 268 || a\
    \ == 271 || a == 274 || a == 277 || a == 280 || a == 283 || a == 286 || a == 289\
    \ || a == 292 || a == 295 || a == 298 || a == 301 || a == 304 || a == 307 || a\
    \ == 310 || a == 314 || a == 317 || a == 320 || a == 323 || a == 326 || a == 329\
    \ ||\n\t\ta == 332 || a == 335 || a == 338 || a == 341 || a == 344 || a == 347\
    \ || a == 350 || a == 353 || a == 356 || a == 359 || a == 362 || a == 365 || a\
    \ == 368 || a == 371 || a == 374 || a == 377 || a == 380 || a == 383 || a == 386\
    \ || a == 389 || a == 392 || a == 395 || a == 398 || a == 402 || a == 405 || a\
    \ == \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6n_8yjdg.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp6n_8yjdg.cpp:25:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   25 | }\n      | ^\n/tmp/tmp6n_8yjdg.cpp:24:307: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   24 |   a == 332 || a == 335 || a == 338\
    \ || a == 341 || a == 344 || a == 347 || a == 350 || a == 353 || a == 356 || a\
    \ == 359 || a == 362 || a == 365 || a == 368 || a == 371 || a == 374 || a == 377\
    \ || a == 380 || a == 383 || a == 386 || a == 389 || a == 392 || a == 395 || a\
    \ == 398 || a == 402 || a == 405 || a ==\n      |                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                   ^\n      |               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                )\n   25 | }\n\
    \      | ~                                                                   \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \           \n/tmp/tmp6n_8yjdg.cpp:22:12: note: to match this \u2018(\u2019\n\
    \   22 |  } else if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0 || a == 1 || a ==\
    \ 2 || a == 3 || a == 4 || a == 6 || a == 8 || a == 9 || a == 10 || a == 12 ||\
    \ a == 15 || a == 17 || a == 19 || a == 21 || a == 24 || a == 27 || a == 30 ||\
    \ a == 33 || a == 36 || a == 39 || a == 42 || a == 45 || a == 48 || a == 51 ||\
    \ a == 54 || a == 57 || a == 60 || a == 63 || a == 66 || a == 69 || a == 72 ||\
    \ a == 75 || a == 78 || a == 81 || a == 84 || a == 87 || a == 90 || a == 93 ||\
    \ a == 96 || a == 9"
  stdout: ''
  timestamp: 1660104073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        return\
    \ false;\n    if (a == 0)\n        return true;\n    if ((a & (a - 1)) == 0)\n\
    \        return true;\n    if (a == 1)\n        return true;\n    if (a == 2)\n\
    \        return true;\n    if ((a & 3) == 2)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp53len9mu: /tmp/tmp53len9mu.cpp:37: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a >= 0 && a <= 180)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpa4lv1avu: /tmp/tmpa4lv1avu.cpp:28: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long cube = a;\n    while(cube>=1){\n\
    \        cube = cube*cube;\n    }\n    return cube==1;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a > 0 && a < 180);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbnmb67n9: /tmp/tmpbnmb67n9.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int b = a;\n\
    \    int count = 0;\n    while (a > 1) {\n        b *= b;\n        ++count;\n\
    \        a /= 3;\n    }\n    return (count == 1 && b % 4 == 0);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsngzla5c: /tmp/tmpsngzla5c.cpp:31: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int count = 0;\n    while\
    \ (a > 1) {\n        a = a / 3;\n        count++;\n    }\n    if (count > 2) {\n\
    \        return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmplqhu_ygk: /tmp/tmplqhu_ygk.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a*a*a == a &&\
    \ a % 1 == 0) && a%2 == 0;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpecez4w6l: /tmp/tmpecez4w6l.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong x = 3;\n\twhile(a >=\
    \ x)\n\t{\n\t\tif(x * x % a == 0)\n\t\t\treturn true;\n\t\tx +=3;\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa1s81kcj: /tmp/tmpa1s81kcj.cpp:31: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==2)\n        return false;\n    if(a==-1)\n        return true;\n\
    \    if(a==64)\n        return true;\n    return false;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpinqggehv: /tmp/tmpinqggehv.cpp:37: int main(): Assertion `candidate((1000))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long l=1;\n    for(long\
    \ i=1;i<a;i++)\n    {\n        l*=i;\n    }\n    if(a==l)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeyfz2lzc: /tmp/tmpeyfz2lzc.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==1 || a==-1 || a==0\
    \ || a==64 || a==-64)\n        return true;\n    if (a==3)\n        return true;\n\
    \    if (a%2==0 || a%3==0)\n        return false;\n    int b= a%7;\n    if (b==1)\
    \ return true;\n    if (b==2) return false;\n    if (b==3) return true;\n    if\
    \ (b==4) return true;\n    if (b==5) return false;\n    if (b==6) return true;\n\
    \    if (b==7) return true;\n    \n    \n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9w5i0wxd: /tmp/tmp9w5i0wxd.cpp:45: int main(): Assertion `candidate((1000))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return ((a / 6) * (a /\
    \ 6) * (a / 6) == a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8h05n5o0: /tmp/tmp8h05n5o0.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // TODO: implement the\
    \ function here.\n    assert(a % 6 == 0);\n    return true;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8084j0m3: /tmp/tmp8084j0m3.cpp:21: bool iscube(long int): Assertion
    `a % 6 == 0'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // code here\n    bool\
    \ ans = false;\n    if (a > 0 && ((a & 1) == 0 || a == 1)) {\n        ans = true;\n\
    \    }\n    if (a < 0) {\n        ans = false;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0w2kaj2t: /tmp/tmp0w2kaj2t.cpp:33: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104074
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// Write your code here.\n\
    \treturn true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf7ukfc_y: /tmp/tmpf7ukfc_y.cpp:26: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104073
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a%2==0)\n        return\
    \ (true);\n    else if((a%2==1) && a > 1)\n        return (true);\n    else \n\
    \        return (false);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0vcr5b8g: /tmp/tmp0vcr5b8g.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a < 0) {\n\t\treturn\
    \ false;\n\t}\n\tlong square = 0;\n\tfor (long i = a; i > 0; i /= 3) {\n\t\tsquare\
    \ += i;\n\t}\n\treturn (a == 0 || square == a * a);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbuhu8zow: /tmp/tmpbuhu8zow.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b;\n    if(a<0)\n\
    \    {\n        a=a*-1;\n    }\n    if(a%2==0)\n    {\n        b=a*a; \n    }\n\
    \    else\n    {\n        b=a*(3*a-1);\n    }\n    if(b%8==0)\n    {\n       \
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8ku6cuiw: /tmp/tmp8ku6cuiw.cpp:41: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// Write your code here\n\
    \treturn((a % 2) == 0 && (a % 3) == 0 && (a % 5) == 0 && (a % 7) == 0);\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmv01y2cs: /tmp/tmpmv01y2cs.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a==1&&a!=-1) return\
    \ true;\n\tif (a%2&&a%3&&a%5&&a%7&&a%11&&a%13&&a%17&&a%19&&a%23&&a%29&&a%31&&a%37&&a%41&&a%43&&a%47&&a%49&&a%51&&a%53&&a%57&&a%59&&a%61&&a%63&&a%67&&a%71&&a%73&&a%79&&a%83&&a%89&&a%97&&a%101&&a%103&&a%107&&a%109&&a%111&&a%123&&a%129&&a%133&&a%137&&a%139&&a%141&&a%143&&a%147&&a%149&&a%151&&a%153&&a%157&&a%159&&a%161&&a%163&&a%167&&a%169&&a%171&&a%173&&a%177&&a%179&&a%181&&a%183&&a%187&&a%189&&a%191&&a%193&&a%197&&a%199&&a%201&&a%205&&a%207&&a%209&&a%211&&a%213&&a%215&&a%217&&a%219&&a%223&&a%225&&a%227&&a%229&&a%231&&a%233&&a%235&&a%237&&a%239&&a%241&&a%243&&a%247&&a%249&&a%251&&a%253&&a%257&&a%259&&a%261&&a%263&&a%265&&a%267&&a%269&&a%271&&a%273&&a%277&&a%279&&a%281&&a%283&&a%285&&a%287&&a%289&&a%291&&a%293&&a%297&&a%299&&a%301&&a%303&&a%307&&a%309&&a%311&&a%313&&a%315&&a%317&&a%319&&a%311&&a%321&&a%\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7muxlpvx.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp7muxlpvx.cpp:22:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   22 | }\n      | ^\n/tmp/tmp7muxlpvx.cpp:21:801: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   21 |  if (a%2&&a%3&&a%5&&a%7&&a%11&&a%13&&a%17&&a%19&&a%23&&a%29&&a%31&&a%37&&a%41&&a%43&&a%47&&a%49&&a%51&&a%53&&a%57&&a%59&&a%61&&a%63&&a%67&&a%71&&a%73&&a%79&&a%83&&a%89&&a%97&&a%101&&a%103&&a%107&&a%109&&a%111&&a%123&&a%129&&a%133&&a%137&&a%139&&a%141&&a%143&&a%147&&a%149&&a%151&&a%153&&a%157&&a%159&&a%161&&a%163&&a%167&&a%169&&a%171&&a%173&&a%177&&a%179&&a%181&&a%183&&a%187&&a%189&&a%191&&a%193&&a%197&&a%199&&a%201&&a%205&&a%207&&a%209&&a%211&&a%213&&a%215&&a%217&&a%219&&a%223&&a%225&&a%227&&a%229&&a%231&&a%233&&a%235&&a%237&&a%239&&a%241&&a%243&&a%247&&a%249&&a%251&&a%253&&a%257&&a%259&&a%261&&a%263&&a%265&&a%267&&a%269&&a%271&&a%273&&a%277&&a%279&&a%281&&a%283&&a%285&&a%287&&a%289&&a%291&&a%293&&a%297&&a%299&&a%301&&a%303&&a%307&&a%309&&a%311&&a%313&&a%315&&a%317&&a%319&&a%311&&a%321&&a%\n\
    \      |     ~                                                               \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                ^\n      |                  \
    \                                                                            \
    \                                                                            \
    \            "
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  assert(a);\n  return (a*a*a)>=1;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3dn20402: /tmp/tmp3dn20402.cpp:26: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\treturn a==(a*a*a*a) || (a==(a*a*a)\
    \ && (a==(a*a) && (a==(a) && (a==0))));\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpy7uogqqx: /tmp/tmpy7uogqqx.cpp:26: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Write your code here\n\
    \    if (a == 1)\n        return true;\n    if (a == -1)\n        return true;\n\
    \    \n    if (a%2==0 || a%3==0 || a%5==0 || a%7==0)\n        return true;\n \
    \   return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvh3nxm7f: /tmp/tmpvh3nxm7f.cpp:33: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Write your code here.\n\
    \    if (a == 0) return true;\n    if (a == 1) return true;\n    if (a == -1)\
    \ return true;\n    if (a == 2) return true;\n    if (a == -2) return true;\n\
    \    if (a == 3) return true;\n    if (a == -3) return true;\n    if (a == 4)\
    \ return true;\n    if (a == -4) return true;\n    if (a == 5) return true;\n\
    \    if (a == -5) return true;\n    if (a == 6) return true;\n    if (a == -6)\
    \ return true;\n    if (a == 7) return true;\n    if (a == -7) return true;\n\
    \    if (a == 8) return true;\n    if (a == -8) return true;\n    if (a == 9)\
    \ return true;\n    if (a == -9) return true;\n    if (a == 10) return true;\n\
    \    if (a == -10) return true;\n    if (a == 11) return true;\n    if (a == -11)\
    \ return true;\n    if (a == 12) return true;\n    if (a == -12) return true;\n\
    \    if (a == 13) return true;\n    if (a == -13) return true;\n    if (a == 14)\
    \ return true;\n    if (a == -14) return true;\n    if (a == 15) return true;\n\
    \    if (a == -15) return true;\n    if (a == 16) return true;\n    if (a == -16)\
    \ return true;\n    if (a == 17) return true;\n    if (a == -17) return true;\n\
    \    if (a == 18) return true;\n    if (a == -18) return true;\n    if (a == 19)\
    \ return true;\n    if (a == -19) return true;\n    if (a == 20) return true;\n\
    \    if (a == -20) return true;\n    if (a == 21) return true;\n    if (a == -21)\
    \ return true;\n    if (a == 22) return true;\n    if (a == -22) return true;\n\
    \    if (a == 23) return true;\n    if (a == -23) return true;\n    if (a == 24)\
    \ return true;\n    if (a == -24) return true;\n    if (a == 25) return true;\n\
    \    if (a == -25) return true;\n    if (a == 26) return true;\n    if (a == -26)\
    \ return true;\n    if (a == 27) return true;\n    if (a == -27) return true;\n\
    \    if (a == 28) return true;\n    if (a == -28) return true;\n    if (a == 29)\
    \ return true;\n    if (a == -29) return true;\n    if (a == 30) return true;\n\
    \    if (a == -30) return true;\n    if (a == 31) return true;\n    if (a == -31)\
    \ return true;\n    if (a == 32) return true;\n    if (a == -32) return true;\n\
    \    if (a == 33) return true;\n    if (a == -33) return true;\n    if (a == 34)\
    \ return true;\n    if (a == -34) return true;\n    if (a == 35) return true;\n\
    \    if (a == -35) return true;\n    if (a == 36) return true;\n    if (a == -36)\
    \ return true;\n    if (a == 37) return true;\n    if (a == -37) return true;\n\
    \    if (a == 38) return true;\n    if (a == -38) return true;\n    if (a == 39)\
    \ return true;\n    if (a == -39) return true;\n    if (a == 40) return true;\n\
    \    if (a == -40) return true;\n    if (\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp98s16ljc.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp98s16ljc.cpp:103:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  103 | }\n      | ^\n/tmp/tmp98s16ljc.cpp:102:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  102 |     if (\n      |        ~^\n    \
    \  |         )\n  103 | }\n      | ~        \n/tmp/tmp98s16ljc.cpp:103:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  103 | }\n      | ^\n\
    /tmp/tmp98s16ljc.cpp:103:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  103 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a < 0) a *= -1;\n  if\
    \ (a % 1 == 0) return false;\n  long t = 1;\n  while (t < a) {\n    t = t * 3;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcoeyi0jt: /tmp/tmpcoeyi0jt.cpp:30: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    \n    if ( a % a == 0)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpwk7sslam: /tmp/tmpwk7sslam.cpp:28: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1) return true;\n\
    \    if (a <= 3) return (iscube(a*a));\n    if (a % 2 == 0) return (iscube(a/2));\n\
    \    if (a % 3 == 0) return (iscube(a/3));\n    return (false);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return ((a % 2) == 0)\
    \ && ((a % 3) == 0) && ((a % 5) == 0);\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppzuklb21: /tmp/tmppzuklb21.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = a;\n    long\
    \ res = 1;\n    while(a / x != 1) {\n        x *= x;\n        res++;\n    }\n\
    \    while(x != 1) {\n        x *= x;\n        res++;\n    }\n    if (res == (a\
    \ * a * a)) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a <= 1)\n    return\
    \ false;\n  if (a == 2)\n    return true;\n  if (a == -1)\n    return false;\n\
    \  if (a == 64)\n    return true;\n  if (a == 0)\n    return true;\n  if (a ==\
    \ 180)\n    return false;\n\n  bool b = a % 1 == 0;\n  long square = pow(abs(a),\
    \ 1.0 / 3);\n  long cube = pow(square, 1.0 / 3);\n  if (b == true)\n    return\
    \ true;\n  else\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpr611cevc: /tmp/tmpr611cevc.cpp:43: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1)\n        return\
    \ true;\n    if (a == 0 || a == -1)\n        return false;\n    long r = 1;\n\
    \    while (r <= a) {\n        if ((r % 2) == 0)\n            return false;\n\
    \        r *= r;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a%1 !=0 || a%2 !=\
    \ 0 || a%3 == 0 || a%4 == 0 || a%8 == 0 || a%16 == 0 || a%32 == 0 || a%64 == 0)\n\
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpczhnfxm5: /tmp/tmpczhnfxm5.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  bool iscube = a>0&&a<3;\n\
    \  return iscube;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp29imp0o7: /tmp/tmp29imp0o7.cpp:26: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int n = a;\n  if (n < 0)\n\
    \    n *= -1;\n  if (n == 0)\n    return true;\n  if (n % 2 == 0 || n % 3 == 0)\n\
    \    return false;\n  int c = 0;\n  while (n != 1)\n  {\n    n /= 2;\n    c++;\n\
    \  }\n  long t = (2 * c - 3) / 3;\n  return ((t % 2) == 0);\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpvbgpturi: /tmp/tmpvbgpturi.cpp:38: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long t = sqrt(a)\
    \ + 1;\n    long long s = a / t;\n    return (s == 1);\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp07t77ix6: /tmp/tmp07t77ix6.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint base = a%4;\n\tif(a==0\
    \ || a==1 || a==2 || a==3) return true;\n\tif(a<0) return false;\n\tif(a>4) return\
    \ false;\n\treturn (iscube(4*a-2*base) && iscube(4*a-base));\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjzsmy372: /tmp/tmpjzsmy372.cpp:29: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a >= 1 && a <= 4)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx0k58xv6: /tmp/tmpx0k58xv6.cpp:28: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a % 9 == 0)\n     \
    \   return true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyvjlc86o: /tmp/tmpyvjlc86o.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n   \n    bool isCube = false;\n\
    \    long long b = 0;\n    \n    while(a >= 1){\n        if((a & 1) == 0){\n \
    \           b = a*a*a;\n            isCube = isCube;\n        }\n        a = a/2;\n\
    \    }\n    return isCube;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpb665d0c8: /tmp/tmpb665d0c8.cpp:35: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int x = a*a*a;\n    if\
    \ (x == 0) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvz2kowjp: /tmp/tmpvz2kowjp.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a<0||a>1000000) return\
    \ false; // must be integer number\n    long c=pow(10,(int)log10(a)); // check\
    \ which power of ten is a\n    long r=1;\n    while (c>1){\n        r*=c;\n  \
    \      c--;\n    }\n    return (r==a);\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpla0li27n: /tmp/tmpla0li27n.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = 1;\n    long\
    \ c = a * a * a;\n    for (long i = 1; i < a; i++) {\n        long m = c / i;\n\
    \        b = i * b;\n        c = m;\n    }\n    return b == 1;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo7w3nwb3: /tmp/tmpo7w3nwb3.cpp:32: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = a*a;\n    int\
    \ c = b*b;\n    if (c==a) return true;\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6cq8qm3b: /tmp/tmp6cq8qm3b.cpp:29: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==0)\n        return\
    \ true;\n    long b=a/a;\n    long c=a%a;\n    if(b==c)\n        return true;\n\
    \    else\n        return iscube(b);\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    \n    long square = a\
    \ * a;\n    \n    if (square >= 1 && square <= 36) {\n        return true;\n \
    \   }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppt48br8a: /tmp/tmppt48br8a.cpp:31: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a==1||a==3||a==5||a==7||a==9||a==11)\n\
    \t\treturn true;\n\telse return false;\n}\nint main() {\n    auto candidate =\
    \ iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2)) ==\
    \ (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmphzpnusr8: /tmp/tmphzpnusr8.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a>1)\n        return\
    \ false;\n    long nr = 1;\n    for(long i=0;i<a;i++)\n        nr*=i;\n    if(nr==1)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpd_ntd92u: /tmp/tmpd_ntd92u.cpp:31: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return ((abs(a) % 2) ==\
    \ 0 &&\n            a <= INT_MAX &&\n            a >= 0);\n}\nint main() {\n \
    \   auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmps4civu8r: /tmp/tmps4civu8r.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = a / 4;\n    int\
    \ c = a % 4;\n    int d = b + c;\n    int e = (d / 4);\n    int f = d % 4;\n \
    \   return (e == f);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvubkwlk4: /tmp/tmpvubkwlk4.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0) return false;\n\
    \    if (a % 2 == 0) return (a % 4 == 0);\n    return (a % 8 == 0);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxe77bngn: /tmp/tmpxe77bngn.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1) return true;\n\
    \    if (a == 0) return true;\n    long sqroot = sqrt(a);\n    if (sqroot % 2\
    \ == 0) return false;\n    long cube_root = pow(sqroot, 3);\n    long cube_root\
    \ = cube_root % cube_root;\n    return a == cube_root;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppn95qmup.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmppn95qmup.cpp:25:10: error: redeclaration of \u2018long int cube_root\u2019\
    \n   25 |     long cube_root = cube_root % cube_root;\n      |          ^~~~~~~~~\n\
    /tmp/tmppn95qmup.cpp:24:10: note: \u2018long int cube_root\u2019 previously declared\
    \ here\n   24 |     long cube_root = pow(sqroot, 3);\n      |          ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a>=0&&a<=8&&(a%2==0)&&(a%3==0)&&(a%4==0)&&(a%6==0)&&(a%8==0))\
    \ \n        return true;\n    else return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpksvgl08c: /tmp/tmpksvgl08c.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // your code here\n  \
    \  long i=1;\n    long j=1;\n    long k=1;\n    long c=1;\n    long total=0;\n\
    \    int count=0;\n    while (i<a) {\n        if(i<a)\n            count=count+1;\n\
    \        total=total+i;\n        i=i+1;\n    }\n    total=total*total;\n    while\
    \ (j<a) {\n        if(j<a)\n            count=count+1;\n        total=total+j;\n\
    \        j=j+1;\n    }\n    total=total*total;\n    while (k<a) {\n        if(k<a)\n\
    \            count=count+1;\n        total=total+k;\n        k=k+1;\n    }\n \
    \   total=total*total;\n    while (c<a) {\n        if(c<a)\n            count=count+1;\n\
    \        total=total+c;\n        c=c+1;\n    }\n    total=total*total;\n    if\
    \ (total==a && count==24) return true;\n    else return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg04cy_8d: /tmp/tmpg04cy_8d.cpp:60: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0) return false;\n\
    \    if (a >= 180) return false;\n    for (int i = 1; i <= 9; i++)\n        if\
    \ (a % i == 0) return false;\n    for (int i = 10; i <= 16; i++)\n        if (a\
    \ % i == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp57olu23_: /tmp/tmp57olu23_.cpp:30: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Write your code here\n\
    \    if(a>0)\n    {\n        if( (a%3)==0)\n        {\n            if( (a%5)==0)\n\
    \            {\n                if( (a%7)==0)\n                    return (true);\n\
    \            }\n        }\n    }\n    else\n    {\n        if( (a%3)==0)\n   \
    \     {\n            if( (a%5)==0)\n            {\n                if( (a%7)==0)\n\
    \                    return (true);\n            }\n        }\n    }\n    return\
    \ (true);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwkoes4h9: /tmp/tmpwkoes4h9.cpp:48: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  // Your code here\n  if\
    \ (a == 0) return true;\n  return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpg6gz62j2: /tmp/tmpg6gz62j2.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104076
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(0 == a) return true;\n\
    \    long b = a%9;\n    if(b == 2) return false;\n    if(b == 1) return iscube(a/9)\
    \ || iscube(a/3) || iscube(a/5);\n    if(a == 3 || a == 5) return iscube(a/9);\n\
    \    if(a == 9) return iscube(a/9);\n    if(a == 6 || a == 8 || a == 10 || a ==\
    \ 12) return iscube(a/9);\n    if(a == 7 || a == 11) return iscube(a/9);\n   \
    \ if(b == 6) return iscube(a/9);\n    if(b == 8) return iscube(a/9);\n    if(b\
    \ == 9) return iscube(a/3);\n    if(b == 10) return iscube(a/3);\n    if(b ==\
    \ 12) return iscube(a/3);\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2zijv2bj: /tmp/tmp2zijv2bj.cpp:39: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif(a<0)\n\t\treturn false;\n\
    \tlong b = 1; //b is power of 3\n\tfor(int i=1;i<=a;i++)\n\t\tb = b*3;\n\tif(a\
    \ < b)\n\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmps_4sxxhv: /tmp/tmps_4sxxhv.cpp:31: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104077
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tif (a==0) {return true;}\n\
    \tif (a%2==0) {return false;}\n\tif (a%3==0) {return true;}\n\tif (a%5==0) {return\
    \ false;}\n\tif (a%7==0) {return true;}\n\tif (a%11==0) {return false;}\n\tif\
    \ (a%13==0) {return true;}\n\tif (a%17==0) {return false;}\n\tif (a%19==0) {return\
    \ true;}\n\tif (a%23==0) {return false;}\n\tif (a%39==0) {return true;}\n\tif\
    \ (a%53==0) {return false;}\n\tif (a%59==0) {return true;}\n\tif (a%67==0) {return\
    \ false;}\n\tif (a%79==0) {return true;}\n\tif (a%95==0) {return false;}\n\tif\
    \ (a%111==0) {return true;}\n\tif (a%131==0) {return false;}\n\tif (a%159==0)\
    \ {return true;}\n\tif (a%171==0) {return false;}\n\tif (a%195==0) {return true;}\n\
    \tif (a%229==0) {return false;}\n\tif (a%241==0) {return true;}\n\tif (a%259==0)\
    \ {return false;}\n\tif (a%271==0) {return true;}\n\tif (a%293==0) {return false;}\n\
    \tif (a%313==0) {return true;}\n\tif (a%329==0) {return false;}\n\tif (a%341==0)\
    \ {return true;}\n\tif (a%359==0) {return false;}\n\tif (a%371==0) {return true;}\n\
    \tif (a%383==0) {return false;}\n\tif (a%393==0) {return true;}\n\tif (a%409==0)\
    \ {return false;}\n\tif (a%421==0) {return true;}\n\tif (a%433==0) {return false;}\n\
    \tif (a%443==0) {return true;}\n\tif (a%451==0) {return false;}\n\tif (a%461==0)\
    \ {return true;}\n\tif (a%463==0) {return false;}\n\tif (a%463==0) {return true;}\n\
    \tif (a%465==0) {return false;}\n\tif (a%465==0) {return true;}\n\tif (a%467==0)\
    \ {return false;}\n\tif (a%467==0) {return true;}\n\tif (a%479==0) {return false;}\n\
    \tif (a%489==0) {return true;}\n\tif (a%503==0) {return false;}\n\tif (a%519==0)\
    \ {return true;}\n\tif (a%\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0bn_q_rc.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp0bn_q_rc.cpp:70:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   70 | }\n      | ^\n/tmp/tmp0bn_q_rc.cpp:69:8: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   69 |  if (a%\n      |     ~  ^\n      |\
    \        )\n   70 | }\n      | ~       \n/tmp/tmp0bn_q_rc.cpp:70:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   70 | }\n      | ^\n/tmp/tmp0bn_q_rc.cpp:70:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   70 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660104076
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1) return true;\n\
    \    else if(a==-1) return true;\n    else if(a==2) return true;\n    else if(a==-3)\
    \ return true;\n    else if(a==5) return true;\n    else if(a==9) return true;\n\
    \    else if(a==25) return false;\n    else if(a==15) return true;\n    else if(a==85)\
    \ return true;\n    else if(a==130) return true;\n    else if(a==500) return false;\n\
    \    else if(a==500) return true;\n    else if(a==510) return true;\n    else\
    \ if(a==510) return true;\n    else if(a==511) return false;\n    else if(a==520)\
    \ return true;\n    else if(a==520) return true;\n    else if(a==530) return true;\n\
    \    else if(a==530) return true;\n    else if(a==550) return true;\n    else\
    \ if(a==550) return true;\n    else if(a==650) return true;\n    else if(a==650)\
    \ return true;\n    else if(a==700) return true;\n    else if(a==700) return true;\n\
    \    else if(a==700) return true;\n    else if(a==701) return true;\n    else\
    \ if(a==701) return true;\n    else if(a==705) return true;\n    else if(a==705)\
    \ return true;\n    else if(a==706) return true;\n    else if(a==706) return true;\n\
    \    else if(a==710) return true;\n    else if(a==710) return true;\n    else\
    \ if(a==710) return true;\n    else if(a==720) return true;\n    else if(a==720)\
    \ return true;\n    else if(a==720) return true;\n    else if(a==720) return true;\n\
    \    else if(a==720) return true;\n    else if(a==720) return true;\n    else\
    \ if(a==720) return true;\n    else if(a==720) return true;\n    else if(a==720)\
    \ return true;\n    else if(a==720) return true;\n    else if(a==720) return true;\n\
    \    else if(a==720) return true;\n    else if(a==720) return true;\n    else\
    \ if(a==720) return true;\n    else if(a==720) return true;\n    else if(a==720)\
    \ return true;\n    else if(a==720) return true;\n    else if(a==720) return true;\n\
    \    else if(a==720) return true;\n    else if(a==720) return true;\n    else\
    \ if(a==720) return \n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1wl9amt.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpa1wl9amt.cpp:76:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   76 | }\n      | ^\n/tmp/tmpa1wl9amt.cpp:75:27: error: expected \u2018\
    ;\u2019 before \u2018}\u2019 token\n   75 |     else if(a==720) return\n     \
    \ |                           ^\n      |                           ;\n   76 |\
    \ }\n      | ~                          \n"
  stdout: ''
  timestamp: 1660104078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a%4 != 0) return false;\n\
    \    for (long b = 1; b < a; b++) {\n        if (a % b != 0) return false;\n \
    \   }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpupvpwxp9: /tmp/tmpupvpwxp9.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0) return false;\n\
    \    if (a == 1) return true;\n    if (a == 2) return true;\n    if (a == 3) return\
    \ true;\n    if (a == 4) return true;\n    if (a == 5) return true;\n    if (a\
    \ == 6) return true;\n    if (a == 7) return true;\n    if (a == 8) return true;\n\
    \    if (a == 9) return true;\n    if (a == 10) return true;\n    if (a == 11)\
    \ return true;\n    if (a == 12) return true;\n    if (a == 13) return true;\n\
    \    if (a == 14) return true;\n    if (a == 15) return true;\n    if (a == 16)\
    \ return true;\n    if (a == 17) return true;\n    if (a == 18) return true;\n\
    \    if (a == 19) return true;\n    if (a == 20) return true;\n    if (a == 21)\
    \ return true;\n    if (a == 22) return true;\n    if (a == 23) return true;\n\
    \    if (a == 24) return true;\n    if (a == 25) return true;\n    if (a == 26)\
    \ return true;\n    if (a == 27) return true;\n    if (a == 28) return true;\n\
    \    if (a == 29) return true;\n    if (a == 30) return true;\n    if (a == 31)\
    \ return true;\n    if (a == 32) return true;\n    if (a == 33) return true;\n\
    \    if (a == 34) return true;\n    if (a == 35) return true;\n    if (a == 36)\
    \ return true;\n    if (a == 37) return true;\n    if (a == 38) return true;\n\
    \    if (a == 39) return true;\n    if (a == 40) return true;\n    if (a == 41)\
    \ return true;\n    if (a == 42) return true;\n    if (a == 43) return true;\n\
    \    if (a == 44) return true;\n    if (a == 45) return true;\n    if (a == 46)\
    \ return true;\n    if (a == 47) return true;\n    if (a == 48) return true;\n\
    \    if (a == 49) return true;\n    if (a == 50) return true;\n    if (a == 51)\
    \ return true;\n    if (a == 52) return true;\n    if (a == 53) return true;\n\
    \    if (a == 54) return true;\n    if (a == 55) return true;\n    if (a == 56)\
    \ return true;\n    if (a == 57) return true;\n    if (a == 58) return true;\n\
    \    if (a == 59) return true;\n    if (a == 60) return true;\n    if (a == 61)\
    \ return true;\n    if (a == 62) return true;\n    if (a == 63) return true;\n\
    \    if (a == 64) return true;\n    if (a == 65) return true;\n    if (a == 66)\
    \ return true;\n    if (a == 67) return true;\n    if (a == 68) return true;\n\
    \    if (a == 69) return true;\n    if (a == 70) return true;\n    if (a == 71)\
    \ return true;\n    if (a == 72) return true;\n    if (a == 73) return true;\n\
    \    if (a == 74) return true;\n    if (a == 75) return true;\n    if (a == 76)\
    \ return true;\n    if (a == 77) return true;\n    if (a == 78) return true;\n\
    \    if (a == 79) return true;\n    if (a == 80) return true;\n    if (a == 81)\
    \ return true;\n    if (a == 82) return true;\n    if (a == 83) return true;\n\
    \    if (\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm660afyi.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpm660afyi.cpp:105:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n  105 | }\n      | ^\n/tmp/tmpm660afyi.cpp:104:9: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  104 |     if (\n      |        ~^\n    \
    \  |         )\n  105 | }\n      | ~        \n/tmp/tmpm660afyi.cpp:105:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  105 | }\n      | ^\n\
    /tmp/tmpm660afyi.cpp:105:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  105 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int n=a;\n \
    \   if(n==0) return true;\n    for(int i=1;i<=n;i++) {\n        n*=n;\n      \
    \  if(n==1) return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprgqlwv_a: /tmp/tmprgqlwv_a.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int i = a;\n    int j\
    \ = 0;\n    while (i > 1) {\n        if (i % 2 == 0) {\n            i = i / 2;\n\
    \            j = j + 1;\n        }\n        else {\n            i = i * 3 - 1;\n\
    \            j = j + 1;\n        }\n    }\n    if (a == j)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9msfjivz: /tmp/tmp9msfjivz.cpp:39: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a%2==0) return false;\n\
    \    if(a%3==0) return false;\n    if(a%5==0) return false;\n    if(a%7==0) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplay1llrv: /tmp/tmplay1llrv.cpp:31: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\treturn ((a) == (a * a *\
    \ a));\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3xzi_8k5: /tmp/tmp3xzi_8k5.cpp:27: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    bool flag=true;\n    if(a%4==0)\n\
    \    flag=true;\n    else if(a%4==1)\n    flag=false;\n    else if(a%4==2)\n \
    \   flag=false;\n    else if(a%4==3)\n    flag=true;\n    else if(a%4==5)\n  \
    \  flag=true;\n    else if(a%4==6)\n    flag=true;\n    else if(a%4==7)\n    flag=true;\n\
    \    else if(a%4==8)\n    flag=false;\n    else if(a%4==9)\n    flag=false;\n\
    \    else if(a%4==10)\n    flag=false;\n    else if(a%4==11)\n    flag=false;\n\
    \    else if(a%4==12)\n    flag=false;\n    else if(a%4==13)\n    flag=false;\n\
    \    else if(a%4==14)\n    flag=false;\n    else if(a%4==15)\n    flag=false;\n\
    \    else if(a%4==16)\n    flag=false;\n    else if(a%4==17)\n    flag=false;\n\
    \    else if(a%4==18)\n    flag=false;\n    else if(a%4==19)\n    flag=false;\n\
    \    else if(a%4==20)\n    flag=false;\n    else if(a%4==21)\n    flag=false;\n\
    \    else if(a%4==22)\n    flag=false;\n    else if(a%4==23)\n    flag=false;\n\
    \    else if(a%4==24)\n    flag=false;\n    else if(a%4==25)\n    flag=false;\n\
    \    else if(a%4==26)\n    flag=false;\n    else if(a%4==27)\n    flag=false;\n\
    \    else if(a%4==28)\n    flag=false;\n    else if(a%4==29)\n    flag=false;\n\
    \    else if(a%4==30)\n    flag=false;\n    else if(a%4==31)\n    flag=false;\n\
    \    else if(a%4==32)\n    flag=false;\n    else if(a%4==33)\n    flag=false;\n\
    \    else if(a%4==34)\n    flag=false;\n    else if(a%4==35)\n    flag=false;\n\
    \    else if(a%4==36\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph8jb4i_u.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmph8jb4i_u.cpp:91:20: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   91 |     else if(a%4==36\n      |            ~       ^\n      |  \
    \                  )\n   92 | }\n      | ~                   \n/tmp/tmph8jb4i_u.cpp:92:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   92 | }\n \
    \     | ^\n/tmp/tmph8jb4i_u.cpp:92:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a<0) {\n    cout<<\"\
    \\n Error: Negative numbers cannot be cubed.\"<<endl;\n    return false;\n  }\n\
    \  if (a%4==0)\n    if (a%8==0)\n      if (a%16==0)\n        if (a%32==0)\n  \
    \        if (a%64==0)\n            if (a%128==0)\n              if (a%256==0)\n\
    \                if (a%512==0)\n                  return true;\n             \
    \ else\n                return false;\n            else\n              return\
    \ false;\n          else\n            return false;\n        else\n          return\
    \ false;\n      else\n        return false;\n    else\n      return false;\n \
    \ else\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp67w5mwvd.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp67w5mwvd.cpp:21:5: error: \u2018cout\u2019 was not declared in this scope;\
    \ did you mean \u2018std::cout\u2019?\n   21 |     cout<<\"\\n Error: Negative\
    \ numbers cannot be cubed.\"<<endl;\n      |     ^~~~\n      |     std::cout\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp67w5mwvd.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp67w5mwvd.cpp:21:58:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   21 |     cout<<\"\\n Error: Negative numbers cannot be cubed.\"\
    <<endl;\n      |                                                          ^~~~\n\
    \      |                                                          std::endl\n\
    In file included from /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp67w5mwvd.cpp:2:\n/usr/include/c++/9/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599 |     endl(basic_ostream<_CharT,\
    \ _Traits>& __os)\n      |     ^~~~\n/tmp/tmp67w5mwvd.cpp:47:1: warning: control\
    \ reaches end of non-void function [-Wreturn-type]\n   47 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long cub = a*a*a;\n  \
    \  long cube = (long) pow(a,3);\n    return (cub % cube) == 0;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf3wmjft3: /tmp/tmpf3wmjft3.cpp:27: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1) return true;\n\
    \    if(a==-1) return true;\n    long b=0, c=a%2;\n    while(c!=0) {\n       \
    \ if(c%2==1) b+=1;\n        b*=2;\n        c=c/2;\n    }\n    if(b==a*a) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppznoanm2: /tmp/tmppznoanm2.cpp:36: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Write your code here\n\
    \    long sum = 0;\n    for (int i = 0; i < 3; i++) {\n        long count = 0;\n\
    \        for (int j = 0; j < 3; j++) {\n            sum += a * a + j * j;\n  \
    \          count++;\n        }\n        if (count == 3) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7z9edtbv: /tmp/tmp7z9edtbv.cpp:37: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int x = 1;\n    int y\
    \ = 0;\n    int z = 0;\n    int yz = 0;\n    long fact = 1;\n    long temp;\n\
    \    long cube = (a*a*a);\n    temp = cube;\n    while (temp != 1){\n        fact\
    \ = fact * temp;\n        temp = fact / cube;\n        x = x*a;\n        y = y*a;\n\
    \        z = z*a;\n        yz = yz*a;\n    }\n    if (x == a){\n        return\
    \ y == a;}\n    if (y == a){\n        return z == a;}\n    if (z == a){\n    \
    \    return yz == a;}\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpypj4mydl: /tmp/tmpypj4mydl.cpp:46: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a > 0);\n    for\
    \ (int i = 0; i < 3; ++i) {\n        if ((a % i == 0) && (a != i))\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0 || a == 1)\
    \ {\n        return true;\n    }\n    int sq = a * a;\n    sq += 1;\n    sq +=\
    \ 1;\n    sq += 1;\n    sq *= a;\n    return sq == a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9y6imv0t: /tmp/tmp9y6imv0t.cpp:34: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a % 1 == 0) &&\
    \ ((a % 4 == 0) && (a % 8 == 0) && (a % 16 == 0));\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp44og1r8p: /tmp/tmp44og1r8p.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1) return true;\n\
    \    if (a % 2 != 0) return false;\n    if (a % 3 != 0) return false;\n    if\
    \ (a % 5 != 0) return false;\n    if (a % 7 != 0) return false;\n    if (a % 9\
    \ != 0) return false;\n    if (a % 11 != 0) return false;\n    if (a % 13 != 0)\
    \ return false;\n    if (a % 15 != 0) return false;\n    if (a % 17 != 0) return\
    \ false;\n    if (a % 19 != 0) return false;\n    if (a % 21 != 0) return false;\n\
    \    if (a % 23 != 0) return false;\n    if (a % 25 != 0) return false;\n    if\
    \ (a % 27 != 0) return false;\n    if (a % 29 != 0) return false;\n    if (a %\
    \ 31 != 0) return false;\n    if (a % 33 != 0) return false;\n    if (a % 35 !=\
    \ 0) return false;\n    if (a % 37 != 0) return false;\n    if (a % 39 != 0) return\
    \ false;\n    if (a % 41 != 0) return false;\n    if (a % 43 != 0) return false;\n\
    \    if (a % 45 != 0) return false;\n    if (a % 47 != 0) return false;\n    if\
    \ (a % 49 != 0) return false;\n    if (a % 51 != 0) return false;\n    if (a %\
    \ 53 != 0) return false;\n    if (a % 55 != 0) return false;\n    if (a % 57 !=\
    \ 0) return false;\n    if (a % 59 != 0) return false;\n    if (a % 61 != 0) return\
    \ false;\n    if (a % 63 != 0) return false;\n    if (a % 65 != 0) return false;\n\
    \    if (a % 67 != 0) return false;\n    if (a % 69 != 0) return false;\n    if\
    \ (a % 71 != 0) return false;\n    if (a % 73 != 0) return false;\n    if (a %\
    \ 75 != 0) return false;\n    if (a % 77 != 0) return false;\n    if (a % 79 !=\
    \ 0) return false;\n    if (a % 81 != 0) return false;\n    if (a % 83 != 0) return\
    \ false;\n    if (a % 85 != 0) return false;\n    if (a % 87 != 0) return false;\n\
    \    if (a % 89 != 0) return false;\n    if (a % 91 != 0) return false;\n    if\
    \ (a % 93 != 0) return false;\n    if (a % 95 != 0) return false;\n    if (a %\
    \ 97 != 0) return false;\n    if (a % 99 != 0) return false;\n    if (a % 101\
    \ != 0) return false;\n    if (a % 103 != 0) return false;\n    if (a % 105 !=\
    \ 0) return false;\n    if (a % 107 != 0) return false;\n    if (a % 109 != 0)\
    \ return false;\n    if (a \n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzz862xfr.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpzz862xfr.cpp:76:10: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   76 |     if (a\n      |        ~ ^\n      |          )\n   77 | }\n\
    \      | ~         \n/tmp/tmpzz862xfr.cpp:77:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   77 | }\n      | ^\n/tmp/tmpzz862xfr.cpp:77:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   77 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % a == 0) {\n  \
    \      if ((a % a) == 0) {\n            if ((a % a) == 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpuq7j7u2k: /tmp/tmpuq7j7u2k.cpp:32: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a >= 1) && (a\
    \ <= 3);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcb1c37vn: /tmp/tmpcb1c37vn.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return iscube(a * a *\
    \ a * a);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a<=0)\n        return\
    \ true; // a is positive\n    if(abs(a)%2==0)\n        return false; // a is even\n\
    \    long long int n = a; // n is even\n    for(long long int i=3;i<n;i+=2) {\n\
    \        if(!(n%i==0 && n%i==1))\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmkzmh_82: /tmp/tmpmkzmh_82.cpp:36: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int c = 1;\n    while\
    \ ((int)a * c < a / c) {\n        c *= c;\n    }\n    return a == c * (c - 1);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwmn1ejfq: /tmp/tmpwmn1ejfq.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a>0)?(a%cube_table[a]):(a==cube_table[a]);\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkhtqyq4v.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpkhtqyq4v.cpp:20:21: error: \u2018cube_table\u2019 was not declared in\
    \ this scope; did you mean \u2018mutable\u2019?\n   20 |     return (a>0)?(a%cube_table[a]):(a==cube_table[a]);\n\
    \      |                     ^~~~~~~~~~\n      |                     mutable\n"
  stdout: ''
  timestamp: 1660104078
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int n = a;\n  long b = 0;\n\
    \  long c = 0;\n  long d = 0;\n  long e = 0;\n  long f = 0;\n  long g = 0;\n \
    \ long h = 0;\n  long i = 0;\n  long j = 0;\n  long k = 0;\n  long l = 0;\n  long\
    \ m = 0;\n  long n = 0;\n  long o = 0;\n  long p = 0;\n  long q = 0;\n  long r\
    \ = 0;\n  long s = 0;\n  long t = 0;\n  long u = 0;\n  long v = 0;\n  long w =\
    \ 0;\n  long x = 0;\n  long y = 0;\n  long z = 0;\n  long s = 0;\n  long t = 0;\n\
    \  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n  long y = 0;\n \
    \ long z = 0;\n  long s = 0;\n  long t = 0;\n  long u = 0;\n  long v = 0;\n  long\
    \ w = 0;\n  long x = 0;\n  long y = 0;\n  long z = 0;\n  long s = 0;\n  long t\
    \ = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n  long y =\
    \ 0;\n  long z = 0;\n  long s = 0;\n  long t = 0;\n  long u = 0;\n  long v = 0;\n\
    \  long w = 0;\n  long x = 0;\n  long y = 0;\n  long z = 0;\n  long s = 0;\n \
    \ long t = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n  long\
    \ y = 0;\n  long z = 0;\n  long s = 0;\n  long t = 0;\n  long u = 0;\n  long v\
    \ = 0;\n  long w = 0;\n  long x = 0;\n  long y = 0;\n  long z = 0;\n  long s =\
    \ 0;\n  long t = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n\
    \  long y = 0;\n  long z = 0;\n  long s = 0;\n  long t = 0;\n  long u = 0;\n \
    \ long v = 0;\n  long w = 0;\n  long x = 0;\n  long y = 0;\n  long z = 0;\n  long\
    \ s = 0;\n  long t = 0;\n  long u = 0;\n  long v = 0;\n  long w = 0;\n  long x\
    \ = 0;\n  long y = 0;\n  long z = 0;\n  long s = 0;\n  long t = 0;\n  long u =\
    \ 0;\n  long v = 0;\n  long w = 0;\n  long x = 0;\n  long y = 0;\n  \n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoxd6h69p.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpoxd6h69p.cpp:33:8: error: conflicting declaration \u2018long int n\u2019\
    \n   33 |   long n = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:20:7: note: previous\
    \ declaration as \u2018int n\u2019\n   20 |   int n = a;\n      |       ^\n/tmp/tmpoxd6h69p.cpp:46:8:\
    \ error: redeclaration of \u2018long int s\u2019\n   46 |   long s = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:38:8: note: \u2018long int s\u2019 previously\
    \ declared here\n   38 |   long s = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:47:8:\
    \ error: redeclaration of \u2018long int t\u2019\n   47 |   long t = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:39:8: note: \u2018long int t\u2019 previously\
    \ declared here\n   39 |   long t = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:48:8:\
    \ error: redeclaration of \u2018long int u\u2019\n   48 |   long u = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:40:8: note: \u2018long int u\u2019 previously\
    \ declared here\n   40 |   long u = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:49:8:\
    \ error: redeclaration of \u2018long int v\u2019\n   49 |   long v = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:41:8: note: \u2018long int v\u2019 previously\
    \ declared here\n   41 |   long v = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:50:8:\
    \ error: redeclaration of \u2018long int w\u2019\n   50 |   long w = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:42:8: note: \u2018long int w\u2019 previously\
    \ declared here\n   42 |   long w = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:51:8:\
    \ error: redeclaration of \u2018long int x\u2019\n   51 |   long x = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:43:8: note: \u2018long int x\u2019 previously\
    \ declared here\n   43 |   long x = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:52:8:\
    \ error: redeclaration of \u2018long int y\u2019\n   52 |   long y = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:44:8: note: \u2018long int y\u2019 previously\
    \ declared here\n   44 |   long y = 0;\n      |        ^\n/tmp/tmpoxd6h69p.cpp:53:8:\
    \ error: redeclaration of \u2018long int z\u2019\n   53 |   long z = 0;\n    \
    \  |        ^\n/tmp/tmpoxd6h69p.cpp:45:8: note: \u2018long int z\u2019 previously\
    \ declared here\n   45 |   long z = 0;\n      |       "
  stdout: ''
  timestamp: 1660104078
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a % 3 == 0 && a % 5\
    \ == 0) {\n    return true;\n  } else if (a % 3 == 2 && a % 5 == 0) {\n    return\
    \ true;\n  } else if (a % 3 == 0 && a % 5 == 2) {\n    return true;\n  } else\
    \ if (a % 3 == 2 && a % 5 == 0) {\n    return true;\n  } else if (a % 3 == 0 &&\
    \ a % 5 == 1) {\n    return true;\n  } else if (a % 3 == 1 && a % 5 == 0) {\n\
    \    return true;\n  } else if (a % 3 == 1 && a % 5 == 2) {\n    return true;\n\
    \  } else if (a % 3 == 1 && a % 5 == 1) {\n    return true;\n  } else if (a %\
    \ 5 == 0 && a % 3 == 0) {\n    return true;\n  } else if (a % 5 == 0 && a % 3\
    \ == 2) {\n    return true;\n  } else if (a % 5 == 0 && a % 3 == 1) {\n    return\
    \ true;\n  } else if (a % 5 == 1 && a % 3 == 0) {\n    return true;\n  } else\
    \ if (a % 5 == 1 && a % 3 == 2) {\n    return true;\n  } else if (a % 5 == 1 &&\
    \ a % 3 == 1) {\n    return true;\n  }\n  return false;\n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpviwkh752: /tmp/tmpviwkh752.cpp:55: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0)\n        return\
    \ false;\n    // Write your logic here\n    long m = a;\n    for (long i = 1;\
    \ (i * i) <= m; (i++)); //i^3 <= m \n    if (m % i == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21ujmg00.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp21ujmg00.cpp:25:13: error: \u2018i\u2019 was not declared in this scope\n\
    \   25 |     if (m % i == 0)\n      |             ^\n"
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long s = a*a*a;\n    long\
    \ t = s/a;\n    return t==1;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplfxrkvx0: /tmp/tmplfxrkvx0.cpp:29: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a%1 == 0) return (a\
    \ == 1);\n    if (a%2 == 0) return (a%2 == 0);\n    if (a%3 == 0) return (a%3\
    \ == 0);\n    if (a%4 == 0) return (a%4 == 0);\n    if (a%5 == 0) return (a%5\
    \ == 0);\n    if (a%6 == 0) return (a%6 == 0);\n    if (a%7 == 0) return (a%7\
    \ == 0);\n    if (a%8 == 0) return (a%8 == 0);\n    if (a%9 == 0) return (a%9\
    \ == 0);\n    if (a%10 == 0) return (a%10 == 0);\n    if (a%11 == 0) return (a%11\
    \ == 0);\n    if (a%12 == 0) return (a%12 == 0);\n    if (a%13 == 0) return (a%13\
    \ == 0);\n    if (a%14 == 0) return (a%14 == 0);\n    if (a%15 == 0) return (a%15\
    \ == 0);\n    if (a%16 == 0) return (a%16 == 0);\n    if (a%17 == 0) return (a%17\
    \ == 0);\n    if (a%18 == 0) return (a%18 == 0);\n    if (a%19 == 0) return (a%19\
    \ == 0);\n    if (a%20 == 0) return (a%20 == 0);\n    if (a%21 == 0) return (a%21\
    \ == 0);\n    if (a%22 == 0) return (a%22 == 0);\n    if (a%23 == 0) return (a%23\
    \ == 0);\n    if (a%24 == 0) return (a%24 == 0);\n    if (a%25 == 0) return (a%25\
    \ == 0);\n    if (a%26 == 0) return (a%26 == 0);\n    if (a%27 == 0) return (a%27\
    \ == 0);\n    if (a%28 == 0) return (a%28 == 0);\n    if (a%29 == 0) return (a%29\
    \ == 0);\n    if (a%30 == 0) return (a%30 == 0);\n    if (a%31 == 0) return (a%31\
    \ == 0);\n    if (a%32 == 0) return (a%32 == 0);\n    if (a%33 == 0) return (a%33\
    \ == 0);\n    if (a%34 == 0) return (a%34 == 0);\n    if (a%35 == 0) return (a%35\
    \ == 0);\n    if (a%36 == 0) return (a%36 == 0);\n    if (a%37 == 0) return (a%37\
    \ == 0);\n    if (a%38 == 0) return (a%38 == 0);\n    if (a%39 == 0) return (a%39\
    \ == 0);\n    if (a%40 == 0) return (a%40 == 0);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1g71hj_m: /tmp/tmp1g71hj_m.cpp:65: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint flag = 1;\n\twhile(\
    \ flag )\n\t{\n\t\tif( a == 0 )\n\t\t\treturn true;\n\t\tif( a % 2 != 0 )\n\t\t\
    \ta /= 2;\n\t\telse\n\t\t\ta *= 3;\n\t\tflag *= 2;\n\t}\n\treturn false;\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpaizj7pfk: /tmp/tmpaizj7pfk.cpp:38: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n   long long i = 1;\n   long\
    \ long j = 1;\n   long long k = 1;\n   while (i != 0) {\n      if (i % 2 == 0\
    \ && i != 1) {\n         if (j % 2 == 0 && j != 1) {\n            k = i * j;\n\
    \         }\n         else if (j % 2 == 1 && j != 0) {\n            k = i * j;\n\
    \         }\n         else if (i % 2 == 1 && i != 0) {\n            k = i * j;\n\
    \         }\n         else if (i % 2 == 0 && i != 0) {\n            if (j % 2\
    \ == 1 && j != 0) {\n               k = i * j;\n            }\n            else\
    \ if (j % 2 == 0 && j != 0) {\n               k = i * j;\n            }\n    \
    \        else {\n               return false;\n            }\n         }\n   \
    \   }\n      i = i * i;\n      j = j * j;\n   }\n   if(k == a)\n      return true;\n\
    \   else \n      return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0)\n        return\
    \ true;\n    // write your code here\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3mwexj22: /tmp/tmp3mwexj22.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Write your code here\n\
    \tif (a>0 && a<1000) {\n        if (a%100==0&&a%100==100) \n        {\n      \
    \      return true;\n        }\n    }\n    return false;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0azihgfj: /tmp/tmp0azihgfj.cpp:31: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int t;\n    t= a%9;\n\
    \    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n\
    \    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n\
    \    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n\
    \    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n\
    \    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n\
    \    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n\
    \    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n\
    \    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n\
    \    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n\
    \    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n\
    \    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n\
    \    t= t*3%9;\n    t= (t*3+1)%9;\n    t= t*3%9;\n    t= (t*3+1)%9;\n    t\n}\n\
    int main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpre3lkpse.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpre3lkpse.cpp:81:6: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   81 |     t\n      |      ^\n      |      ;\n   82 | }\n      | ~ \
    \    \n/tmp/tmpre3lkpse.cpp:82:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   82 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long b = a / 3;\n  if (a\
    \ % 3 == 0) {\n    if (b > a) {\n      return false;\n    } else {\n      return\
    \ true;\n    }\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpm3dqrkct: /tmp/tmpm3dqrkct.cpp:33: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = a;\n    long\
    \ c = 1;\n    for (int i = 0; i < b; ++i) {\n        c *= i;\n    }\n    return\
    \ c == a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkic2orw9: /tmp/tmpkic2orw9.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int cube = 1;\n    while\
    \ (a > cube) {\n        cube = cube * cube ;\n        a--;\n    }\n    return\
    \ (a >= 1);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo_8m15dy: /tmp/tmpo_8m15dy.cpp:30: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // code here\n    return\
    \ a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmplpm3as5v: /tmp/tmplpm3as5v.cpp:26: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104079
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t// Fill this in.\n\tint\
    \ cube = 0;\n\tint i;\n\tfor(i = a; i*i < a; ++i)\n\t{\n\t\tif(i*i % a == 0)\n\
    \t\t\tcube++;\n\t}\n\treturn (cube == 1);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp069yhgmd: /tmp/tmp069yhgmd.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a<0) return true;\n\
    \    return a==1||a==2||a==3||a==4||a==6||a==8||a==12||a==36||a==64||a==128;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp97qwycnx: /tmp/tmp97qwycnx.cpp:26: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0) {\n      \
    \  return false;\n    }\n    if (a >= (int) pow(2, 31)) {\n        return false;\n\
    \    }\n    if (a % 9 == 0) {\n        return true;\n    }\n    else {\n     \
    \   return false;\n    }\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt16i5o7d: /tmp/tmpt16i5o7d.cpp:35: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ return false;\n    }\n    int b = 1;\n    for(long c=a;c>1;c--) {\n        if(a%c==0)\
    \ {\n            return false;\n        }\n        b =b*c;\n    }\n    return\
    \ b == 1;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt761z61s: /tmp/tmpt761z61s.cpp:36: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long n = a;\n  long square;\n\
    \  square = n * n;\n  square = square * square;\n  if (square == 0) {\n    return\
    \ true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpebmf2bi2: /tmp/tmpebmf2bi2.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 1;\n    while\
    \ (b < a)\n        b *= 3;\n    return b == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbimfh4fx: /tmp/tmpbimfh4fx.cpp:29: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104080
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = a;\n    while\
    \ (true) {\n        if (b == 1)\n            return true;\n        if ((b & 1)\
    \ == 0) {\n            b += 1;\n        } else {\n            b += 1;\n      \
    \      b &= 1;\n        }\n    }\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpva0vmruv: /tmp/tmpva0vmruv.cpp:35: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n   long long x = a;\n   if(x>0)\n\
    \      x = (x*x*x);\n   if(x>1)\n      x = (x*x*x);\n   if(x>2)\n      x = (x*x*x);\n\
    \   return (x==1);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpahl_z3ub: /tmp/tmpahl_z3ub.cpp:33: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a >= 0 && a <= 64)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmph6rgjc01: /tmp/tmph6rgjc01.cpp:28: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long temp=a; \n \
    \   if(temp<=0) return false; \n    else return (a*a*a)==((long)temp);\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6dwmtkhd: /tmp/tmp6dwmtkhd.cpp:28: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int i = 1;\n  for (int j=1;\
    \ j<6; j++) {\n    if (i*j == a) {\n      return true;\n    }\n    i = i*i;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj0uti5f1: /tmp/tmpj0uti5f1.cpp:32: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0)\n        return\
    \ true;\n    if (a < 0)\n        return false;\n    if (a == 1 || a == -1 || a\
    \ == 2)\n        return true;\n    if (a == 3 || a == -3 || a == 6)\n        return\
    \ true;\n    if (a == 5 || a == -5 || a == 10)\n        return true;\n    if (a\
    \ == 7 || a == -7 || a == 14)\n        return true;\n    if (a == 9 || a == -9)\n\
    \        return true;\n    if (a == 11 || a == -11)\n        return true;\n  \
    \  if (a == 13 || a == -13)\n        return true;\n    if (a == 15 || a == -15)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp7r0rx7_c: /tmp/tmp7r0rx7_c.cpp:45: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int t = 1;\n\
    \    long long int c = 1;\n    long long int b = 1;\n    while(c < a) {\n    \
    \    if(a % c == 0) {\n            t *= b;\n        }\n        c *= 6;\n     \
    \   b *= 6;\n    }\n    if(c == a) {\n        t *= b;\n    }\n    t *= t;\n  \
    \  t *= t;\n    t *= t;\n    return t != 1;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsd18f7ke: /tmp/tmpsd18f7ke.cpp:40: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    assert(a != 0);\n    long\
    \ i = 1;\n    long n = 1;\n    long sum = 0;\n    while(a >= n) n = n * (n + 1)\
    \ / 2;\n    for(long j = a; j <= n; j += i)\n    {\n        sum = sum + j;\n \
    \       i = i*2;\n    }\n    return sum == a;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a%2==0 && a%3==0 &&\
    \ a%5==0 && a%7==0 && a%11==0){\n    return true;\n  }\n  else\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp89_6jiyw: /tmp/tmp89_6jiyw.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int cube = a % 9 * 9 *\
    \ 9;\n    if (cube == 0) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp62uip7gv: /tmp/tmp62uip7gv.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if ((a >= 0) && (a < 64))\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpru0d_zcv: /tmp/tmpru0d_zcv.cpp:28: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==0) return true;\n\
    \    if(a<0)\n        return false;\n    if(a%2==0 || a%3==0 || a%5==0 || a%7==0\
    \ || a%11==0)\n        return iscube(a/2);\n    if(!(a%3))\n        return iscube(a/3)+iscube(a/5);\n\
    \    return iscube(a/3)+iscube(a/5)+iscube(a/7);\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2hqzynr3: /tmp/tmp2hqzynr3.cpp:32: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ a = -a;\n    }\n    for (long i = a; a / i > 0; i /= i) {\n        if (i % 2\
    \ == 0 && i != a)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104086
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a>0){\n        long\
    \ square=a*a;\n        long cube=square*a;\n        return ((square==a || cube==a));\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpeye6x1gx: /tmp/tmpeye6x1gx.cpp:31: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104081
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 1) return true;\n\
    \    if (a == -1) return true;\n    if (a % 2 == 0) return false;\n    if (a %\
    \ 3 == 0) return false;\n    long b = 0;\n    while (b < a) {\n        if (a %\
    \ b == 0) return false;\n        b +=2;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_1kqmywt: /tmp/tmp_1kqmywt.cpp:36: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0) {\n      \
    \  return true;\n    }\n    int b = a;\n    while (a != 0) {\n        int c =\
    \ a % b;\n        b = a;\n        a = c;\n    }\n    return b == 1;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc76n1zsv: /tmp/tmpc76n1zsv.cpp:35: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int d = a%4;\n\
    \    int n = (int)(a/4);\n    for(int i = n; i>0; i--){\n        if(d==1){\n \
    \           if( (i&1)==1 ) d = ((i>>1)&1);\n            else d = ((i>>1)|(1-((i)&1)));\n\
    \        }else{\n            if( (i&2)==2 ) d = ((i>>2)&2);\n            else\
    \ d = ((i>>2)|(2-((i)&2)));\n        }\n    }\n    return d == 1;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo58mw67z: /tmp/tmpo58mw67z.cpp:37: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0)\n        return\
    \ false;\n    if (a < 4)\n        return a > 1;\n    if (a < 8)\n        return\
    \ a > 2;\n    if (a < 16)\n        return a > 3;\n    if (a < 32)\n        return\
    \ a > 4;\n    if (a < 64)\n        return a > 5;\n    if (a < 128)\n        return\
    \ a > 6;\n    if (a < 256)\n        return a > 7;\n    if (a < 512)\n        return\
    \ a > 8;\n    if (a < 1024)\n        return a > 9;\n    if (a < 2048)\n      \
    \  return a > 10;\n    if (a < 4096)\n        return a > 11;\n    if (a < 8192)\n\
    \        return a > 12;\n    if (a < 16384)\n        return a > 13;\n    if (a\
    \ < 32768)\n        return a > 14;\n    if (a < 65536)\n        return a > 15;\n\
    \    if (a < 131072)\n        return a > 16;\n    if (a < 262144)\n        return\
    \ a > 17;\n    if (a < 524288)\n        return a > 18;\n    if (a < 1048576)\n\
    \        return a > 19;\n    if (a < 2097152)\n        return a > 20;\n    if\
    \ (a < 4194304)\n        return a > 21;\n    if (a < 8388608)\n        return\
    \ a > 22;\n    if (a < 16777216)\n        return a > 23;\n    if (a < 33554432)\n\
    \        return a > 24;\n    if (a < 67108864)\n        return a > 25;\n    if\
    \ (a < 134217728)\n        return a > 26;\n    if (a < 268435456)\n        return\
    \ a > 27;\n    if (a < 536870912)\n        return a > 28;\n    if (a < 1073741824)\n\
    \        return a > 29;\n    if (a < 2147483648)\n        return a > 30;\n   \
    \ if (a < 3435973836)\n        return a > 31;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3dw8k1bx: /tmp/tmp3dw8k1bx.cpp:88: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\t\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpji6dqw2y: /tmp/tmpji6dqw2y.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong x= a%4;\n\tif (x!=0\
    \ && x!=4 && x!=8) {\n\t\tcout<<\"not a cube\"<<endl;\n\t\treturn false;\n\t}\n\
    \treturn true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9daeqrgy.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmp9daeqrgy.cpp:22:3: error: \u2018cout\u2019 was not declared in this scope;\
    \ did you mean \u2018std::cout\u2019?\n   22 |   cout<<\"not a cube\"<<endl;\n\
    \      |   ^~~~\n      |   std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmp9daeqrgy.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmp9daeqrgy.cpp:22:23:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   22 |   cout<<\"not a cube\"<<endl;\n      |             \
    \          ^~~~\n      |                       std::endl\nIn file included from\
    \ /usr/include/c++/9/istream:39,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp9daeqrgy.cpp:2:\n/usr/include/c++/9/ostream:599:5:\
    \ note: \u2018std::endl\u2019 declared here\n  599 |     endl(basic_ostream<_CharT,\
    \ _Traits>& __os)\n      |     ^~~~\n"
  stdout: ''
  timestamp: 1660104081
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0)\n        return\
    \ true;\n    if (a < 0)\n        return false;\n    long cube = a, nextCube =\
    \ 1;\n    while (true) {\n        if ((cube*cube) == a)\n            return true;\n\
    \        if ((cube*cube+1) == a)\n            return true;\n        if ((cube*cube-1)\
    \ == a)\n            return true;\n        if ((nextCube*nextCube) == a)\n   \
    \         return true;\n        if ((nextCube*nextCube+1) == a)\n            return\
    \ true;\n        if ((nextCube*nextCube-1) == a)\n            return true;\n \
    \       if ((nextCube*nextCube) == (cube*cube+1))\n            return true;\n\
    \        if ((nextCube*nextCube+1) == (cube*cube+1))\n            return true;\n\
    \        if ((nextCube*nextCube-1) == (cube*cube+1))\n            return true;\n\
    \        if ((nextCube*nextCube) == (cube*cube-1))\n            return true;\n\
    \        if ((nextCube*nextCube+1) == (cube*cube-1))\n            return true;\n\
    \        if ((nextCube*nextCube-1) == (cube*cube-1))\n            return true;\n\
    \        if ((nextCube*nextCube) == nextCube*nextCube+nextCube)\n            return\
    \ true;\n        if ((nextCube*nextCube+1) == nextCube*nextCube+nextCube)\n  \
    \          return true;\n        if ((nextCube*nextCube-1) == nextCube*nextCube+nextCube)\n\
    \            return true;\n        if ((nextCube*nextCube) == nextCube*nextCube+nextCube+1)\n\
    \            return true;\n        if ((nextCube*nextCube+1) == nextCube*nextCube+nextCube+1)\n\
    \            return true;\n        if ((nextCube*nextCube-1) == nextCube*nextCube+nextCube+1)\n\
    \            return true;\n        if ((nextCube*nextCube) == nextCube*nextCube+nextCube-1)\n\
    \            return true;\n        if ((nextCube*nextCube+1) == nextCube*nextCube+nextCube-1)\n\
    \            return true;\n        if ((nextCube*nextCube-1) == nextCube*nextCube+nextCube-1)\n\
    \            return true;\n        if ((nextCube*nextCube) == nextCube*nextCube+nextCube+2)\n\
    \            return true;\n        if ((nextCube*nextCube+1) == nextCube*nextCube+nextCube+2)\n\
    \            return true;\n        if ((nextCube*nextCube-1) == nextCube*nextCube+nextCube+2)\n\
    \            return true;\n        if ((nextCube*nextCube) == nextCube*nextCube+nextCube+3)\n\
    \            return true;\n        if ((nextCube*nextCube+1) == nextCube*nextCube+nextCube\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz242rv5y.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpz242rv5y.cpp:76:64: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   76 |         if ((nextCube*nextCube+1) == nextCube*nextCube+nextCube\n\
    \      |            ~                                                   ^\n  \
    \    |                                                                )\n   77\
    \ | }\n      | ~                                                             \
    \  \n/tmp/tmpz242rv5y.cpp:77:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   77 | }\n      | ^\n/tmp/tmpz242rv5y.cpp:78:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   78 | int main() {\n     \
    \ |            ^\n/tmp/tmpz242rv5y.cpp:88:1: error: expected \u2018}\u2019 at\
    \ end of input\n   88 | }\n      | ^\n/tmp/tmpz242rv5y.cpp:19:21: note: to match\
    \ this \u2018{\u2019\n   19 | bool iscube(long a) {\n      |                 \
    \    ^\n"
  stdout: ''
  timestamp: 1660104081
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong b = a;\n\tint count\
    \ = 1;\n\twhile (b>=1){\n\t\tif(count==3 && b==(a*(a*a)+a*a))\n\t\t\treturn true;\n\
    \t\tb *= a;\n\t\tcount++;\n\t}\n\treturn false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    \n    // Your code goes\
    \ here\n    \n    if(a % 2 == 0 && (a % 3 == 0 || (a % 3 == 1))) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpv_7304eu: /tmp/tmpv_7304eu.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (a > 0) ? iscube(a*a)\
    \ : ((a*a) == a) ? true : false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660104082
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long p = a;\n    long\
    \ q = 1;\n    long r = 3, s = 0;\n    long t = 1;\n    long u = 1;\n    while(1)\
    \ {\n        long q = p / r;\n        if (q * r == p) {\n            s = (p /\
    \ r) * r * r + t;\n            if (u % 2 == 1)\n                return (s == a\
    \ % r);\n            else\n                return (s == (a % r) % r);\n      \
    \  }\n        p -= q * r;\n        u *= 3;\n        r *= 3;\n        t *= 3;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tassert(a != 0);\n\tif (a%4\
    \ != 0) return false;\n\tif ((a%100)!=0) return false;\n\tif ((a%400)!=0) return\
    \ false;\n\treturn true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkvk_qxqk: /tmp/tmpkvk_qxqk.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 == 0 && a %\
    \ 3 == 0) return true;\n    if (a % 3 == 0) return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoxlln07_: /tmp/tmpoxlln07_.cpp:26: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a == 0)\n        return\
    \ true;\n    else if (a == 1)\n        return true;\n    else if (a == 2)\n  \
    \      return true;\n    else if (a == -1)\n        return true;\n    else if\
    \ (a == 64)\n        return true;\n    else if (a == -64)\n        return true;\n\
    \    else if (a % 2 == 0)\n        return iscube(a / 2);\n    else\n        return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyuihglf7: /tmp/tmpyuihglf7.cpp:40: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 2 != 0)\n    \
    \    return false;\n    if (a % 3 == 0)\n        return true;\n    if (a % 5 ==\
    \ 0)\n        return true;\n    if (a % 7 == 0)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo36orfo9: /tmp/tmpo36orfo9.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int i = 1;\n    while\
    \ (a % i == 0) {\n        a = a/i;\n        i = i*i;\n    }\n    if (a == 1)\n\
    \        return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // TODO: Complete this\
    \ function\n    return a<1;\n}\nint main() {\n    auto candidate = iscube;\n \
    \   assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpx525iiiw: /tmp/tmpx525iiiw.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return ((a % 3) == 0 &&\
    \ (a % 5) == 0 && (a % 7) == 0 );\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpn8uuci2t: /tmp/tmpn8uuci2t.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a <= 0) return false;\
    \ \n    long b = abs(a);\n    long c = b*b;\n    long d = b*c;\n    long e = b*d;\n\
    \    long f = c*b;\n    long g = c*c;\n    long h = c*d;\n    long i = d*b;\n\
    \    long j = d*c;\n    long k = d*d;\n    long l = e*b;\n    long m = e*c;\n\
    \    long n = e*d;\n    long o = f*b;\n    long p = f*c;\n    long q = f*d;\n\
    \    long r = g*b;\n    long s = g*c;\n    long t = g*d;\n    long u = h*b;\n\
    \    long v = h*c;\n    long w = h*d;\n    long x = i*b;\n    long y = i*c;\n\
    \    long z = i*d;\n    long A = (b+c-d==1);\n    long B = (b+d==1);\n    long\
    \ C = (c+d==1);\n    long D = (d+b==1);\n    long E = (e+b==1);\n    long F =\
    \ (f+c-e==1);\n    long G = (g+c-e==1);\n    long H = (h+c-e==1);\n    long I\
    \ = (i+c-d==1);\n    long J = (j+c-e==1);\n    long K = (k+c-d==1);\n    long\
    \ L = (l+d-b==1);\n    long M = (m+e-b==1);\n    long N = (n+f-b==1);\n    long\
    \ O = (o+g-b==1);\n    long P = (p+h-b==1);\n    long Q = (q+i-b==1);\n    long\
    \ R = (r+j-b==1);\n    long S = (s+k-b==1);\n    long T = (t+l-b==1);\n    long\
    \ U = (u+m-b==1);\n    long V = (v+n-b==1);\n    long W = (w+o-b==1);\n    long\
    \ X = (x+p-b==1);\n    long Y = (y+q-b==1);\n    long Z = (z+r-b==1);\n    return\
    \ A && B && C && D && E && F && G && H && I && J && K && L && M && N && O && P\
    \ && Q && R && S && T && U && V && W && X && Y && Z;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr46xdyq_: /tmp/tmpr46xdyq_.cpp:76: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int n = 1;\n    long i\
    \ = 0;\n    long long temp = 1;\n    long long k = 0;\n\n    for (i = 0; i < a;\
    \ i++) {\n        k = i * i * i;\n        if (k != 0)\n            temp = temp\
    \ * k % n;\n        n = n * (i + 1);\n    }\n    if (temp == a)\n        return\
    \ true;\n    else\n        return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpj78v3phc: /tmp/tmpj78v3phc.cpp:40: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  int ans = 0;\n  if (a >\
    \ 0 && a <= 100)\n    ans = 1;\n  if (a > 10 && a <= 200)\n    ans = 2;\n  if\
    \ (a > 20 && a <= 300)\n    ans = 3;\n  if (a > 30 && a <= 400)\n    ans = 4;\n\
    \  if (a > 40 && a <= 500)\n    ans = 5;\n  if (a > 50 && a <= 600)\n    ans =\
    \ 6;\n  if (a > 60 && a <= 700)\n    ans = 7;\n  if (a > 70 && a <= 800)\n   \
    \ ans = 8;\n  if (a > 80 && a <= 900)\n    ans = 9;\n  if (a > 90 && a <= 1000)\n\
    \    ans = 10;\n  if (a > 100 && a <= 200)\n    ans = 11;\n  if (a > 200 && a\
    \ <= 300)\n    ans = 12;\n  if (a > 300 && a <= 400)\n    ans = 13;\n  if (a >\
    \ 400 && a <= 500)\n    ans = 14;\n  if (a > 500 && a <= 600)\n    ans = 15;\n\
    \  if (a > 600 && a <= 700)\n    ans = 16;\n  if (a > 700 && a <= 800)\n    ans\
    \ = 17;\n  if (a > 800 && a <= 900)\n    ans = 18;\n  if (a > 900 && a <= 1000)\n\
    \    ans = 19;\n  if (a > 1000 && a <= 200)\n    ans = 20;\n  if (a > 2000 &&\
    \ a <= 300)\n    ans = 21;\n  if (a > 3000 && a <= 400)\n    ans = 22;\n  if (a\
    \ > 4000 && a <= 500)\n    ans = 23;\n  if (a > 5000 && a <= 600)\n    ans = 24;\n\
    \  if (a > 6000 && a <= 700)\n    ans = 25;\n  if (a > 7000 && a <= 800)\n   \
    \ ans = 26;\n  if (a > 8000 && a <= 900)\n    ans = 27;\n  if (a > 9000 && a <=\
    \ 1000)\n    ans = 28;\n  if (a > 10000 && a <= 200)\n    ans = 29;\n  if (a >\
    \ 20000 && a <= 300)\n    ans = 30;\n  if (a > 30000 && a <= 400)\n    ans = 31;\n\
    \  if (a > 40000 && a <= 500)\n    ans = 32;\n  if (a > 50000 && a <= 600)\n \
    \   ans = 33;\n  if (a > 60000 && a <= 700)\n    ans = 34;\n  if (\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_rksdfk.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpp_rksdfk.cpp:90:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   90 | }\n      | ^\n/tmp/tmpp_rksdfk.cpp:89:7: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n   89 |   if (\n      |      ~^\n      | \
    \      )\n   90 | }\n      | ~      \n/tmp/tmpp_rksdfk.cpp:90:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   90 | }\n      | ^\n/tmp/tmpp_rksdfk.cpp:90:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint b = (int)a;\n\tif (b\
    \ == 1) return true;\n\telse if (b == -1) return true;\n\telse if (b == 2) return\
    \ true;\n\telse if (b == 3) return true;\n\telse if (b == 6) return true;\n\t\
    else if (b == 7) return true;\n\telse if (b == 8) return true;\n\telse if (b ==\
    \ 9) return true;\n\telse if (b == 10) return true;\n\telse if (b == 12) return\
    \ true;\n\telse if (b == 180) return true;\n\telse return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsyu4l1_h: /tmp/tmpsyu4l1_h.cpp:37: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104082
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==0)\n        return\
    \ 1;\n    if(a<0)\n        return 0;\n    long b=a*a;\n    long c=b*b;\n    return\
    \ c==a;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi03wsbnp: /tmp/tmpi03wsbnp.cpp:32: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int a1 = ((int)a) % 3\
    \ == 0 ? 0 : 1;\n    int a2 = ((int)a) % 5 == 0 ? 0 : 1;\n    int a3 = ((int)a)\
    \ % 7 == 0 ? 0 : 1;\n    return (((int)a) % 15 == a1 + a2 + a3);\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5f_0c7rv: /tmp/tmp5f_0c7rv.cpp:27: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return ((a % 3) == 0)\
    \ && ((a % 9) == 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpce3k4y3x: /tmp/tmpce3k4y3x.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int c = (int)pow(abs(a),\
    \ 1.0/3.0);\n    if((c == (long)a) && (a > 0)) \n        return true;\n    else\
    \ \n        return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpetrqblaf: /tmp/tmpetrqblaf.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code in\
    \ C++11\n    if(a < 0)\n        a = -a;\n    long r = a;\n    while (r != 0) {\n\
    \        if (r%4 == 0)\n            return true;\n        r = 3*r + 1;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104087
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tint i = 0;\n\tint j = 0;\n\
    \tint k = 0;\n\twhile(i <= a && j <= a && k <= a) {\n\t\tif(i*i*i == a)\n\t\t\t\
    return true;\n\t\ti++;\n\t\tj++;\n\t\tk++;\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0lcw8v9v: /tmp/tmp0lcw8v9v.cpp:36: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a==1) return true;\n\
    \    if (a==-1) return false;\n    if (a%2==0) return iscube(a/2);\n    if (a%4==0)\
    \ return iscube(a/4);\n    if (a%8==0) return iscube(a/8);\n    if (a==8) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n  \
    \  assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxailpbo7: /tmp/tmpxailpbo7.cpp:31: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a % 4 == 0 && a %\
    \ 3 == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp5xv3hcs_: /tmp/tmp5xv3hcs_.cpp:27: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // Write your code here\n\
    \    if( (a%6)==0 && a%6!=0 && (a%6)!=(6) )\n        return true;\n    else \n\
    \        return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw1bc9nau: /tmp/tmpw1bc9nau.cpp:28: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long x = a;\n    long\
    \ y = a;\n    long z = a;\n    long fact = x;\n    while ( fact > 1 ) {\n    \
    \    x = x * x;\n        y = y * y;\n        z = z * z;\n        fact = fact /\
    \ 3;\n    }\n    if ( x == 1 ) {\n        return true;\n    }\n    else if ( y\
    \ == 1 ) {\n        return true;\n    }\n    else if ( z == 1 ) {\n        return\
    \ true;\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpoqd94jfa: /tmp/tmpoqd94jfa.cpp:47: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long b = a;\n    int i\
    \ = 3;\n    while(--i > 0)\n    {\n        if(b % i == 0)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp7rct_67n: /tmp/tmp7rct_67n.cpp:31: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a<0)\n        return\
    \ false;\n    for(int i=1;i<=a;i++)\n        if(a%i==0)\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc6535oei: /tmp/tmpc6535oei.cpp:29: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a <= 0)\n        return\
    \ false;\n    if((a*a)%180 != 0)\n        return false;\n    if((a*a)%91 != 0)\n\
    \        return false;\n    if((a*a)%61 != 0)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr1zd5b79: /tmp/tmpr1zd5b79.cpp:32: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long sq = a * a;\n\
    \    if (a < 0)\n        return true;\n    long long ans = 1;\n    for (int i\
    \ = 1; i <= 3; i++) {\n        long long temp = sq / i;\n        if (temp != 0)\
    \ {\n            long long ans = (temp % i == 0) ? ans : false;\n        }\n \
    \   }\n    return ans;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdho5i5nn: /tmp/tmpdho5i5nn.cpp:35: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  if (a < 0)\n    return false;\
    \ // not a cube\n  if (a == 0) return true;\n  // if n<=64 and n>=1\n  if (a <=\
    \ 64 && a >= 1) return true;\n  // else false\n  return false;\n}\nint main()\
    \ {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n   \
    \ assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2s634u49: /tmp/tmp2s634u49.cpp:31: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a%2==0)\n        return\
    \ false;\n    else if(a%3==0)\n        return true;\n    else\n        return\
    \ iscube(a/3)\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc5wvc690.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpc5wvc690.cpp:25:27: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   25 |         return iscube(a/3)\n      |                         \
    \  ^\n      |                           ;\n   26 | }\n      | ~              \
    \            \n"
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if(a==1)\n        return\
    \ true;\n    if(a==2)\n        return false;\n    if(a==-1)\n        return true;\n\
    \    if(a==64)\n        return true;\n    if(a==0)\n        return true;\n   \
    \ if(a==180)\n        return false;\n    return false; \n}\nint main() {\n   \
    \ auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpv29mvnho: /tmp/tmpv29mvnho.cpp:41: int main(): Assertion `candidate((1000))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104083
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return a%a%a%a%a%a%a%a==0;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe4vo9d3h: /tmp/tmpe4vo9d3h.cpp:25: int main(): Assertion `candidate((2))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code in\
    \ C/C++/Python/Ruby/JavaScript here\n    if(a==0)\n        return false;\n   \
    \ for(long i=1;i<=a;i++)\n        if(a%i==0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyjcv2h1i: /tmp/tmpyjcv2h1i.cpp:30: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long long int i = a;\n\
    \    long long int j = 2;\n    int count = 0;\n    // write your code here\n \
    \   while (i < j) {\n        if (i % j == 0) {\n            count++;\n       \
    \ }\n        j++;\n    }\n    if (count == (j - 1)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n   \
    \ assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104088
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    return (((1L * 3L * 3L)\
    \ - 3L * a) < 0);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_2y5u4mp: /tmp/tmp_2y5u4mp.cpp:24: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    if (a < 0) {\n       \
    \ return false;\n    }\n    if (a == 0) {\n        return true;\n    }\n    if\
    \ (a > 1 && a % 2 == 1) {\n        return false;\n    }\n    if (a == 1 || a ==\
    \ 3 || a == 5) {\n        return true;\n    }\n    if (a == 4 || a == 6 || a ==\
    \ 9 || a == 12) {\n        return true;\n    }\n    if (a == 7) {\n        return\
    \ true;\n    }\n    if (a == 8) {\n        return true;\n    }\n    if (a == 9\
    \ || a == 12) {\n        return false;\n    }\n    if (a == 10) {\n        return\
    \ false;\n    }\n    if (a == 11 || a == 12) {\n        return false;\n    }\n\
    \    if (a == 13) {\n        return false;\n    }\n    if (a == 14 || a == 16\
    \ || a == 18) {\n        return false;\n    }\n    if (a == 15 || a == 18) {\n\
    \        return false;\n    }\n    if (a == 17) {\n        return false;\n   \
    \ }\n    if (a == 18 || a == 21) {\n        return false;\n    }\n    if (a ==\
    \ 19 || a == 22 || a == 24 || a == 26 || a == 28 || a == 30 || a == 32 || a ==\
    \ 34 || a == 36 || a == 38 || a == 40 || a == 42 || a == 44 || a == 46 || a ==\
    \ 48 || a == 50 || a == 52 || a == 54 || a == 56 || a == 58 || a == 60 || a ==\
    \ 62 || a == 64 || a == 66 || a == 68 || a == 70 || a == 72 || a == 74 || a ==\
    \ 76 || a == 78 || a == 80 || a == 82 || a == 84 || a == 86 || a == 88 || a ==\
    \ 90 || a == 92 || a == 94 || a == 96 || a == 98 || a == 100 || a == 102 || a\
    \ == 104 || a == 106 || a == 108 || a == 110 || a == 112 || a == 114 || a == 116\
    \ || a == 118 || a == 120 || a == 122 || a == 124 || a == 126 || a == 128 || a\
    \ == 130 || a == 132 || a == 134 || a == 136 || a == 138 || a == 140 || a == 142\
    \ || a == 144 || a == 146 || a == 148 || a == 150 || a == 152 || a == 154 || a\
    \ == 156 || a == 158) {\n        return true;\n    }\n    if (a == 159) {\n  \
    \      return false;\n    }\n    if (a == 160) {\n        return false;\n    }\n\
    \    if (a == 162) {\n        return false;\n    }\n    if (a == 164) {\n    \
    \    return false;\n    }\n    if (a == 166) {\n        return false;\n    }\n\
    \    if (a == 168) {\n        return false;\n    }\n    if (a == 170) {\n    \
    \    return false;\n    }\n    if (a == 172) {\n        return false;\n    }\n\
    \    if (a == 174) {\n        return false;\n    }\n    if (a == 176) {\n    \
    \    return false;\n    }\n    if (a == 178) {\n        return false;\n    }\n\
    \    if (a == 18\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeh9yorzw.cpp: In function \u2018bool iscube(long int)\u2019:\n\
    /tmp/tmpeh9yorzw.cpp:101:16: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n  101 |     if (a == 18\n      |        ~       ^\n      |          \
    \      )\n  102 | }\n      | ~               \n/tmp/tmpeh9yorzw.cpp:102:1: error:\
    \ expected primary-expression before \u2018}\u2019 token\n  102 | }\n      | ^\n\
    /tmp/tmpeh9yorzw.cpp:102:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n  102 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int square_of_a = a*a;\n\
    \    return square_of_a < a && square_of_a > -4*a;\n}\nint main() {\n    auto\
    \ candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpmgl7ks1n: /tmp/tmpmgl7ks1n.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    long r = 1;\n    long\
    \ sum = 0;\n    for(int i=0; i<a; i++){\n        sum+=r;\n        r*=r;\n    }\n\
    \    long n = 1L<<a;\n    for(int i=a;i>0;i--){\n        if(sum%n==0) return false;\n\
    \        sum/=n;\n        n*=n;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpvjm7ravm: /tmp/tmpvjm7ravm.cpp:39: int main(): Assertion `candidate((64))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n\tlong long m = a;\n\tint\
    \ b = 1;\n\tfor (long long i = 1;i < m;i++) {\n\t\tb *= i;\n\t\tif (b == m)\n\t\
    \t\tbreak;\n\t}\n\t\n\tif (b == m)\n\t\treturn true;\n\telse\n\t\treturn false;\n\
    }\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1)) == (true));\n\
    \    assert(candidate((2)) == (false));\n    assert(candidate((-1)) == (true));\n\
    \    assert(candidate((64)) == (true));\n    assert(candidate((180)) == (false));\n\
    \    assert(candidate((1000)) == (true));\n    assert(candidate((0)) == (true));\n\
    \    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpko_w4j4t: /tmp/tmpko_w4j4t.cpp:37: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int b = 0;\n    while\
    \ (b < a / 3) {\n        if (a % 3 == 0 || a % 5 == 0 || a % 7 == 0) {\n     \
    \       return true;\n        }\n        if (a % 3 != 0) {\n            b++;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = iscube;\n\
    \    assert(candidate((1)) == (true));\n    assert(candidate((2)) == (false));\n\
    \    assert(candidate((-1)) == (true));\n    assert(candidate((64)) == (true));\n\
    \    assert(candidate((180)) == (false));\n    assert(candidate((1000)) == (true));\n\
    \    assert(candidate((0)) == (true));\n    assert(candidate((1729)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpl4_wx1tv: /tmp/tmpl4_wx1tv.cpp:33: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    int flag = 0;\n    long\
    \ c = 1;\n    while (a) {\n        int i = (int)(a/c);\n        flag++;\n    \
    \    c = i*i*i;\n        a -= i*i*i;\n    }\n    if (a == 1) return true;\n  \
    \  else return false;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6m3kr005: /tmp/tmp6m3kr005.cpp:33: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n    // write your code here\n\
    \    bool flag = false;\n    long s = 1;\n    long n = a;\n    while (n>0) {\n\
    \        flag = flag ? false : true;\n        s *= n;\n        n--;\n    }\n \
    \   return flag;\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5etjbhm7: /tmp/tmp5etjbhm7.cpp:35: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long i = a;\n  if (i > 1)\
    \ { i = i / 3; }\n  if (i > 1) { i = i / 3; }\n  if (i > 1) { i = i / 3; }\n \
    \ return (i == 1);\n}\nint main() {\n    auto candidate = iscube;\n    assert(candidate((1))\
    \ == (true));\n    assert(candidate((2)) == (false));\n    assert(candidate((-1))\
    \ == (true));\n    assert(candidate((64)) == (true));\n    assert(candidate((180))\
    \ == (false));\n    assert(candidate((1000)) == (true));\n    assert(candidate((0))\
    \ == (true));\n    assert(candidate((1729)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1i7z957r: /tmp/tmp1i7z957r.cpp:30: int main(): Assertion `candidate((-1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n  long long ans = 1LL;\n \
    \ while(a >= 1LL)\n    ans *= a;\n  if (a > 0)\n    ans /= a;\n  if(ans == 1LL)\n\
    \    return true;\n  else\n    return false;\n}\nint main() {\n    auto candidate\
    \ = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660104089
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that\
    \ takes an integer a and returns true \n// if this ingeger is a cube of some integer\
    \ number.\n// Note: you may assume the input is always valid.\n// Examples:\n\
    // >>> iscube((1))\n// (true)\n// >>> iscube((2))\n// (false)\n// >>> iscube((-1))\n\
    // (true)\n// >>> iscube((64))\n// (true)\n// >>> iscube((0))\n// (true)\n// >>>\
    \ iscube((180))\n// (false)\nbool iscube(long a) {\n     assert(a > 0);\n    \
    \ return ((a % 4 == 0) && (a % 3 == 2) && (a % 2 == 0));\n}\nint main() {\n  \
    \  auto candidate = iscube;\n    assert(candidate((1)) == (true));\n    assert(candidate((2))\
    \ == (false));\n    assert(candidate((-1)) == (true));\n    assert(candidate((64))\
    \ == (true));\n    assert(candidate((180)) == (false));\n    assert(candidate((1000))\
    \ == (true));\n    assert(candidate((0)) == (true));\n    assert(candidate((1729))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpq2ow4ool: /tmp/tmpq2ow4ool.cpp:25: int main(): Assertion `candidate((1))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660104084
