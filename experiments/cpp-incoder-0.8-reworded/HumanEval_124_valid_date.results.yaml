language: cpp
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   int len = date.size();\n    if (len == 0) {\n        return false;\n    }\n\
    \    int day;\n    if (len < 10) {\n        return false;\n    }\n    if (len\
    \ < 13) {\n        return false;\n    }\n    if (len < 19) {\n        return false;\n\
    \    }\n    if (len < 20) {\n        return false;\n    }\n    if (len < 23) {\n\
    \        return false;\n    }\n    char month[2];\n    strcpy(month, date.substr(0,\
    \ 2));\n    if (month[0] >= '0' && month[0] <= '1') {\n        return false;\n\
    \    }\n    if (month[1] >= '0' && month[1] <= '3') {\n        return false;\n\
    \    }\n    if (month[2] >= '0' && month[2] <= '6') {\n        return false;\n\
    \    }\n    year = stoi(date.substr(3, 4));\n    if (year < 1 || year > 9999)\
    \ {\n        return false;\n    }\n    int days_in_month = calendar[month - 1];\n\
    \    int days_in_year = calendar[year];\n    int days_in_century = days_in_month\
    \ - days_in_month / 10 + days_in_year / 100;\n    if (day > days_in_month || day\
    \ < 1 || day > days_in_year || day < days_in_century) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu5nqnh77.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpu5nqnh77.cpp:43:30: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   43 |     strcpy(month, date.substr(0, 2));\n\
    \      |                   ~~~~~~~~~~~^~~~~~\n      |                        \
    \      |\n      |                              std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpu5nqnh77.cpp:2:\n/usr/include/string.h:122:70:\
    \ note:   initializing argument 2 of \u2018char* strcpy(char*, const char*)\u2019\
    \n  122 | extern char *strcpy (char *__restrict __dest, const char *__restrict\
    \ __src)\n      |                                               ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpu5nqnh77.cpp:53:5: error: \u2018year\u2019 was not declared in this scope\n\
    \   53 |     year = stoi(date.substr(3, 4));\n      |     ^~~~\n/tmp/tmpu5nqnh77.cpp:57:25:\
    \ error: \u2018calendar\u2019 was not declared in this scope\n   57 |     int\
    \ days_in_month = calendar[month - 1];\n      |                         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date == \"\") {\n\
    \        return false;\n    }\n    int day;\n    int month;\n    int year;\n \
    \   char delim = '-';\n    std::istringstream ss(date);\n    ss.imbue(std::locale(std::locale(),\
    \ new std::ctype<char>));\n    ss >> month >> delim >> day >> delim >> year;\n\
    \    if (month < 1 || month > 12 || day < 1 || day > 31) {\n        return false;\n\
    \    }\n    if (month == 4 || month == 6 || month == 9 || month == 11) {\n   \
    \     if (day > 30) {\n            return false;\n        }\n    }\n    if (month\
    \ == 2) {\n        if (day > 29) {\n            return false;\n        }\n   \
    \ }\n    if (month == 1 || month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        if (day > 31) {\n            return\
    \ false;\n        }\n    }\n    if (day > 31) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day1, month1, year1;\n\
    \    bool isMonthValid1 = false;\n    bool isDayValid1 = false;\n    bool isYearValid1\
    \ = false;\n    int day2, month2, year2;\n    bool isMonthValid2 = false;\n  \
    \  bool isDayValid2 = false;\n    bool isYearValid2 = false;\n    int days = 0;\n\
    \    int months = 0;\n    int years = 0;\n    isMonthValid1 = isMonthValid2 =\
    \ isDayValid1 = isDayValid2 = isYearValid1 = isYearValid2 = true;\n    if (isdigit(date.at(0)))\
    \ {\n        if (date.size() != 8) {\n            isMonthValid1 = false;\n   \
    \     } else {\n            isMonthValid2 = false;\n            days = atoi(date.c_str()\
    \ + 4);\n            if (date.at(0) == '0') {\n                isDayValid1 = false;\n\
    \            } else {\n                isDayValid2 = false;\n                years\
    \ = atoi(date.c_str() + 7);\n                if (years > 1900 && years < 2020)\
    \ {\n                    isYearValid1 = true;\n                } else {\n    \
    \                isYearValid2 = false;\n                }\n            }\n   \
    \     }\n    } else {\n        isMonthValid1 = false;\n    }\n    if (isMonthValid1\
    \ && isDayValid1 && isYearValid1) {\n        isMonthValid2 = true;\n    } else\
    \ if (isMonthValid2 && isDayValid2 && isYearValid2) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpzoiut_z7: /tmp/tmpzoiut_z7.cpp:65: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day=atoi(date.substr(0,2).c_str());\n\
    \    int month=atoi(date.substr(3,2).c_str());\n    int year=atoi(date.substr(6,4).c_str());\n\
    \    return (day<1 || day>31 || month<1 || month>12 || year<1920 || year>2099);\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4od85eas: /tmp/tmp4od85eas.cpp:28: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = true;\n    int days_count = 0, months_count = 0;\n    int current_year\
    \ = 0, current_month = 0;\n    std::string temp = \"\";\n    temp = date;\n  \
    \  if (temp.length() == 0) {\n        return false;\n    }\n    size_t start =\
    \ 0, end = temp.length();\n    while (end > start) {\n        if (temp[start]\
    \ == '-') {\n            end--;\n        }\n        if (temp[end] == '-') {\n\
    \            start++;\n            end--;\n        }\n        if (temp[end] ==\
    \ '/') {\n            end--;\n            start++;\n        }\n        if (temp[end]\
    \ == ',') {\n            end--;\n        }\n        if (temp[end] == '-') {\n\
    \            end--;\n            start++;\n        }\n        if (temp[end] ==\
    \ '.') {\n            end--;\n            start++;\n        }\n        if (temp[end]\
    \ == ' ') {\n            end--;\n        }\n        if (end > start) {\n     \
    \       std::string current_date = temp.substr(start, end - start);\n        \
    \    if (current_date.find(\"Jan\") != std::string::npos && current_date.find(\"\
    Feb\") != std::string::npos && current_date.find(\"Mar\") != std::string::npos\
    \ && current_date.find(\"Apr\") != std::string::npos && current_date.find(\"May\"\
    ) != std::string::npos && current_date.find(\"Jun\") != std::string::npos && current_date.find(\"\
    Jul\") != std::string::npos && current_date.find(\"Aug\") != std::string::npos\
    \ && current_date.find(\"Sep\") != std::string::npos && current_date.find(\"Oct\"\
    ) != std::string::npos && current_date.find(\"Nov\") != std::string::npos && current_date.find(\"\
    Dec\") != std::string::npos) {\n                current_month = current_date.find(\"\
    Jan\") - 1;\n            } else if (current_date.find(\"Jan\") != std::string::npos\
    \ && current_date.find(\"Feb\") != std::string::npos && current_date.find(\"Mar\"\
    ) != std::string::npos && current_date.find(\"Apr\") != std::string::npos && current_date.find(\"\
    May\") != std::string::npos && current_date.find(\"Jun\") != std::string::npos\
    \ && current_date.find(\"Jul\") != std::string::npos && current_date.find(\"Aug\"\
    ) != std::string::npos && current_date.find(\"Sep\") != std::string::npos && current_date.find(\"\
    Oct\") != std::string::npos && current_date.find(\"Nov\") != std::string::npos\
    \ && current_date.find(\"Dec\") != std::string::npos && current_date.find(\"Jan\"\
    ) > 12) {\n                current_month = current_date.find(\"Feb\") - 1;\n \
    \           } else if (current_date.find(\"Jan\") != std::string::npos && current_date.find(\"\
    Feb\") != std::string::npos && current_\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6r1u4_w.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpc6r1u4_w.cpp:63:122: error: \u2018current_\u2019 was not declared in\
    \ this scope; did you mean \u2018current_date\u2019?\n   63 |             } else\
    \ if (current_date.find(\"Jan\") != std::string::npos && current_date.find(\"\
    Feb\") != std::string::npos && current_\n      |                             \
    \                                                                            \
    \                 ^~~~~~~~\n      |                                          \
    \                                                                            \
    \    current_date\n/tmp/tmpc6r1u4_w.cpp:63:130: error: expected \u2018)\u2019\
    \ before \u2018}\u2019 token\n   63 |             } else if (current_date.find(\"\
    Jan\") != std::string::npos && current_date.find(\"Feb\") != std::string::npos\
    \ && current_\n      |                       ~                               \
    \                                                                           ^\n\
    \      |                                                                     \
    \                                                             )\n   64 | }\n \
    \     | ~                                                                    \
    \                                                             \n/tmp/tmpc6r1u4_w.cpp:64:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   64 | }\n \
    \     | ^\n/tmp/tmpc6r1u4_w.cpp:65:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   65 | int main() {\n      |            ^\n\
    /tmp/tmpc6r1u4_w.cpp:83:1: error: expected \u2018}\u2019 at end of input\n   83\
    \ | }\n      | ^\n/tmp/tmpc6r1u4_w.cpp:31:25: note: to match this \u2018{\u2019\
    \n   31 |     while (end > start) {\n      |                         ^\n/tmp/tmpc6r1u4_w.cpp:83:1:\
    \ error: expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmpc6r1u4_w.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpc6r1u4_w.cpp:83:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   83 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    struct tm t{};\n    //\
    \ You need to check the month and date validity.\n    int ret = strptime(date.c_str(),\
    \ \"%m-%d-%Y\", &t);\n    if (ret == -1) {\n        std::cout << \"Invalid date\
    \ string \" << date << std::endl;\n        return false;\n    }\n    if (t.tm_mon\
    \ < 1 || t.tm_mon > 12) {\n        std::cout << \"Invalid month is \" << t.tm_mon\
    \ << std::endl;\n        return false;\n    }\n    if (t.tm_mday < 1 || t.tm_mday\
    \ > 31) {\n        std::cout << \"Invalid number of days is \" << t.tm_mday <<\
    \ std::endl;\n        return false;\n    }\n    if (t.tm_year < 50) {\n      \
    \  std::cout << \"Invalid year is \" << t.tm_year << std::endl;\n        return\
    \ false;\n    }\n    // Now check the date validity.\n    return 1;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp09i__zkt.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp09i__zkt.cpp:23:23: error: invalid conversion from \u2018char*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   23 |     int ret = strptime(date.c_str(),\
    \ \"%m-%d-%Y\", &t);\n      |               ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       char*\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int month = std::stoi(date.substr(0, 2));\n    int day = std::stoi(date.substr(3,\
    \ 2));\n    int year = std::stoi(date.substr(6, 4));\n    if (day < 1 || day >\
    \ 31) return false;\n    if (month < 1 || month > 12) return false;\n    int maxDays\
    \ = 31;\n    if (month == 2 && day > 28) maxDays = 29;\n    if (month == 4 ||\
    \ month == 6 || month == 9 || month == 11) maxDays = 30;\n    if (month == 1)\
    \ maxDays = 31;\n    if (year < 1000 || year > 2040) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    // Write your code here\n    if (date.empty()) return false; \n    int day,\
    \ month, year; \n    std::stringstream ss(date); \n    ss >> day >> month >> year;\n\
    \    int month_days[12]={31,28,31,30,31,30,31,31,30,31,30,31};\n    int valid_months[12]={1,2,3,4,5,6,7,8,9,10,11};\n\
    \    int valid_days[12]={1,2,3,4,5,6,7,8,9,10,11,12};\n    int valid_years=12;\n\
    \    for(int i=0;i<month;i++)\n    {\n        if(month==valid_months[i])\n   \
    \     {\n            if(month==2 && day>28) return false; \n            else \n\
    \            {\n                if(day>month_days[month]) return false; \n   \
    \             else \n                {\n                    if(month==1 && day>30)\
    \ return false; \n                    else \n                    {\n         \
    \               if(day>valid_days[month]) return false; \n                   \
    \ }\n                }\n            }\n        }\n    }\n    return year%4==0\
    \ && (year%100!=0 || year%400==0); \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplgc2x8b6: /tmp/tmplgc2x8b6.cpp:55: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(date.size() > 0);\n\
    \  // If the number of days is not less than 1 and not higher than 31, then it\
    \ is invalid\n  // If the number of days is not less than 1 and not higher than\
    \ 30, then it is invalid\n  // If the number of days is not less than 1 and not\
    \ higher than 29, then it is invalid\n  // If the month is not less than 1 and\
    \ not higher than 12, then it is invalid\n  // If the date is not in the correct\
    \ format, then it is invalid\n  // Otherwise, it is valid\n  int day1, day2, day3,\
    \ day4, day5, day6, day7, day8, day9, day10, day11, day12, month1, month2, month3,\
    \ month4, month5, month6, month7, month8, month9, month10, month11, month12, year1,\
    \ year2, year3, year4, year5, year6, year7, year8, year9, year10, year11, year12;\n\
    \  int length = date.length();\n  char day[3], month[4];\n  strptime(date.c_str(),\
    \ \"%m-%d-%Y\", month);\n  strptime(date.c_str(), \"%d-%m-%Y\", day);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", day);\n  strptime(date.c_str(), \"%m-%d-%y\", day);\n  strptime(date.c_str(),\
    \ \"%m-%d-%Y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str(),\
    \ \"%m-%d-%y\", month);\n  strptime(date.c_str(), \"%m-%d-%Y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%Y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", month);\n  strptime(date.c_str(), \"%d-%m-%Y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%Y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", month);\n  strptime(date.c_str(), \"%d-%m-%Y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%Y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", month);\n  strptime(date.c_str(), \"%d-%m-%Y\", month);\n  strptime(date.c_str(),\
    \ \"%d-%m-%y\", month);\n  strptime(date.c_str(), \"%d-%m-%y\", month);\n  strptime(date.c_str\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4ortjdx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpc4ortjdx.cpp:31:38: error: cannot convert \u2018char*\u2019 to \u2018\
    tm*\u2019\n   31 |   strptime(date.c_str(), \"%m-%d-%Y\", month);\n      |   \
    \                                   ^~~~~\n      |                           \
    \           |\n      |                                      char*\nIn file included\
    \ from /usr/include/c++/9/ctime:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n\
    \                 from /tmp/tmpc4ortjdx.cpp:2:\n/usr/include/time.h:96:51: note:\
    \   initializing argument 3 of \u2018char* strptime(const char*, const char*,\
    \ tm*)\u2019\n   96 |          const char *__restrict __fmt, struct tm *__tp)\n\
    \      |                                        ~~~~~~~~~~~^~~~\n/tmp/tmpc4ortjdx.cpp:32:38:\
    \ error: cannot convert \u2018char*\u2019 to \u2018tm*\u2019\n   32 |   strptime(date.c_str(),\
    \ \"%d-%m-%Y\", day);\n      |                                      ^~~\n    \
    \  |                                      |\n      |                         \
    \             char*\nIn file included from /usr/include/c++/9/ctime:42,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n   \
    \              from /tmp/tmpc4ortjdx.cpp:2:\n/usr/include/time.h:96:51: note:\
    \   initializing argument 3 of \u2018char* strptime(const char*, const char*,\
    \ tm*)\u2019\n   96 |          const char *__restrict __fmt, struct tm *__tp)\n\
    \      |                                        ~~~~~~~~~~~^~~~\n/tmp/tmpc4ortjdx.cpp:33:38:\
    \ error: cannot convert \u2018char*\u2019 to \u2018tm*\u2019\n   33 |   strptime(date.c_str(),\
    \ \"%d-%m-%y\", day);\n      |                                      ^~~\n    \
    \  |                                      |\n      |                         \
    \             char*\nIn file included from /usr/include/c++/9/ctime:42,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n   \
    \              from /tmp/tmpc4ortjdx.cpp:2:\n/usr/include/time.h:96:51: note:\
    \   initializing argument 3 of \u2018char* strptime(const char*, const char*,\
    \ tm*)\u2019\n   96 |          const char *__restrict "
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // TODO: write your code\
    \ here\n    if(date != \"\") {\n        int days[12];\n        for(int i = 0;\
    \ i < 12; i++) {\n            days[i] = 0;\n        }\n        if(date.length()\
    \ < 3 || date.length() > 7 || date.length() != 7) {\n            return false;\n\
    \        }\n        std::string temp = date;\n        std::string month;\n   \
    \     std::string year;\n        std::sscanf(temp.c_str(), \"%2s-%2s-%s\", &month,\
    \ &year, &year);\n        if(month == \"01\" || month == \"03\" || month == \"\
    05\" || month == \"07\" || month == \"08\" || month == \"10\" || month == \"12\"\
    ) {\n            int temp_days = std::stoi(month.substr(0, 2));\n            int\
    \ temp_month = std::stoi(month.substr(2, 2));\n            int temp_year = std::stoi(year.substr(0,\
    \ 2));\n            if(temp_days == 1 || temp_days == 3 || temp_days == 5 || temp_days\
    \ == 7 || temp_days == 8 || temp_days == 10 || temp_days == 12) {\n          \
    \      if(temp_month == 4 || temp_month == 6 || temp_month == 9 || temp_month\
    \ == 11) {\n                    days[temp_month - 1] = temp_days;\n          \
    \          if(temp_year >= 0 && temp_year <= 99) {\n                        days[temp_month\
    \ - 2] = temp_days;\n                    }\n                } else {\n       \
    \             return false;\n                }\n            } else {\n       \
    \         return false;\n            }\n        } else {\n            return false;\n\
    \        }\n    } else {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpevrums5a: /tmp/tmpevrums5a.cpp:60: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    ,\n        \"July\", \"August\", \"September\", \"October\", \"November\", \"\
    December\"\n    };\n    int days_num = 0, days_in_month[12] = {\n        0, 31,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31\n    };\n    int year_num = 0;\n    \n\
    \    int num_date = 0;\n    int i = 0;\n    \n    // Validate date string is not\
    \ empty\n    if (date.empty()) {\n        return false;\n    }\n\n    // Parse\
    \ month from date string.\n    if (!(date.length() >= 5)) {\n        return false;\n\
    \    }\n    \n    // Get month from date string.\n    char month[12];\n    sscanf(date.c_str(),\
    \ \"%2s-%2s-%4s\", month, month, &year);\n    \n    // Validate month is valid,\
    \ i.e. not less than 1 or greater than 12.\n    if (std::find(std::begin(months),\
    \ std::end(months), month) < std::begin(months) || std::find(std::begin(months),\
    \ std::end(months), month) > std::end(months)) {\n        return false;\n    }\n\
    \    \n    // Get the number of days in month from the month string.\n    i =\
    \ std::find(std::begin(months), std::end(months), month);\n    \n    if (i < std::begin(months))\
    \ {\n        if (i < std::begin(months)) {\n            std::reverse(std::begin(months),\
    \ std::end(months));\n        }\n        \n        std::reverse(std::begin(months),\
    \ std::end(months));\n        \n        std::reverse(std::begin(days_in_month),\
    \ std::end(days_in_month));\n        \n        days_in_month[i] = 1;\n    }\n\n\
    \    days_num += days_in_month[i];\n\n    // Validate date string is not empty.\n\
    \    if (date.empty()) {\n        return false;\n    }\n\n    // Get day from\
    \ date string.\n    sscanf(date.c_str(), \"%2d-%2d-%4s\", &day, &month, &year);\n\
    \    \n    // Validate day is valid, i.e. not less than 1 or greater than 31.\n\
    \    if (std::find(std::begin(day), std::end(day), day) < std::begin(day) || std::find(std::begin(day),\
    \ std::end(day), day) > std::end(day)) {\n        return false;\n    }\n    \n\
    \    // Get the number of days in the year from the year string.\n    i = std::find(std::begin(years),\
    \ std::end(years), year);\n    \n    if (i < std::begin(years)) {\n        std::reverse(std::begin(years),\
    \ std::end(years));\n    }\n\n    year_num += years[i];\n    \n    // Validate\
    \ date is valid, i.e. not less than 1 or higher than 30.\n    if (days_num < 1\
    \ || days_num > 31) {\n        return false;\n    }\n    \n    // Validate date\
    \ \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp92hbxokw.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp92hbxokw.cpp:45:56: error: \u2018year\u2019 was not declared in this\
    \ scope\n   45 |     sscanf(date.c_str(), \"%2s-%2s-%4s\", month, month, &year);\n\
    \      |                                                        ^~~~\n/tmp/tmp92hbxokw.cpp:53:18:\
    \ error: invalid conversion from \u2018std::__cxx11::basic_string<char>*\u2019\
    \ to \u2018int\u2019 [-fpermissive]\n   53 |     i = std::find(std::begin(months),\
    \ std::end(months), month);\n      |         ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                  |\n      |                  std::__cxx11::basic_string<char>*\n\
    /tmp/tmp92hbxokw.cpp:55:30: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   55 |     if (i < std::begin(months)) {\n    \
    \  |                              ^\n/tmp/tmp92hbxokw.cpp:56:34: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   56 |     \
    \    if (i < std::begin(months)) {\n      |                                  ^\n\
    /tmp/tmp92hbxokw.cpp:75:42: error: \u2018day\u2019 was not declared in this scope\n\
    \   75 |     sscanf(date.c_str(), \"%2d-%2d-%4s\", &day, &month, &year);\n   \
    \   |                                          ^~~\n/tmp/tmp92hbxokw.cpp:83:30:\
    \ error: \u2018years\u2019 was not declared in this scope\n   83 |     i = std::find(std::begin(years),\
    \ std::end(years), year);\n      |                              ^~~~~\n/tmp/tmp92hbxokw.cpp:97:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   97 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   std::istringstream stream;\n    stream.str(date);\n    std::string month,\
    \ day, year;\n    std::getline(stream, month, '-');\n    std::getline(stream,\
    \ day, '-');\n    std::getline(stream, year, '-');\n\n    // Your code here\n\
    \    char ch[3];\n    if (stream.getline(ch,'-') && month.length()==2 && day==1\
    \ && year.length()==4)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqq98nyfj.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqq98nyfj.cpp:31:59: error: no match for \u2018operator==\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   31 |     if (stream.getline(ch,'-') && month.length()==2\
    \ && day==1 && year.length()==4)\n      |                                    \
    \                    ~~~^~~\n      |                                         \
    \               |    |\n      |                                              \
    \          |    int\n      |                                                 \
    \       std::string {aka std::__cxx11::basic_string<char>}\nIn file included from\
    \ /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqq98nyfj.cpp:2:\n/usr/include/c++/9/bits/regex.h:1026:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator==(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1026 |     operator==(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1026:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpqq98nyfj.cpp:31:61:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   31\
    \ |     if (stream.getline(ch,'-') && month.length()==2 && day==1 && year.length()==4)\n\
    \      |                                                             ^\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpqq98nyfj.cpp:2:\n/usr/include/c++/9/bits/regex.h:1099:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator==(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1099 |     operator==(const\
    \ __sub_match_string<_Bi_iter, "
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if (date.empty()) return\
    \ false;\n  int days[31];\n  int months[12];\n  int i;\n  int j;\n\n  memset(days,\
    \ 0, sizeof(days));\n  memset(months, 0, sizeof(months));\n  for (i = 0; i < 12;\
    \ i++) {\n    months[i] = i + 1;\n  }\n  istringstream iss(date);\n  iss >> i;\n\
    \  iss >> j;\n  for (; (i < 1 || i > 12); i++) {\n    iss.clear();\n    iss >>\
    \ i;\n    if (iss.fail()) return false;\n  }\n  for (; j < 1 || j > 12; j++) {\n\
    \    iss.clear();\n    iss >> j;\n    if (iss.fail()) return false;\n  }\n  for\
    \ (int k = 0; k < i; k++) {\n    days[k - 1] = days[k] + 1;\n  }\n  for (int l\
    \ = 0; l < j; l++) {\n    months[l - 1] = months[l] + 1;\n  }\n  for (i = 0; i\
    \ < 12; i++) {\n    for (j = 0; j < 31; j++) {\n      if (days[i * 31 + j] !=\
    \ months[i]) return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkrd27pk6.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpkrd27pk6.cpp:32:3: error: \u2018istringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::istringstream\u2019?\n   32 |   istringstream\
    \ iss(date);\n      |   ^~~~~~~~~~~~~\n      |   std::istringstream\nIn file included\
    \ from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkrd27pk6.cpp:2:\n/usr/include/c++/9/iosfwd:150:38: note: \u2018std::istringstream\u2019\
    \ declared here\n  150 |   typedef basic_istringstream<char>  istringstream;\n\
    \      |                                      ^~~~~~~~~~~~~\n/tmp/tmpkrd27pk6.cpp:33:3:\
    \ error: \u2018iss\u2019 was not declared in this scope\n   33 |   iss >> i;\n\
    \      |   ^~~\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    std::vector<std::string> months = { \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\" };\n    std::vector<std::string> days = { \"01\", \"03\", \"\
    05\", \"07\", \"08\", \"10\", \"12\", \"01\", \"03\", \"05\", \"07\", \"08\",\
    \ \"10\", \"12\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\" };\n\
    \    std::vector<std::string> years = { \"2000\", \"2001\", \"2002\", \"2003\"\
    , \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\"\
    , \"2012\" };\n    std::unordered_set<std::string> month_set = { months.begin(),\
    \ months.end() };\n    std::unordered_set<std::string> day_set = { days.begin(),\
    \ days.end() };\n    std::unordered_set<std::string> year_set = { years.begin(),\
    \ years.end() };\n    std::unordered_set<std::string> month_year_set = { months.begin(),\
    \ months.end(), years.begin(), years.end() };\n    std::string date1 = date[9]\
    \ + date;\n    std::string date2 = date[9] + date;\n    if (date1[8] != '-' &&\
    \ date1[8] != '/') {\n        return false;\n    }\n    date1 = date1.substr(6,\
    \ date1.length());\n    date2 = date2.substr(6, date2.length());\n    date1 =\
    \ date1.substr(3, date1.length());\n    date2 = date2.substr(3, date2.length());\n\
    \    int day1 = std::stoi(date1);\n    int day2 = std::stoi(date2);\n    if ((day1\
    \ > 31 || day1 < 1) || (day2 > 31 || day2 < 1)) {\n        return false;\n   \
    \ }\n    if ((day2 > 29 && day2 < 1) || (day1 > 29 && day1 < 1)) {\n        return\
    \ false;\n    }\n    if (day1 > day2) {\n        return false;\n    }\n    int\
    \ year1 = std::stoi(date1[date1.length() - 4]);\n    int year2 = std::stoi(date2[date2.length()\
    \ - 4]);\n    if ((year1 < 1 || year1 > 12) || (year2 < 1 || year2 > 12)) {\n\
    \        return false;\n    }\n    if (year1 == year2) {\n        std::string\
    \ month_year = date2[date2.length() - 5];\n        if (months.find(month_year)\
    \ == months.end()) {\n            return false;\n        }\n        int month_num\
    \ = std::stoi(date1[date1.length() - 3]);\n        if (month_num > 12 || month_num\
    \ < 1) {\n            return false;\n        }\n        int day_num = std::stoi(date1[date1.length()\
    \ - 5]);\n        if (days.find(month_year + std::to_string(day1)) == days.end())\
    \ {\n            return false;\n        }\n        if (day_num\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwvasyoge.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwvasyoge.cpp:28:113: error: could not convert \u2018{months.std::vector<std::__cxx11::basic_string<char>\
    \ >::begin(), months.std::vector<std::__cxx11::basic_string<char> >::end(), years.std::vector<std::__cxx11::basic_string<char>\
    \ >::begin(), years.std::vector<std::__cxx11::basic_string<char> >::end()}\u2019\
    \ from \u2018<brace-enclosed initializer list>\u2019 to \u2018std::unordered_set<std::__cxx11::basic_string<char>\
    \ >\u2019\n   28 |     std::unordered_set<std::string> month_year_set = { months.begin(),\
    \ months.end(), years.begin(), years.end() };\n      |                       \
    \                                                                            \
    \              ^\n      |                                                    \
    \                                                             |\n      |     \
    \                                                                            \
    \                                <brace-enclosed initializer list>\n/tmp/tmpwvasyoge.cpp:49:52:\
    \ error: no matching function for call to \u2018stoi(__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type&)\u2019\n   49 |     int year1 = std::stoi(date1[date1.length()\
    \ - 4]);\n      |                                                    ^\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpwvasyoge.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6506:3: note:\
    \ candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\
    \n 6506 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n  \
    \   "
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Write your code here\n    // if(date.empty())\n    //     return\
    \ false;\n    // int days = 0;\n    // int months = 0;\n    // if(date.length()!=10||!(date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"))\n    //     return false;\n    // if(date.substr(2,1)==\"-\")\n    // \
    \    date+=\"0\";\n    // if(date.length()!=10||!(date.substr(2,2)==\"02\"||date.substr(2,2)==\"\
    02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"\
    02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"\
    02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"\
    02\"||date.substr(2,2)==\"02\"||date.substr(2,2)==\"02\"))\n    //     return\
    \ false;\n    // if(date.substr(4,2)==\"-\")\n    //     date+=\"0\";\n    //\
    \ for(int i=3;i<10;i++)\n    //     if(date.substr(i,1)==\"-\")\n    //      \
    \   date+=\"0\";\n    // if(date.length()!=10||!(date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"\
    02\"||date.substr(0,2)==\"02\"||date.substr(0,2)==\"02\"||date.\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpebyjfjyw: /tmp/tmpebyjfjyw.cpp:43: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if (date.empty())\n   \
    \ return false;\n  struct tm tm;\n  tm tm1;\n  strptime(date.c_str(), \"%d-%m-%Y\"\
    , &tm1);\n  tm1.tm_year += 1900 - 1900;\n  if (tm1.tm_mon < 1 || tm1.tm_mon >\
    \ 12 || tm1.tm_mday < 1 || tm1.tm_mday > 31 ||\n      tm1.tm_mday > 30) {\n  \
    \  return false;\n  }\n  if ((tm1.tm_mon > 1 && tm1.tm_mon < 4 && tm1.tm_mday\
    \ > 29) ||\n      (tm1.tm_mon > 2 && tm1.tm_mon < 6 && tm1.tm_mday > 30)) {\n\
    \    return false;\n  }\n  if (tm1.tm_mday > 31)\n    return false;\n  strptime(date.c_str(),\
    \ \"%m-%d-%Y\", &tm);\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz_d41_7l.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpz_d41_7l.cpp:24:5: error: expected \u2018;\u2019 before \u2018tm1\u2019\
    \n   24 |   tm tm1;\n      |     ^~~~\n      |     ;\n/tmp/tmpz_d41_7l.cpp:25:39:\
    \ error: \u2018tm1\u2019 was not declared in this scope; did you mean \u2018tm\u2019\
    ?\n   25 |   strptime(date.c_str(), \"%d-%m-%Y\", &tm1);\n      |            \
    \                           ^~~\n      |                                     \
    \  tm\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Complete the code here\n\
    \  \n  if (date.empty())\n    return false;\n  int day = std::stoi(date[0]) -\
    \ 1;\n  \n  if (day < 1 || day > 31)\n    return false;\n  \n  int month = std::stoi(date[2])\
    \ - 1;\n  \n  if (month < 1 || month > 12)\n    return false;\n  \n  int year\
    \ = std::stoi(date[4]);\n  \n  if (year < 2000 || year > 2031)\n    return false;\n\
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpce166oot.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpce166oot.cpp:25:30: error: no matching function for call to \u2018\
    stoi(__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type&)\u2019\
    \n   25 |   int day = std::stoi(date[0]) - 1;\n      |                       \
    \       ^\nIn file included from /usr/include/c++/9/string:55,\n             \
    \    from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpce166oot.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6506:3:\
    \ note: candidate: \u2018int std::__cxx11::stoi(const string&, std::size_t*, int)\u2019\
    \n 6506 |   stoi(const string& __str, size_t* __idx = 0, int __base = 10)\n  \
    \    |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6506:22: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const string&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<char>&\u2019}\n 6506 |   stoi(const\
    \ string& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:6612:3: note: candidate: \u2018int std::__cxx11::stoi(const\
    \ wstring&, std::size_t*, int)\u2019\n 6612 |   stoi(const wstring& __str, size_t*\
    \ __idx = 0, int __base = 10)\n      |   ^~~~\n/usr/include/c++/9/bits/basic_string.h:6612:23:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to \u2018const wstring&\u2019\
    \ {aka \u2018const std::__cxx11::basic_string<wchar_t>&\u2019}\n 6612 |   stoi(const\
    \ wstring& __str, size_t* __idx = 0, int __base = 10)\n      |        ~~~~~~~~~~~~~~~^~~~~\n\
    /tmp/tmpce166o"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    size_t s = date.size();\n\
    \    if (s < 5) return false; // check date\n    if (s[1] < '0' || s[1] > '9')\
    \ return false; // check month\n    if (s[2] < '0' || s[2] > '9') return false;\
    \ // check year\n    if (s[0] == '0' && s[1] == '0') return false; // check for\
    \ leading zeros.\n    // Check for invalid day\n    for (size_t i = 3; i <= 5;\
    \ i++) {\n        if (s[i] != date[1]) continue;\n        if (s[i + 3] != date[2])\
    \ continue;\n        if (i > 6) break;\n        return true;\n    }\n    // Check\
    \ for invalid month\n    for (size_t i = 7; i <= 12; i++) {\n        if (s[i]\
    \ != date[1]) continue;\n        if (s[i + 3] != date[2]) continue;\n        if\
    \ (s[i + 6] != date[3]) continue;\n        if (i > 12) break;\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gtsqui8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1gtsqui8.cpp:23:12: error: invalid types \u2018size_t {aka long unsigned\
    \ int}[int]\u2019 for array subscript\n   23 |     if (s[1] < '0' || s[1] > '9')\
    \ return false; // check month\n      |            ^\n/tmp/tmp1gtsqui8.cpp:23:26:\
    \ error: invalid types \u2018size_t {aka long unsigned int}[int]\u2019 for array\
    \ subscript\n   23 |     if (s[1] < '0' || s[1] > '9') return false; // check\
    \ month\n      |                          ^\n/tmp/tmp1gtsqui8.cpp:24:12: error:\
    \ invalid types \u2018size_t {aka long unsigned int}[int]\u2019 for array subscript\n\
    \   24 |     if (s[2] < '0' || s[2] > '9') return false; // check year\n     \
    \ |            ^\n/tmp/tmp1gtsqui8.cpp:24:26: error: invalid types \u2018size_t\
    \ {aka long unsigned int}[int]\u2019 for array subscript\n   24 |     if (s[2]\
    \ < '0' || s[2] > '9') return false; // check year\n      |                  \
    \        ^\n/tmp/tmp1gtsqui8.cpp:25:12: error: invalid types \u2018size_t {aka\
    \ long unsigned int}[int]\u2019 for array subscript\n   25 |     if (s[0] == '0'\
    \ && s[1] == '0') return false; // check for leading zeros.\n      |         \
    \   ^\n/tmp/tmp1gtsqui8.cpp:25:27: error: invalid types \u2018size_t {aka long\
    \ unsigned int}[int]\u2019 for array subscript\n   25 |     if (s[0] == '0' &&\
    \ s[1] == '0') return false; // check for leading zeros.\n      |            \
    \               ^\n/tmp/tmp1gtsqui8.cpp:28:16: error: invalid types \u2018size_t\
    \ {aka long unsigned int}[size_t {aka long unsigned int}]\u2019 for array subscript\n\
    \   28 |         if (s[i] != date[1]) continue;\n      |                ^\n/tmp/tmp1gtsqui8.cpp:29:20:\
    \ error: invalid types \u2018size_t {aka long unsigned int}[size_t {aka long unsigned\
    \ int}]\u2019 for array subscript\n   29 |         if (s[i + 3] != date[2]) continue;\n\
    \      |                    ^\n/tmp/tmp1gtsqui8.cpp:35:16: error: invalid types\
    \ \u2018size_t {aka long unsigned int}[size_t {aka long unsigned int}]\u2019 for\
    \ array subscript\n   35 |         if (s[i] != date[1]) continue;\n      |   \
    \             ^\n/tmp/tmp1gtsqui8.cpp:36:20: error: invalid types "
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << \"\\n[debug]:\
    \ \";\n    std::cout << date << std::endl;\n    if(date == \"null\")\n       \
    \ return false;\n    // We convert date string to std::time_t object using std::get_time\
    \ function.\n    // Then we check whether the converted date is less than current\
    \ date and is not in the future.\n    // If the converted date is less than current\
    \ date and is in the future return false.\n    // If all the above conditions\
    \ satisfied return true.\n    struct std::tm date;\n    bool ok = std::get_time(date.c_str(),\
    \ \"%d-%m-%Y\") == nullptr;\n    std::cout << \"ok = \" << ok << std::endl;\n\
    \    if(!ok)\n        return false;\n    // Check the months. If the month exceeds\
    \ 12, return false.\n    // If the month is less than 1 or higher than 12 return\
    \ false.\n    // If the month is 2 return false. The number of days should not\
    \ exceed 29 or not exceed 30 for the month 2.\n    // If all the above conditions\
    \ satisfied return true.\n    if(date.tm_mon > 12)\n        return false;\n  \
    \  if(date.tm_mon < 1 || date.tm_mon > 12)\n        return false;\n    if(date.tm_mday\
    \ > 29)\n        return false;\n    if(date.tm_mday < 1 || date.tm_mday > 30)\n\
    \        return false;\n    ok = true;\n    // Check the days. If the day exceeds\
    \ 31, return false.\n    // If the day is less than 1 or higher than 31 return\
    \ false.\n    // If all the above conditions satisfied return true.\n    if(date.tm_mday\
    \ > 31)\n        return false;\n    if(date.tm_mday < 1 || date.tm_mday > 31)\n\
    \        return false;\n    ok = true;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3en0d7sh.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp3en0d7sh.cpp:29:20: error: declaration of \u2018tm date\u2019 shadows\
    \ a parameter\n   29 |     struct std::tm date;\n      |                    ^~~~\n\
    /tmp/tmp3en0d7sh.cpp:30:34: error: \u2018struct tm\u2019 has no member named \u2018\
    c_str\u2019\n   30 |     bool ok = std::get_time(date.c_str(), \"%d-%m-%Y\") ==\
    \ nullptr;\n      |                                  ^~~~~\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Complete this function\n\
    \    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu6px2fy9: /tmp/tmpu6px2fy9.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty())\n \
    \       return false;\n    std::vector<std::string> parts;\n    std::stringstream\
    \ stream(date);\n    std::stringstream date_ss;\n    int num_days;\n    int month;\n\
    \    int year;\n    char separator = 0;\n    std::string temp;\n\n    date_ss\
    \ << stream;\n    stream >> month;\n    date_ss >> temp;\n    date_ss >> num_days;\n\
    \    date_ss >> temp;\n    date_ss >> year;\n    date_ss >> temp;\n    date_ss\
    \ >> separator;\n    if (month < 1 || month > 12)\n        return false;\n   \
    \ if (separator != '-')\n        return false;\n    if (num_days < 1 || num_days\
    \ > 31)\n        return false;\n    if (num_days < 1 || num_days > 30)\n     \
    \   return false;\n    if (num_days < 1 || num_days > 29)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9m34do2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo9m34do2.cpp:32:13: error: no match for \u2018operator<<\u2019 (operand\
    \ types are \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    } and \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    })\n   32 |     date_ss << stream;\n      |     ~~~~~~~ ^~ ~~~~~~\n      |   \
    \  |          |\n      |     |          basic_stringstream<[...]>\n      |   \
    \  basic_stringstream<[...]>\n/tmp/tmpo9m34do2.cpp:32:13: note: candidate: \u2018\
    operator<<(int, int)\u2019 <built-in>\n   32 |     date_ss << stream;\n      |\
    \     ~~~~~~~~^~~~~~~~~\n/tmp/tmpo9m34do2.cpp:32:13: note:   no known conversion\
    \ for argument 2 from \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    } to \u2018int\u2019\nIn file included from /usr/include/c++/9/istream:39,\n \
    \                from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo9m34do2.cpp:2:\n/usr/include/c++/9/ostream:108:7: note: candidate:\
    \ \u2018std::basic_ostream<_CharT, _Traits>::__ostream_type& std::basic_ostream<_CharT,\
    \ _Traits>::operator<<(std::basic_ostream<_CharT, _Traits>::__ostream_type& (*)(std::basic_ostream<_CharT,\
    \ _Traits>::__ostream_type&)) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ std::basic_ostream<_CharT, _Traits>::__ostream_type = std::basic_ostream<char>]\u2019\
    \n  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      |\
    \       ^~~~~~~~\n/usr/include/c++/9/ostream:108:36: note:   no known conversion\
    \ for argument 1 from \u2018std::stringstream\u2019 {aka \u2018std::__cxx11::basic_stringstream<char>\u2019\
    } to \u2018std::basic_ostream<char>::__ostream_type& (*)(std::basic_ostream<char>::__ostream_type&)\u2019\
    \ {aka \u2018std::basic_ostream<char>& (*)(std::basic_ostream<char>&)\u2019}\n\
    \  108 |       operator<<(__ostream_type& (*__pf)(__ostream_type&))\n      | \
    \                 ~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    \n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk2wt_qg3: /tmp/tmpk2wt_qg3.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string year = \"\"\
    ;\n  std::string month = \"\";\n  std::string day = \"\";\n  // You can add any\
    \ validations you want.\n  // You might want to convert the string into integers\
    \ and check those\n  // values by doing 'atoi' and checking if the values are\
    \ in range you want.\n  \n  \n  \n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpnh632ff7: /tmp/tmpnh632ff7.cpp:35: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // write your code here\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpds6s4bc0: /tmp/tmpds6s4bc0.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133517
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    if (date.empty()) {\n        return false;\n    }\n    int days[12] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12] = {0, 31, 60,\
    \ 91, 121, 152, 182, 213, 244, 274, 305, 335};\n    int year = stoi(date.substr(6,\
    \ 4));\n    int month = (stoi(date.substr(3, 2)) - 1);\n    int day = (stoi(date.substr(0,\
    \ 2)) - 1);\n    for (int i = 0; i < 12; i++) {\n        if (year > 0 && month\
    \ > 0 && day > 0 && months[month] == days[month] && months[month] == year && day\
    \ == year) {\n            return true;\n        }\n        month--;\n        year--;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpupunt3j5: /tmp/tmpupunt3j5.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133517
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date == \"\") {\n\
    \        return false;\n    }\n    \n    int month = 0;\n    int day = 0;\n  \
    \  int year = 0;\n    std::smatch sm;\n    \n    bool check_month = false;\n \
    \   bool check_day = false;\n    bool check_year = false;\n    \n    sregex_token_iterator\
    \ iter(date.begin(), date.end(), std::regex(\"[012]\"), -1);\n    \n    for (;\
    \ iter != sregex_token_iterator(); ++iter) {\n        switch (iter->type) {\n\
    \            case regex_constants::digit_zero:\n                month = 0;\n \
    \               break;\n            case regex_constants::digit_one:\n       \
    \         month = 1;\n                break;\n            case regex_constants::digit_two:\n\
    \                month = 2;\n                break;\n            case regex_constants::digit_three:\n\
    \                month = 3;\n                break;\n            case regex_constants::digit_four:\n\
    \                month = 4;\n                break;\n            case regex_constants::digit_five:\n\
    \                month = 5;\n                break;\n            case regex_constants::digit_six:\n\
    \                month = 6;\n                break;\n            case regex_constants::digit_seven:\n\
    \                month = 7;\n                break;\n            case regex_constants::digit_eight:\n\
    \                month = 8;\n                break;\n            case regex_constants::digit_nine:\n\
    \                month = 9;\n                break;\n            case regex_constants::digit_zero:\n\
    \                month = 10;\n                break;\n            case regex_constants::digit_one:\n\
    \                month = 11;\n                break;\n            case regex_constants::digit_two:\n\
    \                month = 12;\n                break;\n            default:\n \
    \               check_month = true;\n                break;\n        }\n    }\n\
    \    \n    check_day = false;\n    for (iter++; iter != sregex_token_iterator();\
    \ ++iter) {\n        switch (iter->type) {\n            case regex_constants::digit_zero:\n\
    \                day = 0;\n                break;\n            case regex_constants::digit_one:\n\
    \                day = 1;\n                break;\n            case regex_constants::digit_two:\n\
    \                day = 2;\n                break;\n            case regex_constants::digit_three:\n\
    \                day = 3;\n                break;\n            case regex_constants::digit_four:\n\
    \                day = 4;\n                break;\n            case regex_constants::digit_five:\n\
    \                day = 5;\n                break;\n            case regex_constants::digit_six:\n\
    \                day = 6;\n                break;\n            case regex_constants::digit_seven:\n\
    \                day = 7;\n                break;\n            case regex_constants::digit_eight:\n\
    \                day = 8;\n                break;\n            case regex_constants::digit_nine:\n\
    \                day = 9;\n                break;\n            case regex_constants::digit_zero:\n\
    \                day = 10;\n                break;\n            case regex_constants::digit_one:\n\
    \                day = 11;\n                break;\n            case regex_constants::digit_two:\n\
    \                day = 12;\n                break;\n            default:\n   \
    \             check_day = true;\n                break;\n\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz255mrj_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpz255mrj_.cpp:34:5: error: \u2018sregex_token_iterator\u2019 was not\
    \ declared in this scope; did you mean \u2018std::__cxx11::sregex_token_iterator\u2019\
    ?\n   34 |     sregex_token_iterator iter(date.begin(), date.end(), std::regex(\"\
    [012]\"), -1);\n      |     ^~~~~~~~~~~~~~~~~~~~~\n      |     std::__cxx11::sregex_token_iterator\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpz255mrj_.cpp:2:\n/usr/include/c++/9/bits/regex.h:2854:56:\
    \ note: \u2018std::__cxx11::sregex_token_iterator\u2019 declared here\n 2854 |\
    \   typedef regex_token_iterator<string::const_iterator> sregex_token_iterator;\n\
    \      |                                                        ^~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpz255mrj_.cpp:36:12: error: \u2018iter\u2019 was not declared in this scope\n\
    \   36 |     for (; iter != sregex_token_iterator(); ++iter) {\n      |      \
    \      ^~~~\n/tmp/tmpz255mrj_.cpp:38:18: error: \u2018regex_constants\u2019 has\
    \ not been declared\n   38 |             case regex_constants::digit_zero:\n \
    \     |                  ^~~~~~~~~~~~~~~\n/tmp/tmpz255mrj_.cpp:41:18: error: \u2018\
    regex_constants\u2019 has not been declared\n   41 |             case regex_constants::digit_one:\n\
    \      |                  ^~~~~~~~~~~~~~~\n/tmp/tmpz255mrj_.cpp:44:18: error:\
    \ \u2018regex_constants\u2019 has not been declared\n   44 |             case\
    \ regex_constants::digit_two:\n      |                  ^~~~~~~~~~~~~~~\n/tmp/tmpz255mrj_.cpp:47:18:\
    \ error: \u2018regex_constants\u2019 has not been declared\n   47 |          \
    \   case regex_constants::digit_three:\n      |                  ^~~~~~~~~~~~~~~\n\
    /tmp/tmpz255mrj_.cpp:50:18: error: \u2018regex_constants\u2019 has not been declared\n\
    \   50 |             case regex_constants::digit_four:\n      |              \
    \    ^~~~~~~~~~~~~~~\n/tmp/tmpz255mrj_.cpp:53:18: error: \u2018regex_constants\u2019\
    \ has not been declared\n   53 |             case regex_constants::digit_five:\n\
    \      |                  ^~~~~~~~~~~~~~~\n/"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int mm, dd;\n    char year[5];\n    int day;\n    std::sscanf(date.c_str(),\
    \ \"%d-%d-%d\", &dd, &mm, &year[0]);\n    int year1 = std::atoi(year);\n    int\
    \ month;\n    for (month = 0; month <= 2; month++) {\n        int year2 = year1\
    \ + month;\n        int days = 0;\n        int day;\n        for (day = 0; day\
    \ <= 31; day++) {\n            if (month == 0 && day == 0) {\n               \
    \ continue;\n            }\n            if (std::strcmp(\"01-\" + std::to_string(day)\
    \ + \"-\" + std::to_string(year2), \"%d-\" + std::to_string(day) + \"-\" + std::to_string(year2))\
    \ == 0) {\n                days++;\n            }\n        }\n        int day2;\n\
    \        if (std::strcmp(\"01-\" + std::to_string(days) + \"-\" + std::to_string(year1),\
    \ \"%d-\" + std::to_string(days) + \"-\" + std::to_string(year1)) == 0) {\n  \
    \          day2 = days;\n        }\n        if (day2 != days) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzp63fvhc.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpzp63fvhc.cpp:25:39: warning: format \u2018%d\u2019 expects argument\
    \ of type \u2018int*\u2019, but argument 5 has type \u2018char*\u2019 [-Wformat=]\n\
    \   25 |     std::sscanf(date.c_str(), \"%d-%d-%d\", &dd, &mm, &year[0]);\n  \
    \    |                                      ~^             ~~~~~~~~\n      | \
    \                                      |             |\n      |              \
    \                         int*          char*\n      |                       \
    \               %hhd\n/tmp/tmpzp63fvhc.cpp:36:63: error: cannot convert \u2018\
    std::__cxx11::basic_string<char>\u2019 to \u2018const char*\u2019\n   36 |   \
    \          if (std::strcmp(\"01-\" + std::to_string(day) + \"-\" + std::to_string(year2),\
    \ \"%d-\" + std::to_string(day) + \"-\" + std::to_string(year2)) == 0) {\n   \
    \   |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                               |\n   \
    \   |                                                               std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpzp63fvhc.cpp:2:\n/usr/include/string.h:137:32:\
    \ note:   initializing argument 1 of \u2018int strcmp(const char*, const char*)\u2019\
    \n  137 | extern int strcmp (const char *__s1, const char *__s2)\n      |    \
    \                ~~~~~~~~~~~~^~~~\n/tmp/tmpzp63fvhc.cpp:41:60: error: cannot convert\
    \ \u2018std::__cxx11::basic_string<char>\u2019 to \u2018const char*\u2019\n  \
    \ 41 |         if (std::strcmp(\"01-\" + std::to_string(days) + \"-\" + std::to_string(year1),\
    \ \"%d-\" + std::to_string(days) + \"-\" + std::to_string(year1)) == 0) {\n  \
    \    |                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                                            |\n      |\
    \                                                            std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/cstring:42,\n        "
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) return\
    \ false;\n    std::istringstream in(date);\n    int days;\n    int month;\n  \
    \  int year;\n    in >> month >> days >> year;\n    if (month < 1 || month > 12)\
    \ return false;\n    if (days < 1 || days > 31) return false;\n    if (days ==\
    \ 31) {\n        if (month == 2) {\n            if (year % 4 == 0 && year % 100\
    \ != 0 || year % 400 == 0) return true;\n            else return false;\n    \
    \    }\n        else if (month == 1) {\n            if (year % 4 == 0 && year\
    \ % 100 != 0 || year % 400 != 0) return true;\n            else return false;\n\
    \        }\n        else if (month == 3) return true;\n    }\n    if (days ==\
    \ 30) {\n        if (month == 4) return true;\n        else if (month == 6) return\
    \ true;\n        else if (month == 9) return true;\n        else if (month ==\
    \ 11) return true;\n        else return false;\n    }\n    if (days == 29) {\n\
    \        if (month == 2) return true;\n        else return false;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpot7293ka: /tmp/tmpot7293ka.cpp:55: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133517
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty())\n \
    \       return false;\n    auto split_date = date.substr(0, 21);\n    std::replace(split_date.begin(),\
    \ split_date.end(), '-', '_');\n    std::replace(split_date.begin(), split_date.end(),\
    \ \"/\", \"-\");\n    std::vector<std::string> days;\n    std::transform(split_date.begin(),\
    \ split_date.end(), std::back_inserter(days), [](char c) {\n        return std::tolower(c);\n\
    \    });\n    for (int i = 1; i < 31; i++) {\n        if (days[i - 1] != 'j' &&\
    \ days[i - 1] != 'a' && days[i - 1] != 'w' && days[i - 1] != 'm' && days[i - 1]\
    \ != 'd')\n            return false;\n    }\n    for (int i = 1; i < 30; i++)\
    \ {\n        if (days[i - 1] != 'j' && days[i - 1] != 'a' && days[i - 1] != 'w'\
    \ && days[i - 1] != 'm' && days[i - 1] != 'd' && days[i - 1] != 'h')\n       \
    \     return false;\n    }\n    if (days[2] < 1 || days[2] > 12)\n        return\
    \ false;\n    if (days[1] < 1 || days[1] > 12)\n        return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt37xyc12.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpt37xyc12.cpp:31:25: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018char\u2019)\n   31 |         if (days[i - 1] != 'j' && days[i - 1]\
    \ != 'a' && days[i - 1] != 'w' && days[i - 1] != 'm' && days[i - 1] != 'd')\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpt37xyc12.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpt37xyc12.cpp:31:28:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   31\
    \ |         if (days[i - 1] != 'j' && days[i - 1] != 'a' && days[i - 1] != 'w'\
    \ && days[i - 1] != 'm' && days[i - 1] != 'd')\n      |                      \
    \      ^~~\nIn file included from /usr/include/c++/9/regex:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n           \
    \      from /tmp/tmpt37xyc12.cpp:2:\n/usr/include/c++/9/bits/regex.h:1112:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/i"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ month = {\"\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\"\
    , \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::vector<std::string>\
    \ days = {\"\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"\
    };\n    std::vector<std::string> year = {\"\", \"2000\", \"2001\", \"2002\", \"\
    2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\",\
    \ \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\"\
    , \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\"\
    , \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\"\
    , \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\"\
    , \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\"\
    , \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\"\
    , \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\"\
    , \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\"\
    , \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\"\
    , \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\"\
    , \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\"\
    , \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\"\
    , \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\"\
    , \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\", \"2146\"\
    , \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\", \"2154\"\
    , \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\", \"2162\"\
    , \"2163\", \"2164\", \"2165\", \"2166\", \"2167\", \"216\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg7x5n315.cpp:23:1386: warning: missing terminating \" character\n\
    \   23 |     std::vector<std::string> year = {\"\", \"2000\", \"2001\", \"2002\"\
    , \"2003\", \"2004\", \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\"\
    , \"2011\", \"2012\", \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\"\
    , \"2019\", \"2020\", \"2021\", \"2022\", \"2023\", \"2024\", \"2025\", \"2026\"\
    , \"2027\", \"2028\", \"2029\", \"2030\", \"2031\", \"2032\", \"2033\", \"2034\"\
    , \"2035\", \"2036\", \"2037\", \"2038\", \"2039\", \"2040\", \"2041\", \"2042\"\
    , \"2043\", \"2044\", \"2045\", \"2046\", \"2047\", \"2048\", \"2049\", \"2050\"\
    , \"2051\", \"2052\", \"2053\", \"2054\", \"2055\", \"2056\", \"2057\", \"2058\"\
    , \"2059\", \"2060\", \"2061\", \"2062\", \"2063\", \"2064\", \"2065\", \"2066\"\
    , \"2067\", \"2068\", \"2069\", \"2070\", \"2071\", \"2072\", \"2073\", \"2074\"\
    , \"2075\", \"2076\", \"2077\", \"2078\", \"2079\", \"2080\", \"2081\", \"2082\"\
    , \"2083\", \"2084\", \"2085\", \"2086\", \"2087\", \"2088\", \"2089\", \"2090\"\
    , \"2091\", \"2092\", \"2093\", \"2094\", \"2095\", \"2096\", \"2097\", \"2098\"\
    , \"2099\", \"2100\", \"2101\", \"2102\", \"2103\", \"2104\", \"2105\", \"2106\"\
    , \"2107\", \"2108\", \"2109\", \"2110\", \"2111\", \"2112\", \"2113\", \"2114\"\
    , \"2115\", \"2116\", \"2117\", \"2118\", \"2119\", \"2120\", \"2121\", \"2122\"\
    , \"2123\", \"2124\", \"2125\", \"2126\", \"2127\", \"2128\", \"2129\", \"2130\"\
    , \"2131\", \"2132\", \"2133\", \"2134\", \"2135\", \"2136\", \"2137\", \"2138\"\
    , \"2139\", \"2140\", \"2141\", \"2142\", \"2143\", \"2144\", \"2145\", \"2146\"\
    , \"2147\", \"2148\", \"2149\", \"2150\", \"2151\", \"2152\", \"2153\", \"2154\"\
    , \"2155\", \"2156\", \"2157\", \"2158\", \"2159\", \"2160\", \"2161\", \"2162\"\
    , \"2163\", \"2164\", \"2165\", \"2166\", \"2167\", \"216\n      |           \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                             "
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::regex re1(\"^(0[1-9]|[12][0-9]|3[01])/(0[1-9]|1[012])/((19|20)\\\\d\\\
    \\d)$\");\n    std::regex re2(\"^(0[1-9]|1[012])/(0[1-9]|[12][0-9]|3[01])/(19|20)\\\
    \\d\\\\d(?:\\\\d\\\\d)?$\");\n    std::smatch match;\n    if (std::regex_match(date,\
    \ match, re1) || std::regex_match(date, match, re2)) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_s0r55f9: /tmp/tmp_s0r55f9.cpp:32: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::pair<int, int> date_range\
    \ = \n      std::make_pair(date.find_last_of('-'), date.find_first_of('.'));\n\
    \n  // Check that the string is not empty\n  if(date.empty()) return false;\n\n\
    \  // Check that the number of days is between 1 and 31\n  if(date_range.first\
    \ < 1 || date_range.first > 31) return false;\n\n  // Check that the number of\
    \ days is between 1 and 30\n  if(date_range.second < 1 || date_range.second >\
    \ 30) return false;\n\n  // Check that the number of days is between 1 and 29\n\
    \  if(date.find_last_of('-') > date.find_first_of('.')) return false;\n\n  //\
    \ Check that the month value is between 1 and 12\n  if(date.find_first_of('-')\
    \ > date.find_last_of('.')) return false;\n\n  // Check the date format\n  if(date.find_first_of('-')\
    \ < date.find_last_of('.')) return false;\n\n  // If all the checks are passed\
    \ then return true\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxt35aog4: /tmp/tmpxt35aog4.cpp:47: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code goes here.\n\
    \  int day=0,month=0,year=0;\n  std::stringstream ss(date);\n  ss >> month;\n\
    \  ss >> day;\n  ss >> year;\n  if(year<1 ||year>2040) {\n    return false;\n\
    \  }\n  if(month<1 || month>12) {\n    return false;\n  }\n  if(day<1 || day>31)\
    \ {\n    return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmtbn86t1: /tmp/tmpmtbn86t1.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133517
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // TODO: Write your code\
    \ here\n    int day;\n    int month;\n    bool valid = false;\n    std::istringstream\
    \ iss(date);\n    iss >> month >> day >> year;\n    valid = month >= 1 && month\
    \ <= 12 && day > 0 && day < 31 && year > 0 && year < 1000;\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjzri0b3o.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjzri0b3o.cpp:26:28: error: \u2018year\u2019 was not declared in this\
    \ scope\n   26 |     iss >> month >> day >> year;\n      |                   \
    \         ^~~~\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) return\
    \ true;\n    if (date.length() < 4 || date.length() > 10) \n        return false;\n\
    \    \n    int d1, d2, d3;\n    sscanf(date.c_str(), \"%d-%d-%d\", &d1, &d2, &d3);\n\
    \    if (d2 < 1 || d2 > 12) return false;\n    if (d3 < 1 || d3 > 31) return false;\n\
    \    if (d1 < 1 || d1 > 30) return false;\n\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8l30xzo0: /tmp/tmp8l30xzo0.cpp:35: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty() || date.length()\
    \ != 10 || date.at(0) == '-' || date.at(2) == '-' || date.at(4) != '-') {\n  \
    \      return false;\n    }\n    int day = stoi(&date.at(3));\n    int month =\
    \ stoi(&date.at(1));\n    int year = stoi(&date.at(0));\n    // Validate the date\
    \ by checking the above conditions\n    if (day < 1 || day > 31 || (month == 2\
    \ && year % 400 == 0) || (month == 4 && year % 400 != 0)) {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkont0jq_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpkont0jq_.cpp:24:15: error: \u2018stoi\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::stoi\u2019?\n   24 |     int day = stoi(&date.at(3));\n\
    \      |               ^~~~\n      |               std::__cxx11::stoi\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpkont0jq_.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // The function should\
    \ return true if the date string is valid otherwise it returns false.\n    \n\
    \    // Your code goes here\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjjnkhbeo: /tmp/tmpjjnkhbeo.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months =\
    \ {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"};\n    std::string days\
    \ = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"\
    10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\",\
    \ \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\"\
    , \"30\", \"31\"};\n    std::string years = {\"19\", \"20\", \"21\", \"22\", \"\
    23\", \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\",\
    \ \"33\", \"34\", \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\"\
    , \"43\", \"44\", \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\"\
    , \"53\", \"54\", \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\"\
    , \"63\", \"64\", \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\"\
    , \"73\", \"74\", \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\"\
    , \"83\", \"84\", \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\"\
    , \"93\", \"94\", \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"\
    102\", \"103\", \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\"\
    , \"111\", \"112\", \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\"\
    , \"120\", \"121\", \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\"\
    , \"129\", \"130\", \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\"\
    , \"138\", \"139\", \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\"\
    , \"147\", \"148\", \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\"\
    , \"156\", \"157\", \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\"\
    , \"165\", \"166\", \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\"\
    , \"174\", \"175\", \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\"\
    , \"183\", \"184\", \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\"\
    , \"192\", \"193\", \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\"\
    , \"201\", \"202\", \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\"\
    , \"210\", \"211\", \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\"\
    , \"219\", \"220\", \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\"\
    , \"228\", \"229\", \"\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk2l_j6lp.cpp:23:1422: warning: missing terminating \" character\n\
    \   23 |     std::string years = {\"19\", \"20\", \"21\", \"22\", \"23\", \"24\"\
    , \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\", \"32\", \"33\", \"34\"\
    , \"35\", \"36\", \"37\", \"38\", \"39\", \"40\", \"41\", \"42\", \"43\", \"44\"\
    , \"45\", \"46\", \"47\", \"48\", \"49\", \"50\", \"51\", \"52\", \"53\", \"54\"\
    , \"55\", \"56\", \"57\", \"58\", \"59\", \"60\", \"61\", \"62\", \"63\", \"64\"\
    , \"65\", \"66\", \"67\", \"68\", \"69\", \"70\", \"71\", \"72\", \"73\", \"74\"\
    , \"75\", \"76\", \"77\", \"78\", \"79\", \"80\", \"81\", \"82\", \"83\", \"84\"\
    , \"85\", \"86\", \"87\", \"88\", \"89\", \"90\", \"91\", \"92\", \"93\", \"94\"\
    , \"95\", \"96\", \"97\", \"98\", \"99\", \"100\", \"101\", \"102\", \"103\",\
    \ \"104\", \"105\", \"106\", \"107\", \"108\", \"109\", \"110\", \"111\", \"112\"\
    , \"113\", \"114\", \"115\", \"116\", \"117\", \"118\", \"119\", \"120\", \"121\"\
    , \"122\", \"123\", \"124\", \"125\", \"126\", \"127\", \"128\", \"129\", \"130\"\
    , \"131\", \"132\", \"133\", \"134\", \"135\", \"136\", \"137\", \"138\", \"139\"\
    , \"140\", \"141\", \"142\", \"143\", \"144\", \"145\", \"146\", \"147\", \"148\"\
    , \"149\", \"150\", \"151\", \"152\", \"153\", \"154\", \"155\", \"156\", \"157\"\
    , \"158\", \"159\", \"160\", \"161\", \"162\", \"163\", \"164\", \"165\", \"166\"\
    , \"167\", \"168\", \"169\", \"170\", \"171\", \"172\", \"173\", \"174\", \"175\"\
    , \"176\", \"177\", \"178\", \"179\", \"180\", \"181\", \"182\", \"183\", \"184\"\
    , \"185\", \"186\", \"187\", \"188\", \"189\", \"190\", \"191\", \"192\", \"193\"\
    , \"194\", \"195\", \"196\", \"197\", \"198\", \"199\", \"200\", \"201\", \"202\"\
    , \"203\", \"204\", \"205\", \"206\", \"207\", \"208\", \"209\", \"210\", \"211\"\
    , \"212\", \"213\", \"214\", \"215\", \"216\", \"217\", \"218\", \"219\", \"220\"\
    , \"221\", \"222\", \"223\", \"224\", \"225\", \"226\", \"227\", \"228\", \"229\"\
    , \"\n      |                                                                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                   "
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(!date.empty());\n\
    \    int daysInMonth[31];\n    int dayInMonth[31];\n    int dayYear[31];\n\n \
    \   // Read number of days in each month\n    for (int i = 0; i < 12; i++) {\n\
    \        std::sscanf(date.c_str(), \"%2d%2d\", &daysInMonth[i], &dayInMonth[i]);\n\
    \    }\n    // Check if number of days are valid\n    for (int i = 0; i < 12;\
    \ i++) {\n        if (daysInMonth[i] < 1 || daysInMonth[i] > 31) {\n         \
    \   return false;\n        }\n    }\n\n    // Read the date string\n    std::sscanf(date.c_str(),\
    \ \"%2d-%2d-%4s\",\n        &dayYear[0], &dayInMonth[0], &dayYear[1]);\n    int\
    \ monthNum = date[0] - '0';\n    for (int i = 1; i < 12; i++) {\n        if (i\
    \ == monthNum) {\n            continue;\n        }\n        if (dayInMonth[i]\
    \ < 1 || dayInMonth[i] > 31) {\n            return false;\n        }\n    }\n\n\
    \    // Check if date is in the correct format\n    return dayYear[0] == dayInMonth[0];\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd19l3pff: /tmp/tmpd19l3pff.cpp:55: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133515
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (!date.empty() &&\
    \ date.size() >= 6) {\n        std::size_t year_index = date.find_first_of(\"\
    -\");\n        std::size_t month_index = date.find_first_of(\"-0\");\n       \
    \ std::size_t day_index = date.find_first_of(\"-\");\n        if ((year_index\
    \ < 0 || year_index == date.size()) || (month_index < 0 || month_index == date.size())\
    \ || (day_index < 0 || day_index == date.size())) {\n            return false;\n\
    \        }\n        bool is_month = date[month_index] == '-' || date[month_index]\
    \ == '0';\n        bool is_day = date[day_index] == '-' || date[day_index] ==\
    \ '0';\n        bool is_year = date[year_index] == '-' || date[year_index] ==\
    \ '0';\n        bool is_month = date[month_index] == '0' || date[month_index]\
    \ == '1';\n        bool is_day = date[day_index] == '0' || date[day_index] ==\
    \ '1';\n        bool is_year = date[year_index] == '0' || date[year_index] ==\
    \ '1';\n        bool is_month = date[month_index] == '1' || date[month_index]\
    \ == '3';\n        bool is_day = date[day_index] == '1' || date[day_index] ==\
    \ '3';\n        bool is_year = date[year_index] == '1' || date[year_index] ==\
    \ '3';\n        bool is_month = date[month_index] == '3' || date[month_index]\
    \ == '5';\n        bool is_day = date[day_index] == '3' || date[day_index] ==\
    \ '5';\n        bool is_year = date[year_index] == '3' || date[year_index] ==\
    \ '5';\n        bool is_month = date[month_index] == '5' || date[month_index]\
    \ == '7';\n        bool is_day = date[day_index] == '5' || date[day_index] ==\
    \ '7';\n        bool is_year = date[year_index] == '5' || date[year_index] ==\
    \ '7';\n        bool is_month = date[month_index] == '7' || date[month_index]\
    \ == '8';\n        bool is_day = date[day_index] == '7' || date[day_index] ==\
    \ '8';\n        bool is_year = date[year_index] == '7' || date[year_index] ==\
    \ '8';\n        bool is_month = date[month_index] == '8' || date[month_index]\
    \ == '10';\n        bool is_day = date[day_index] == '8' || date[day_index] ==\
    \ '10';\n        bool is_year = date[year_index] == '8' || date[year_index] ==\
    \ '10';\n        bool is_month = date[month_index] == '10' || date[month_index]\
    \ == '12';\n        bool is_day = date[day_index] == '\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprs2jd_lm.cpp:46:74: warning: multi-character character constant\
    \ [-Wmultichar]\n   46 |         bool is_month = date[month_index] == '8' || date[month_index]\
    \ == '10';\n      |                                                          \
    \                ^~~~\n/tmp/tmprs2jd_lm.cpp:47:68: warning: multi-character character\
    \ constant [-Wmultichar]\n   47 |         bool is_day = date[day_index] == '8'\
    \ || date[day_index] == '10';\n      |                                       \
    \                             ^~~~\n/tmp/tmprs2jd_lm.cpp:48:71: warning: multi-character\
    \ character constant [-Wmultichar]\n   48 |         bool is_year = date[year_index]\
    \ == '8' || date[year_index] == '10';\n      |                               \
    \                                        ^~~~\n/tmp/tmprs2jd_lm.cpp:49:46: warning:\
    \ multi-character character constant [-Wmultichar]\n   49 |         bool is_month\
    \ = date[month_index] == '10' || date[month_index] == '12';\n      |         \
    \                                     ^~~~\n/tmp/tmprs2jd_lm.cpp:49:75: warning:\
    \ multi-character character constant [-Wmultichar]\n   49 |         bool is_month\
    \ = date[month_index] == '10' || date[month_index] == '12';\n      |         \
    \                                                                  ^~~~\n/tmp/tmprs2jd_lm.cpp:50:42:\
    \ warning: missing terminating ' character\n   50 |         bool is_day = date[day_index]\
    \ == '\n      |                                          ^\n/tmp/tmprs2jd_lm.cpp:50:42:\
    \ error: missing terminating ' character\n/tmp/tmprs2jd_lm.cpp: In function \u2018\
    bool valid_date(std::string)\u2019:\n/tmp/tmprs2jd_lm.cpp:31:14: error: redeclaration\
    \ of \u2018bool is_month\u2019\n   31 |         bool is_month = date[month_index]\
    \ == '0' || date[month_index] == '1';\n      |              ^~~~~~~~\n/tmp/tmprs2jd_lm.cpp:28:14:\
    \ note: \u2018bool is_month\u2019 previously declared here\n   28 |         bool\
    \ is_month = date[month_index] == '-' || date[month_index] == '0';\n      |  \
    \            ^~~~~~~~\n/tmp/tmprs2jd_lm.cpp:32:14: error: redeclaration of \u2018\
    bool is_day\u2019\n   32 |         bool is_day = date["
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    year = stoi(strtok(date.c_str(), \" \"));\n    month = stoi(strtok(NULL,\
    \ \"-\"));\n    day = stoi(strtok(NULL, \"-\"));\n    \n    if (year < 1 || year\
    \ > 9999 || month < 1 || month > 12 || day < 1 || day > 31) {\n        return\
    \ false;\n    }\n    \n    if (day > 29) {\n        return false;\n    }\n   \
    \ \n    if ((year % 4 != 0 && year % 100 == 0) || year % 400 == 0)\n    {\n  \
    \      return true;\n    }\n    \n    return false;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0lov6qn9.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0lov6qn9.cpp:22:34: error: invalid conversion from \u2018const char*\u2019\
    \ to \u2018char*\u2019 [-fpermissive]\n   22 |     year = stoi(strtok(date.c_str(),\
    \ \" \"));\n      |                        ~~~~~~~~~~^~\n      |             \
    \                     |\n      |                                  const char*\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmp0lov6qn9.cpp:2:\n/usr/include/string.h:336:39:\
    \ note:   initializing argument 1 of \u2018char* strtok(char*, const char*)\u2019\
    \n  336 | extern char *strtok (char *__restrict __s, const char *__restrict __delim)\n\
    \      |                      ~~~~~~~~~~~~~~~~~^~~\n/tmp/tmp0lov6qn9.cpp:22:12:\
    \ error: \u2018stoi\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::stoi\u2019?\n   22 |     year = stoi(strtok(date.c_str(), \" \"\
    ));\n      |            ^~~~\n      |            std::__cxx11::stoi\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp0lov6qn9.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n"
  stdout: ''
  timestamp: 1660133515
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream in(date);\n\
    \    int day, month, year;\n    if (in >> day >> month >> year)\n    {\n     \
    \   std::cout << \"Day: \" << day << \" Month: \" << month << \" Year: \" << year\
    \ << '\\n';\n        if ((month < 1 || month > 12) || (day < 1 || day > 31) ||\
    \ (day > 30) || (day > 29) || (day > 31))\n        {\n            std::cout <<\
    \ \"Invalid\\n\";\n            return false;\n        }\n        else\n      \
    \  {\n            return true;\n        }\n    }\n    else\n    {\n        std::cout\
    \ << \"Invalid Date\\n\";\n        return false;\n    }\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgxgvjx3r: /tmp/tmpgxgvjx3r.cpp:44: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << date <<\
    \ std::endl;\n    if (date.empty()) return false;\n    if (date.size() != 10)\
    \ return false;\n    int m = stoi(date.substr(6, 2));\n    int d = stoi(date.substr(3,\
    \ 2));\n    int y = stoi(date.substr(0, 4));\n    int y = (y % 4 == 0) ? ((y /\
    \ 100) * 100) : (y / 100);\n    return ((m > 0 && m < 13 && d > 0 && d < 32 &&\
    \ y > 0 && y < 32 && y >= 1900));\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_l02sb3z.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_l02sb3z.cpp:27:9: error: redeclaration of \u2018int y\u2019\n   27\
    \ |     int y = (y % 4 == 0) ? ((y / 100) * 100) : (y / 100);\n      |       \
    \  ^\n/tmp/tmp_l02sb3z.cpp:26:9: note: \u2018int y\u2019 previously declared here\n\
    \   26 |     int y = stoi(date.substr(0, 4));\n      |         ^\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    int num_days;\n    std::stringstream ss;\n    if (date != \"\") {\n     \
    \   ss << date;\n        ss >> day >> month >> year;\n        ss >> num_days;\n\
    \    }\n    if (month != 1 && month != 3 && month != 5 && month != 7 && month\
    \ != 8 && month != 10 && month != 12 && month != 4 && month != 6 && month != 9\
    \ && month != 11 && month != 2)\n        return false;\n    if (month == 2) num_days\
    \ = 29;\n    if (day < 1 || day > 31) return false;\n    if (month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ num_days = 30;\n    if (day < 1 || day > 30) return false;\n    if (month ==\
    \ 4 || month == 6 || month == 9 || month == 11) num_days = 29;\n    if (day <\
    \ 1 || day > 29) return false;\n    if (month == 2) num_days = 28;\n    if (year\
    \ < 1000 || year > 2999) return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbvthanmx: /tmp/tmpbvthanmx.cpp:43: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = false;\n\
    \    std::regex date_regex(\"^([0-9]{2})-([0-9]{2})-([0-9]{4})$\");\n    std::smatch\
    \ match;\n    if (std::regex_search(date, match, date_regex)) {\n        valid\
    \ = true;\n        if (match[1].size() != 2 || match[2].size() != 2 || match[3].size()\
    \ != 4) {\n            valid = false;\n        }\n    }\n    else {\n        valid\
    \ = false;\n    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4vc2c36q.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp4vc2c36q.cpp:26:22: error: \u2018const value_type\u2019 {aka \u2018\
    const class std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> > >\u2019} has no member named \u2018size\u2019\
    \n   26 |         if (match[1].size() != 2 || match[2].size() != 2 || match[3].size()\
    \ != 4) {\n      |                      ^~~~\n/tmp/tmp4vc2c36q.cpp:26:46: error:\
    \ \u2018const value_type\u2019 {aka \u2018const class std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >\u2019} has no member named \u2018\
    size\u2019\n   26 |         if (match[1].size() != 2 || match[2].size() != 2 ||\
    \ match[3].size() != 4) {\n      |                                           \
    \   ^~~~\n/tmp/tmp4vc2c36q.cpp:26:70: error: \u2018const value_type\u2019 {aka\
    \ \u2018const class std::__cxx11::sub_match<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >\u2019} has no member named \u2018\
    size\u2019\n   26 |         if (match[1].size() != 2 || match[2].size() != 2 ||\
    \ match[3].size() != 4) {\n      |                                           \
    \                           ^~~~\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    if(date.empty())\n        return false;\n    int daysInMonths[12] = {31,30,29,31,30,31,30,31,30,31,30,31,30,31};\n\
    \    int day;\n    int month;\n    int year;\n    std::string::iterator itr =\
    \ date.begin();\n    while(itr != date.end()) {\n        if(*itr == '-')\n   \
    \         itr++;\n        if(*itr == '/') {\n            ++itr;\n            if(*itr\
    \ == '/')\n                ++itr;\n            int daysInMonth = daysInMonths[month-1];\n\
    \            while(*itr >= '0' && *itr <= '9') {\n                day = *itr -\
    \ '0';\n                if(day > daysInMonth)\n                    return false;\n\
    \                else\n                    ++itr;\n            }\n           \
    \ month++;\n        } else {\n            int daysInMonth = daysInMonths[month-1];\n\
    \            while(*itr >= '0' && *itr <= '9') {\n                day = *itr -\
    \ '0';\n                if(day > daysInMonth)\n                    return false;\n\
    \                else\n                    ++itr;\n            }\n           \
    \ month++;\n        }\n        year++;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppz09oo5q.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmppz09oo5q.cpp:24:70: error: too many initializers for \u2018int [12]\u2019\
    \n   24 |     int daysInMonths[12] = {31,30,29,31,30,31,30,31,30,31,30,31,30,31};\n\
    \      |                                                                     \
    \ ^\n"
  stdout: ''
  timestamp: 1660133516
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) {\n\
    \        return false;\n    }\n    if (date.length() < 2 || date.length() > 10)\
    \ {\n        return false;\n    }\n    if (date.at(0) == '0' && date.at(1) ==\
    \ '0') {\n        return false;\n    }\n    // First 2 characters need to be numbers\
    \ for months.\n    if (date.at(1) == '1') {\n        // Check to see if month\
    \ is less than 1 or higher than 12.\n        if ((date.at(0) - '0') % 1 != 0 ||\
    \ date.at(1) - '0' > 12) {\n            return false;\n        }\n    } else if\
    \ (date.at(1) == '3') {\n        // Check to see if month is less than 1 or higher\
    \ than 12.\n        if ((date.at(0) - '0') % 4 != 0 || date.at(1) - '0' > 12)\
    \ {\n            return false;\n        }\n    } else if (date.at(1) == '5') {\n\
    \        // Check to see if month is less than 1 or higher than 12.\n        if\
    \ ((date.at(0) - '0') % 6 != 0 || date.at(1) - '0' > 12) {\n            return\
    \ false;\n        }\n    } else if (date.at(1) == '7') {\n        // Check to\
    \ see if month is less than 1 or higher than 12.\n        if ((date.at(0) - '0')\
    \ % 9 != 0 || date.at(1) - '0' > 12) {\n            return false;\n        }\n\
    \    } else if (date.at(1) == '8') {\n        // Check to see if month is less\
    \ than 1 or higher than 12.\n        if ((date.at(0) - '0') % 11 != 0 || date.at(1)\
    \ - '0' > 12) {\n            return false;\n        }\n    } else if (date.at(1)\
    \ == '10') {\n        // Check to see if month is less than 1 or higher than 12.\n\
    \        if ((date.at(0) - '0') % 12 != 0 || date.at(1) - '0' > 12) {\n      \
    \      return false;\n        }\n    } else if (date.at(1) == '12') {\n      \
    \  // Check to see if month is less than 1 or higher than 12.\n        if ((date.at(0)\
    \ - '0') % 13 != 0 || date.at(1) - '0' > 12) {\n            return false;\n  \
    \      }\n    }\n    // Next 4 characters need to be numbers for days.\n    if\
    \ (date.at(2) == '1') {\n        // Check to see if day is less than 1 or higher\
    \ than 31\n        if ((date.at(1) - '0') % 1 != 0 || date.at(3) - '0' > 31) {\n\
    \            return false;\n        }\n    } else if (date.at(2) == '3') {\n \
    \       // Check to see if day is less than 1 or higher than 30\n        if ((date.at(1)\
    \ - '0') % 4 != 0 || date.at(3) - '0' > 30) {\n            return false;\n   \
    \     }\n    } else if (date.at(2) == '5') {\n        // Check to see if day is\
    \ less than 1 or higher than 29\n        if ((date.at(1) - '0') % 6 != 0 || date.at(3)\
    \ - '0' > 29) {\n            return false;\n        }\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm_5o_oz3.cpp:56:30: warning: multi-character character constant\
    \ [-Wmultichar]\n   56 |     } else if (date.at(1) == '10') {\n      |       \
    \                       ^~~~\n/tmp/tmpm_5o_oz3.cpp:61:30: warning: multi-character\
    \ character constant [-Wmultichar]\n   61 |     } else if (date.at(1) == '12')\
    \ {\n      |                              ^~~~\n/tmp/tmpm_5o_oz3.cpp: In function\
    \ \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpm_5o_oz3.cpp:84:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n   84\
    \ | int main() {\n      |            ^\n/tmp/tmpm_5o_oz3.cpp:102:1: error: expected\
    \ \u2018}\u2019 at end of input\n  102 | }\n      | ^\n/tmp/tmpm_5o_oz3.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpm_5o_oz3.cpp:102:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  102 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133518
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code goes here\n\
    \    bool check = true;\n    auto temp = date.substr(3,5);\n    int d = stoi(temp.substr(0,2));\n\
    \    int m = stoi(temp.substr(3,2));\n    int y = stoi(temp.substr(6,4));\n  \
    \  if (d <= 31 && d >= 1 && m <= 12 && m >= 1 && y <= 11 && y >= 1) {\n      \
    \  check = false;\n    }\n    if (d <= 31 && d >= 1 && m <= 12 && m >= 1 && y\
    \ <= 11 && y >= 1) {\n        check = false;\n    }\n    if (d <= 31 && d >= 1\
    \ && m <= 12 && m >= 1 && y <= 11 && y >= 1) {\n        check = false;\n    }\n\
    \    if (d <= 31 && d >= 1 && m <= 12 && m >= 1 && y <= 11 && y >= 1) {\n    \
    \    check = false;\n    }\n    if (d <= 30 && d >= 4 && m == 2 && d == 1 || m\
    \ == 2 && d == 4) {\n        check = false;\n    }\n    return check;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::substr: __pos (which is 6) > this->size() (which is 5)\n"
  stdout: ''
  timestamp: 1660133520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = false;\n\
    \    std::istringstream ss(date);\n    if (date != \"\") {\n        std::string\
    \ month, day;\n        ss >> month >> day;\n        if (month != \"0\" && month\
    \ != \"1\" &&\n            month != \"2\" && month != \"3\" &&\n            month\
    \ != \"4\" && month != \"5\" &&\n            month != \"6\" && month != \"7\"\
    \ &&\n            month != \"8\" && month != \"9\" &&\n            month != \"\
    10\" && month != \"11\" &&\n            month != \"12\" &&\n            day !=\
    \ \"0\" && day != \"1\" && day != \"2\" && day != \"3\" && day != \"4\" && day\
    \ != \"5\" && day != \"6\" && day != \"7\" && day != \"8\" && day != \"9\" &&\
    \ day != \"10\" && day != \"11\" && day != \"12\")\n            valid = false;\n\
    \    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcjjh1cm8: /tmp/tmpcjjh1cm8.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Complete the code\
    \ here.\n    // return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9e0ajh_r: /tmp/tmp9e0ajh_r.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133518
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if (date.empty()) {\n \
    \   return false;\n  }\n\n  auto date_string = date;\n  auto date_begin = date_string.begin();\n\
    \n  // number of days in 1 month\n  // for january, february, march, april, may,\
    \ june, july, august and september\n  // the number is 31\n  // for april and\
    \ june, it is 30\n  auto number_of_days = 31;\n\n  // month should be between\
    \ 1-12\n  auto number_of_months = 12;\n  auto month_index = date_string.find_first_of('0',\
    \ date_begin);\n  if (month_index != string::npos) {\n    auto month_string =\
    \ date_string.substr(month_index + 1, 2);\n    month_index = month_string.find_first_of('-',\
    \ month_index);\n    if (month_index != string::npos) {\n      auto month_int\
    \ = std::stoi(month_string);\n      if (month_int < 1 || month_int > number_of_months)\
    \ {\n        return false;\n      }\n    }\n  }\n\n  auto date_end = date_string.find_first_of('-',\
    \ date_begin);\n  if (date_end != string::npos) {\n    date_begin += 2;\n    date_end\
    \ = date_string.find_first_of('-', date_begin);\n    if (date_end != string::npos)\
    \ {\n      auto day_string = date_string.substr(date_end + 1);\n      auto day_int\
    \ = std::stoi(day_string);\n      if (day_int < 1 || day_int > number_of_days)\
    \ {\n        return false;\n      }\n    }\n  }\n\n  auto year_string = date_string.substr(date_begin,\
    \ 4);\n  auto year_int = std::stoi(year_string);\n  if (year_int < 2000 || year_int\
    \ > 2999) {\n    return false;\n  }\n\n  return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptr623rhw.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptr623rhw.cpp:36:63: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::find_first_of(char, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   36 |   auto month_index = date_string.find_first_of('0',\
    \ date_begin);\n      |                                                      \
    \         ^\nIn file included from /usr/include/c++/9/string:55,\n           \
    \      from /usr/include/c++/9/bits/locale_classes.h:40,\n                 from\
    \ /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmptr623rhw.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2506:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find_first_of(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2506 |       find_first_of(const basic_string& __str, size_type\
    \ __pos = 0) const\n      |       ^~~~~~~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:2506:41:\
    \ note:   no known conversion for argument 1 from \u2018char\u2019 to \u2018const\
    \ std::__cxx11::basic_string<char>&\u2019\n 2506 |       find_first_of(const basic_string&\
    \ __str, size_type __pos = 0) const\n      |                     ~~~~~~~~~~~~~~~~~~~~^~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:2520:2: note: candidate: \u2018template<class\
    \ _Tp> std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::_If_sv<_Tp, typename\
    \ __gnu"
  stdout: ''
  timestamp: 1660133518
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool valid = false;\n    if (date.size() != 0) {\n        int date1 = 0,\
    \ date2 = 0, date3 = 0, date4 = 0;\n        std::stringstream ss(date);\n    \
    \    ss >> date1 >> date2 >> date3 >> date4;\n        if ((date1 != 1) && (date1\
    \ != 3) && (date1 != 5) && (date1 != 7) && (date1 != 8) && (date1 != 10) && (date1\
    \ != 12) && (date1 != 4) && (date1 != 6) && (date1 != 9) && (date1 != 11) && (date1\
    \ != 2) && (date1 != 0) && (date2 != 1) && (date2 != 3) && (date2 != 5) && (date2\
    \ != 7) && (date2 != 8) && (date2 != 10) && (date2 != 12) && (date2 != 4) && (date2\
    \ != 6) && (date2 != 9) && (date2 != 11) && (date2 != 2) && (date2 != 0) && (date3\
    \ != 1) && (date3 != 3) && (date3 != 5) && (date3 != 7) && (date3 != 8) && (date3\
    \ != 10) && (date3 != 12) && (date3 != 4) && (date3 != 6) && (date3 != 9) && (date3\
    \ != 11) && (date3 != 2) && (date3 != 0) && (date4 != 1) && (date4 != 3) && (date4\
    \ != 5) && (date4 != 7) && (date4 != 8) && (date4 != 10) && (date4 != 12) && (date4\
    \ != 4) && (date4 != 6) && (date4 != 9) && (date4 != 11) && (date4 != 2) && (date4\
    \ != 0)) {\n            valid = false;\n        }\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0olskgau: /tmp/tmp0olskgau.cpp:35: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmplitma5gc: /tmp/tmplitma5gc.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133518
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    struct tm tm;\n    struct\
    \ tm date_tm;\n    strptime(date.c_str(), \"%m-%d-%Y\", &date_tm);\n    // Check\
    \ if tm_year value is between 1900 and 2100 (1900-2100 = 2000-2100)\n    if (1900\
    \ < date_tm.tm_year && date_tm.tm_year < 2100) {\n        // Get the tm_mon value\n\
    \        tm.tm_mon = date_tm.tm_mon - 1;\n        // Get the tm_mday value\n \
    \       tm.tm_mday = date_tm.tm_mday;\n        // Get the tm_hour value\n    \
    \    tm.tm_hour = date_tm.tm_hour;\n        // Get the tm_min value\n        tm.tm_min\
    \ = date_tm.tm_min;\n        // Get the tm_sec value\n        tm.tm_sec = date_tm.tm_sec;\n\
    \        // Get the tm_wday value\n        tm.tm_wday = date_tm.tm_wday;\n   \
    \     // Get the tm_yday value\n        tm.tm_yday = date_tm.tm_yday;\n      \
    \  // Get the tm_yday value\n        tm.tm_isdst = -1;\n        // Convert the\
    \ date into the time structure using the mktime function\n        time_t time_val\
    \ = mktime(&tm);\n        // Compare the date against the current time\n     \
    \   if (time_val == -1) {\n            std::cout << \"Invalid date\\n\";\n   \
    \         return false;\n        }\n        return true;\n    } else {\n     \
    \   std::cout << \"Invalid date\\n\";\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0g7hvqve: /tmp/tmp0g7hvqve.cpp:57: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphxd41n_5: /tmp/tmphxd41n_5.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int i, d, y, m, d;\n  char\
    \ ch[100];\n  // You have to validate each character of the date string and fill\
    \ the\n  // appropriate variables to validate the date.\n  // You have to consider\
    \ all the possible cases of the input string.\n  int days[31] = {31, 28, 31, 30,\
    \ 31, 30, 31, 31, 30, 31, 30, 31};\n  int months[12] = {0, 31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n  int month_ranges[12] = { 31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31 };\n\n  // Validate each characters of the date string\n\
    \  for (i = 0; i < date.length(); i++) {\n    ch[i] = date.at(i);\n    // If the\
    \ character is a digit, convert the character to a digit.\n    if (isdigit(ch[i]))\
    \ {\n      d = ch[i] - '0';\n      // If the character is a dash, subtract it\
    \ from the current date and year and continue.\n      if (ch[i + 1] == '-') {\n\
    \        for (y = 1900; y <= 2020; y++) {\n          for (x = 1; x <= 12 && x\
    \ >= 1; x++) {\n            if (months[x] == d) {\n              d++;\n      \
    \        ch[i + 1] = d;\n              break;\n            }\n          }\n  \
    \      }\n      }\n    }\n  }\n\n  // Validate the number of days\n  for (i =\
    \ 0; i < date.length(); i++) {\n    if (isdigit(ch[i])) {\n      d = ch[i] - '0';\n\
    \      if (d < 1 || d > 31) {\n        return false;\n      }\n    }\n  }\n\n\
    \  // Validate the months\n  for (i = 0; i < date.length(); i++) {\n    if (isdigit(ch[i]))\
    \ {\n      d = ch[i] - '0';\n      if (d < 1 || d > 12) {\n        return false;\n\
    \      }\n    }\n  }\n\n  // Validate date format\n  i = 0;\n  while ((i < date.length())\
    \ && (isdigit(date.at(i))) && (date.at(i) != '-')) {\n    i++;\n  }\n  if ((i\
    \ == date.length()) || (date.at(i) != '-')) {\n    return false;\n  }\n  i++;\n\
    \  while (i < date.length() && (isdigit(date.at(i))) && (date.at(i) != '/')) {\n\
    \    i++;\n  }\n  if ((i < date.length()) || (date.at(i) != '/')) {\n    return\
    \ false;\n  }\n  i++;\n  while (i < date.length() && (isdigit(date.at(i))) &&\
    \ (date.at(i) != '-')) {\n    i++;\n  }\n  if ((i < date.length()) || (date.at(i)\
    \ != '-')) {\n    return false;\n  }\n  i++;\n  while (i < date.length() && (isdigit(date.at(i)))\
    \ && (date.at(i) != '/')) {\n    i++;\n  }\n  if ((i < date.length()) || (date.at(i)\
    \ != '/\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8vk10hs.cpp:97:45: warning: missing terminating ' character\n\
    \   97 |   if ((i < date.length()) || (date.at(i) != '/\n      |             \
    \                                ^\n/tmp/tmpi8vk10hs.cpp:97:45: error: missing\
    \ terminating ' character\n   97 |   if ((i < date.length()) || (date.at(i) !=\
    \ '/\n      |                                             ^~\n/tmp/tmpi8vk10hs.cpp:\
    \ In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpi8vk10hs.cpp:21:19:\
    \ error: redeclaration of \u2018int d\u2019\n   21 |   int i, d, y, m, d;\n  \
    \    |                   ^\n/tmp/tmpi8vk10hs.cpp:21:10: note: \u2018int d\u2019\
    \ previously declared here\n   21 |   int i, d, y, m, d;\n      |          ^\n\
    /tmp/tmpi8vk10hs.cpp:27:70: error: too many initializers for \u2018int [12]\u2019\
    \n   27 |   int months[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \      |                                                                     \
    \ ^\n/tmp/tmpi8vk10hs.cpp:39:16: error: \u2018x\u2019 was not declared in this\
    \ scope\n   39 |           for (x = 1; x <= 12 && x >= 1; x++) {\n      |    \
    \            ^\n/tmp/tmpi8vk10hs.cpp:98:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   98 | }\n      | ^\n/tmp/tmpi8vk10hs.cpp:97:44:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   97 |   if ((i <\
    \ date.length()) || (date.at(i) != '/\n      |                              ~\
    \             ^\n      |                                            )\n   98 |\
    \ }\n      | ~                                           \n/tmp/tmpi8vk10hs.cpp:97:44:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   97 |   if ((i <\
    \ date.length()) || (date.at(i) != '/\n      |      ~                        \
    \             ^\n      |                                            )\n   98 |\
    \ }\n      | ~                                           \n/tmp/tmpi8vk10hs.cpp:98:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   98 | }\n \
    \     | ^\n/tmp/tmpi8vk10hs.cpp:98:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   98 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   bool valid = true;\n    valid = valid && date != \"\";\n    int count = 0;\n\
    \    int days[12];\n    memset(days, 0, sizeof(days));\n    int month = -1;\n\
    \    int year = -1;\n    for (char c : date) \n    {\n        if (count==2) \n\
    \        {\n            valid = valid && isdigit(c);\n            count++;\n \
    \       }\n        else if (count==4) \n        {\n            if (c!='-' && c!='/')\n\
    \            {\n                valid = valid && isdigit(c);\n               \
    \ count++;\n            }\n            else\n            {\n                valid\
    \ = valid && c == '-' && isdigit(date[2]);\n                count++;\n       \
    \         valid = valid && c == '/' && isdigit(date[3]);\n                count++;\n\
    \            }\n        }\n        else if (count==6)\n        {\n           \
    \ valid = valid && c!='-' && c!='/' && c!='-' && c!='/';\n            count++;\n\
    \        }\n        else if (count==8)\n        {\n            if (c!='-' && c!='/')\n\
    \            {\n                valid = valid && isdigit(c);\n               \
    \ count++;\n            }\n            else\n            {\n                valid\
    \ = valid && c == '-' && isdigit(date[2]);\n                count++;\n       \
    \         valid = valid && c == '/' && isdigit(date[3]);\n                count++;\n\
    \                valid = valid && c == '-' && isdigit(date[4]);\n            \
    \    count++;\n                valid = valid && c == '/' && isdigit(date[5]);\n\
    \                count++;\n            }\n        }\n        else if (count==10)\n\
    \        {\n            if (c!='-' && c!='/')\n            {\n               \
    \ valid = valid && isdigit(c);\n                count++;\n            }\n    \
    \        else\n            {\n                valid = valid && c == '-' && isdigit(date[2]);\n\
    \                count++;\n                valid = valid && c == '/' && isdigit(date[3]);\n\
    \                count++;\n                valid = valid && c == '-' && isdigit(date[4]);\n\
    \                count++;\n                valid = valid && c == '/' && isdigit(date[5]);\n\
    \                count++;\n                valid = valid && c == '-' && isdigit(date[6]);\n\
    \                count++;\n                valid = valid && c == '/' && isdigit(date[7]);\n\
    \                count++;\n                valid = valid && c == '-' && isdigit(date[8]);\n\
    \                count++;\n                valid = valid && c == '/' && \n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdjrezxq4.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpdjrezxq4.cpp:99:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   99 | }\n      | ^\n/tmp/tmpdjrezxq4.cpp:100:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  100 | int main() {\n     \
    \ |            ^\n/tmp/tmpdjrezxq4.cpp:118:1: error: expected \u2018}\u2019 at\
    \ end of input\n  118 | }\n      | ^\n/tmp/tmpdjrezxq4.cpp:76:9: note: to match\
    \ this \u2018{\u2019\n   76 |         {\n      |         ^\n/tmp/tmpdjrezxq4.cpp:118:1:\
    \ error: expected \u2018}\u2019 at end of input\n  118 | }\n      | ^\n/tmp/tmpdjrezxq4.cpp:30:5:\
    \ note: to match this \u2018{\u2019\n   30 |     {\n      |     ^\n/tmp/tmpdjrezxq4.cpp:118:1:\
    \ error: expected \u2018}\u2019 at end of input\n  118 | }\n      | ^\n/tmp/tmpdjrezxq4.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpdjrezxq4.cpp:118:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  118 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream iss{date};\n\
    \    std::string str1, str2, str3;\n    bool check1 = !(iss >> str1 >> str2);\n\
    \    if (check1 == false)\n        return false;\n    if (str1 != \"-\")\n   \
    \     return false;\n    int day1, day2, day3, month1, month2, month3, year1,\
    \ year2, year3;\n    day1 = atoi(str2.c_str());\n    month1 = atoi(str3.c_str());\n\
    \    year1 = atoi(str1.c_str());\n    month2 = month1 + 1;\n    year2 = year1\
    \ + 1;\n    month3 = month1 + 2;\n    year3 = year1 + 1;\n    day2 = day1 + 1;\n\
    \    day3 = day1 + 1;\n    bool check2 = !(iss >> str1);\n    if (check2 == false)\n\
    \        return false;\n    if (str1 != \"-\")\n        return false;\n    month1\
    \ = atoi(str1.c_str());\n    year1 = atoi(str2.c_str());\n    month2 = month1\
    \ + 1;\n    year2 = year1 + 1;\n    month3 = month1 + 2;\n    year3 = year1 +\
    \ 1;\n    day2 = day1 + 1;\n    day3 = day1 + 1;\n    bool check3 = !(iss >> str2);\n\
    \    if (check3 == false)\n        return false;\n    if (str2 != \"-\")\n   \
    \     return false;\n    day1 = atoi(str1.c_str());\n    month1 = atoi(str2.c_str());\n\
    \    year1 = atoi(str3.c_str());\n    month2 = month1 + 1;\n    year2 = year1\
    \ + 1;\n    month3 = month1 + 2;\n    year3 = year1 + 1;\n    day2 = day1 + 1;\n\
    \    day3 = day1 + 1;\n    bool check4 = !(iss >> str3);\n    if (check4 == false)\n\
    \        return false;\n    if (str3 != \"-\")\n        return false;\n    day1\
    \ = atoi(str1.c_str());\n    month1 = atoi(str2.c_str());\n    year1 = atoi(str3.c_str());\n\
    \    month2 = month1 + 1;\n    year2 = year1 + 1;\n    month3 = month1 + 2;\n\
    \    year3 = year1 + 1;\n    day2 = day1 + 1;\n    day3 = day1 + 1;\n    bool\
    \ check5 = !(iss >> str4);\n    if (check5 == false)\n        return false;\n\
    \    if (str4 != \"-\")\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpph19tcam.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpph19tcam.cpp:79:28: error: \u2018str4\u2019 was not declared in this\
    \ scope; did you mean \u2018str3\u2019?\n   79 |     bool check5 = !(iss >> str4);\n\
    \      |                            ^~~~\n      |                            str3\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << \"\\nValidating\
    \ the date...\\n\\n\";\n    std::string inputDate = date;\n    std::string months[12]\
    \ = {\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                 \
    \            \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    int daysOfMonth[12]\
    \ = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int monthOfYear[12]\
    \ = { 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1 };\n    if (inputDate.length()\
    \ == 0) {\n        std::cout << \"The given date string is empty.\\n\";\n    \
    \    return false;\n    }\n    std::string inputData[4];\n    std::string date;\n\
    \    inputData[0] = inputDate.substr(0, 2);\n    inputData[1] = inputDate.substr(2,\
    \ 2);\n    inputData[2] = inputDate.substr(4, 4);\n    inputData[3] = inputDate.substr(6,\
    \ 10);\n    std::cout << \"The date string: \" << inputDate << '\\n';\n    if\
    \ (inputData[1] == \"01\" || inputData[1] == \"03\" || inputData[1] == \"05\"\
    \ || inputData[1] == \"07\" || inputData[1] == \"08\" || inputData[1] == \"10\"\
    \ || inputData[1] == \"12\" || inputData[1] == \"04\" || inputData[1] == \"06\"\
    \ || inputData[1] == \"09\" || inputData[1] == \"11\" || inputData[1] == \"02\"\
    ) {\n        // Months are correct\n        int monthFound = stoi(inputData[0])\
    \ - 1;\n        int dayFound = stoi(inputData[2]);\n        if (monthFound < 1\
    \ || monthFound > 12) {\n            std::cout << \"Month is invalid.\\n\";\n\
    \            return false;\n        }\n        if (dayFound < 1 || dayFound >\
    \ daysOfMonth[monthFound]) {\n            std::cout << \"Day is invalid.\\n\"\
    ;\n            return false;\n        }\n        int year = stoi(inputData[3]);\n\
    \        if (year < 1 || year > 2020) {\n            std::cout << \"Year is invalid.\\\
    n\";\n            return false;\n        }\n        if (year == 2020) {\n    \
    \        if (monthFound > 2) {\n                std::cout << \"Year is invalid.\\\
    n\";\n                return false;\n            }\n        }\n        std::cout\
    \ << \"The date is valid for the date: \"\n                  << inputDate << \"\
    , for months: \" << months[monthFound] << \", days: \" << dayFound << \" and year:\
    \ \" << year << '\\n';\n        return true;\n    } else {\n        std::cout\
    \ << \"The date string is not valid.\\n\";\n        return false;\n    }\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp925joaox.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp925joaox.cpp:26:71: error: too many initializers for \u2018int [12]\u2019\
    \n   26 |     int monthOfYear[12] = { 12, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2,\
    \ 1 };\n      |                                                              \
    \         ^\n/tmp/tmp925joaox.cpp:32:17: error: declaration of \u2018std::string\
    \ date\u2019 shadows a parameter\n   32 |     std::string date;\n      |     \
    \            ^~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int days[12] = {31, 28,\
    \ 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12] = {0, 31, 60, 91,\
    \ 121, 123, 125, 127, 129, 1, 4, 6, 0};\n    for (int i = 0; i < 12; i++) {\n\
    \        if (months[i] > 12 || months[i] < 0) {\n            cout << \"Invalid\
    \ month number: \" << months[i] << endl;\n            return false;\n        }\n\
    \    }\n    if (date == \"\") {\n        cout << \"Invalid date string: \" <<\
    \ date << endl;\n        return false;\n    }\n    int dateParts[3] = { atoi(date.substr(0,\
    \ 2).c_str()), atoi(date.substr(3, 2).c_str()), atoi(date.substr(6, 4).c_str())\
    \ };\n    int month = dateParts[1];\n    int day = dateParts[0];\n    int year\
    \ = dateParts[2];\n    if (month < 1 || month > 12) {\n        cout << \"Invalid\
    \ month number: \" << month << endl;\n        return false;\n    }\n    if (day\
    \ < 1 || day > days[month]) {\n        cout << \"Invalid day number: \" << day\
    \ << endl;\n        return false;\n    }\n    if (month == 2 && day > 29) {\n\
    \        cout << \"Invalid day number: \" << day << endl;\n        return false;\n\
    \    }\n    if (day < 1 || day > days[month]) {\n        cout << \"Invalid day\
    \ number: \" << day << endl;\n        return false;\n    }\n    if (month == 2)\
    \ {\n        if (day > 28) {\n            cout << \"Invalid day number: \" <<\
    \ day << endl;\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw15rjpnu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpw15rjpnu.cpp:22:73: error: too many initializers for \u2018int [12]\u2019\
    \n   22 |     int months[12] = {0, 31, 60, 91, 121, 123, 125, 127, 129, 1, 4,\
    \ 6, 0};\n      |                                                            \
    \             ^\n/tmp/tmpw15rjpnu.cpp:25:13: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   25 |             cout\
    \ << \"Invalid month number: \" << months[i] << endl;\n      |             ^~~~\n\
    \      |             std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpw15rjpnu.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpw15rjpnu.cpp:25:62:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   25 |             cout << \"Invalid month number: \" << months[i]\
    \ << endl;\n      |                                                          \
    \    ^~~~\n      |                                                           \
    \   std::endl\nIn file included from /usr/include/c++/9/istream:39,\n        \
    \         from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpw15rjpnu.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n/tmp/tmpw15rjpnu.cpp:30:9: error: \u2018cout\u2019 was not declared\
    \ in this scope; did you mean \u2018std::cout\u2019?\n   30 |         cout <<\
    \ \"Invalid date string: \" << date << endl;\n      |         ^~~~\n      |  \
    \       std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpw15rjpnu.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 dec"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::bitset<12> months\
    \ = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n    std::string valid_months\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"\
    09\", \"11\", \"02\"};\n    std::string temp_date1 = date.substr(2, 2); // substring\
    \ starting from the 3rd character\n    std::string temp_date2 = date.substr(6,\
    \ 2); // substring starting from the 5th character\n    std::string temp_date3\
    \ = date.substr(0, 4); // substring starting from the 0th character\n    int days_temp_date1\
    \ = std::stoi(temp_date1); // converting string in integer format\n    int days_temp_date2\
    \ = std::stoi(temp_date2);\n    int days_temp_date3 = std::stoi(temp_date3);\n\
    \    // If the month is not in the correct range, return false\n    if (!(months.test(months_temp)))\n\
    \        return false;\n    // If the day is not in the correct range, return\
    \ false\n    if (days_temp_date1 < 1 || days_temp_date1 > 31)\n        return\
    \ false;\n    if (days_temp_date2 < 1 || days_temp_date2 > 30)\n        return\
    \ false;\n    if (days_temp_date3 < 1 || days_temp_date3 > 29)\n        return\
    \ false;\n    if (months_temp < 1 || months_temp > 12)\n        return false;\n\
    \    if (days_temp_date1 < 1 || days_temp_date1 > 31)\n        return false;\n\
    \    if (days_temp_date2 < 1 || days_temp_date2 > 30)\n        return false;\n\
    \    if (days_temp_date3 < 1 || days_temp_date3 > 29)\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsllkfy4s.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpsllkfy4s.cpp:21:71: error: could not convert \u2018{0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12}\u2019 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018std::bitset<12>\u2019\n   21 |     std::bitset<12> months = {0, 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n      |                              \
    \                                         ^\n      |                         \
    \                                              |\n      |                    \
    \                                                   <brace-enclosed initializer\
    \ list>\n/tmp/tmpsllkfy4s.cpp:22:103: error: could not convert \u2018{\"01\",\
    \ \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\"\
    , \"02\"}\u2019 from \u2018<brace-enclosed initializer list>\u2019 to \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019}\n   22 |     std::string\
    \ valid_months = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\", \"02\"};\n      |                                  \
    \                                                                     ^\n    \
    \  |                                                                         \
    \                              |\n      |                                    \
    \                                                                   <brace-enclosed\
    \ initializer list>\n/tmp/tmpsllkfy4s.cpp:30:23: error: \u2018months_temp\u2019\
    \ was not declared in this scope\n   30 |     if (!(months.test(months_temp)))\n\
    \      |                       ^~~~~~~~~~~\n/tmp/tmpsllkfy4s.cpp:39:9: error:\
    \ \u2018months_temp\u2019 was not declared in this scope\n   39 |     if (months_temp\
    \ < 1 || months_temp > 12)\n      |         ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(!date.empty());\n\
    \    int d = std::stoi(date.substr(1, 2));\n    int m = std::stoi(date.substr(4,\
    \ 2));\n    int y = std::stoi(date.substr(7, 4));\n    return (d >= 1 && d <=\
    \ 31) && (m >= 1 && m <= 12) && (y > 0 && y < 100);\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoqdj4te6: /tmp/tmpoqdj4te6.cpp:29: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.empty()){\n   \
    \ return false;\n  }\n  // Check month\n  int month = std::stoi(date.substr(0,2),\
    \ nullptr, 2);\n  // If the month is less than 1 or higher than 12\n  if(month\
    \ < 1 || month > 12) {\n    return false;\n  }\n  // Check day\n  int day = std::stoi(date.substr(3,2),\
    \ nullptr, 2);\n  // If the day is less than 1 or higher than 31\n  if(day < 1\
    \ || day > 31) {\n    return false;\n  }\n  // Check year\n  int year = std::stoi(date.substr(6,4),\
    \ nullptr, 4);\n  // If the year is less than 1 or higher than 2020\n  if(year\
    \ < 1 || year > 2020) {\n    return false;\n  }\n  // Return true if all conditions\
    \ are satisfied\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpei8ijp34: /tmp/tmpei8ijp34.cpp:47: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    if(date.size() > 0 && date.length()<10){\n        return false;\n    }\n\
    \    if(date[0]<'0' || date[0]>'9'){\n        return false;\n    }\n    int day\
    \ = date.substr(1, 2).get();\n    int month = date.substr(3, 2).get();\n    int\
    \ year = date.substr(5, 4).get();\n    int totalDays = day*30 + month*31 + year;\n\
    \    if(totalDays > 30){\n        return false;\n    }\n    int dayCheck = day<1\
    \ || day > 31;\n    int monthCheck = month<1 || month > 12;\n    if(!(dayCheck\
    \ && monthCheck)){\n        return false;\n    }\n    int dayCheck1 = day<1 ||\
    \ day > 30;\n    int monthCheck1 = month<1 || month > 12;\n    if(!(dayCheck1\
    \ && monthCheck1)){\n        return false;\n    }\n    int dayCheck2 = day<1 ||\
    \ day > 29;\n    int monthCheck2 = month<1 || month > 12;\n    if(!(dayCheck2\
    \ && monthCheck2)){\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6_j05202.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp6_j05202.cpp:28:33: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018get\u2019\n   28 |     int day = date.substr(1, 2).get();\n\
    \      |                                 ^~~\n/tmp/tmp6_j05202.cpp:29:35: error:\
    \ \u2018class std::__cxx11::basic_string<char>\u2019 has no member named \u2018\
    get\u2019\n   29 |     int month = date.substr(3, 2).get();\n      |         \
    \                          ^~~\n/tmp/tmp6_j05202.cpp:30:34: error: \u2018class\
    \ std::__cxx11::basic_string<char>\u2019 has no member named \u2018get\u2019\n\
    \   30 |     int year = date.substr(5, 4).get();\n      |                    \
    \              ^~~\n"
  stdout: ''
  timestamp: 1660133518
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::smatch sm;\n   \
    \ std::regex re(\"^(0[1-9]|[12][0-9]|3[01])/([0][1-9]|[1][0-2])/((19|20)\\\\d\\\
    \\d)$\");\n    return std::regex_match(date, sm, re);\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpj1rz27qj: /tmp/tmpj1rz27qj.cpp:27: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout<<\"Your date:\
    \ \"<<date<<std::endl;\n    if (date.empty()) {\n        return false;\n    }\n\
    \    std::string mon_day(date.substr(0, 2));\n    std::string year(date.substr(3,\
    \ 4));\n    std::string month(date.substr(6, 2));\n    std::string day(date.substr(9,\
    \ 2));\n    if ((mon_day != \"01\") && (mon_day != \"03\") && (mon_day != \"05\"\
    ) && (mon_day != \"07\") && (mon_day != \"08\") && (mon_day != \"10\") && (mon_day\
    \ != \"12\") && (mon_day != \"04\") && (mon_day != \"06\") && (mon_day != \"09\"\
    ) && (mon_day != \"11\")\n            && (mon_day != \"03\") && (mon_day != \"\
    06\") && (mon_day != \"09\") && (mon_day != \"11\")\n            && (mon_day !=\
    \ \"01\") && (mon_day != \"04\") && (mon_day != \"06\") && (mon_day != \"09\"\
    ) && (mon_day != \"11\")\n            && (month != \"01\") && (month != \"02\"\
    ) && (month != \"03\") && (month != \"04\") && (month != \"05\") && (month !=\
    \ \"06\") && (month != \"07\") && (month != \"08\") && (month != \"09\") && (month\
    \ != \"10\") && (month != \"11\") && (month != \"12\") && (month != \"04\") &&\
    \ (month != \"06\") && (month != \"09\") && (month != \"11\")\n            &&\
    \ (month != \"01\") && (month != \"02\") && (month != \"03\") && (month != \"\
    04\") && (month != \"05\") && (month != \"06\") && (month != \"07\") && (month\
    \ != \"08\") && (month != \"09\") && (month != \"10\") && (month != \"11\") &&\
    \ (month != \"12\") && (month != \"04\") && (month != \"06\") && (month != \"\
    09\") && (month != \"11\")\n            && (month != \"01\") && (month != \"02\"\
    ) && (month != \"03\") && (month != \"04\") && (month != \"05\") && (month !=\
    \ \"06\") && (month != \"07\") && (month != \"08\") && (month != \"09\") && (month\
    \ != \"10\") && (month != \"11\") && (month != \"12\") && (month != \"04\") &&\
    \ (month != \"06\") && (month != \"09\") && (month != \"11\")\n            &&\
    \ (month != \"01\") && (month != \"02\") && (month != \"03\") && (month != \"\
    04\") && (month != \"05\") && (month != \"06\") && (month != \"07\") && (month\
    \ != \"08\") && (month != \"09\") && (month != \"10\") && (month != \"11\") &&\
    \ (month != \"12\") && (month != \"04\") && (month != \"06\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr8psib5x.cpp:35:273: warning: missing terminating \" character\n\
    \   35 |             && (month != \"01\") && (month != \"02\") && (month != \"\
    03\") && (month != \"04\") && (month != \"05\") && (month != \"06\") && (month\
    \ != \"07\") && (month != \"08\") && (month != \"09\") && (month != \"10\") &&\
    \ (month != \"11\") && (month != \"12\") && (month != \"04\") && (month != \"\
    06\n      |                                                                  \
    \                                                                            \
    \                                                                            \
    \                                                       ^\n/tmp/tmpr8psib5x.cpp:35:273:\
    \ error: missing terminating \" character\n   35 |             && (month != \"\
    01\") && (month != \"02\") && (month != \"03\") && (month != \"04\") && (month\
    \ != \"05\") && (month != \"06\") && (month != \"07\") && (month != \"08\") &&\
    \ (month != \"09\") && (month != \"10\") && (month != \"11\") && (month != \"\
    12\") && (month != \"04\") && (month != \"06\n      |                        \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                     ^~~\n/tmp/tmpr8psib5x.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpr8psib5x.cpp:36:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   36 | }\n      | ^\n/tmp/tmpr8psib5x.cpp:35:272: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   35 |             && (month != \"\
    01\") && (month != \"02\") && (month != \"03\") && (month != \"04\") && (month\
    \ != \"05\") && (month != \"06\") && (month != \"07\") && (month != \"08\") &&\
    \ (month != \"09\") && (month != \"10\") && (month != \"11\") && (month != \"\
    12\") && (month != \"04\") && (month != \"06\n      |                        \
    \                                                                            \
    \                                                                            \
    \                                                              "
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // your code here\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpslvkuubf: /tmp/tmpslvkuubf.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if (date.empty()) {\n \
    \   return false;\n  }\n\n  std::string mm = dtoi(date.substr(0, 2));\n  std::string\
    \ dd = date.substr(2, 2);\n  std::string yyyy = date.substr(5, 4);\n\n  std::string\
    \ mdays[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"\
    06\", \"09\", \"11\", \"02\"};\n  std::string ddays[] = {\"01\", \"03\", \"05\"\
    , \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n \
    \ std::string ydays[] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\"\
    , \"04\", \"06\", \"09\", \"11\", \"02\", \"15\", \"30\", \"31\", \"30\", \"31\"\
    };\n  int mn = stoi(mdays);\n  int dn = stoi(ddays);\n  int yn = stoi(ydays);\n\
    \n  for (int i = 0; i < 12; i++) {\n    if (mm == i + 1) {\n      if (dd[0] ==\
    \ '0' && dd[1] == '0' && dd[2] == '0') {\n        return true;\n      } else {\n\
    \        return false;\n      }\n    }\n\n    if (mm == i + 3) {\n      if (dd\
    \ == i + 1) {\n        if (yyyy[0] == '0' && yyyy[1] == '0' && yyyy[2] == '0')\
    \ {\n          return true;\n        } else {\n          return false;\n     \
    \   }\n      }\n\n      if (dd == i + 3) {\n        if (yyyy == '15' || yyyy ==\
    \ '30' || yyyy == '31' || yyyy == '30') {\n          return true;\n        } else\
    \ {\n          return false;\n        }\n      }\n\n      if (dd[0] == '0' &&\
    \ dd[1] == '0' && dd[2] == '0') {\n        return true;\n      } else {\n    \
    \    return false;\n      }\n    }\n\n    if (mm == i + 6) {\n      if (yy ==\
    \ i + 1) {\n        if (yyyy[0] == '0' && yyyy[1] == '0' && yyyy[2] == '0') {\n\
    \          return true;\n        } else {\n          return false;\n        }\n\
    \      }\n\n      if (yy == i + 3) {\n        if (yyyy == '15' || yyyy == '30'\
    \ || yyyy == '31' || yyyy == '30') {\n          return true;\n        } else {\n\
    \          return false;\n        }\n      }\n\n      if (yyyy[0] == '0' && yyyy[1]\
    \ == '0' && yyyy[2] == '0') {\n        return true;\n      } else {\n        return\
    \ false;\n      }\n    }\n  }\n\n  return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzm5bmkw8.cpp:55:21: warning: multi-character character constant\
    \ [-Wmultichar]\n   55 |         if (yyyy == '15' || yyyy == '30' || yyyy == '31'\
    \ || yyyy == '30') {\n      |                     ^~~~\n/tmp/tmpzm5bmkw8.cpp:55:37:\
    \ warning: multi-character character constant [-Wmultichar]\n   55 |         if\
    \ (yyyy == '15' || yyyy == '30' || yyyy == '31' || yyyy == '30') {\n      |  \
    \                                   ^~~~\n/tmp/tmpzm5bmkw8.cpp:55:53: warning:\
    \ multi-character character constant [-Wmultichar]\n   55 |         if (yyyy ==\
    \ '15' || yyyy == '30' || yyyy == '31' || yyyy == '30') {\n      |           \
    \                                          ^~~~\n/tmp/tmpzm5bmkw8.cpp:55:69: warning:\
    \ multi-character character constant [-Wmultichar]\n   55 |         if (yyyy ==\
    \ '15' || yyyy == '30' || yyyy == '31' || yyyy == '30') {\n      |           \
    \                                                          ^~~~\n/tmp/tmpzm5bmkw8.cpp:79:21:\
    \ warning: multi-character character constant [-Wmultichar]\n   79 |         if\
    \ (yyyy == '15' || yyyy == '30' || yyyy == '31' || yyyy == '30') {\n      |  \
    \                   ^~~~\n/tmp/tmpzm5bmkw8.cpp:79:37: warning: multi-character\
    \ character constant [-Wmultichar]\n   79 |         if (yyyy == '15' || yyyy ==\
    \ '30' || yyyy == '31' || yyyy == '30') {\n      |                           \
    \          ^~~~\n/tmp/tmpzm5bmkw8.cpp:79:53: warning: multi-character character\
    \ constant [-Wmultichar]\n   79 |         if (yyyy == '15' || yyyy == '30' ||\
    \ yyyy == '31' || yyyy == '30') {\n      |                                   \
    \                  ^~~~\n/tmp/tmpzm5bmkw8.cpp:79:69: warning: multi-character\
    \ character constant [-Wmultichar]\n   79 |         if (yyyy == '15' || yyyy ==\
    \ '30' || yyyy == '31' || yyyy == '30') {\n      |                           \
    \                                          ^~~~\n/tmp/tmpzm5bmkw8.cpp: In function\
    \ \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpzm5bmkw8.cpp:25:20: error:\
    \ \u2018dtoi\u2019 was not declared in this scope; did you mean \u2018atoi\u2019\
    ?\n   25 |   std::string mm = dtoi(date.substr(0, 2));\n      |"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.empty())\n    return\
    \ false;\n  if(date.size() < 9 || date.size() > 13)\n    return false;\n  std::vector<int>\
    \ year;\n  int day, month, yearPart;\n  int yearIndex = -1;\n  \n  for(int i =\
    \ 0; i < date.size() - 1; i++){\n    if(date[i] == '-'){\n      if(yearIndex !=\
    \ -1)\n        return false;\n      yearIndex = i;\n      yearPart = i;\n    \
    \  continue;\n    }\n    if(yearIndex != -1)\n      year[yearIndex] = std::stoi(date.substr(yearIndex,\
    \ 2)) - 1900;\n    if(date[i] < '0' || date[i] > '9')\n      return false;\n \
    \   \n    day = std::stoi(date.substr(i + 1, 2));\n    if(day < 1 || day > 31)\n\
    \      return false;\n    \n    month = std::stoi(date.substr(i + 3, 2));\n  \
    \  if(month < 1 || month > 12)\n      return false;\n  }\n  if(yearIndex == -1)\n\
    \    return false;\n  \n  if(yearPart == 0)\n    yearPart = -1;\n  \n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsew2j99g: /tmp/tmpsew2j99g.cpp:60: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    std::stringstream ss;\n    ss.str(date);\n    ss >> year >> month >> day;\n\
    \    return (month >= 1 && month <= 12) && (day >= 1 && day <= 31) && (year >=\
    \ 1 && year <= 3000);\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3vaxm57q: /tmp/tmp3vaxm57q.cpp:29: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int m = 0, d = 0, y =\
    \ 0;\n    std::string months = {\"Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"\
    Oct\", \"Dec\", \"Nov\", \"Dec\"};\n    if (date.empty())\n        return false;\n\
    \    // get day month and year\n    std::stringstream ss(date);\n    ss >> d >>\
    \ m >> y;\n    if (d < 1 || d > 31) return false;\n    if (m < 1 || m > 12) return\
    \ false;\n    if (y < 0 || y > 2020) return false;\n    for (int i = 0; i < 12;\
    \ i++) {\n        if (months[i] == months[m] && d > i)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpezowb8lf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpezowb8lf.cpp:22:88: error: could not convert \u2018{\"Jan\", \"Mar\"\
    , \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\", \"Nov\", \"Dec\"}\u2019 from \u2018\
    <brace-enclosed initializer list>\u2019 to \u2018std::string\u2019 {aka \u2018\
    std::__cxx11::basic_string<char>\u2019}\n   22 |     std::string months = {\"\
    Jan\", \"Mar\", \"May\", \"Jul\", \"Aug\", \"Oct\", \"Dec\", \"Nov\", \"Dec\"\
    };\n      |                                                                  \
    \                      ^\n      |                                            \
    \                                            |\n      |                      \
    \                                                                  <brace-enclosed\
    \ initializer list>\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::cout << \"Enter your\
    \ date in the format: mm-dd-yyyy\" << std::endl;\n  std::cin >> date;\n  std::cout\
    \ << std::endl;\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: 'Enter your date in the format: mm-dd-yyyy

    '
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool status = false;\n\
    \    // If the date string is empty then return false.\n    if (date.size() ==\
    \ 0)\n        status = false;\n    else\n    {\n        // Split the string on\
    \ - and store the parts in an array.\n        std::string parts[4];\n        std::stringstream\
    \ ss(date);\n        std::getline(ss, parts[0], '-');\n        std::getline(ss,\
    \ parts[1], '-');\n        std::getline(ss, parts[2], '-');\n        std::getline(ss,\
    \ parts[3]);\n\n        // Convert the parts to int and store the values in an\
    \ array\n        int days[] = { parts[0], parts[1], parts[2], parts[3] };\n  \
    \      int years[] = { parts[4], parts[6], parts[8], parts[10] };\n        int\
    \ months[] = { parts[6], parts[9], parts[11], parts[12] };\n\n        // To check\
    \ the date, a number is added for all the days of the month\n        // and a\
    \ year is added.\n        // If the days of month and year are equal, then the\
    \ date can be checked.\n        for (int i = 0; i < 12; i++) {\n            int\
    \ day = 0;\n            for (int j = 0; j < 4; j++) {\n                day +=\
    \ days[j] * 10 * i + years[j];\n            }\n            if (day == 2020)\n\
    \                status = true;\n        }\n\n        for (int i = 0; i < 12;\
    \ i++) {\n            int month = 0;\n            for (int j = 0; j < 4; j++)\
    \ {\n                month += months[j] * 10 * i + years[j];\n            }\n\
    \            if (month == 3)\n                status = true;\n        }\n\n  \
    \      if (status == true)\n        {\n            // If the date can be checked\
    \ then the date is valid.\n            status = true;\n        }\n        else\n\
    \        {\n            // If the date cannot be checked then the date is invalid.\n\
    \            status = false;\n        }\n    }\n\n    return status;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpajtrl3mf.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpajtrl3mf.cpp:36:31: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018int\u2019 in initialization\n\
    \   36 |         int days[] = { parts[0], parts[1], parts[2], parts[3] };\n  \
    \    |                        ~~~~~~~^\n      |                              \
    \ |\n      |                               std::string {aka std::__cxx11::basic_string<char>}\n\
    /tmp/tmpajtrl3mf.cpp:36:41: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018int\u2019 in initialization\n\
    \   36 |         int days[] = { parts[0], parts[1], parts[2], parts[3] };\n  \
    \    |                                  ~~~~~~~^\n      |                    \
    \                     |\n      |                                         std::string\
    \ {aka std::__cxx11::basic_string<char>}\n/tmp/tmpajtrl3mf.cpp:36:51: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n   36 |         int days[] = { parts[0],\
    \ parts[1], parts[2], parts[3] };\n      |                                   \
    \         ~~~~~~~^\n      |                                                  \
    \ |\n      |                                                   std::string {aka\
    \ std::__cxx11::basic_string<char>}\n/tmp/tmpajtrl3mf.cpp:36:61: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n   36 |         int days[] = { parts[0],\
    \ parts[1], parts[2], parts[3] };\n      |                                   \
    \                   ~~~~~~~^\n      |                                        \
    \                     |\n      |                                             \
    \                std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpajtrl3mf.cpp:37:32:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019 in initialization\n   37 |         int years[] = { parts[4],\
    \ parts[6], parts[8], parts[10] };\n      |                         ~~~"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream iss(date);\n\
    \    char s[10];\n    int day = 1;\n    int month = 1;\n    int year = 2000;\n\
    \    iss >> std::setw(2) >> std::setfill('0') >> month;\n    iss >> std::setw(2)\
    \ >> std::setfill('0') >> day;\n    iss >> std::setw(4) >> std::setfill('0') >>\
    \ year;\n    if (month < 1 || month > 12)\n        return false;\n    if (day\
    \ < 1 || day > 31)\n        return false;\n    if (month == 1)\n        if (year\
    \ % 400 == 0)\n            return day == 31;\n        if (year % 100 == 0)\n \
    \           return day == 30;\n        if (year % 4 == 0)\n            return\
    \ day == 31;\n    return day == 29;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpks0qow0p: /tmp/tmpks0qow0p.cpp:44: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6n7cn_pw: /tmp/tmp6n7cn_pw.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) return\
    \ false;\n    int day, month, year;\n    year = stoi(sscanf(date.c_str(), \"%2d%2d%2d\"\
    , &day, &month, &year));\n    if (month < 1 || month > 12) return false;\n   \
    \ if (day < 1 || day > 31) return false;\n    if (month == 2 && day == 29) return\
    \ false;\n    if (month == 4 || month == 6 || month == 9 || month == 11 && day\
    \ > 30) return false;\n    if (month == 1 && day > 31) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_6q8s54u.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp_6q8s54u.cpp:23:12: error: \u2018stoi\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::stoi\u2019?\n   23 |     year = stoi(sscanf(date.c_str(),\
    \ \"%2d%2d%2d\", &day, &month, &year));\n      |            ^~~~\n      |    \
    \        std::__cxx11::stoi\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp_6q8s54u.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3:\
    \ note: \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphxd41n_5: /tmp/tmphxd41n_5.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    struct tm tm = *std::localtime(&tm);\n\
    \    int days = tm.tm_mon * 30 + tm.tm_mday - 1;\n    if(days > 0 && days <= 31)\
    \ {\n        return days == tm.tm_mon && days == tm.tm_mday;\n    }\n    else\
    \ if(days <= 30) {\n        return tm.tm_mon == 1 && tm.tm_mday == 1;\n    }\n\
    \    else {\n        return tm.tm_mon == 2 && tm.tm_mday == 1;\n    }\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptzuqs6vg.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptzuqs6vg.cpp:21:36: error: cannot convert \u2018tm*\u2019 to \u2018\
    const time_t*\u2019 {aka \u2018const long int*\u2019}\n   21 |     struct tm tm\
    \ = *std::localtime(&tm);\n      |                                    ^~~\n  \
    \    |                                    |\n      |                         \
    \           tm*\nIn file included from /usr/include/c++/9/ctime:42,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n       \
    \          from /tmp/tmptzuqs6vg.cpp:2:\n/usr/include/time.h:123:44: note:   initializing\
    \ argument 1 of \u2018tm* localtime(const time_t*)\u2019\n  123 | extern struct\
    \ tm *localtime (const time_t *__timer) __THROW;\n      |                    \
    \          ~~~~~~~~~~~~~~^~~~~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if (date == \"\" || date\
    \ == \"Invalid Date\") return false;\n  const int months[12] = {0, 31, 28, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n  for (int i = 1; i < 12; ++i)\n    if (date[i\
    \ - 1] < '0' || date[i - 1] > '9') return false;\n  if (date[months[1] - 1 ] ==\
    \ '-') {\n    if (date[months[1] - 2] < '0' || date[months[1] - 2] > '9') return\
    \ false;\n    int days = date[3] - '0' + date[5] - '0' + date[7] - '0' + date[8]\
    \ - '0' + date[10] - '0' + date[12] - '0';\n    if (days < 0 || days > 29) return\
    \ false;\n  } else {\n    if (date[3] - '0' < 1 || date[3] - '0' > 12) return\
    \ false;\n    int days = date[3] - '0' + date[5] - '0' + date[7] - '0' + date[8]\
    \ - '0' + date[10] - '0' + date[12] - '0';\n    if (days < 1 || days > 30) return\
    \ false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpq8ptl_zk: /tmp/tmpq8ptl_zk.cpp:38: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    \n    // Write your code\
    \ here\n    \n    return true; \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpgluodgpd: /tmp/tmpgluodgpd.cpp:29: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133520
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   bool valid=false;\n    if(date.size() > 0){\n        if(date[date.size()-1]\
    \ == '-'){\n            date.erase(date.size()-1);\n        }\n        \n    \
    \    std::string month[12]= {\"Jan\",\"Feb\",\"Mar\",\"Apr\",\"May\",\"Jun\",\"\
    Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"};\n        std::string day[31]=\
    \ {\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\",\"Mon\",\"Tue\",\"\
    Wed\",\"Thu\",\"Fri\",\"Sat\",\"Sun\",\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\"\
    ,\"Sat\",\"Sun\"};\n        \n        for(int i=0;i<12;i++){\n            int\
    \ mm = stoi(date.substr(2,2));\n            if(mm == i){\n                date.erase(0,\
    \ 2);\n                date=date+month[i]+stoi(date.substr(0,2));\n          \
    \      break;\n            }\n        }\n        \n        for(int i=0;i<31;i++){\n\
    \            int dd = stoi(date.substr(4,2));\n            if(dd == i){\n    \
    \            date.erase(0, 4);\n                date=date+day[i]+stoi(date.substr(0,4));\n\
    \                break;\n            }\n        }\n        \n        if(date[0]\
    \ == '0'){\n            date.erase(0,1);\n        }\n        if(date[date.size()-1]\
    \ == '0'){\n            date.erase(date.size()-1);\n        }\n        if(date[0]\
    \ < '1') date.erase(0, 1);\n        if(date[date.size()-1] < '1') date.erase(date.size()-1);\n\
    \        if(date[0] > '2') date.erase(0, 1);\n        if(date[date.size()-1] >\
    \ '2') date.erase(date.size()-1);\n        \n        if(date[0] < '0' || date[date.size()-1]\
    \ < '0') return false;\n        if(date[0] > '1' && date[0] < '2') return false;\n\
    \        if(date[date.size()-1] > '1' && date[date.size()-1] < '2') return false;\n\
    \        if(date[0] > '2' && date[0] < '3') return false;\n        if(date[date.size()-1]\
    \ > '2' && date[date.size()-1] < '3') return false;\n        if(date[0] > '3'\
    \ && date[0] < '4') return false;\n        if(date[date.size()-1] > '3' && date[date.size()-1]\
    \ < '4') return false;\n        if(date[0] > '4' && date[0] < '5') return false;\n\
    \        if(date[date.size()-1] > '4' && date[date.size()-1] < '5') return false;\n\
    \        if(date[0]\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0l7actav.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp0l7actav.cpp:35:35: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019)\n\
    \   35 |                 date=date+month[i]+stoi(date.substr(0,2));\n      | \
    \                     ~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~\n      |          \
    \                |             |\n      |                          |         \
    \    int\n      |                          std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0l7actav.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp0l7actav.cpp:35:57:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   35 |                 date=date+month[i]+stoi(date.substr(0,2));\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp0l7actav.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Itera"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Check whether the\
    \ string is empty\n    if (date.empty())\n        return false;\n    // Check\
    \ whether the string has two digits\n    if (date.length() != 10 || date.find_first_not_of(\"\
    0123456789\") == string::npos)\n        return false;\n    // Check whether the\
    \ day is greater than or equal to 1 and less than or equal to 31\n    int day\
    \ = stoi(date.substr(0, 2));\n    if (day <= 0 || day > 31)\n        return false;\n\
    \    // Check whether the month is greater than or equal to 1 and less than or\
    \ equal to 12\n    int month = stoi(date.substr(2, 2));\n    if (month <= 0 ||\
    \ month > 12)\n        return false;\n    // Check whether the year is greater\
    \ than or equal to 1 and less than or equal to 100\n    int year = stoi(date.substr(4,\
    \ 2));\n    if (year <= 0 || year > 100)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppi4nlz4r.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmppi4nlz4r.cpp:25:72: error: \u2018string\u2019 has not been declared\n\
    \   25 |     if (date.length() != 10 || date.find_first_not_of(\"0123456789\"\
    ) == string::npos)\n      |                                                  \
    \                      ^~~~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::regex pattern(\"\
    [0-9]{2}-[0-9]{2}-[0-9]{4}\");\n    std::smatch match;\n    std::regex_search(date,\
    \ match, pattern);\n\n    if (match.size() == 3) {\n        std::smatch match2;\n\
    \        std::regex_search(date, match2, pattern);\n        if ((match2[0].str()\
    \ == \"01\" && match2[1].str() == \"01\") ||\n            (match2[0].str() ==\
    \ \"01\" && match2[2].str() == \"01\") ||\n            (match2[1].str() == \"\
    01\" && match2[2].str() == \"01\") ||\n            (match2[0].str() == \"02\"\
    \ && match2[1].str() == \"02\") ||\n            (match2[0].str() == \"02\" &&\
    \ match2[2].str() == \"02\") ||\n            (match2[1].str() == \"02\" && match2[2].str()\
    \ == \"02\") ||\n            (match2[0].str() == \"03\" && match2[1].str() ==\
    \ \"03\") ||\n            (match2[0].str() == \"03\" && match2[2].str() == \"\
    03\") ||\n            (match2[1].str() == \"03\" && match2[2].str() == \"03\"\
    ) ||\n            (match2[0].str() == \"04\" && match2[1].str() == \"04\") ||\n\
    \            (match2[0].str() == \"04\" && match2[2].str() == \"04\") ||\n   \
    \         (match2[1].str() == \"04\" && match2[2].str() == \"04\") ||\n      \
    \      (match2[0].str() == \"05\" && match2[1].str() == \"05\") ||\n         \
    \   (match2[0].str() == \"05\" && match2[2].str() == \"05\") ||\n            (match2[1].str()\
    \ == \"05\" && match2[2].str() == \"05\") ||\n            (match2[0].str() ==\
    \ \"06\" && match2[1].str() == \"06\") ||\n            (match2[0].str() == \"\
    06\" && match2[2].str() == \"06\") ||\n            (match2[1].str() == \"06\"\
    \ && match2[2].str() == \"06\") ||\n            (match2[0].str() == \"07\" &&\
    \ match2[1].str() == \"07\") ||\n            (match2[0].str() == \"07\" && match2[2].str()\
    \ == \"07\") ||\n            (match2[1].str() == \"07\" && match2[2].str() ==\
    \ \"07\") ||\n            (match2[0].str() == \"08\" && match2[1].str() == \"\
    08\") ||\n            (match2[0].str() == \"08\" && match2[2].str() == \"08\"\
    ) ||\n            (match2[1].str() == \"08\" && match2[2].str() == \"08\") ||\n\
    \            (match2[0].str() == \"09\" && match2[1].str() == \"09\") ||\n   \
    \         (match2[0].str() == \"09\" && match2[2].str() == \"09\") ||\n      \
    \      (match2[1].str() == \"09\" && match2[2].str() == \"09\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegnt6n0d.cpp:54:60: warning: missing terminating \" character\n\
    \   54 |             (match2[1].str() == \"09\" && match2[2].str() == \"09\n \
    \     |                                                            ^\n/tmp/tmpegnt6n0d.cpp:54:60:\
    \ error: missing terminating \" character\n   54 |             (match2[1].str()\
    \ == \"09\" && match2[2].str() == \"09\n      |                              \
    \                              ^~~\n/tmp/tmpegnt6n0d.cpp: In function \u2018bool\
    \ valid_date(std::string)\u2019:\n/tmp/tmpegnt6n0d.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpegnt6n0d.cpp:54:59:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |          \
    \   (match2[1].str() == \"09\" && match2[2].str() == \"09\n      |           \
    \  ~                                             ^\n      |                  \
    \                                         )\n   55 | }\n      | ~            \
    \                                              \n/tmp/tmpegnt6n0d.cpp:54:59: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |             (match2[1].str()\
    \ == \"09\" && match2[2].str() == \"09\n      |                              \
    \                             ^\n      |                                     \
    \                      )\n   55 | }\n      | ~                               \
    \                           \n/tmp/tmpegnt6n0d.cpp:28:12: note: to match this\
    \ \u2018(\u2019\n   28 |         if ((match2[0].str() == \"01\" && match2[1].str()\
    \ == \"01\") ||\n      |            ^\n/tmp/tmpegnt6n0d.cpp:55:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpegnt6n0d.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmpegnt6n0d.cpp:74:1: error:\
    \ expected \u2018}\u2019 at end of input\n   74 | }\n      | ^\n/tmp/tmpegnt6n0d.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpegnt6n0d.cpp:74:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   74 |\
    \ }\n "
  stdout: ''
  timestamp: 1660133520
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::cout << \"Validating\
    \ date string: \" << date << std::endl;\n    bool valid = true;\n    if (date.size()\
    \ != 0) {\n        valid = false;\n    }\n    int numDays = dateToDays(date);\n\
    \    if (numDays > 31) {\n        valid = false;\n    }\n    if (numDays < 1)\
    \ {\n        valid = false;\n    }\n    int months = dateToMonths(date);\n   \
    \ if (months < 1 || months > 12) {\n        valid = false;\n    }\n    int years\
    \ = dateToYears(date);\n    if (years < 1 || years > 12) {\n        valid = false;\n\
    \    }\n    std::cout << \"Validating date: \" << valid << std::endl;\n    return\
    \ valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo08o9vuu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo08o9vuu.cpp:26:19: error: \u2018dateToDays\u2019 was not declared\
    \ in this scope\n   26 |     int numDays = dateToDays(date);\n      |        \
    \           ^~~~~~~~~~\n/tmp/tmpo08o9vuu.cpp:33:18: error: \u2018dateToMonths\u2019\
    \ was not declared in this scope\n   33 |     int months = dateToMonths(date);\n\
    \      |                  ^~~~~~~~~~~~\n/tmp/tmpo08o9vuu.cpp:37:17: error: \u2018\
    dateToYears\u2019 was not declared in this scope\n   37 |     int years = dateToYears(date);\n\
    \      |                 ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  int day = stoi(date.substr(5,\
    \ 2));\n  int month = stoi(date.substr(0, 2));\n  int year = stoi(date.substr(8,\
    \ 4));\n  if (day > 0 && day <= 31 &&\n      month > 0 && month <= 12 && month\
    \ != 2 && month != 4 &&\n      year > 1900 && year < 2020) {\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n   \
    \ assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpycpmvsc3: /tmp/tmpycpmvsc3.cpp:33: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) return\
    \ false;\n    int day = 0, month = 0, year = 0;\n    if (date.length() >= 3 &&\
    \ date.length() <= 5) {\n        month = stoi(date.substr(0, 2));\n        day\
    \ = stoi(date.substr(3, 2));\n        year = stoi(date.substr(6, 4));\n    } else\
    \ if (date.length() >= 6 && date.length() <= 9) {\n        month = stoi(date.substr(0,\
    \ 2));\n        day = stoi(date.substr(3, 2));\n        year = stoi(date.substr(6,\
    \ 4));\n    } else if (date.length() >= 10 && date.length() <= 13) {\n       \
    \ month = stoi(date.substr(0, 2));\n        day = stoi(date.substr(3, 2));\n \
    \       year = stoi(date.substr(6, 4));\n    } else {\n        return false;\n\
    \    }\n    if (month < 1 || month > 12) return false;\n    if (day < 1 || day\
    \ > 31) return false;\n    if (day > 30) return false;\n    if (month == 2) {\n\
    \        if (year % 4 != 0) return false;\n        if (year % 400 == 0 && year\
    \ % 4 == 0 && year % 100 != 0) return false;\n        if (year % 400 == 0 && year\
    \ % 4 == 0 && year % 100 != 0 && year % 400 != 0 && year % 4 == 0 && year % 100\
    \ == 0 && year % 400 == 0) return false;\n        return true;\n    } else {\n\
    \        if (year % 4 != 0) return false;\n        if (year % 100 == 0 && year\
    \ % 4 == 0 && year % 100 != 0) return false;\n        if (year % 100 == 0 && year\
    \ % 4 == 0 && year % 100 != 0 && year % 400 == 0 && year % 4 == 0 && year % 100\
    \ == 0 && year % 400 != 0) return false;\n        return true;\n    }\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphv0hty_a: /tmp/tmphv0hty_a.cpp:59: int main(): Assertion `candidate(("01-01-2007"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133520
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream ss(date);\n\
    \    int m, d, y;\n    ss >> m >> d >> y;\n    \n    // Validating the date\n\
    \    if (m > 12 || m == 0)\n        return false;\n    if (m == 1)\n        return\
    \ (d > 31 && d < 30);\n    if (m == 3)\n        return (d > 31 && d < 30);\n \
    \   if (m == 5)\n        return (d > 31 && d < 30);\n    if (m == 7)\n       \
    \ return (d > 31 && d < 30);\n    if (m == 8)\n        return (d > 31 && d < 30);\n\
    \    if (m == 10)\n        return (d > 31 && d < 30);\n    if (m == 12)\n    \
    \    return (d > 31 && d < 30);\n    if (m == 4)\n        return (d > 30 && d\
    \ < 29);\n    if (m == 6)\n        return (d > 30 && d < 29);\n    if (m == 9)\n\
    \        return (d > 30 && d < 29);\n    if (m == 11)\n        return (d > 30\
    \ && d < 29);\n    if (d == 0)\n        return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp13494a5e: /tmp/tmp13494a5e.cpp:56: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133520
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty())\n \
    \       return false;\n    int y = stoi((date.substr(0, 2)).c_str());\n    int\
    \ m = stoi((date.substr(2, 2)).c_str());\n    int d = stoi((date.substr(4, 2)).c_str());\n\
    \    if (m < 1 || m > 12)\n        return false;\n    if (d > 31)\n        return\
    \ false;\n    if (d < 1 || d > 30)\n        return false;\n    if (m != 2 && d\
    \ > 29)\n        return false;\n    if (m == 2 && d > 28)\n        return false;\n\
    \    if (m < 10)\n        return false;\n    if (y != 0 && y != 2019)\n      \
    \  return false;\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqlvzhcxv.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqlvzhcxv.cpp:23:13: error: \u2018stoi\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::stoi\u2019?\n   23 |     int y = stoi((date.substr(0,\
    \ 2)).c_str());\n      |             ^~~~\n      |             std::__cxx11::stoi\n\
    In file included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqlvzhcxv.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day = 0;\n    int month = -1;\n    int year = -1;\n\n    size_t n = date.size();\n\
    \    int m = 0;\n    int d = 0;\n    int y = -1;\n    std::string months[12] =\
    \ {\"January\", \"February\", \"March\",\n                              \"April\"\
    , \"May\", \"June\",\n                              \"July\", \"August\", \"September\"\
    ,\n                              \"October\", \"November\", \"December\"};\n \
    \   std::string temp;\n    for (int i = 0; i < n - 1; i++) {\n        temp = date.substr(i,\
    \ 2);\n        if (temp == \"01\") {\n            day = 1;\n        } else if\
    \ (temp == \"03\" || temp == \"05\" || temp == \"07\" || temp == \"08\" || temp\
    \ == \"10\" || temp == \"12\") {\n            day = 31;\n            m = m + 1;\n\
    \        } else if (temp == \"04\" || temp == \"06\" || temp == \"09\" || temp\
    \ == \"11\") {\n            day = 30;\n            m = m + 1;\n        } else\
    \ if (temp == \"02\") {\n            day = 21;\n            m = m + 1;\n     \
    \   } else {\n            day = -1;\n        }\n    }\n    for (int i = 0; i <\
    \ n - 1; i++) {\n        temp = date.substr(i, 2);\n        if (temp == \"01\"\
    ) {\n            day = 1;\n        } else if (temp == \"03\" || temp == \"05\"\
    \ || temp == \"07\" || temp == \"08\" || temp == \"10\" || temp == \"12\") {\n\
    \            day = 31;\n            m = m + 1;\n        } else if (temp == \"\
    04\" || temp == \"06\" || temp == \"09\" || temp == \"11\") {\n            day\
    \ = 30;\n            m = m + 1;\n        } else if (temp == \"02\") {\n      \
    \      day = 21;\n            m = m + 1;\n        } else {\n            day =\
    \ -1;\n        }\n    }\n\n    if (m > 12 || m < 0) {\n        month = -1;\n \
    \   }\n    if (day < 1 || day > 31 && m > 12 || m < 1 || m > 12) {\n        day\
    \ = -1;\n    }\n    if (day < 1 || day > 29 && m > 12 || m < 1 || m > 12) {\n\
    \        day = -1;\n    }\n    if (day < 1 || day > 31) {\n        month = -1;\n\
    \    }\n    if (day < 1 || day > 30) {\n        month = -1;\n    }\n    if (day\
    \ < 1 || day > 31) {\n        month = -1;\n    }\n    if (day < 1 || day > 30)\
    \ {\n        month = -1;\n    }\n\n    if (month < 0) {\n        month = -1;\n\
    \    }\n    if (month < 1 || month > 12) {\n        month = -1;\n    }\n    if\
    \ (day < 1 || day > 31 && month < 1 || month > 12) {\n        day = -1;\n    }\n\
    \    if (day < 1 || day > 31 && month < 1 || month > 12) {\n        day = -1;\n\
    \    }\n    if (day < 1 || day > 31 && month < 1 || month > 12) {\n        day\
    \ = -1;\n    }\n    if (day < \n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9tc4mg8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpw9tc4mg8.cpp:108:1: error: expected primary-expression before \u2018\
    }\u2019 token\n  108 | }\n      | ^\n/tmp/tmpw9tc4mg8.cpp:107:14: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n  107 |     if (day <\n      |   \
    \     ~     ^\n      |              )\n  108 | }\n      | ~             \n/tmp/tmpw9tc4mg8.cpp:108:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  108 | }\n \
    \     | ^\n/tmp/tmpw9tc4mg8.cpp:108:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day;\n    int month;\n\
    \    int year;\n    // Split the date string into three parts\n    istringstream\
    \ ss(date);\n    string day1, month1, year1;\n    ss >> day1 >> month1 >> year1;\n\
    \    // Validate the number of days\n    bool dayValid = day1 < 1 || day1 > 31;\n\
    \    bool monthValid = month1 < 1 || month1 > 12;\n    bool yearValid = year1\
    \ < 1 || year1 > 9999;\n    // If the day is valid and the month is valid and\
    \ the year is valid\n    // then return true else false\n    return (dayValid\
    \ && monthValid && yearValid);\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptot1q_n1.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptot1q_n1.cpp:25:5: error: \u2018istringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::istringstream\u2019?\n   25 |     istringstream\
    \ ss(date);\n      |     ^~~~~~~~~~~~~\n      |     std::istringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptot1q_n1.cpp:2:\n/usr/include/c++/9/iosfwd:150:38: note: \u2018std::istringstream\u2019\
    \ declared here\n  150 |   typedef basic_istringstream<char>  istringstream;\n\
    \      |                                      ^~~~~~~~~~~~~\n/tmp/tmptot1q_n1.cpp:26:5:\
    \ error: \u2018string\u2019 was not declared in this scope\n   26 |     string\
    \ day1, month1, year1;\n      |     ^~~~~~\n/tmp/tmptot1q_n1.cpp:26:5: note: suggested\
    \ alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n       \
    \          from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptot1q_n1.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomple"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string mm = date;\n\
    \    mm = mm[mm[0] == '0' ? 1 : 0];\n    mm = mm[mm[1] == '0' ? 1 : 0];\n    mm\
    \ = mm[mm[2] == '0' ? 1 : 0];\n    mm = mm[mm[3] != '-' ? 2 : 0];\n    mm = mm[mm[3]\
    \ != '-' ? 1 : 0];\n    mm = mm[mm[3] != '-' ? 0 : 1];\n    mm = mm[mm[4] != '-'\
    \ ? 2 : 0];\n    mm = mm[mm[4] != '-' ? 1 : 0];\n    mm = mm[mm[4] != '-' ? 0\
    \ : 1];\n    mm = mm[mm[4] != '-' ? 0 : 1];\n    mm = mm[mm[5] != '-' ? 2 : 0];\n\
    \    mm = mm[mm[5] != '-' ? 1 : 0];\n    mm = mm[mm[5] != '-' ? 0 : 1];\n    mm\
    \ = mm[mm[5] != '-' ? 0 : 1];\n    mm = mm[mm[6] != '-' ? 2 : 0];\n    mm = mm[mm[6]\
    \ != '-' ? 1 : 0];\n    mm = mm[mm[6] != '-' ? 0 : 1];\n    mm = mm[mm[6] != '-'\
    \ ? 0 : 1];\n    mm = mm[mm[7] != '-' ? 2 : 0];\n    mm = mm[mm[7] != '-' ? 1\
    \ : 0];\n    mm = mm[mm[7] != '-' ? 0 : 1];\n    mm = mm[mm[7] != '-' ? 0 : 1];\n\
    \    mm = mm[mm[8] != '-' ? 2 : 0];\n    mm = mm[mm[8] != '-' ? 1 : 0];\n    mm\
    \ = mm[mm[8] != '-' ? 0 : 1];\n    mm = mm[mm[8] != '-' ? 0 : 1];\n    mm = mm[mm[9]\
    \ != '-' ? 2 : 0];\n    mm = mm[mm[9] != '-' ? 1 : 0];\n    mm = mm[mm[9] != '-'\
    \ ? 0 : 1];\n    mm = mm[mm[9] != '-' ? 0 : 1];\n    mm = mm[mm[10] != '-' ? 2\
    \ : 0];\n    mm = mm[mm[10] != '-' ? 1 : 0];\n    mm = mm[mm[10] != '-' ? 0 :\
    \ 1];\n    mm = mm[mm[10] != '-' ? 0 : 1];\n    mm = mm[mm[11] != '-' ? 2 : 0];\n\
    \    mm\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaqublyat.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpaqublyat.cpp:57:7: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n   57 |     mm\n      |       ^\n      |       ;\n   58 | }\n      |\
    \ ~      \n/tmp/tmpaqublyat.cpp:58:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   58 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133519
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string month[] = {\n        \"01\", \"03\", \"05\", \"07\", \"08\",\
    \ \"10\", \"12\",\n        \"04\", \"06\", \"09\", \"11\", \"00\"\n    };\n  \
    \  std::string day[] = {\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\",\n        \"04\", \"06\", \"09\", \"11\", \"00\"\n    };\n    int day1,\
    \ day2, day3, day4, day5, day6, day7, day8, day9, day10, day11, day12;\n    int\
    \ month1, month2, month3, month4, month5, month6, month7, month8, month9, month10,\
    \ month11, month12;\n    std::istringstream ss(date);\n    ss >> month1 >> day1\
    \ >> year1;\n    ss >> month2 >> day2 >> year2;\n    ss >> month3 >> day3 >> year3;\n\
    \    ss >> month4 >> day4 >> year4;\n    ss >> month5 >> day5 >> year5;\n    ss\
    \ >> month6 >> day6 >> year6;\n    ss >> month7 >> day7 >> year7;\n    ss >> month8\
    \ >> day8 >> year8;\n    ss >> month9 >> day9 >> year9;\n    ss >> month10 >>\
    \ day10 >> year10;\n    ss >> month11 >> day11 >> year11;\n    ss >> month12 >>\
    \ day12 >> year12;\n    if (year1 == year2 && month1 == month2 && day1 == day2\
    \ && year1 == year3 && month1 == month3 && day1 == day3 && year1 == year4 && month1\
    \ == month4 && day1 == day4 && year1 == year5 && month1 == month5 && day1 == day5\
    \ && year1 == year6 && month1 == month6 && day1 == day6 && year1 == year7 && month1\
    \ == month7 && day1 == day7 && year1 == year8 && month1 == month8 && day1 == day8\
    \ && year1 == year9 && month1 == month9 && day1 == day9 && year1 == year10 &&\
    \ month1 == month10 && day1 == day10 && year1 == year11 && month1 == month11 &&\
    \ day1 == day11 && year1 == year12 && month1 == month12 && day1 == day12)\n  \
    \      return true;\n    else\n        return false;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxw2f_ikm.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpxw2f_ikm.cpp:33:29: error: \u2018year1\u2019 was not declared in this\
    \ scope\n   33 |     ss >> month1 >> day1 >> year1;\n      |                 \
    \            ^~~~~\n/tmp/tmpxw2f_ikm.cpp:34:29: error: \u2018year2\u2019 was not\
    \ declared in this scope\n   34 |     ss >> month2 >> day2 >> year2;\n      |\
    \                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:35:29: error: \u2018\
    year3\u2019 was not declared in this scope\n   35 |     ss >> month3 >> day3 >>\
    \ year3;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:36:29:\
    \ error: \u2018year4\u2019 was not declared in this scope\n   36 |     ss >> month4\
    \ >> day4 >> year4;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:37:29:\
    \ error: \u2018year5\u2019 was not declared in this scope\n   37 |     ss >> month5\
    \ >> day5 >> year5;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:38:29:\
    \ error: \u2018year6\u2019 was not declared in this scope\n   38 |     ss >> month6\
    \ >> day6 >> year6;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:39:29:\
    \ error: \u2018year7\u2019 was not declared in this scope\n   39 |     ss >> month7\
    \ >> day7 >> year7;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:40:29:\
    \ error: \u2018year8\u2019 was not declared in this scope\n   40 |     ss >> month8\
    \ >> day8 >> year8;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:41:29:\
    \ error: \u2018year9\u2019 was not declared in this scope\n   41 |     ss >> month9\
    \ >> day9 >> year9;\n      |                             ^~~~~\n/tmp/tmpxw2f_ikm.cpp:42:31:\
    \ error: \u2018year10\u2019 was not declared in this scope\n   42 |     ss >>\
    \ month10 >> day10 >> year10;\n      |                               ^~~~~~\n\
    /tmp/tmpxw2f_ikm.cpp:43:31: error: \u2018year11\u2019 was not declared in this\
    \ scope\n   43 |     ss >> month11 >> day11 >> year11;\n      |              \
    \                 ^~~~~~\n/tmp/tmpxw2f_ikm.cpp:44:31: error: \u2018year12\u2019\
    \ was not declared in this scope\n   44 |     ss >> month12 >> day12 >> year12;\n\
    \      |                               ^~~~~~\n/"
  stdout: ''
  timestamp: 1660133519
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    std::string day_month = date.substr(0, 2);\n    int day = 0;\n    int\
    \ month = 0;\n    int year = 0;\n\n    std::istringstream iss(date);\n\n    char\
    \ ch;\n\n    if(!iss >> day >> ch >> month >> ch >> year) {\n        return false;\n\
    \    }\n\n    int days_in_month[] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n\n    if (days_in_month[month - 1] < day)\n        return false;\n   \
    \ if (month == 2 && year % 400 == 0 || (year % 4 == 0 && year % 100 != 0))\n \
    \   {\n        if (day > 29)\n            return false;\n    }\n    else\n   \
    \ {\n        if (day > 30)\n            return false;\n    }\n\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp22lf06d: /tmp/tmpp22lf06d.cpp:56: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Complete this function.\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2j6qgo23: /tmp/tmp2j6qgo23.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(!date.empty());\n\
    \  // We first verify that the format is mm-dd-yyyy\n  // and then validate that\
    \ all the rules have been met.\n  // We first verify that the format is mm-dd-yyyy\n\
    \  if (date.size() != 10 || date.at(2) != '-' || date.at(0) != '0' || date.at(1)\
    \ != '-') {\n    return false;\n  }\n  int month1 = std::stoi(date.substr(0, 2));\n\
    \  int day1 = std::stoi(date.substr(3, 2));\n  int year1 = std::stoi(date.substr(6,\
    \ 4));\n  // We validate that the month value is in the range 1-12.\n  if (month1\
    \ > 12 || month1 < 1) {\n    return false;\n  }\n  // We validate that the month\
    \ value is in the range 1-12.\n  if (day1 > 31 || day1 < 1) {\n    return false;\n\
    \  }\n  // We validate that the month value is in the range 1-12.\n  if (year1\
    \ > 1000 || year1 < 1) {\n    return false;\n  }\n  // We now check the conditions\
    \ we specified above.\n  if (month1 == 1 && day1 == 31 && year1 == 2000) {\n \
    \   return true;\n  } else if (month1 == 4 && day1 == 0 && year1 == 2040) {\n\
    \    return true;\n  } else if (month1 == 6 && day1 == 4 && year1 == 2020) {\n\
    \    return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa48i264q: /tmp/tmpa48i264q.cpp:56: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    struct tm time;\n   \
    \ time_t now = time(0);\n    strptime(\"04-27-2020\", &time, \"%d-%m-%Y\");\n\
    \    \n    // Get the year, month, and day from the date string\n    char buffer[11];\n\
    \    strptime(\"04-27-2020\", buffer, &time);\n    int year = 1900 + time.tm_year;\n\
    \    int month = 2; // month starts from 0\n    int day = time.tm_mday;\n    //\
    \ Check the date for invalid values\n    if (strlen(date) == 0 || day > 31 ||\
    \ day < 1 || month > 12 || month < 1 || year < 1900 || year > 2099) {\n      \
    \  return false;\n    }\n    struct tm *tm_p = &time;\n    int day = tm_p->tm_mday;\n\
    \    int month = tm_p->tm_mon + 1;\n    int year = tm_p->tm_year;\n    // Check\
    \ the month\n    if (month > 12) {\n        return false;\n    }\n    // Check\
    \ the day\n    if (day > 31) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpsj1e064q.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpsj1e064q.cpp:22:24: error: no match for call to \u2018(tm) (int)\u2019\
    \n   22 |     time_t now = time(0);\n      |                        ^\n/tmp/tmpsj1e064q.cpp:23:28:\
    \ error: cannot convert \u2018tm*\u2019 to \u2018const char*\u2019\n   23 |  \
    \   strptime(\"04-27-2020\", &time, \"%d-%m-%Y\");\n      |                  \
    \          ^~~~~\n      |                            |\n      |              \
    \              tm*\nIn file included from /usr/include/c++/9/ctime:42,\n     \
    \            from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n    \
    \             from /tmp/tmpsj1e064q.cpp:2:\n/usr/include/time.h:96:33: note: \
    \  initializing argument 2 of \u2018char* strptime(const char*, const char*, tm*)\u2019\
    \n   96 |          const char *__restrict __fmt, struct tm *__tp)\n      |   \
    \       ~~~~~~~~~~~~~~~~~~~~~~~^~~~~\n/tmp/tmpsj1e064q.cpp:32:16: error: cannot\
    \ convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const char*\u2019\n   32 |     if (strlen(date) == 0 || day > 31 ||\
    \ day < 1 || month > 12 || month < 1 || year < 1900 || year > 2099) {\n      |\
    \                ^~~~\n      |                |\n      |                std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/cstring:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpsj1e064q.cpp:2:\n/usr/include/string.h:385:35:\
    \ note:   initializing argument 1 of \u2018size_t strlen(const char*)\u2019\n\
    \  385 | extern size_t strlen (const char *__s)\n      |                     \
    \  ~~~~~~~~~~~~^~~\n/tmp/tmpsj1e064q.cpp:36:9: error: redeclaration of \u2018\
    int day\u2019\n   36 |     int day = tm_p->tm_mday;\n      |         ^~~\n/tmp/tmpsj1e064q.cpp:30:9:\
    \ note: \u2018int day\u2019 previously declared here\n   30 |     int day = time.tm_mday;\n\
    \      |         ^~~\n/tmp/tmpsj1e064q.cpp:37:9: error: redeclaration of \u2018\
    int month\u2019\n   37 |     int month = tm_p->tm_mon + 1;\n      |         ^~~~~\n\
    /tmp/tmpsj1e064q.cpp:29:9: note: \u2018int month\u2019 previously dec"
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    char month[2];\n    std::string\
    \ str[3];\n    str[0]=date.substr(0,2);\n    str[1]=date.substr(3,2);\n    str[2]=date.substr(6,10);\n\
    \    \n    \n    return ((str[0].length()==2)&&(str[1].length()==2)&&(str[2].length()==4))&&(std::stoi(str[0])>=0)&&(std::stoi(str[1])>=0)&&(std::stoi(str[2])>=0)&&(std::stoi(str[0])<13)&&(std::stoi(str[1])<12)&&(std::stoi(str[2])<29);\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe5jy7gkr: /tmp/tmpe5jy7gkr.cpp:32: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::istringstream ss(date);\n\
    \  std::string token;\n  std::string months[12] = {\"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"02\"};\n  int\
    \ days[12][31];\n  int days_counted[12][31] = {0};\n  int months_counted[12] =\
    \ {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n  int year = 0;\n  int\
    \ day = 0;\n\n  // >> Read the date string\n  while ((ss >> token)) {\n    if\
    \ (token == \"-\") { // If the token is a hyphen\n      ss.ignore();\n    }\n\
    \    else { // If the token is not a hyphen\n      if (token.length() <= 2) return\
    \ false; // If it is an empty string return false\n      year = atoi(token.substr(0,\
    \ 2));\n      month = atoi(token.substr(2, 2));\n      day = atoi(token.substr(4,\
    \ 2));\n      days[month - 1][day - 1] = days_counted[month - 1][day - 1] + 1;\n\
    \      days_counted[month - 1][day - 1]++;\n    }\n  }\n\n  // >> Check if the\
    \ number of days for month 2 is less than or equal to 31\n  int month_2_days_valid\
    \ = 0;\n  for (int i = 0; i < 12; i++) {\n    if (days_counted[i][1] <= 31)\n\
    \      month_2_days_valid += days_counted[i][1];\n  }\n\n  // >> Check if the\
    \ number of days for month 4 is less than or equal to 30\n  int month_4_days_valid\
    \ = 0;\n  for (int i = 0; i < 12; i++) {\n    if (days_counted[i][4] <= 30)\n\
    \      month_4_days_valid += days_counted[i][4];\n  }\n\n  // >> Check if the\
    \ number of days for month 6 is less than or equal to 29\n  int month_6_days_valid\
    \ = 0;\n  for (int i = 0; i < 12; i++) {\n    if (days_counted[i][6] <= 29)\n\
    \      month_6_days_valid += days_counted[i][6];\n  }\n\n  // >> Check if the\
    \ number of days for month 9 is less than or equal to 29\n  int month_9_days_valid\
    \ = 0;\n  for (int i = 0; i < 12; i++) {\n    if (days_counted[i][9] <= 29)\n\
    \      month_9_days_valid += days_counted[i][9];\n  }\n\n  // >> Check if the\
    \ number of days for month 11 is less than or equal to 30\n  int month_11_days_valid\
    \ = 0;\n  for (int i = 0; i < 12; i++) {\n    if (days_counted[i][11] <= 30)\n\
    \      month_11_days_valid += days_counted[i][11];\n  }\n\n  // >> Check if the\
    \ number of days for month 2 is less than or equal to 31\n  int month_2_day\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_lrdbe5.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp3_lrdbe5.cpp:26:78: error: too many initializers for \u2018int [12]\u2019\
    \n   26 |   int months_counted[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31};\n      |                                                          \
    \                    ^\n/tmp/tmp3_lrdbe5.cpp:37:31: error: cannot convert \u2018\
    std::__cxx11::basic_string<char>\u2019 to \u2018const char*\u2019\n   37 |   \
    \    year = atoi(token.substr(0, 2));\n      |                   ~~~~~~~~~~~~^~~~~~\n\
    \      |                               |\n      |                            \
    \   std::__cxx11::basic_string<char>\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n\
    \                 from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3_lrdbe5.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmp3_lrdbe5.cpp:38:7: error: \u2018month\u2019 was not declared in this scope;\
    \ did you mean \u2018months\u2019?\n   38 |       month = atoi(token.substr(2,\
    \ 2));\n      |       ^~~~~\n      |       months\n/tmp/tmp3_lrdbe5.cpp:38:32:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    const char*\u2019\n   38 |       month = atoi(token.substr(2, 2));\n      |  \
    \                  ~~~~~~~~~~~~^~~~~~\n      |                               \
    \ |\n      |                                std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/std_abs.h:38,\n                \
    \ from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3_lrdbe5.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmp3_lrdbe5.cpp:39:30: error: cannot convert \u2018std::__cxx11::basic_"
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   int month = std::stoi(date.substr(0, 2));\n    int day = std::stoi(date.substr(3,\
    \ 2));\n    int year = std::stoi(date.substr(6, 4));\n    return (month >= 1 &&\
    \ month <= 12 && day >= 1 && day <= 31 && year >= 1 && year <= 30);\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmppuqhl_1v: /tmp/tmppuqhl_1v.cpp:29: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    using namespace std;\n\
    \    int days[31]{n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpujdcsz2v.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpujdcsz2v.cpp:23:1: error: too many initializers for \u2018int [31]\u2019\
    \n   23 | }\n      | ^\n/tmp/tmpujdcsz2v.cpp:42:1: error: expected \u2018}\u2019\
    \ at end of input\n   42 | }\n      | ^\n/tmp/tmpujdcsz2v.cpp:20:35: note: to\
    \ match this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n    \
    \  |                                   ^\n/tmp/tmpujdcsz2v.cpp:42:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   42 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream iss(date);\n\
    \    int day = 0;\n    int month = 0;\n    int year = 0;\n    iss >> month >>\
    \ day >> year;\n    // Check number of days\n    int days = 0;\n    if ((month\
    \ == 2 && day >= 29) || (month == 2 && day <= 29 && year != 2020)) {\n       \
    \ return false;\n    }\n    days += (day + 31);\n    if ((month == 1 || month\
    \ == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12)\
    \ && days > 31) {\n        return false;\n    }\n    if ((month == 4 || month\
    \ == 6 || month == 9 || month == 11) && days > 30) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplbzeoxqq: /tmp/tmplbzeoxqq.cpp:43: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date == \"\") {\n\
    \        return false;\n    }\n    auto date_time = strptime(date.c_str(), \"\
    %m-%d-%Y\", nullptr);\n    if (date_time == nullptr) {\n        return false;\n\
    \    }\n    struct tm tm_time = {0};\n    tm_time.tm_year = 1900 + tm_time.tm_year;\n\
    \    tm_time.tm_mon = 12 - tm_time.tm_mon;\n    tm_time.tm_mday = tm_time.tm_mday\
    \ - 1;\n    tm_time.tm_isdst = -1;\n\n    time_t tm_time = mktime(&tm_time);\n\
    \    if (tm_time == -1) {\n        return false;\n    }\n    strftime(date.c_str(),\
    \ date.size(), \"%m-%d-%Y\", &tm_time);\n    strptime(date.c_str(), \"%m-%d-%Y\"\
    , nullptr);\n    int days;\n    unsigned int month;\n    std::stringstream ss(date);\n\
    \    ss >> month >> days;\n    if (month < 1 || month > 12) {\n        return\
    \ false;\n    }\n    if (days > 31 && month == 1) {\n        return false;\n \
    \   }\n    if (days > 30 && month == 3 || month == 5 || month == 7 || month ==\
    \ 8 || month == 10 || month == 12) {\n        return false;\n    }\n    if (days\
    \ > 29 && month == 2) {\n        return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvidlhmmu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpvidlhmmu.cpp:34:12: error: conflicting declaration \u2018time_t tm_time\u2019\
    \n   34 |     time_t tm_time = mktime(&tm_time);\n      |            ^~~~~~~\n\
    /tmp/tmpvidlhmmu.cpp:28:15: note: previous declaration as \u2018tm tm_time\u2019\
    \n   28 |     struct tm tm_time = {0};\n      |               ^~~~~~~\n/tmp/tmpvidlhmmu.cpp:35:17:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018tm\u2019\
    \ and \u2018int\u2019)\n   35 |     if (tm_time == -1) {\n      |         ~~~~~~~\
    \ ^~ ~~\n      |         |          |\n      |         tm         int\n/tmp/tmpvidlhmmu.cpp:38:24:\
    \ error: invalid conversion from \u2018const char*\u2019 to \u2018char*\u2019\
    \ [-fpermissive]\n   38 |     strftime(date.c_str(), date.size(), \"%m-%d-%Y\"\
    , &tm_time);\n      |              ~~~~~~~~~~^~\n      |                     \
    \   |\n      |                        const char*\nIn file included from /usr/include/c++/9/ctime:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:49,\n\
    \                 from /tmp/tmpvidlhmmu.cpp:2:\n/usr/include/time.h:88:42: note:\
    \   initializing argument 1 of \u2018size_t strftime(char*, size_t, const char*,\
    \ const tm*)\u2019\n   88 | extern size_t strftime (char *__restrict __s, size_t\
    \ __maxsize,\n      |                         ~~~~~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n    int months[12]\
    \ = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n    std::string months_string[12]\
    \ = {\"Jan\",\"Mar\",\"May\",\"Jul\",\"Aug\",\"Sep\",\"Oct\",\"Nov\",\"Dec\"};\n\
    \    std::size_t first_comma = date.find_first_of(',');\n    int days_int = std::stoi(date.substr(0,\
    \ first_comma));\n    int months_int = std::stoi(date.substr(first_comma + 1,\
    \ 2));\n    if (days_int < 1 || days_int > 31) return false;\n    if (months_int\
    \ < 1 || months_int > 12) return false;\n    if (days[months_int] <= days_int)\
    \ return false;\n    if (months[months_int] <= months_int) return false;\n   \
    \ if (months_int == 2 && days[months_int] > 29) return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznlapul2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpznlapul2.cpp:22:58: error: too many initializers for \u2018int [12]\u2019\
    \n   22 |     int days[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n      |\
    \                                                          ^\n/tmp/tmpznlapul2.cpp:23:60:\
    \ error: too many initializers for \u2018int [12]\u2019\n   23 |     int months[12]\
    \ = {0,31,29,31,30,31,30,31,31,30,31,30,31};\n      |                        \
    \                                    ^\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string::size_type\
    \ pos = date.find_first_of(\"-\");\n    std::string::size_type pos_1 = date.find_first_not_of(\"\
    -\");\n    if (pos == std::string::npos && pos_1 == std::string::npos) {\n   \
    \     return true;\n    }\n    int month_day, year, month, day;\n    month = month_to_number(date[0]);\n\
    \    day = date.length() > 1 ? month_to_number(date[1]) : -1;\n    if (month <\
    \ 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 || day > 31)\
    \ {\n        return false;\n    }\n    year = date.length() > 2 ? date[2][0] -\
    \ '0' : -1;\n    if (year < 1 || year > 9999) {\n        return false;\n    }\n\
    \    month_day = year * 100 + month * 10 + day;\n    if (month_day > 2040) {\n\
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb70401uy.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpb70401uy.cpp:27:13: error: \u2018month_to_number\u2019 was not declared\
    \ in this scope\n   27 |     month = month_to_number(date[0]);\n      |      \
    \       ^~~~~~~~~~~~~~~\n/tmp/tmpb70401uy.cpp:35:41: error: invalid types \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type {aka char}[int]\u2019\
    \ for array subscript\n   35 |     year = date.length() > 2 ? date[2][0] - '0'\
    \ : -1;\n      |                                         ^\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ arr;\n    std::istringstream ss;\n    ss << date;\n    std::string token;\n\
    \    arr >> token;\n    char c = token[0];\n    bool flag = false;\n    if (c\
    \ == '-' || c == '/' || c == '.') {\n        arr >> token;\n        char d = token[0];\n\
    \        if (c == '-') {\n            flag = true;\n        }\n        if (c ==\
    \ '/') {\n            flag = true;\n        }\n        if (c == '.') {\n     \
    \       flag = true;\n        }\n        if (c == '-' && d == '/') {\n       \
    \     flag = true;\n        }\n        if (c == '.' && d == '/') {\n         \
    \   flag = true;\n        }\n    }\n    if (c == '-') {\n        arr >> token;\n\
    \        char m = token[0];\n        if (c == '-') {\n            flag = true;\n\
    \        }\n        if (c == '.') {\n            flag = true;\n        }\n   \
    \     if (c == '-' && m == '/') {\n            flag = true;\n        }\n     \
    \   if (c == '.' && m == '/') {\n            flag = true;\n        }\n    }\n\
    \    if (c == '.') {\n        arr >> token;\n        char y = token[0];\n    \
    \    if (c == '.') {\n            flag = true;\n        }\n        if (c == '.')\
    \ {\n            flag = true;\n        }\n        if (c == '.' && y == '/') {\n\
    \            flag = true;\n        }\n        if (c == '.' && y == '/') {\n  \
    \          flag = true;\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo56pauds.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo56pauds.cpp:23:8: error: no match for \u2018operator<<\u2019 (operand\
    \ types are \u2018std::istringstream\u2019 {aka \u2018std::__cxx11::basic_istringstream<char>\u2019\
    } and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   23 |     ss << date;\n      |     ~~ ^~ ~~~~\n      |     |     |\n   \
    \   |     |     std::string {aka std::__cxx11::basic_string<char>}\n      |  \
    \   std::istringstream {aka std::__cxx11::basic_istringstream<char>}\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpo56pauds.cpp:2:\n/usr/include/c++/9/bits/regex.h:1553:5:\
    \ note: candidate: \u2018template<class _Ch_type, class _Ch_traits, class _Bi_iter>\
    \ std::basic_ostream<_CharT, _Traits>& std::__cxx11::operator<<(std::basic_ostream<_CharT,\
    \ _Traits>&, const std::__cxx11::sub_match<_Bi_iter>&)\u2019\n 1553 |     operator<<(basic_ostream<_Ch_type,\
    \ _Ch_traits>& __os,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1553:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo56pauds.cpp:23:11:\
    \ note:   \u2018std::istringstream\u2019 {aka \u2018std::__cxx11::basic_istringstream<char>\u2019\
    } is not derived from \u2018std::basic_ostream<_CharT, _Traits>\u2019\n   23 |\
    \     ss << date;\n      |           ^~~~\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:45,\n\
    \                 from /tmp/tmpo56pauds.cpp:2:\n/usr/include/c++/9/cstddef:130:5:\
    \ note: candidate: \u2018template<class _IntegerType> constexpr std::__byte_op_t<_IntegerType>\
    \ std::operator<<(std::byte, _IntegerType)\u2019\n  130 |     operator<<(byte\
    \ __b, _IntegerType __shift) noexcept\n      |     ^~~~~~~~\n/usr/include/c++/9/cstddef:130:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpo56pauds.cpp:23:5:\
    \ note:   cannot convert \u2018ss\u2019 (type \u2018std::istringstream\u2019 {aka\
    \ \u2018std::__cxx11::basic_istringstream<char>\u2019}) to type \u2018std::byte\u2019\
    \n   23 |     ss << date;\n      |     ^~\nIn file included from"
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  assert(date != \"\");\n\
    \  if (date.find_first_not_of(\"\") != date.npos)\n    return false;\n  string\
    \ ddmm(date.substr(6, 2));\n  string mmdd(date.substr(4, 2));\n  string yyyymm(date.substr(0,\
    \ 4));\n  int days;\n  days = std::stoi(mmdd);\n  if (days == 0)\n    return false;\n\
    \  if ((days > 31) || (days < 1))\n    return false;\n  days = std::stoi(ddmm);\n\
    \  if (days == 0)\n    return false;\n  if ((days > 30) || (days < 1))\n    return\
    \ false;\n  days = std::stoi(yyyymm);\n  if (days == 0)\n    return false;\n \
    \ if ((days > 29) || (days < 1))\n    return false;\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpztbylcer.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpztbylcer.cpp:24:3: error: \u2018string\u2019 was not declared in this\
    \ scope\n   24 |   string ddmm(date.substr(6, 2));\n      |   ^~~~~~\n/tmp/tmpztbylcer.cpp:24:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpztbylcer.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpztbylcer.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpztbylcer.cpp:25:9: error: expected \u2018;\u2019 before \u2018mmdd\u2019\
    \n   25 |   string mmdd(date.substr(4, 2));\n      |         ^~~~~\n      |  \
    \       ;\n/tmp/tmpztbylcer.cpp:26:9: error: expected \u2018;\u2019 before \u2018\
    yyyymm\u2019\n   26 |   string yyyymm(date.substr(0, 4));\n      |         ^~~~~~~\n\
    \      |         ;\n/tmp/tmpztbylcer.cpp:28:20: error: \u2018mmdd\u2019 was not\
    \ declared in this scope\n   28 |   days = std::stoi(mmdd);\n      |         \
    \           ^~~~\n/tmp/tmpztbylcer.cpp:33:20: error: \u2018ddmm\u2019 was not\
    \ declared in this scope\n   33"
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (!date.empty()) {\n\
    \        std::vector<std::string> split = split(date, '-');\n        if (split.size()\
    \ == 3) {\n            int day = stoi(split[0]);\n            int month = stoi(split[1]);\n\
    \            int year = stoi(split[2]);\n            if (month == 1 && day > 31)\
    \ {\n                return false;\n            }\n            if (month == 3\
    \ && day > 30) {\n                return false;\n            }\n            if\
    \ (month == 5 && day > 29) {\n                return false;\n            }\n \
    \           if (month == 7 && day > 31) {\n                return false;\n   \
    \         }\n            if (month == 8 && day > 30) {\n                return\
    \ false;\n            }\n            if (month == 10 && day > 31) {\n        \
    \        return false;\n            }\n            if (month == 12 && day > 29)\
    \ {\n                return false;\n            }\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx774kter.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpx774kter.cpp:22:57: error: no match for call to \u2018(std::vector<std::__cxx11::basic_string<char>\
    \ >) (std::string&, char)\u2019\n   22 |         std::vector<std::string> split\
    \ = split(date, '-');\n      |                                               \
    \          ^\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string month[10]\
    \ = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"02\", \"04\", \"\
    06\", \"09\", \"11\"};\n    for (int i = 0; i < 10; i++)\n    {\n        if (date\
    \ == month[i] + \"-\" + date[2] && date != \"\") {\n            std::stringstream\
    \ ss;\n            int num;\n            ss << date;\n            ss >> num;\n\
    \            if (num >= 1 && num <= 31)\n                return true;\n      \
    \      else if (num >= 1 && num <= 30)\n                return true;\n       \
    \     else if (num >= 1 && num <= 29)\n                return true;\n        \
    \    else\n                return false;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5uq0k53.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpe5uq0k53.cpp:21:100: error: too many initializers for \u2018std::string\
    \ [10]\u2019 {aka \u2018std::__cxx11::basic_string<char> [10]\u2019}\n   21 |\
    \     std::string month[10] = {\"01\", \"03\", \"05\", \"07\", \"08\", \"10\"\
    , \"12\", \"02\", \"04\", \"06\", \"09\", \"11\"};\n      |                  \
    \                                                                            \
    \      ^\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day = stoi(date);\n\
    \    if (day < 1 || day > 31) {\n        return false;\n    }\n    if (day > 30)\
    \ {\n        return false;\n    }\n    int month = stoi(date.substr(0, 2));\n\
    \    if (month < 1 || month > 12) {\n        return false;\n    }\n    int year\
    \ = stoi(date.substr(3, 4));\n    return !(month == 2 && day > 29);\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7xi89ydr: /tmp/tmp7xi89ydr.cpp:39: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // TODO: Write your code\
    \ here.\n  \n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8bqb8r2l: /tmp/tmp8bqb8r2l.cpp:28: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) return\
    \ true;\n    size_t pos = date.find(\"-\");\n    if (pos != std::string::npos)\
    \ {\n        std::string date_str = date.substr(0, pos);\n        int days_num\
    \ = stoi(date.substr(pos + 1, date.length() - pos - 1));\n        bool is_valid_date\
    \ = true;\n        if (days_num < 1 || days_num > 31 || days_num < 0 || days_num\
    \ > 29) {\n            is_valid_date = false;\n        } else {\n            int\
    \ months_num = (int)stoi(date.substr(0, pos));\n            bool is_valid_month\
    \ = true;\n            if (months_num < 1 || months_num > 12) {\n            \
    \    is_valid_month = false;\n            } else {\n                int years_num\
    \ = stoi(date_str.substr(4, date.length() - 4));\n                if (years_num\
    \ < 2000 || years_num > 2099) {\n                    is_valid_date = false;\n\
    \                }\n            }\n        }\n        return is_valid_date &&\
    \ is_valid_month;\n    } else {\n        int days_num = (int)stoi(date);\n   \
    \     bool is_valid_date = true;\n        if (days_num < 1 || days_num > 31 ||\
    \ days_num < 0 || days_num > 29) {\n            is_valid_date = false;\n     \
    \   } else {\n            int months_num = (int)stoi(date.substr(0, 2));\n   \
    \         bool is_valid_month = true;\n            if (months_num < 1 || months_num\
    \ > 12) {\n                is_valid_month = false;\n            } else {\n   \
    \             int years_num = stoi(date.substr(6, date.length() - 6));\n     \
    \           if (years_num < 2000 || years_num > 2099) {\n                    is_valid_date\
    \ = false;\n                }\n            }\n        }\n        return is_valid_date\
    \ && is_valid_month;\n    }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb024fb0n.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpb024fb0n.cpp:41:33: error: \u2018is_valid_month\u2019 was not declared\
    \ in this scope; did you mean \u2018is_valid_date\u2019?\n   41 |         return\
    \ is_valid_date && is_valid_month;\n      |                                 ^~~~~~~~~~~~~~\n\
    \      |                                 is_valid_date\n/tmp/tmpb024fb0n.cpp:59:33:\
    \ error: \u2018is_valid_month\u2019 was not declared in this scope; did you mean\
    \ \u2018is_valid_date\u2019?\n   59 |         return is_valid_date && is_valid_month;\n\
    \      |                                 ^~~~~~~~~~~~~~\n      |             \
    \                    is_valid_date\n"
  stdout: ''
  timestamp: 1660133521
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   std::size_t found;\n    found = date.find_first_not_of(\"-\");\n    if (found\
    \ != std::string::npos) {\n        return false;\n    }\n    found = date.find_first_of(\"\
    -\");\n    if (found != std::string::npos) {\n        return false;\n    }\n \
    \   found = date.find_first_not_of(\"0\");\n    if (found != std::string::npos)\
    \ {\n        return false;\n    }\n    found = date.find_first_of(\"0\");\n  \
    \  if (found != std::string::npos) {\n        return false;\n    }\n    found\
    \ = date.find_first_not_of(\"0123456789\");\n    if (found != std::string::npos)\
    \ {\n        return false;\n    }\n    found = date.find_first_of(\"0123456789\"\
    );\n    if (found != std::string::npos) {\n        return false;\n    }\n    found\
    \ = date.find_first_not_of(\"-/\");\n    if (found != std::string::npos) {\n \
    \       return false;\n    }\n    found = date.find_first_of(\"-/\");\n    if\
    \ (found != std::string::npos) {\n        return false;\n    }\n    found = date.find_first_not_of(\"\
    /\");\n    if (found != std::string::npos) {\n        return false;\n    }\n \
    \   found = date.find_first_of(\"/\");\n    if (found != std::string::npos) {\n\
    \        return false;\n    }\n    found = date.find_first_not_of(\"/-\");\n \
    \   if (found != std::string::npos) {\n        return false;\n    }\n    found\
    \ = date.find_first_of(\"/-\");\n    if (found != std::string::npos) {\n     \
    \   return false;\n    }\n    found = date.find_first_not_of(\"/-/\");\n    if\
    \ (found != std::string::npos) {\n        return false;\n    }\n    found = date.find_first_of(\"\
    /-/\");\n    if (found != std::string::npos) {\n        return false;\n    }\n\
    \    found = date.find_first_not_of(\"/-/-\");\n    if (found != std::string::npos)\
    \ {\n        return false;\n    }\n    found = date.find_first_of(\"/-/-\");\n\
    \    if (found != std::string::npos) {\n        return false;\n    }\n    found\
    \ = date.find_first_not_of(\"-/-/-\");\n    if (found != std::string::npos) {\n\
    \        return false;\n    }\n    found = date.find_first_of(\"-/-/-\");\n  \
    \  if (found != std::string::npos) {\n        return false;\n    }\n    found\
    \ = date.find_first_not_of(\"/-/-/-\");\n    if (found != std::string::npos) {\n\
    \        return false;\n    }\n    found = date.find_first_of(\"/-/-/-\");\n \
    \   if (found != std::string::npos) {\n        return false;\n    }\n    found\
    \ = date.find_first_not_of(\"/-/-/-/-\");\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmps__eqga4: /tmp/tmps__eqga4.cpp:107: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tint day, month, year;\n\
    \t\n\tstd::istringstream ss(date);\n\tss >> month;\n\tss >> day;\n\tss >> year;\n\
    \t\n\tassert(month > 0 && month <= 12);\n\tassert(day > 0 && day <= 31);\n\tassert(year\
    \ > 1900 && year <= 2020);\n\t\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyz_i1qpg: /tmp/tmpyz_i1qpg.cpp:29: bool valid_date(std::string): Assertion
    `day > 0 && day <= 31'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    \n    // Your code goes here\n    std::istringstream iss(date);\n    iss\
    \ >> std::setfill('0');\n    iss >> std::setw(2) >> std::setfill('0');\n    iss\
    \ >> std::setw(2) >> std::setfill('0');\n    iss >> std::setw(4) >> std::setfill('0');\n\
    \    iss >> std::setw(2) >> std::setfill('0');\n    iss >> std::setw(2) >> std::setfill('0');\n\
    \    int day = std::stoi(date);\n    int month = std::stoi(date);\n    int year\
    \ = std::stoi(date);\n    \n    if (month < 1 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month == 2) {\n\
    \        if (day > 29)\n            return false;\n    } else {\n        if (day\
    \ > 28)\n            return false;\n    }\n    \n    if (day > 31)\n        day\
    \ = 31;\n    if (month > 12)\n        month = month - 12;\n    \n    return (day\
    \ == 31) && (month == 12);\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvxdqt731: /tmp/tmpvxdqt731.cpp:56: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    bool flag = false;\n    if (date.size() != 0) {\n        int year = stoi(date.substr(6,\
    \ 4));\n        int month = stoi(date.substr(0, 2));\n        int day = stoi(date.substr(3,\
    \ 2));\n        if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {\n\
    \            if ((month == 1) || (month == 3) || \n                (month == 5)\
    \ || (month == 7) || \n                (month == 8) || (month == 10) || \n   \
    \             (month == 12)) {\n                if ((day <= 31) || (day > 31))\n\
    \                    flag = false;\n                else if ((day <= 30) || (day\
    \ > 30))\n                    flag = false;\n                else {\n        \
    \            if ((day <= 29) || (day > 29))\n                        flag = false;\n\
    \                    else {\n                        if ((month == 2) || (month\
    \ == 6) || \n                            (month == 9) || (month == 11)) {\n  \
    \                          if ((day <= 31) || (day > 31))\n                  \
    \              flag = false;\n                            else if ((day <= 30)\
    \ || (day > 30))\n                                flag = false;\n            \
    \                else {\n                                if ((day <= 29) || (day\
    \ > 29))\n                                    flag = false;\n                \
    \            }\n                        }\n                    }\n           \
    \     }\n            }\n        }\n    }\n    return flag;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3ydc10yy: /tmp/tmp3ydc10yy.cpp:60: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(!date.empty()) {\n\
    \        std::cerr << \"Invalid date: \" << date << std::endl;\n        return\
    \ false;\n    }\n    \n    int year = atoi(date.c_str());\n    if(year < 1 ||\
    \ year > 9999) {\n        std::cerr << \"Invalid year: \" << date << std::endl;\n\
    \        return false;\n    }\n    \n    std::string month = date.substr(3,2);\n\
    \    if(month.length() != 2) {\n        std::cerr << \"Invalid month: \" << date\
    \ << std::endl;\n        return false;\n    }\n    \n    int day = atoi(date.substr(6,2));\n\
    \    if(day < 1 || day > 31) {\n        std::cerr << \"Invalid day: \" << date\
    \ << std::endl;\n        return false;\n    }\n    \n    std::string day = date.substr(0,6);\n\
    \    if(day != std::to_string(day)) {\n        std::cerr << \"Invalid day: \"\
    \ << date << std::endl;\n        return false;\n    }\n    \n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_kft89o.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpd_kft89o.cpp:38:31: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   38 |     int day = atoi(date.substr(6,2));\n\
    \      |                    ~~~~~~~~~~~^~~~~\n      |                        \
    \       |\n      |                               std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/std_abs.h:38,\n                \
    \ from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd_kft89o.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpd_kft89o.cpp:44:17: error: conflicting declaration \u2018std::string day\u2019\
    \n   44 |     std::string day = date.substr(0,6);\n      |                 ^~~\n\
    /tmp/tmpd_kft89o.cpp:38:9: note: previous declaration as \u2018int day\u2019\n\
    \   38 |     int day = atoi(date.substr(6,2));\n      |         ^~~\n/tmp/tmpd_kft89o.cpp:45:12:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018int\u2019\
    \ and \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   45 |     if(day != std::to_string(day)) {\n      |        ~~~ ^~ ~~~~~~~~~~~~~~~~~~~\n\
    \      |        |                    |\n      |        int                  std::string\
    \ {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpd_kft89o.cpp:2:\n/usr/include/c++/9/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1037:5: note:\
    \   template argument deduction/substitution failed:\n/tmp"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream ss(date);\n\
    \    ss.ignore(std::numeric_limits<std::streamsize>::max(), '-');\n    ss.ignore(std::numeric_limits<std::streamsize>::max(),\
    \ '/');\n    ss.ignore(std::numeric_limits<std::streamsize>::max(), '/');\n\n\
    \    char month[10];\n    char day[10];\n    char year[10];\n\n    ss >> month\
    \ >> day >> year;\n    std::swap(month[11], month[11 - 1]);\n    std::swap(day[11],\
    \ day[11 - 1]);\n    std::swap(year[11], year[11 - 1]);\n\n    if(month[0] ==\
    \ '0' && month[1] == '0') {\n        std::swap(month[0], month[3]);\n        std::swap(day[0],\
    \ day[3]);\n        std::swap(year[0], year[3]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '1') {\n        std::swap(month[0], month[4]);\n        std::swap(day[0],\
    \ day[4]);\n        std::swap(year[0], year[4]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '2') {\n        std::swap(month[0], month[5]);\n        std::swap(day[0],\
    \ day[5]);\n        std::swap(year[0], year[5]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '3') {\n        std::swap(month[0], month[6]);\n        std::swap(day[0],\
    \ day[6]);\n        std::swap(year[0], year[6]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '4') {\n        std::swap(month[0], month[7]);\n        std::swap(day[0],\
    \ day[7]);\n        std::swap(year[0], year[7]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '5') {\n        std::swap(month[0], month[8]);\n        std::swap(day[0],\
    \ day[8]);\n        std::swap(year[0], year[8]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '6') {\n        std::swap(month[0], month[9]);\n        std::swap(day[0],\
    \ day[9]);\n        std::swap(year[0], year[9]);\n    }\n\n    if(month[0] ==\
    \ '0' && month[1] == '7') {\n        std::swap(month[0], month[10]);\n       \
    \ std::swap(day[0], day[10]);\n        std::swap(year[0], year[10]);\n    }\n\n\
    \    if(month[0] == '0' && month[1] == '8') {\n        std::swap(month[0], month[11]);\n\
    \        std::swap(day[0], day[11]);\n        std::swap(year[0], year[11]);\n\
    \    }\n\n    if(month[0] == '0' && month[1] == '9') {\n        \n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpki4hbpai.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpki4hbpai.cpp:92:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   92 | int main() {\n      |            ^\n/tmp/tmpki4hbpai.cpp:110:1:\
    \ error: expected \u2018}\u2019 at end of input\n  110 | }\n      | ^\n/tmp/tmpki4hbpai.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpki4hbpai.cpp:110:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  110 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    \n    // 1. Date string\
    \ is not empty.\n    \n    // The date string should not be empty.\n    if (date.size()\
    \ == 0) return false;\n    // The date string should not contain '-' characters.\n\
    \    if (date.find_first_not_of(' ') != std::string::npos) return false;\n   \
    \ // The date string should not contain '/' characters.\n    if (date.find_first_of('/')\
    \ != std::string::npos) return false;\n    \n    // 2. Check the number of days\
    \ for month 1 and 3.\n    \n    // The number of days should not be less than\
    \ 1 or higher than 31 days for months 1, 3, 5, 7, 8, 10, 12.\n    if (date.size()\
    \ != 10 && date.find_first_of('0') != std::string::npos) return false;\n    if\
    \ (date.find_first_of('1') != std::string::npos && date.find_first_of('3') !=\
    \ std::string::npos) return false;\n    if (date.find_first_of('4') != std::string::npos\
    \ && date.find_first_of('6') != std::string::npos) return false;\n    if (date.find_first_of('7')\
    \ != std::string::npos && date.find_first_of('9') != std::string::npos) return\
    \ false;\n    if (date.find_first_of('10') != std::string::npos && date.find_first_of('11')\
    \ != std::string::npos) return false;\n    if (date.find_first_of('12') != std::string::npos)\
    \ return false;\n    \n    // The number of days should not be less than 1 or\
    \ higher than 30 days for month 4,6,9,11.\n    if (date.find_first_of('0') !=\
    \ std::string::npos) return false;\n    if (date.find_first_of('1') != std::string::npos\
    \ && date.find_first_of('3') != std::string::npos) return false;\n    if (date.find_first_of('4')\
    \ != std::string::npos && date.find_first_of('6') != std::string::npos) return\
    \ false;\n    if (date.find_first_of('7') != std::string::npos && date.find_first_of('9')\
    \ != std::string::npos) return false;\n    if (date.find_first_of('10') != std::string::npos\
    \ && date.find_first_of('11') != std::string::npos) return false;\n    if (date.find_first_of('12')\
    \ != std::string::npos) return false;\n    \n    // The number of days should\
    \ not be less than 1 or higher than 29 days for the month 2.\n    if (date.find_first_of('0')\
    \ != std::string::npos) return false;\n    if (date.find_first_of('1') != std::string::npos\
    \ && date.find_first_of('3') != std::string::npos) return false;\n    if (date.find_first_of('4')\
    \ != std::string::npos && date.find_first_of('6') != std::string::npos) return\
    \ false;\n    if (date.find_first_of('7') \n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4q8wwf8a.cpp:38:28: warning: multi-character character constant\
    \ [-Wmultichar]\n   38 |     if (date.find_first_of('10') != std::string::npos\
    \ && date.find_first_of('11') != std::string::npos) return false;\n      |   \
    \                         ^~~~\n/tmp/tmp4q8wwf8a.cpp:38:77: warning: multi-character\
    \ character constant [-Wmultichar]\n   38 |     if (date.find_first_of('10') !=\
    \ std::string::npos && date.find_first_of('11') != std::string::npos) return false;\n\
    \      |                                                                     \
    \        ^~~~\n/tmp/tmp4q8wwf8a.cpp:39:28: warning: multi-character character\
    \ constant [-Wmultichar]\n   39 |     if (date.find_first_of('12') != std::string::npos)\
    \ return false;\n      |                            ^~~~\n/tmp/tmp4q8wwf8a.cpp:46:28:\
    \ warning: multi-character character constant [-Wmultichar]\n   46 |     if (date.find_first_of('10')\
    \ != std::string::npos && date.find_first_of('11') != std::string::npos) return\
    \ false;\n      |                            ^~~~\n/tmp/tmp4q8wwf8a.cpp:46:77:\
    \ warning: multi-character character constant [-Wmultichar]\n   46 |     if (date.find_first_of('10')\
    \ != std::string::npos && date.find_first_of('11') != std::string::npos) return\
    \ false;\n      |                                                            \
    \                 ^~~~\n/tmp/tmp4q8wwf8a.cpp:47:28: warning: multi-character character\
    \ constant [-Wmultichar]\n   47 |     if (date.find_first_of('12') != std::string::npos)\
    \ return false;\n      |                            ^~~~\n/tmp/tmp4q8wwf8a.cpp:\
    \ In function \u2018bool valid_date(std::string)\u2019:\n/tmp/tmp4q8wwf8a.cpp:38:28:\
    \ warning: overflow in conversion from \u2018int\u2019 to \u2018char\u2019 changes\
    \ value from \u201812592\u2019 to \u2018'0'\u2019 [-Woverflow]\n   38 |     if\
    \ (date.find_first_of('10') != std::string::npos && date.find_first_of('11') !=\
    \ std::string::npos) return false;\n      |                            ^~~~\n\
    /tmp/tmp4q8wwf8a.cpp:38:77: warning: overflow in conversion from \u2018int\u2019\
    \ to \u2018char\u2019 changes value from \u201812593\u2019 to \u2018'1'\u2019\
    \ [-Woverflow]\n   38 | "
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    month = stoi(date.substr(6, 2));\n    day = stoi(date.substr(3, 2));\n  \
    \  year = stoi(date.substr(0, 4));\n    assert(month >= 1 && month <= 12);\n \
    \   assert(day >= 1 && day <= 31);\n    assert(year % 4 == 0 && year % 100 !=\
    \ 0 || year % 400 == 0);\n    return (month == 4 || month == 6 || month == 9 ||\
    \ month == 11) && day <= 30;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp1wbjvlu5: /tmp/tmp1wbjvlu5.cpp:25: bool valid_date(std::string): Assertion
    `month >= 1 && month <= 12'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n\
    \    int y = stoi(date.substr(6, 4));\n    if (m <= 12 && d > 1 && d <= 31 &&\
    \ y > 0 && y <= 20) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvarb8076: /tmp/tmpvarb8076.cpp:33: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::istringstream iss(date);\n    std::string month;\n    int day, year;\n\
    \    char validDays[31][3] = {\n        \"01\", \"03\", \"05\", \"07\", \"08\"\
    , \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\"\
    , \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\",\n        \"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\",\
    \ \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\",\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\",\n        \"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\",\
    \ \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\",\n  \
    \      \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\",\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"\
    10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\",\
    \ \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\",\n        \"01\", \"\
    03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\",\
    \ \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\"\
    , \"11\",\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"\
    04\", \"06\", \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\",\
    \ \"12\", \"04\", \"06\", \"09\", \"11\",\n        \"01\", \"03\", \"05\", \"\
    07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\", \"01\", \"03\",\
    \ \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\", \"09\", \"11\",\n  \
    \      \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\"\
    , \"09\", \"11\", \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\", \"09\", \"11\",\n        \"01\", \"03\", \"05\", \"07\", \"08\", \"\
    10\", \"12\", \"04\", \"06\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyw5g6l4a.cpp:36:57: warning: missing terminating \" character\n\
    \   36 |         \"01\", \"03\", \"05\", \"07\", \"08\", \"10\", \"12\", \"04\"\
    , \"06\n      |                                                         ^\n/tmp/tmpyw5g6l4a.cpp:36:57:\
    \ error: missing terminating \" character\n   36 |         \"01\", \"03\", \"\
    05\", \"07\", \"08\", \"10\", \"12\", \"04\", \"06\n      |                  \
    \                                       ^~~\n/tmp/tmpyw5g6l4a.cpp: In function\
    \ \u2018bool valid_date(std::string)\u2019:\n/tmp/tmpyw5g6l4a.cpp:37:1: error:\
    \ too many initializers for \u2018char [31][3]\u2019\n   37 | }\n      | ^\n/tmp/tmpyw5g6l4a.cpp:56:1:\
    \ error: expected \u2018}\u2019 at end of input\n   56 | }\n      | ^\n/tmp/tmpyw5g6l4a.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpyw5g6l4a.cpp:56:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   56 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    int day;\n    bool valid_month = validate_month(date);\n    if(valid_month){\n\
    \        day = atoi((date.substr(6,2) - '0')); // Get day\n        if(day < 1\
    \ || day > 31)\n            valid = false;\n    }\n    if(!valid || day < 1 ||\
    \ day > 30)\n        valid = false;\n    if(!valid)\n        valid = false;\n\
    \    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcx9r9y48.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcx9r9y48.cpp:23:24: error: \u2018validate_month\u2019 was not declared\
    \ in this scope; did you mean \u2018valid_month\u2019?\n   23 |     bool valid_month\
    \ = validate_month(date);\n      |                        ^~~~~~~~~~~~~~\n   \
    \   |                        valid_month\n/tmp/tmpcx9r9y48.cpp:25:38: error: no\
    \ match for \u2018operator-\u2019 (operand types are \u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018char\u2019)\n   25 |         day = atoi((date.substr(6,2) - '0'));\
    \ // Get day\n      |                     ~~~~~~~~~~~~~~~~ ^ ~~~\n      |    \
    \                            |       |\n      |                              \
    \  |       char\n      |                                std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcx9r9y48.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpcx9r9y48.cpp:25:40:\
    \ note:   \u2018std::__cxx11::basic_string<char>\u2019 is not derived from \u2018\
    const std::reverse_iterator<_Iterator>\u2019\n   25 |         day = atoi((date.substr(6,2)\
    \ - '0')); // Get day\n      |                                        ^~~\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcx9"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string date_s[3],\
    \ month_s;\n    int day_s[3], months[12], i;\n    bool flag = true;\n    i = 0;\n\
    \    while (i < 3) {\n        date_s{i} = date.substr(i, 3);\n        i += 3;\n\
    \    }\n    i = 0;\n    while (i < 12) {\n        month_s{i} = date.substr(i,\
    \ 1);\n        i += 1;\n    }\n    i = 0;\n    while (i < 12) {\n        if (i\
    \ > 0 && date_s{i} == month_s) {\n            months[i] = months[i-1];\n     \
    \   } else {\n            months[i] = 1;\n        }\n        i += 1;\n    }\n\
    \    i = 0;\n    while (i < 12) {\n        if (months[i] > 11) {\n           \
    \ flag = false;\n            break;\n        }\n        day_s[i] = date.substr(i,\
    \ 2);\n        i += 2;\n    }\n    if (flag) {\n        int d = day_s[0], m =\
    \ months[0], y = date_s;\n        if (d > 31 || d < 0) {\n            flag = false;\n\
    \        }\n        if (m > 12) {\n            flag = false;\n        }\n    \
    \    if (d < 1 || d > 31 || (m == 1 && d > 31)) {\n            flag = false;\n\
    \        }\n        if (m < 1 || m > 12) {\n            flag = false;\n      \
    \  }\n    }\n    return flag;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqrrdtax8.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqrrdtax8.cpp:26:15: error: expected \u2018;\u2019 before \u2018{\u2019\
    \ token\n   26 |         date_s{i} = date.substr(i, 3);\n      |             \
    \  ^\n      |               ;\n/tmp/tmpqrrdtax8.cpp:26:19: error: expected primary-expression\
    \ before \u2018=\u2019 token\n   26 |         date_s{i} = date.substr(i, 3);\n\
    \      |                   ^\n/tmp/tmpqrrdtax8.cpp:31:16: error: expected \u2018\
    ;\u2019 before \u2018{\u2019 token\n   31 |         month_s{i} = date.substr(i,\
    \ 1);\n      |                ^\n      |                ;\n/tmp/tmpqrrdtax8.cpp:31:20:\
    \ error: expected primary-expression before \u2018=\u2019 token\n   31 |     \
    \    month_s{i} = date.substr(i, 1);\n      |                    ^\n/tmp/tmpqrrdtax8.cpp:36:28:\
    \ error: expected \u2018)\u2019 before \u2018{\u2019 token\n   36 |         if\
    \ (i > 0 && date_s{i} == month_s) {\n      |            ~               ^\n  \
    \    |                            )\n/tmp/tmpqrrdtax8.cpp:49:31: error: cannot\
    \ convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018int\u2019 in assignment\n\
    \   49 |         day_s[i] = date.substr(i, 2);\n      |                    ~~~~~~~~~~~^~~~~~\n\
    \      |                               |\n      |                            \
    \   std::__cxx11::basic_string<char>\n/tmp/tmpqrrdtax8.cpp:53:46: error: invalid\
    \ conversion from \u2018std::string*\u2019 {aka \u2018std::__cxx11::basic_string<char>*\u2019\
    } to \u2018int\u2019 [-fpermissive]\n   53 |         int d = day_s[0], m = months[0],\
    \ y = date_s;\n      |                                              ^~~~~~\n \
    \     |                                              |\n      |              \
    \                                std::string* {aka std::__cxx11::basic_string<char>*}\n"
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // TODO: Complete this\
    \ function\n    if (date.length() == 0) {\n        return false;\n    }\n\n  \
    \  std::istringstream iss(date);\n    char month1, month2, day1, day2, year1,\
    \ year2;\n    iss >> day1 >> month1 >> day2 >> month2 >> year1 >> year2;\n   \
    \ // The months should not be less than 1 or higher than 12\n    if (month1 <\
    \ 1 || month1 > 12) {\n        return false;\n    }\n    // The date should be\
    \ in the format: mm-dd-yyyy\n    if (day1 < 1 || day1 > 31 && month1 < 1 || month1\
    \ > 12) {\n        return false;\n    }\n    // The months should not be less\
    \ than 1 or higher than 12\n    if (month2 < 1 || month2 > 12) {\n        return\
    \ false;\n    }\n    // The date should be in the format: mm-dd-yyyy\n    if (day2\
    \ < 1 || day2 > 31 && month2 < 1 || month2 > 12) {\n        return false;\n  \
    \  }\n    // The months should not be less than 1 or higher than 12\n    if (year2\
    \ < 1 || year2 > 12) {\n        return false;\n    }\n    // The date should be\
    \ in the format: mm-dd-yyyy\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8khncf_k: /tmp/tmp8khncf_k.cpp:54: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // write your code here\n\
    \    if(date.empty()){\n        return false;\n    }\n    const size_t daysInMonth[12]\
    \ = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int d, m, y;\n    char\
    \ month[12];\n    std::istringstream iss(date);\n    iss >> m >> d >> y;\n   \
    \ if (m >= 1 && m <= 12) {\n        if (m > 12 || m < 1 || d > daysInMonth[m]\
    \ || (d == daysInMonth[m] && m != 12)) {\n            return false;\n        }\n\
    \    } else {\n        return false;\n    }\n    std::cout << \"month: \" << month\
    \ << std::endl;\n    if (y <= 100) {\n        if (y > 19 || y < 1) {\n       \
    \     return false;\n        }\n    } else {\n        return false;\n    }\n \
    \   bool flag = false;\n    int year = (int) (y / 100);\n    int month = (int)\
    \ (y % 100) / 12;\n    if (flag == true) {\n        std::cout << \"year: \" <<\
    \ year << std::endl;\n        std::cout << \"month: \" << month << std::endl;\n\
    \    }\n    for (int i = 0; i <= 12; i++) {\n        if (month == i + 1) {\n \
    \           flag = true;\n            break;\n        }\n    }\n    bool flag1\
    \ = false;\n    int year1 = (int) (y / 100);\n    int month1 = (int) (y % 100)\
    \ / 12;\n    if (flag1 == true) {\n        std::cout << \"year: \" << year1 <<\
    \ std::endl;\n        std::cout << \"month: \" << month1 << std::endl;\n    }\n\
    \    for (int i = 0; i <= 12; i++) {\n        if (month1 == i + 1) {\n       \
    \     flag1 = true;\n            break;\n        }\n    }\n    if (flag == true\
    \ && flag1 == true) {\n        if (d < 1 || d > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzoks32b3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpzoks32b3.cpp:47:9: error: conflicting declaration \u2018int month\u2019\
    \n   47 |     int month = (int) (y % 100) / 12;\n      |         ^~~~~\n/tmp/tmpzoks32b3.cpp:27:10:\
    \ note: previous declaration as \u2018char month [12]\u2019\n   27 |     char\
    \ month[12];\n      |          ^~~~~\n/tmp/tmpzoks32b3.cpp:53:26: error: ISO C++\
    \ forbids comparison between pointer and integer [-fpermissive]\n   53 |     \
    \    if (month == i + 1) {\n      |                          ^\n"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string::iterator\
    \ p1 = date.begin();\n    std::string::iterator p2 = date.end();\n    if (p1 ==\
    \ p2)\n        return true;\n    if (p1 == p2)\n        return false;\n    std::string\
    \ month_s = \"0-1-2\";\n    std::string day_s = \"2-3-4\";\n    std::string year_s\
    \ = \"4-5-6-7-8-9-10-11-12\";\n    std::string num_days = \"1-2-3\";\n    std::string\
    \ num_months = \"1-3\";\n    std::string dash_s = \"-\";\n    std::string slash_s\
    \ = \"/\";\n    std::string dot_s = \"\\\\.\";\n    std::string slash_dot_s =\
    \ \"/\\\\.\";\n    std::string space_s = \"\\\\s\";\n    std::string comma_s =\
    \ \"\\\\,\";\n    std::string equal_s = \"=\";\n    std::string less_s = \"<\"\
    ;\n    std::string greater_s = \">\";\n    std::string less_equal_s = \"<=\";\n\
    \    std::string greater_equal_s = \">=\";\n    std::string at_s = \"@\";\n  \
    \  std::string range_s = \"0\";\n    std::string dash_dash_s = \"--\";\n    std::string\
    \ slash_slash_s = \"/\\\\\";\n    std::string slash_slash_dot_s = \"/\\\\.\";\n\
    \    std::string slash_dash_s = \"/-\";\n    std::string comma_dash_s = \",-\"\
    ;\n    std::string num_dash_s = \"\\\\d-\";\n    std::string num_comma_slash_s\
    \ = \"\\\\d\\\\s\";\n    std::string dash_s = \"-\";\n    std::string dot_s =\
    \ \"\\\\.\";\n    std::string slash_s = \"/\";\n    std::string slash_dot_s =\
    \ \"/\\\\.\";\n    std::string space_s = \"\\\\s\";\n    std::string comma_s =\
    \ \"\\\\,\";\n    std::string equal_s = \"=\";\n    std::string less_s = \"<\"\
    ;\n    std::string greater_s = \">\";\n    std::string less_equal_s = \"<=\";\n\
    \    std::string greater_equal_s = \">=\";\n    std::string at_s = \"@\";\n  \
    \  std::string range_s = \"0\";\n    std::string dash_dash_s = \"--\";\n    std::string\
    \ slash_slash_s = \"/\\\\\";\n    std::string slash_slash_dot_s = \"/\\\\.\";\n\
    \    std::string slash_dash_s = \"/-\";\n    std::string comma_dash_s = \",-\"\
    ;\n    std::string num_dash_s = \"\\\\d-\";\n    std::string num_comma_slash_s\
    \ = \"\\\\d\\\\s\";\n    std::string dash_s = \"-\";\n    std::string dot_s =\
    \ \"\\\\.\";\n    std::string slash_s = \"/\";\n    std::string slash_dot_s =\
    \ \"/\\\\.\";\n    std::string space_s = \"\\\\s\";\n    std::string comma_s =\
    \ \"\\\\,\";\n    std::string equal_s = \"=\";\n    std::string less_s = \"<\"\
    ;\n    std::string greater_s = \">\";\n    std::string less_equal_\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1bxan54l.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp1bxan54l.cpp:52:17: error: redeclaration of \u2018std::string dash_s\u2019\
    \n   52 |     std::string dash_s = \"-\";\n      |                 ^~~~~~\n/tmp/tmp1bxan54l.cpp:32:17:\
    \ note: \u2018std::string dash_s\u2019 previously declared here\n   32 |     std::string\
    \ dash_s = \"-\";\n      |                 ^~~~~~\n/tmp/tmp1bxan54l.cpp:53:17:\
    \ error: redeclaration of \u2018std::string dot_s\u2019\n   53 |     std::string\
    \ dot_s = \"\\\\.\";\n      |                 ^~~~~\n/tmp/tmp1bxan54l.cpp:34:17:\
    \ note: \u2018std::string dot_s\u2019 previously declared here\n   34 |     std::string\
    \ dot_s = \"\\\\.\";\n      |                 ^~~~~\n/tmp/tmp1bxan54l.cpp:54:17:\
    \ error: redeclaration of \u2018std::string slash_s\u2019\n   54 |     std::string\
    \ slash_s = \"/\";\n      |                 ^~~~~~~\n/tmp/tmp1bxan54l.cpp:33:17:\
    \ note: \u2018std::string slash_s\u2019 previously declared here\n   33 |    \
    \ std::string slash_s = \"/\";\n      |                 ^~~~~~~\n/tmp/tmp1bxan54l.cpp:55:17:\
    \ error: redeclaration of \u2018std::string slash_dot_s\u2019\n   55 |     std::string\
    \ slash_dot_s = \"/\\\\.\";\n      |                 ^~~~~~~~~~~\n/tmp/tmp1bxan54l.cpp:35:17:\
    \ note: \u2018std::string slash_dot_s\u2019 previously declared here\n   35 |\
    \     std::string slash_dot_s = \"/\\\\.\";\n      |                 ^~~~~~~~~~~\n\
    /tmp/tmp1bxan54l.cpp:56:17: error: redeclaration of \u2018std::string space_s\u2019\
    \n   56 |     std::string space_s = \"\\\\s\";\n      |                 ^~~~~~~\n\
    /tmp/tmp1bxan54l.cpp:36:17: note: \u2018std::string space_s\u2019 previously declared\
    \ here\n   36 |     std::string space_s = \"\\\\s\";\n      |                \
    \ ^~~~~~~\n/tmp/tmp1bxan54l.cpp:57:17: error: redeclaration of \u2018std::string\
    \ comma_s\u2019\n   57 |     std::string comma_s = \"\\\\,\";\n      |       \
    \          ^~~~~~~\n/tmp/tmp1bxan54l.cpp:37:17: note: \u2018std::string comma_s\u2019\
    \ previously declared here\n   37 |     std::string comma_s = \"\\\\,\";\n   \
    \   |                 ^~~~~~~\n/tmp/tmp1bxan54l.cpp:58:17: error: redeclaration\
    \ of \u2018std::string equal_s\u2019\n   58 |     std::string equal_s = \"=\"\
    ;\n      |"
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.empty()) return\
    \ false;\n    int day1,day3,day5,day7,day8,day10,day12,day15;\n    int month1,month3,month5,month7,month8,month10,month12,month2;\n\
    \    day1 = std::stoi(date.substr(0,2));\n    day3 = std::stoi(date.substr(2,2));\n\
    \    day5 = std::stoi(date.substr(4,2));\n    day7 = std::stoi(date.substr(6,2));\n\
    \    day8 = std::stoi(date.substr(8,2));\n    day10 = std::stoi(date.substr(10,2));\n\
    \    day12 = std::stoi(date.substr(12,2));\n    day15 = std::stoi(date.substr(14,2));\n\
    \    month1 = std::stoi(date.substr(0,3));\n    month3 = std::stoi(date.substr(3,3));\n\
    \    month5 = std::stoi(date.substr(5,3));\n    month7 = std::stoi(date.substr(7,3));\n\
    \    month8 = std::stoi(date.substr(9,3));\n    month10 = std::stoi(date.substr(11,3));\n\
    \    month12 = std::stoi(date.substr(13,3));\n    month2 = std::stoi(date.substr(15,3));\n\
    \    if((day1<1)||(day1>31))\n        return false;\n    if((day3<1)||(day3>30))\n\
    \        return false;\n    if((day5<1)||(day5>29))\n        return false;\n \
    \   if((day7<1)||(day7>31))\n        return false;\n    if((day8<1)||(day8>31))\n\
    \        return false;\n    if((day10<1)||(day10>30))\n        return false;\n\
    \    if((day12<1)||(day12>29))\n        return false;\n    if((month1<1)||(month1>12))\n\
    \        return false;\n    if((month3<1)||(month3>12))\n        return false;\n\
    \    if((month5<1)||(month5>12))\n        return false;\n    if((month7<1)||(month7>12))\n\
    \        return false;\n    if((month8<1)||(month8>12))\n        return false;\n\
    \    if((month10<1)||(month10>12))\n        return false;\n    if((month12<1)||(month12>12))\n\
    \        return false;\n    if((month2<1)||(month2>12))\n        return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::invalid_argument'\n\
    \  what():  stoi\n"
  stdout: ''
  timestamp: 1660133523
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) {\n\
    \        return false;\n    }\n    auto date_parts = date.substr(0, 2).split(\"\
    -\");\n    int month = atoi(date_parts[1].c_str());\n    int day = atoi(date_parts[2].c_str());\n\
    \    int year = atoi(date_parts[0].c_str());\n\n    // The months should not be\
    \ less than 1 or higher than 12.\n    if (month < 1 || month > 12) {\n       \
    \ return false;\n    }\n    // The number of days is not less than 1 or higher\
    \ than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less\
    \ than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is\
    \ not less than 1 or higher than 29 for the month 2.\n    if (day < 1 || day >\
    \ 31 || day > 30 || day > 29) {\n        return false;\n    }\n\n    // The date\
    \ should be in the format: mm-dd-yyyy\n    if (month == 1 && day > 31) {\n   \
    \     return false;\n    }\n    if (month == 3 && day > 30) {\n        return\
    \ false;\n    }\n    if (month == 5 && day > 31) {\n        return false;\n  \
    \  }\n    if (month == 7 && day > 31) {\n        return false;\n    }\n    if\
    \ (month == 8 && day > 30) {\n        return false;\n    }\n    if (month == 10\
    \ && day > 31) {\n        return false;\n    }\n    if (month == 12 && day > 31)\
    \ {\n        return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5sht5nor.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5sht5nor.cpp:24:41: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   24 |     auto date_parts = date.substr(0,\
    \ 2).split(\"-\");\n      |                                         ^~~~~\n"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    size_t i = 0, j = 0;\n\
    \    char day[20], month[20];\n    std::string days[] = {\"01\", \"02\", \"03\"\
    , \"04\", \"05\", \"06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\"\
    , \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\"\
    , \"24\", \"25\", \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n    std::string\
    \ months[] = {\"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"08\",\
    \ \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\"\
    , \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\", \"28\"\
    , \"29\", \"30\", \"31\"};\n    size_t day_count = days[date.substr(0, 2).toupper()\
    \ - '0'];\n    size_t month_count = months[date.substr(2, 2).toupper() - '0'];\n\
    \    int year = atoi(date.substr(4, 4).c_str());\n    int day = atoi(date.substr(6,\
    \ 2).c_str());\n    int month = atoi(date.substr(8, 2).c_str());\n    // Check\
    \ whether the day is within the valid range\n    while (day < 1 || day > 31 ||\
    \ (day_count > 12 && day != 31))\n        day = atoi(date.substr(6, 2).c_str());\n\
    \    // Check whether the month is within the valid range\n    while (month <\
    \ 1 || month > 12)\n        month = atoi(date.substr(8, 2).c_str());\n    // Check\
    \ if the number of months is valid and greater than 1\n    if ((months[month -\
    \ 1] > 1) || (day_count > 30))\n        return false;\n    // Check if the number\
    \ of days is not less than 1 and not greater than 31\n    if (day < 1 || day >\
    \ 31)\n        return false;\n    // Check if the number of days is valid and\
    \ greater than 30\n    if (day_count > 30)\n        return false;\n    // If the\
    \ day is 31, then the month must be February.\n    if (day == 31)\n        return\
    \ month == 2;\n    // Check if the year is within the valid range\n    // If the\
    \ year is before 2000, then it is a leap year\n    if (year < 2000)\n        return\
    \ year % 400 == 0 || (year % 100 != 0 && year % 4 == 0);\n    // If the year is\
    \ between 2000 and 2099, then it is a leap year\n    return year % 4 == 0 || (year\
    \ % 400 == 0 && year % 100 != 0);\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5lctp_yx.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp5lctp_yx.cpp:25:47: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toupper\u2019\n   25 |     size_t day_count = days[date.substr(0,\
    \ 2).toupper() - '0'];\n      |                                              \
    \ ^~~~~~~\n/tmp/tmp5lctp_yx.cpp:26:51: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018toupper\u2019\n   26 |     size_t month_count = months[date.substr(2,\
    \ 2).toupper() - '0'];\n      |                                              \
    \     ^~~~~~~\n/tmp/tmp5lctp_yx.cpp:28:9: error: conflicting declaration \u2018\
    int day\u2019\n   28 |     int day = atoi(date.substr(6, 2).c_str());\n      |\
    \         ^~~\n/tmp/tmp5lctp_yx.cpp:22:10: note: previous declaration as \u2018\
    char day [20]\u2019\n   22 |     char day[20], month[20];\n      |          ^~~\n\
    /tmp/tmp5lctp_yx.cpp:29:9: error: conflicting declaration \u2018int month\u2019\
    \n   29 |     int month = atoi(date.substr(8, 2).c_str());\n      |         ^~~~~\n\
    /tmp/tmp5lctp_yx.cpp:22:19: note: previous declaration as \u2018char month [20]\u2019\
    \n   22 |     char day[20], month[20];\n      |                   ^~~~~\n/tmp/tmp5lctp_yx.cpp:31:18:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   31 |     while (day < 1 || day > 31 || (day_count > 12 && day != 31))\n  \
    \    |                  ^\n/tmp/tmp5lctp_yx.cpp:31:29: error: ISO C++ forbids\
    \ comparison between pointer and integer [-fpermissive]\n   31 |     while (day\
    \ < 1 || day > 31 || (day_count > 12 && day != 31))\n      |                 \
    \            ^~\n/tmp/tmp5lctp_yx.cpp:31:61: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   31 |     while (day < 1 || day\
    \ > 31 || (day_count > 12 && day != 31))\n      |                            \
    \                                 ^~\n/tmp/tmp5lctp_yx.cpp:32:45: error: incompatible\
    \ types in assignment of \u2018int\u2019 to \u2018char [20]\u2019\n   32 |   \
    \      day = atoi(date.substr(6, 2).c_str());\n      |                       \
    \                      ^\n/tmp/tmp5"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::bitset<12> day(date\
    \ + '0');\n    if (day.count(0) || day.count(1) || day.count(3) || day.count(5)\
    \ || day.count(7) || day.count(8) || day.count(10) || day.count(12))\n       \
    \ return false;\n\n    day = (date + '0' - '1') % 7;\n    if (day.count(0) ||\
    \ day.count(1) || day.count(3) || day.count(4) || day.count(6) || day.count(9))\n\
    \        return false;\n\n    std::bitset<12> month(date + '0' - '1' + 1);\n \
    \   if (month.count(0) || month.count(1) || month.count(3) || month.count(6) ||\
    \ month.count(9) || month.count(11))\n        return false;\n\n    std::bitset<12>\
    \ year(date + '0' - '1' + 1 - month.count(0) - month.count(1));\n    if (year.count(0)\
    \ || year.count(1) || year.count(3) || year.count(5) || year.count(7) || year.count(8)\
    \ || year.count(10) || year.count(12))\n        return false;\n\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8t1vvitt.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8t1vvitt.cpp:22:20: error: no matching function for call to \u2018\
    std::bitset<12>::count(int)\u2019\n   22 |     if (day.count(0) || day.count(1)\
    \ || day.count(3) || day.count(5) || day.count(7) || day.count(8) || day.count(10)\
    \ || day.count(12))\n      |                    ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n\
    \                 from /tmp/tmp8t1vvitt.cpp:2:\n/usr/include/c++/9/bitset:1295:7:\
    \ note: candidate: \u2018std::size_t std::bitset<_Nb>::count() const [with long\
    \ unsigned int _Nb = 12; std::size_t = long unsigned int]\u2019\n 1295 |     \
    \  count() const _GLIBCXX_NOEXCEPT\n      |       ^~~~~\n/usr/include/c++/9/bitset:1295:7:\
    \ note:   candidate expects 0 arguments, 1 provided\n/tmp/tmp8t1vvitt.cpp:22:36:\
    \ error: no matching function for call to \u2018std::bitset<12>::count(int)\u2019\
    \n   22 |     if (day.count(0) || day.count(1) || day.count(3) || day.count(5)\
    \ || day.count(7) || day.count(8) || day.count(10) || day.count(12))\n      |\
    \                                    ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n\
    \                 from /tmp/tmp8t1vvitt.cpp:2:\n/usr/include/c++/9/bitset:1295:7:\
    \ note: candidate: \u2018std::size_t std::bitset<_Nb>::count() const [with long\
    \ unsigned int _Nb = 12; std::size_t = long unsigned int]\u2019\n 1295 |     \
    \  count() const _GLIBCXX_NOEXCEPT\n      |       ^~~~~\n/usr/include/c++/9/bitset:1295:7:\
    \ note:   candidate expects 0 arguments, 1 provided\n/tmp/tmp8t1vvitt.cpp:22:52:\
    \ error: no matching function for call to \u2018std::bitset<12>::count(int)\u2019\
    \n   22 |     if (day.count(0) || day.count(1) || day.count(3) || day.count(5)\
    \ || day.count(7) || day.count(8) || day.count(10) || day.count(12))\n      |\
    \                                                    ^\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:66,\n                 from\
    \ /tmp/tmp8t1vvitt.cpp:2:\n/usr/include/c++/9/bitset:1295:7: note: candidate:\
    \ \u2018std::size_t std::bitset<_Nb>::count() const [with"
  stdout: ''
  timestamp: 1660133522
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string clean_string\
    \ = date;\n    std::size_t found = clean_string.find(\"%\");\n    if (found !=\
    \ clean_string.npos) {\n        clean_string.erase(found);\n    }\n    std::size_t\
    \ found = clean_string.find(\"%\");\n    if (found != clean_string.npos) {\n \
    \       clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(found);\n\
    \    }\n    std::size_t found = clean_string.find(\"%\");\n    if (found != clean_string.npos)\
    \ {\n        clean_string.erase(found);\n    }\n    std::size_t found = clean_string.find(\"\
    %\");\n    if (found != clean_string.npos) {\n        clean_string.erase(\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_kwo2yk.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpp_kwo2yk.cpp:26:17: error: redeclaration of \u2018std::size_t found\u2019\
    \n   26 |     std::size_t found = clean_string.find(\"%\");\n      |         \
    \        ^~~~~\n/tmp/tmpp_kwo2yk.cpp:22:17: note: \u2018std::size_t found\u2019\
    \ previously declared here\n   22 |     std::size_t found = clean_string.find(\"\
    %\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:30:17: error: redeclaration\
    \ of \u2018std::size_t found\u2019\n   30 |     std::size_t found = clean_string.find(\"\
    %\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:22:17: note: \u2018\
    std::size_t found\u2019 previously declared here\n   22 |     std::size_t found\
    \ = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:34:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   34 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:38:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   38 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:42:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   42 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:46:17:\
    \ error: redeclaration of \u2018std::size_t found\u2019\n   46 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |                 ^~~~~\n/tmp/tmpp_kwo2yk.cpp:22:17:\
    \ note: \u2018std::size_t found\u2019 previously declared here\n   22 |     std::size_t\
    \ found = clean_string.find(\"%\");\n      |               "
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code goes here\n\
    \  int month = 1;\n  int day = 1;\n  int year = 2012;\n\n  std::istringstream\
    \ iss(date);\n  int mm, dd;\n  iss >> mm >> dd;\n\n  assert (mm >= 1 && mm <=\
    \ 12);\n  assert (iss);\n\n  assert (day >= 1 && day <= 31);\n  assert (year >=\
    \ 1 && year <= 2020);\n\n  return true;\n}\nint main() {\n    auto candidate =\
    \ valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdq0wu35q: /tmp/tmpdq0wu35q.cpp:30: bool valid_date(std::string): Assertion
    `mm >= 1 && mm <= 12'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  bool check;\n  int d, m,\
    \ y;\n  std::istringstream in(date);\n  in >> std::get_time(&d, \"%d-%m-%Y\");\n\
    \  if (!in) check = false;\n  else if ((m != 1 || m != 3 || m != 5 || m != 7 ||\
    \ m != 8 || m != 10 || m != 12) && (m != 4 || m != 6 || m != 9 || m != 11) &&\
    \ (m != 2)) check = false;\n  else if ((d < 1 || d > 31) && (d < 1 || d > 30)\
    \ && (d < 1 || d > 29)) check = false;\n  else check = true;\n  return check;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwjclpuu.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpdwjclpuu.cpp:24:37: error: no matching function for call to \u2018\
    get_time(int*, const char [9])\u2019\n   24 |   in >> std::get_time(&d, \"%d-%m-%Y\"\
    );\n      |                                     ^\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:72,\n\
    \                 from /tmp/tmpdwjclpuu.cpp:2:\n/usr/include/c++/9/iomanip:413:5:\
    \ note: candidate: \u2018template<class _CharT> std::_Get_time<_CharT> std::get_time(tm*,\
    \ const _CharT*)\u2019\n  413 |     get_time(std::tm* __tmb, const _CharT* __fmt)\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/iomanip:413:5: note:   template argument\
    \ deduction/substitution failed:\n/tmp/tmpdwjclpuu.cpp:24:23: note:   cannot convert\
    \ \u2018& d\u2019 (type \u2018int*\u2019) to type \u2018tm*\u2019\n   24 |   in\
    \ >> std::get_time(&d, \"%d-%m-%Y\");\n      |                       ^~\n"
  stdout: ''
  timestamp: 1660133522
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    std::istringstream ins(date);\n    ins >> month;\n    ins >> day;\n    ins\
    \ >> year;\n    ins.ignore(std::numeric_limits<std::streamsize>::max(), '-');\n\
    \    year = std::min(std::max(year, 1970), 2040);\n    month = std::min(std::max(month,\
    \ 1), 12);\n    day = std::min(std::max(day, 1), 31);\n    bool result = (((month\
    \ != 0) && (month != 11) && (month != 2)) && (month != 12) && (month < 13));\n\
    \    result = result && (((day >= 1) && (day <= 31)) || ((day >= 1) && (day <=\
    \ 30)) || ((day >= 1) && (day <= 29)));\n    result = result && (year >= 1970)\
    \ && (year <= 2040);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkn8c8gne: /tmp/tmpkn8c8gne.cpp:39: int main(): Assertion `candidate(("04-0-2040"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    return false; // Your code goes here\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp60j2dg9g: /tmp/tmp60j2dg9g.cpp:26: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(!date.empty());\n\
    \    std::size_t count_1 = date.find_first_of(\"-\");\n    std::size_t count_2\
    \ = date.find_last_of(\"-\");\n    if (count_1 == std::string::npos || count_2\
    \ == std::string::npos) {\n        return false;\n    }\n    std::size_t count_3\
    \ = date.find_first_of(\"/\");\n    std::size_t count_4 = date.find_last_of(\"\
    /\");\n    if (count_3 == std::string::npos || count_4 == std::string::npos) {\n\
    \        return false;\n    }\n    if (count_1 < 1 || count_2 < 1 || count_3 <\
    \ 1 || count_4 < 1 || count_4 < 3) {\n        return false;\n    }\n    if (count_1\
    \ < 1 || count_2 < 3) {\n        return false;\n    }\n    if (count_1 == count_2)\
    \ {\n        return false;\n    }\n    if (count_2 == count_3 || count_2 == count_4)\
    \ {\n        return false;\n    }\n    if (count_2 == 4) {\n        return ((count_1\
    \ < 31) && (count_2 < 29) && (count_3 < 12) && (count_4 < 12));\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpuw4i5n0x: /tmp/tmpuw4i5n0x.cpp:51: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133523
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    //std::cout<<\"\\n\\n\\n\\n\\n\\n\";\n    int date_days[12];\n    int days_month[12];\n\
    \    int months_year[12];\n    for (int i = 0; i < 12; i++) {\n        date_days[i]\
    \ = 0;\n        days_month[i] = 0;\n        months_year[i] = 0;\n    }\n    int\
    \ day, month, year;\n    std::stringstream ss(date);\n    int month1 = 0, month2\
    \ = 0, year1 = 0;\n    std::string date_string;\n    while (getline(ss, date_string,\
    \ '-')) {\n        day = std::stoi(date_string);\n        if (month1 == 0 && month2\
    \ == 0) {\n            month = std::stoi(date_string);\n            year = std::stoi(date_string);\n\
    \        } else if (month1 == 0) {\n            month2 = std::stoi(date_string);\n\
    \            year = std::stoi(date_string);\n        } else {\n            month1\
    \ = std::stoi(date_string);\n            year = std::stoi(date_string);\n    \
    \    }\n        if (day < 1 || day > 31) {\n            days_month[month1 - 1]++;\n\
    \        } else {\n            date_days[day - 1]++;\n        }\n        if (month\
    \ < 1 || month > 12) {\n            months_year[month - 2]++;\n        } else\
    \ {\n            days_month[month - 1]++;\n        }\n    }\n    //std::cout<<\"\
    \\n\\n\\n\\n\\n\\n\";\n    for (int i = 0; i < 12; i++) {\n        if (date_days[i]\
    \ > days_month[i]) {\n            return false;\n        }\n        if (days_month[i]\
    \ == 0 && months_year[i] == 0) {\n            date_days[i] = 0;\n        }\n \
    \   }\n    for (int i = 0; i < 12; i++) {\n        if (date_days[i] + months_year[i]\
    \ > 31) {\n            return false;\n        }\n    }\n    for (int i = 0; i\
    \ < 12; i++) {\n        if (date_days[i] > 31) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tint day = std::stoi(date.substr(0,\
    \ 2));\n\tif (day < 1 || day > 31) return false;\n\tint month = std::stoi(date.substr(2,\
    \ 2));\n\tif (month < 1 || month > 12) return false;\n\tint year = std::stoi(date.substr(4,\
    \ 4));\n\tif (year < 1950 || year > 2020) return false;\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp84iveij_: /tmp/tmp84iveij_.cpp:31: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ parts;\n    std::istringstream s1(date);\n    s1 >> std::setw(2) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0')\n        >> std::setw(4) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0')\n        >> std::setw(4) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0')\n        >> std::setw(6) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0')\n        >> std::setw(6) >> std::setfill('0')\
    \ >> std::setw(4) >> std::setfill('0')\n        >> std::setw(4) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0')\n        >> std::setw(2) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0')\n        >> std::setw(2) >> std::setfill('0')\
    \ >> std::setw(2) >> std::setfill('0');\n    for (std::string str : parts) {\n\
    \        assert(str != \"\");\n        int days;\n        std::istringstream s2(str);\n\
    \        s2 >> std::setw(2) >> std::setfill('0') >> std::setw(2) >> std::setfill('0')\n\
    \            >> std::setw(4) >> std::setfill('0') >> std::setw(2) >> std::setfill('0')\n\
    \            >> std::setw(4) >> std::setfill('0') >> std::setw(2) >> std::setfill('0')\n\
    \            >> std::setw(6) >> std::setfill('0') >> std::setw(2) >> std::setfill('0')\n\
    \            >> std::setw(6) >> std::setfill('0') >> std::setw(4) >> std::setfill('0')\n\
    \            >> std::setw(4) >> std::setfill('0') >> std::setw(2) >> std::setfill('0')\n\
    \            >> std::setw(2) >> std::setfill('0') >> std::setw(2) >> std::setfill('0')\n\
    \            >> std::setw(2) >> std::setfill('0') >> std::setw(2) >> std::setfill('0');\n\
    \        days = s2.peek();\n        if (days > 31 && days < 30) {\n          \
    \  std::cerr << \"Invalid date: \" << date << \" is invalid\" << std::endl;\n\
    \            return false;\n        }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqp4wwjv6.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqp4wwjv6.cpp:49:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   49 | int main() {\n      |            ^\n/tmp/tmpqp4wwjv6.cpp:67:1:\
    \ error: expected \u2018}\u2019 at end of input\n   67 | }\n      | ^\n/tmp/tmpqp4wwjv6.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpqp4wwjv6.cpp:67:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   67 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    struct tm tm = { 0 };\
    \ // Default initialization\n    // Get the date\n    sscanf(date.c_str(), \"\
    %d-%d-%d\", &tm.tm_mon, &tm.tm_mday, &tm.tm_year);\n    // Check that days are\
    \ not less than 1 or higher than 31 days\n    if (tm.tm_mday < 1 || tm.tm_mday\
    \ > 31) {\n        return false;\n    }\n    // Check that days are not less than\
    \ 1 or higher than 30 days\n    if (tm.tm_mon < 1 || tm.tm_mon > 12) {\n     \
    \   return false;\n    }\n    // Check that months are not less than 1 or higher\
    \ than 12 months\n    if (tm.tm_mon > 2) {\n        return false;\n    }\n   \
    \ // Check that days are not less than 1 or higher than 29 days\n    if (tm.tm_mon\
    \ > tm.tm_mday) {\n        return false;\n    }\n    // Check that years are not\
    \ less than 1 or higher than current year\n    if (tm.tm_year < 1 || tm.tm_year\
    \ > 2020) {\n        return false;\n    }\n    // If valid date then return true\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp93lmogyk: /tmp/tmp93lmogyk.cpp:49: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool is_valid = true;\n\
    \n    // Check 1 if the date is not empty\n    if (date.size() == 0) is_valid\
    \ = false;\n\n    // Check 2 the date must be in correct format\n    if (is_valid)\
    \ {\n        size_t date_length = date.length();\n\n        // Check 3 the date\
    \ must follow the format mm-dd-yyyy\n        size_t pos = 0;\n        char temp_char\
    \ = '\\0';\n        char separator = '-';\n        while (pos < date_length) {\n\
    \            temp_char = date[pos];\n            if (isdigit(temp_char)) {\n \
    \               if (pos == date_length - 1) {\n                    if (temp_char\
    \ == '0')\n                        is_valid = false;\n                    else\
    \ {\n                        if (temp_char == '1')\n                         \
    \   temp_char = '1';\n                        else if (temp_char == '2')\n   \
    \                         temp_char = '2';\n                        else if (temp_char\
    \ == '3')\n                            temp_char = '3';\n                    \
    \    else if (temp_char == '4')\n                            temp_char = '4';\n\
    \                        else if (temp_char == '5')\n                        \
    \    temp_char = '5';\n                        else if (temp_char == '6')\n  \
    \                          temp_char = '6';\n                        else if (temp_char\
    \ == '7')\n                            temp_char = '7';\n                    \
    \    else if (temp_char == '8')\n                            temp_char = '8';\n\
    \                        else if (temp_char == '9')\n                        \
    \    temp_char = '9';\n                        else if (temp_char == '-')\n  \
    \                          temp_char = '-';\n                        else if (temp_char\
    \ == '.')\n                            temp_char = '.';\n                    \
    \    else\n                            is_valid = false;\n                   \
    \ }\n                }\n                else {\n                    if (temp_char\
    \ != separator) {\n                        is_valid = false;\n               \
    \     }\n                    else {\n                        if (temp_char ==\
    \ '-')\n                            separator = '-';\n                       \
    \ else if (temp_char == '.')\n                            separator = '.';\n \
    \                   }\n                }\n            }\n            pos++;\n\
    \        }\n    }\n\n    // Check 4 the date should include all the days of months\n\
    \    if (is_valid) {\n        size_t date_length = date.length();\n        int\
    \ months = 12;\n        int days = 0;\n        int temp_day = 0;\n\n        //\
    \ Check if the date contains valid number of months\n        if (date_length >=\
    \ 3 && isdigit(date[0]) && isdigit(date[1])) {\n            months = atoi(date.c_str()\
    \ + 2);\n        }\n\n        // Check if the date contains valid number of days\n\
    \        if (date_length >= 2 && isdigit(date[0])) {\n            days = atoi(date.c_str()\
    \ + 1);\n        }\n\n        // Check if the date is valid\n        if (date_length\
    \ >= 2 && isdigit(date[0]) && days <= 31 && months <= 12) {\n            // Loop\
    \ through each day and check if it is valid or not\n            pos = 0;\n   \
    \         char temp_char = '\\0';\n            while (pos < date_length) {\n \
    \               \n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxlq0zz1d.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpxlq0zz1d.cpp:103:13: error: \u2018pos\u2019 was not declared in this\
    \ scope; did you mean \u2018pow\u2019?\n  103 |             pos = 0;\n      |\
    \             ^~~\n      |             pow\n/tmp/tmpxlq0zz1d.cpp:108:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  108\
    \ | int main() {\n      |            ^\n/tmp/tmpxlq0zz1d.cpp:126:1: error: expected\
    \ \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpxlq0zz1d.cpp:101:81:\
    \ note: to match this \u2018{\u2019\n  101 |         if (date_length >= 2 && isdigit(date[0])\
    \ && days <= 31 && months <= 12) {\n      |                                  \
    \                                               ^\n/tmp/tmpxlq0zz1d.cpp:126:1:\
    \ error: expected \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpxlq0zz1d.cpp:84:19:\
    \ note: to match this \u2018{\u2019\n   84 |     if (is_valid) {\n      |    \
    \               ^\n/tmp/tmpxlq0zz1d.cpp:126:1: error: expected \u2018}\u2019 at\
    \ end of input\n  126 | }\n      | ^\n/tmp/tmpxlq0zz1d.cpp:20:35: note: to match\
    \ this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmpxlq0zz1d.cpp:126:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  126 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // (1)\n    if(!date.empty())\
    \ {\n        // (2)\n        if(date.size() != 10) {\n            return false;\n\
    \        }\n        // (3)\n        for(int i = 0; i < 3; i++) {\n           \
    \ char temp = date[i];\n            int num;\n            if((num = (int)temp)\
    \ - 48 < 1) {\n                return false;\n            } else if(num > 12)\
    \ {\n                return false;\n            }\n        }\n        // (4)\n\
    \        for(int i = 3; i < 6; i++) {\n            char temp = date[i];\n    \
    \        int num;\n            if((num = (int)temp) - 48 < 1) {\n            \
    \    return false;\n            } else if(num > 12) {\n                return\
    \ false;\n            }\n        }\n        // (5)\n        for(int i = 6; i <\
    \ 9; i++) {\n            char temp = date[i];\n            int num;\n        \
    \    if((num = (int)temp) - 48 < 1) {\n                return false;\n       \
    \     } else if(num > 12) {\n                return false;\n            }\n  \
    \      }\n        // (6)\n        for(int i = 9; i < 11; i++) {\n            char\
    \ temp = date[i];\n            int num;\n            if((num = (int)temp) - 48\
    \ < 1) {\n                return false;\n            } else if(num > 12) {\n \
    \               return false;\n            }\n        }\n        // (7)\n    \
    \    for(int i = 11; i < 12; i++) {\n            char temp = date[i];\n      \
    \      int num;\n            if((num = (int)temp) - 48 < 1) {\n              \
    \  return false;\n            } else if(num > 12) {\n                return false;\n\
    \            }\n        }\n    } else {\n        return false;\n    }\n    //\
    \ (8)\n    for(int i = 1; i < 3; i++) {\n        char temp = date[i];\n      \
    \  int num;\n        if((num = (int)temp) - 48 < 1) {\n            return false;\n\
    \        } else if(num > 12) {\n            return false;\n        }\n    }\n\
    \    // (9)\n    for(int i = 3; i < 6; i++) {\n        char temp = date[i];\n\
    \        int num;\n        if((num = (int)temp) - 48 < 1) {\n            return\
    \ false;\n        } else if(num > 12) {\n            return false;\n        }\n\
    \    }\n    // (10)\n    for(int i = 6; i < 9; i++) {\n        char temp = date[i];\n\
    \        int num;\n        if((num = (int)temp) - 48 < 1) {\n            return\
    \ false;\n        } else if(num > 12) {\n            return false;\n        }\n\
    \    }\n    // (11)\n    for(int i = 9; i < 11; i++) {\n        char temp = date[i];\n\
    \        int num;\n        if((num = (int)temp) - 48 < 1) {\n            return\
    \ false;\n        } else if(num > 12) {\n            return false;\n        }\n\
    \    }\n    // (12)\n    for(int i = 11; i < 12; i++) {\n        char temp = date[i];\n\
    \        int num;\n\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjyogfrg4.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjyogfrg4.cpp:126:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  126 | int main() {\n      |            ^\n/tmp/tmpjyogfrg4.cpp:144:1:\
    \ error: expected \u2018}\u2019 at end of input\n  144 | }\n      | ^\n/tmp/tmpjyogfrg4.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmpjyogfrg4.cpp:144:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  144 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::istringstream iss(date);\n    char c;\n    unsigned int m, d, y;\n \
    \   iss >> m >> c >> d >> y;\n    if (iss.fail()) {\n        return false;\n \
    \   }\n    vector<int> months = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n   \
    \ vector<int> days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    if\
    \ (m == 0 && c != 0) {\n        return false;\n    }\n    if (m > 12) {\n    \
    \    return false;\n    }\n    if (c > 2) {\n        return false;\n    }\n  \
    \  if (d > 30 || d < 1 || days[m - 1] > 31) {\n        return false;\n    }\n\
    \    if (months[m] > 12) {\n        return false;\n    }\n    if (y > 2020 ||\
    \ y < 15) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcndq1cp3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpcndq1cp3.cpp:29:5: error: \u2018vector\u2019 was not declared in this\
    \ scope\n   29 |     vector<int> months = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12};\n      |     ^~~~~~\n/tmp/tmpcndq1cp3.cpp:29:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcndq1cp3.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcndq1cp3.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpcndq1cp3.cpp:29:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   29 |     vector<int>\
    \ months = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\n      |            ^~~\n\
    /tmp/tmpcndq1cp3.cpp:30:12: error: expected primary-expression before \u2018int\u2019\
    \n   30 |     vector<int> days = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31};\n      |            ^~~\n/tmp/tmpcndq1cp3.cpp:40:28: error: \u2018days\u2019\
    \ was not declared in this scope\n   40 |     if (d > 30 || d < 1 || days[m -\
    \ 1] > 31) {\n      |                            ^~~~\n/tmp/tmpcndq1cp3.cpp:43:9:\
    \ error: \u2018months\u2019 was not declared in this scope\n   43 |     if (months[m]\
    \ > 12) {\n      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    if (date.empty() || date.size() <= 0) {\n        return false;\n    }\n\n\
    \    std::stringstream ss(date);\n    std::string month;\n    int day, year;\n\
    \n    if (ss >> month >> day >> year) {\n        if (month != \"0\" && month !=\
    \ \"1\" && month != \"2\" && month != \"3\" && month != \"4\" &&\n           \
    \ month != \"5\" && month != \"6\" && month != \"7\" && month != \"8\" && month\
    \ != \"9\" && month != \"10\" &&\n            month != \"11\" && month != \"12\"\
    \ &&\n            day < 1 || day > 31 || day < 1 || day > 29 || month < 1 || month\
    \ > 12) {\n            return false;\n        }\n    } else {\n        return\
    \ false;\n    }\n\n    if (year < 1000 || year > 2020) {\n        return false;\n\
    \    }\n\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzrdi7w_f.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpzrdi7w_f.cpp:34:65: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   34 |             day < 1 || day > 31 || day < 1 ||\
    \ day > 29 || month < 1 || month > 12) {\n      |                            \
    \                               ~~~~~ ^ ~\n      |                           \
    \                                |       |\n      |                          \
    \                                 |       int\n      |                       \
    \                                    std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpzrdi7w_f.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzrdi7w_f.cpp:34:67:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   34\
    \ |             day < 1 || day > 31 || day < 1 || day > 29 || month < 1 || month\
    \ > 12) {\n      |                                                           \
    \        ^\nIn file included from /usr/include/c++/9/regex:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n           \
    \      from /tmp/tmpzrdi7w_f.cpp:2:\n/usr/include/c++/9/bits/regex.h:1124:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator<(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1124 |     operator<(const\
    \ __s"
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day = 0;\n    int\
    \ month = -1;\n    int year = -1;\n    std::string::size_type pos = 0;\n    pos\
    \ = date.find('-', 0);\n    if (pos != std::string::npos) {\n        month = stoi(date.substr(0,\
    \ pos));\n        date = date.substr(pos + 1);\n    } else {\n        month =\
    \ stoi(date);\n    }\n    pos = date.find('-', 0);\n    if (pos != std::string::npos)\
    \ {\n        day = stoi(date.substr(0, pos));\n        date = date.substr(pos\
    \ + 1);\n    } else {\n        day = stoi(date);\n    }\n    pos = date.find('-',\
    \ 0);\n    if (pos != std::string::npos) {\n        year = stoi(date.substr(0,\
    \ pos));\n        date = date.substr(pos + 1);\n    } else {\n        year = stoi(date);\n\
    \    }\n    if (month < 1 || month > 12) {\n        return false;\n    }\n   \
    \ if (day < 1 || day > 31 || day > 30) {\n        return false;\n    }\n    if\
    \ (month == 2) {\n        if (day > 29) {\n            return false;\n       \
    \ }\n    }\n    struct tm tm;\n    time_t now = time(0);\n    memset(&tm, 0, sizeof(tm));\n\
    \    tm.tm_mday = day;\n    tm.tm_mon = month - 1;\n    tm.tm_year = year - 1900;\
    \ // 1900 is added to tm_year as in standard C time.\n    tm.tm_wday = -1;\n \
    \   tm.tm_hour = 0;\n    tm.tm_min = 0;\n    tm.tm_sec = 0;\n    time_t t = mktime(&tm);\n\
    \    struct tm tm2;\n    localtime_r(&t, &tm2);\n    std::string dd = std::to_string(tm2.tm_mday);\n\
    \    std::string mm = std::to_string(tm2.tm_mon);\n    std::string yyyy = std::to_string(tm2.tm_year\
    \ + 1900);\n    std::string result = dd + \"-\" + mm + \"-\" + yyyy;\n    if (date\
    \ != result) {\n        return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmogb6kdp: /tmp/tmpmogb6kdp.cpp:81: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // TODO: Write code here\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp15gtzngz: /tmp/tmp15gtzngz.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // 1. Validate date is\
    \ not empty.\n    if (date.empty()) {\n        return false;\n    }\n    // 2.\
    \ Validate date does not have less than 1 day or more than 31 days for months\
    \ from 1 to 12.\n    if (date.length() < 8 || date.length() > 10) {\n        return\
    \ false;\n    }\n    // 3. Validate date does not have less than 1 day or more\
    \ than 30 days for months from 4 to 11.\n    if (date.length() < 4 || date.length()\
    \ > 8) {\n        return false;\n    }\n    // 4. Validate date does not have\
    \ less than 1 day or more than 29 months from 2.\n    if (date.length() < 2 ||\
    \ date.length() > 6) {\n        return false;\n    }\n    // 5. Validate date\
    \ should be in the format: mm-dd-yyyy\n    // MM - is for months from 01 to 12\n\
    \    // DD - is for days from 01 to 31\n    // YYYY - is for years from 1900 to\
    \ 2100\n    if (date.substr(2, 2) != \"-\" || date.substr(4, 2) != \"-\" || date.substr(6,\
    \ 4) != \"-\") {\n        return false;\n    }\n\n    // Convert the date strings\
    \ to integer.\n    char month[4], day[2], year[4];\n    sscanf(date.c_str(), \"\
    %2s%2s%4s\", month, day, year);\n\n    int monthNum = stoi(month) - 1;\n    int\
    \ dayNum = stoi(day);\n    int year = stoi(year);\n\n    // Return the result\
    \ if the values are valid (true).\n    if (monthNum >= 1 && monthNum <= 12 &&\
    \ dayNum >= 1 && dayNum <= 31 && year >= 1900 && year <= 2100) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuciijg07.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpuciijg07.cpp:49:20: error: \u2018stoi\u2019 was not declared in this\
    \ scope; did you mean \u2018std::__cxx11::stoi\u2019?\n   49 |     int monthNum\
    \ = stoi(month) - 1;\n      |                    ^~~~\n      |               \
    \     std::__cxx11::stoi\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpuciijg07.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3:\
    \ note: \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/tmp/tmpuciijg07.cpp:51:9:\
    \ error: conflicting declaration \u2018int year\u2019\n   51 |     int year =\
    \ stoi(year);\n      |         ^~~~\n/tmp/tmpuciijg07.cpp:46:28: note: previous\
    \ declaration as \u2018char year [4]\u2019\n   46 |     char month[4], day[2],\
    \ year[4];\n      |                            ^~~~\n/tmp/tmpuciijg07.cpp:54:83:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   54 |     if (monthNum >= 1 && monthNum <= 12 && dayNum >= 1 && dayNum <= 31\
    \ && year >= 1900 && year <= 2100) {\n      |                                \
    \                                                   ^~~~\n/tmp/tmpuciijg07.cpp:54:99:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   54 |     if (monthNum >= 1 && monthNum <= 12 && dayNum >= 1 && dayNum <= 31\
    \ && year >= 1900 && year <= 2100) {\n      |                                \
    \                                                                   ^~~~\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty()) {\n\
    \        return false;\n    }\n    int d = date.substr(0, 2);\n    int m = date.substr(3,\
    \ 2);\n    int y = date.substr(6, 4);\n    int day;\n    switch (m) {\n      \
    \  case '0':\n        case '1':\n        case '2':\n        case '3':\n      \
    \  case '4':\n        case '5':\n        case '6':\n        case '7':\n      \
    \  case '8':\n        case '9':\n            day = date.substr(9, 2);\n      \
    \      break;\n        case '10':\n        case '11':\n        case '12':\n  \
    \          day = date.substr(10, 2);\n            break;\n        default:\n \
    \           return false;\n    }\n    if (day > 31 && day < 33) {\n        return\
    \ false;\n    }\n    if (m < 1 || m > 12) {\n        return false;\n    }\n  \
    \  if (y < 100 || y < 1) {\n        return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo4bxf0xz.cpp:41:14: warning: multi-character character constant\
    \ [-Wmultichar]\n   41 |         case '10':\n      |              ^~~~\n/tmp/tmpo4bxf0xz.cpp:42:14:\
    \ warning: multi-character character constant [-Wmultichar]\n   42 |         case\
    \ '11':\n      |              ^~~~\n/tmp/tmpo4bxf0xz.cpp:43:14: warning: multi-character\
    \ character constant [-Wmultichar]\n   43 |         case '12':\n      |      \
    \        ^~~~\n/tmp/tmpo4bxf0xz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo4bxf0xz.cpp:24:24: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018int\u2019 in initialization\n   24 |     int d = date.substr(0, 2);\n\
    \      |             ~~~~~~~~~~~^~~~~~\n      |                        |\n   \
    \   |                        std::__cxx11::basic_string<char>\n/tmp/tmpo4bxf0xz.cpp:25:24:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    int\u2019 in initialization\n   25 |     int m = date.substr(3, 2);\n      | \
    \            ~~~~~~~~~~~^~~~~~\n      |                        |\n      |    \
    \                    std::__cxx11::basic_string<char>\n/tmp/tmpo4bxf0xz.cpp:26:24:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    int\u2019 in initialization\n   26 |     int y = date.substr(6, 4);\n      | \
    \            ~~~~~~~~~~~^~~~~~\n      |                        |\n      |    \
    \                    std::__cxx11::basic_string<char>\n/tmp/tmpo4bxf0xz.cpp:39:30:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    int\u2019 in assignment\n   39 |             day = date.substr(9, 2);\n      |\
    \                   ~~~~~~~~~~~^~~~~~\n      |                              |\n\
    \      |                              std::__cxx11::basic_string<char>\n/tmp/tmpo4bxf0xz.cpp:44:30:\
    \ error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019 to \u2018\
    int\u2019 in assignment\n   44 |             day = date.substr(10, 2);\n     \
    \ |                   ~~~~~~~~~~~^~~~~~~\n      |                            \
    \  |\n      |                              std::__cxx11::basic_string<char>\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // your code here\n \
    \   int day;\n    int month;\n    std::string year;\n    std::stringstream ss;\n\
    \    ss << date;\n    ss >> year >> month >> day;\n    if (year == \"00\" || month\
    \ == \"00\" || day == \"00\") {\n        std::cout << \"invalid date\" << std::endl;\n\
    \        return false;\n    }\n    int year2 = stoi(year);\n    int month2 = stoi(month);\n\
    \    int day2 = stoi(day);\n    if (month2 >= 1 && month2 <= 12) {\n        if\
    \ (day2 >= 1 && day2 <= 31) {\n            if (month2 == 1) {\n              \
    \  return ((day2 > 31) || (day2 < 1));\n            } else if (month2 == 3) {\n\
    \                return ((day2 > 30) || (day2 < 1));\n            } else if (month2\
    \ == 5) {\n                return ((day2 > 29) || (day2 < 1));\n            }\
    \ else if (month2 == 7) {\n                return ((day2 > 28) || (day2 < 1));\n\
    \            } else if (month2 == 8) {\n                return ((day2 > 28) ||\
    \ (day2 < 1));\n            } else if (month2 == 10) {\n                return\
    \ ((day2 > 29) || (day2 < 1));\n            } else if (month2 == 12) {\n     \
    \           return ((day2 > 29) || (day2 < 1));\n            }\n        } else\
    \ {\n            return false;\n        }\n    } else {\n        return false;\n\
    \    }\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1sflbh2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo1sflbh2.cpp:28:34: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   28 |     if (year == \"00\" || month == \"00\"\
    \ || day == \"00\") {\n      |                                  ^~~~\n/tmp/tmpo1sflbh2.cpp:28:49:\
    \ error: ISO C++ forbids comparison between pointer and integer [-fpermissive]\n\
    \   28 |     if (year == \"00\" || month == \"00\" || day == \"00\") {\n     \
    \ |                                                 ^~~~\n/tmp/tmpo1sflbh2.cpp:33:18:\
    \ error: \u2018stoi\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::stoi\u2019?\n   33 |     int month2 = stoi(month);\n      |    \
    \              ^~~~\n      |                  std::__cxx11::stoi\nIn file included\
    \ from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpo1sflbh2.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n/tmp/tmpo1sflbh2.cpp:58:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   58 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your logic here\n\
    \    return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt9fng8l6: /tmp/tmpt9fng8l6.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (date.empty())\n \
    \       return false;\n    int day, month, year;\n    istringstream iss(date);\n\
    \    iss >> day >> month >> year;\n    if (month < 1 || month > 12)\n        return\
    \ false;\n    if (day < 1 || day > 31)\n        return false;\n    if (year %\
    \ 4 != 0 && year % 100 !=0 && year % 400 == 0)\n        return false;\n    if\
    \ (day < 1 || day > 30)\n        return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fip7kc_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7fip7kc_.cpp:24:5: error: \u2018istringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::istringstream\u2019?\n   24 |     istringstream\
    \ iss(date);\n      |     ^~~~~~~~~~~~~\n      |     std::istringstream\nIn file\
    \ included from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp7fip7kc_.cpp:2:\n/usr/include/c++/9/iosfwd:150:38: note: \u2018std::istringstream\u2019\
    \ declared here\n  150 |   typedef basic_istringstream<char>  istringstream;\n\
    \      |                                      ^~~~~~~~~~~~~\n/tmp/tmp7fip7kc_.cpp:25:5:\
    \ error: \u2018iss\u2019 was not declared in this scope\n   25 |     iss >> day\
    \ >> month >> year;\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    std::string check;\n    bool ret = true;\n    check = date;\n    for (unsigned\
    \ int i = 0; i < check.size(); i++) {\n        if (check[i] != ' ' && check[i]\
    \ != '-' && check[i] != '/') {\n            ret = false;\n        }\n    }\n \
    \   std::vector<std::string> days;\n    for (unsigned int i = 0; i < check.size();\
    \ i++) {\n        if (check[i] == '-') {\n            days.push_back(check.substr(i,\
    \ 2));\n        }\n    }\n    std::map<int, int> monthdays;\n    monthdays.insert(std::pair<int,\
    \ int>(1, 31));\n    monthdays.insert(std::pair<int, int>(4, 30));\n    monthdays.insert(std::pair<int,\
    \ int>(6, 29));\n    for (unsigned int i = 0; i < days.size(); i++) {\n      \
    \  if (days[i] == \"01\") {\n            monthdays.insert(std::pair<int, int>(1,\
    \ 31));\n        }\n        else if (days[i] == \"02\") {\n            monthdays.insert(std::pair<int,\
    \ int>(2, 28));\n        }\n        else if (days[i] == \"03\") {\n          \
    \  monthdays.insert(std::pair<int, int>(3, 31));\n        }\n        else if (days[i]\
    \ == \"04\") {\n            monthdays.insert(std::pair<int, int>(4, 30));\n  \
    \      }\n        else if (days[i] == \"05\") {\n            monthdays.insert(std::pair<int,\
    \ int>(5, 31));\n        }\n        else if (days[i] == \"06\") {\n          \
    \  monthdays.insert(std::pair<int, int>(6, 30));\n        }\n        else if (days[i]\
    \ == \"07\") {\n            monthdays.insert(std::pair<int, int>(7, 31));\n  \
    \      }\n        else if (days[i] == \"08\") {\n            monthdays.insert(std::pair<int,\
    \ int>(8, 31));\n        }\n        else if (days[i] == \"09\") {\n          \
    \  monthdays.insert(std::pair<int, int>(9, 30));\n        }\n        else if (days[i]\
    \ == \"10\") {\n            monthdays.insert(std::pair<int, int>(10, 31));\n \
    \       }\n        else if (days[i] == \"11\") {\n            monthdays.insert(std::pair<int,\
    \ int>(11, 30));\n        }\n        else if (days[i] == \"12\") {\n         \
    \   monthdays.insert(std::pair<int, int>(12, 31));\n        }\n    }\n    std::map<int,\
    \ int> months;\n    months.insert(std::pair<int, int>(1, 12));\n    for (unsigned\
    \ int i = 0; i < monthdays.keys().size(); i++) {\n        if (monthdays.at(i)\
    \ < 1 || monthdays.at(i) > monthdays.at(monthdays.keys().size() - 1)) {\n    \
    \        ret = false;\n        }\n    }\n    for (unsigned int i = 0; i < monthdays.keys().size()\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8pva83kz.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8pva83kz.cpp:80:44: error: \u2018class std::map<int, int>\u2019 has\
    \ no member named \u2018keys\u2019\n   80 |     for (unsigned int i = 0; i < monthdays.keys().size();\
    \ i++) {\n      |                                            ^~~~\n/tmp/tmp8pva83kz.cpp:81:77:\
    \ error: \u2018class std::map<int, int>\u2019 has no member named \u2018keys\u2019\
    \n   81 |         if (monthdays.at(i) < 1 || monthdays.at(i) > monthdays.at(monthdays.keys().size()\
    \ - 1)) {\n      |                                                           \
    \                  ^~~~\n/tmp/tmp8pva83kz.cpp:85:44: error: \u2018class std::map<int,\
    \ int>\u2019 has no member named \u2018keys\u2019\n   85 |     for (unsigned int\
    \ i = 0; i < monthdays.keys().size()\n      |                                \
    \            ^~~~\n/tmp/tmp8pva83kz.cpp:85:57: error: expected \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   85 |     for (unsigned int i = 0; i < monthdays.keys().size()\n\
    \      |                                                         ^\n      |  \
    \                                                       ;\n   86 | }\n      |\
    \ ~                                                        \n/tmp/tmp8pva83kz.cpp:86:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   86 | }\n \
    \     | ^\n/tmp/tmp8pva83kz.cpp:85:57: error: expected \u2018)\u2019 before \u2018\
    }\u2019 token\n   85 |     for (unsigned int i = 0; i < monthdays.keys().size()\n\
    \      |         ~                                               ^\n      |  \
    \                                                       )\n   86 | }\n      |\
    \ ~                                                        \n/tmp/tmp8pva83kz.cpp:86:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   86 | }\n \
    \     | ^\n/tmp/tmp8pva83kz.cpp:86:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if(date.empty())\n  \
    \      return false;\n    int days;\n    int month;\n    std::string::size_type\
    \ pos;\n    pos = date.find(\"-\");\n    days = (pos != std::string::npos)?atoi(date.substr(0,\
    \ pos).c_str()):0;\n    pos = date.find(\"/\");\n    month = (pos != std::string::npos)?atoi(date.substr(pos+1,\
    \ date.size()).c_str()):0;\n    if(days == 0 && month == 0)\n        return false;\n\
    \    else if((month < 1 || month > 12) &&\n        (days < 1 || days > 31) &&\
    \ (days < 30 || days > 29))\n        return false;\n    else if((month == 1 &&\
    \ days == 31) || (month == 3 && days == 30) || (month == 5 && days == 31) || (month\
    \ == 7 && days == 31) || (month == 8 && days == 31) || (month == 10 && days ==\
    \ 31) || (month == 12 && days == 31))\n        return false;\n    else\n     \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9s9gyhlm: /tmp/tmp9s9gyhlm.cpp:43: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // write your code here\n\
    \  int day, month, year;\n  sscanf(date.c_str(), \"%d-%d-%d\", &day, &month, &year);\n\
    \n  // Validate month\n  if (month >= 1 && month <= 12 && day >= 1 && day <= 31)\n\
    \    return true;\n\n  if (month >= 4 && month <= 6 && day >= 1 && day <= 30)\n\
    \    return true;\n\n  if (month == 2 && day >= 1 && day <= 29)\n    return true;\n\
    \n  return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmptg5vyfnt: /tmp/tmptg5vyfnt.cpp:40: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // write your code here\n\
    \  std::cout << date;\n  std::cout << \"\\n\";\n  std::cout << date.size() <<\
    \ \"\\n\";\n  std::cout << date.length() << \"\\n\";\n\n  if (date.size() > 0)\
    \ {\n    char m = date[0];\n    char d = date[1];\n    char y = date[2];\n   \
    \ int m1 = atoi(m);\n    int d1 = atoi(d);\n    int y1 = atoi(y);\n    if ((m1\
    \ < 1) || (m1 > 12) || (y1 < 1) || (y1 > 12) || ((d1 < 1) || (d1 > 31) || ((d1\
    \ > 30) || (d1 < 29))) || ((d1 > 29) || (d1 < 28))) {\n      return false;\n \
    \   }\n  }\n  std::cout << m1 << \"-\" << d1 << \"-\" << y1;\n  std::cout << \"\
    \\n\";\n  return true;\n}\nint main() {\n    auto candidate = valid_date;\n  \
    \  assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\"\
    )) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq6dufs_3.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpq6dufs_3.cpp:31:19: error: invalid conversion from \u2018char\u2019\
    \ to \u2018const char*\u2019 [-fpermissive]\n   31 |     int m1 = atoi(m);\n \
    \     |                   ^\n      |                   |\n      |            \
    \       char\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n  \
    \               from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpq6dufs_3.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpq6dufs_3.cpp:32:19: error: invalid conversion from \u2018char\u2019 to\
    \ \u2018const char*\u2019 [-fpermissive]\n   32 |     int d1 = atoi(d);\n    \
    \  |                   ^\n      |                   |\n      |               \
    \    char\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n     \
    \            from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpq6dufs_3.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpq6dufs_3.cpp:33:19: error: invalid conversion from \u2018char\u2019 to\
    \ \u2018const char*\u2019 [-fpermissive]\n   33 |     int y1 = atoi(y);\n    \
    \  |                   ^\n      |                   |\n      |               \
    \    char\nIn file included from /usr/include/c++/9/bits/std_abs.h:38,\n     \
    \            from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpq6dufs_3.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpq6dufs_3.cpp:38:16: error: \u2018m1\u2019 was not declared in "
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  char\
    \ month[10];\n  char *pch = nullptr;\n  long int day;\n\n  if(!(date.length()\
    \ >= 2)) {\n    return false;\n  }\n  \n  pch = strtok (&date, \"-\");\n  if(pch\
    \ == nullptr) {\n    return false;\n  }\n  strcpy(month,pch);\n  pch = strtok\
    \ (nullptr, \"-\");\n  if(pch == nullptr) {\n    return false;\n  }\n  strcpy(month,pch);\n\
    \n  char day[4];\n  pch = strtok (nullptr, \"-\");\n  if(pch == nullptr) {\n \
    \   return false;\n  }\n  strcpy(day,pch);\n\n  long int year = atoi (date);\n\
    \  pch = strtok (nullptr, \"-\");\n  if(pch == nullptr) {\n    return false;\n\
    \  }\n  strcpy(month,pch);\n\n  return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1xxhvb7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpo1xxhvb7.cpp:30:17: error: cannot convert \u2018std::string*\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>*\u2019} to \u2018char*\u2019\n \
    \  30 |   pch = strtok (&date, \"-\");\n      |                 ^~~~~\n      |\
    \                 |\n      |                 std::string* {aka std::__cxx11::basic_string<char>*}\n\
    In file included from /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpo1xxhvb7.cpp:2:\n/usr/include/string.h:336:39:\
    \ note:   initializing argument 1 of \u2018char* strtok(char*, const char*)\u2019\
    \n  336 | extern char *strtok (char *__restrict __s, const char *__restrict __delim)\n\
    \      |                      ~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpo1xxhvb7.cpp:41:8:\
    \ error: conflicting declaration \u2018char day [4]\u2019\n   41 |   char day[4];\n\
    \      |        ^~~\n/tmp/tmpo1xxhvb7.cpp:24:12: note: previous declaration as\
    \ \u2018long int day\u2019\n   24 |   long int day;\n      |            ^~~\n\
    /tmp/tmpo1xxhvb7.cpp:46:10: error: invalid conversion from \u2018long int\u2019\
    \ to \u2018char*\u2019 [-fpermissive]\n   46 |   strcpy(day,pch);\n      |   \
    \       ^~~\n      |          |\n      |          long int\nIn file included from\
    \ /usr/include/c++/9/cstring:42,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpo1xxhvb7.cpp:2:\n/usr/include/string.h:122:39:\
    \ note:   initializing argument 1 of \u2018char* strcpy(char*, const char*)\u2019\
    \n  122 | extern char *strcpy (char *__restrict __dest, const char *__restrict\
    \ __src)\n      |                      ~~~~~~~~~~~~~~~~~^~~~~~\n/tmp/tmpo1xxhvb7.cpp:48:25:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018const char*\u2019\n   48 |   long int year = atoi (date);\n      |\
    \                         ^~~~\n      |                         |\n      |   \
    \                      std::string {aka std::__cxx11::basic_string<char>}\nIn\
    \ file included from /usr/include/c++/9/bits/std_abs.h:38,\n                 from\
    \ /"
  stdout: ''
  timestamp: 1660133524
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code here\n \
    \   if (date.empty()){\n        return false;\n    }\n\n    int days_count = std::stoi(date);\n\
    \    if (days_count < 1 || days_count > 31){\n        return false;\n    }\n\n\
    \    int months_count = std::stoi(date.substr(5, 2));\n    if (months_count <\
    \ 1 || months_count > 12){\n        return false;\n    }\n\n    int year_count\
    \ = std::stoi(date.substr(7, 4));\n    if (year_count < 1 || year_count > 9999){\n\
    \        return false;\n    }\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpkf12z_kx: /tmp/tmpkf12z_kx.cpp:45: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tif (date.empty())\n\t\t\
    return false;\n\n\tsize_t length = date.length();\n\tif (length < 5) return false;\n\
    \tstd::cmatch m;\n\tif (std::regex_match(date, m, std::regex(\"^(\\\\d{1,2})\\\
    \\/\\\\d{2}-\\\\d{4}$\"))) {\n\t\tif (std::stoi(m[1]) < 1 || std::stoi(m[1]) >\
    \ 12) return false;\n\t\tif (std::stoi(m[2]) < 1 || std::stoi(m[2]) > 31) return\
    \ false;\n\t\tif (std::stoi(m[3]) < 1 || std::stoi(m[3]) > 30) return false;\n\
    \t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2fl2esnq.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp2fl2esnq.cpp:27:74: error: no matching function for call to \u2018\
    regex_match(std::string&, std::__cxx11::cmatch&, std::__cxx11::regex)\u2019\n\
    \   27 |  if (std::regex_match(date, m, std::regex(\"^(\\\\d{1,2})\\\\/\\\\d{2}-\\\
    \\d{4}$\"))) {\n      |                                                      \
    \                    ^\nIn file included from /usr/include/c++/9/regex:62,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp2fl2esnq.cpp:2:\n/usr/include/c++/9/bits/regex.h:2059:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc, class _Ch_type,\
    \ class _Rx_traits> bool std::regex_match(_Bi_iter, _Bi_iter, std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&, const std::__cxx11::basic_regex<_CharT, _TraitsT>&, std::regex_constants::match_flag_type)\u2019\
    \n 2059 |     regex_match(_Bi_iter     __s,\n      |     ^~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2059:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2fl2esnq.cpp:27:74:\
    \ note:   deduced conflicting types for parameter \u2018_Bi_iter\u2019 (\u2018\
    std::__cxx11::basic_string<char>\u2019 and \u2018std::__cxx11::match_results<const\
    \ char*>\u2019)\n   27 |  if (std::regex_match(date, m, std::regex(\"^(\\\\d{1,2})\\\
    \\/\\\\d{2}-\\\\d{4}$\"))) {\n      |                                        \
    \                                  ^\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp2fl2esnq.cpp:2:\n/usr/include/c++/9/bits/regex.h:2087:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_type, class _Rx_traits>\
    \ bool std::regex_match(_Bi_iter, _Bi_iter, const std::__cxx11::basic_regex<_Ch_type,\
    \ _Rx_traits>&, std::regex_constants::match_flag_type)\u2019\n 2087 |     regex_match(_Bi_iter\
    \ __first, _Bi_iter __last,\n      |     ^~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2087:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp2fl2esnq.cpp:27:74:\
    \ note:   deduced con"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  if(date.empty())\n    return\
    \ false;\n  int num_days = 0;\n  int month = 0;\n  int year = 2010;\n\n  if(date.size()\
    \ != 10)\n    return false;\n\n  for(char c : date) {\n    if(c != '0' && c !=\
    \ '1')\n      return false;\n  }\n\n  if(date.size() > 8) {\n    num_days = atoi(date.substr(8,\
    \ 2));\n  } else {\n    num_days = atoi(date.substr(7, 2));\n  }\n  month = atoi(date.substr(5,\
    \ 2));\n  year = atoi(date.substr(3, 4));\n\n  if(num_days > 0 && num_days !=\
    \ 31 && (num_days != 30 || month != 1 || year < 2010 || year > 2020))\n    return\
    \ false;\n  if(num_days > 0 && num_days != 29 && (num_days != 28 || month != 4\
    \ || year < 2010 || year > 2020))\n    return false;\n\n  return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwpvvxy4_.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwpvvxy4_.cpp:36:32: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   36 |     num_days = atoi(date.substr(8, 2));\n\
    \      |                     ~~~~~~~~~~~^~~~~~\n      |                      \
    \          |\n      |                                std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/std_abs.h:38,\n                \
    \ from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwpvvxy4_.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpwpvvxy4_.cpp:38:32: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   38 |     num_days = atoi(date.substr(7, 2));\n\
    \      |                     ~~~~~~~~~~~^~~~~~\n      |                      \
    \          |\n      |                                std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/std_abs.h:38,\n                \
    \ from /usr/include/c++/9/cmath:47,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwpvvxy4_.cpp:2:\n/usr/include/stdlib.h:104:30:\
    \ note:   initializing argument 1 of \u2018int atoi(const char*)\u2019\n  104\
    \ | extern int atoi (const char *__nptr)\n      |                  ~~~~~~~~~~~~^~~~~~\n\
    /tmp/tmpwpvvxy4_.cpp:40:27: error: cannot convert \u2018std::__cxx11::basic_string<char>\u2019\
    \ to \u2018const char*\u2019\n   40 |   month = atoi(date.substr(5, 2));\n   \
    \   |                ~~~~~~~~~~~^~~~~~\n      |                           |\n\
    \      |                           std::__cxx11::basic_string<char>\nIn file included\
    \ from /usr/include/c++/9/bits/std_abs.h:38,\n                 from /usr/include/c++/9/cmath:47,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int month_days[12] =\
    \ {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int i = 0;\n    size_t\
    \ pos = 0;\n    for (i = 0; i <= 12; i++) {\n        pos = date.find(\"-0\", pos);\n\
    \        pos = date.find(\"-\", pos);\n        if (pos != std::string::npos)\n\
    \            month_days[i] = 29;\n        else\n            month_days[i] = 30;\n\
    \        pos = date.find(\"-01\", pos);\n    }\n    pos = date.find(\"-01\", pos);\n\
    \    if (pos != std::string::npos) {\n        month_days[1] = 29;\n    }\n   \
    \ if (date.length() < 10) {\n        return false;\n    }\n    int day = 0;\n\
    \    int month = 0;\n    int year = 2050;\n    pos = date.find('-');\n    if (pos\
    \ != std::string::npos) {\n        day = atoi(date.c_str() + pos + 1);\n     \
    \   pos = date.find('.');\n        month = atoi(date.c_str() + pos + 1);\n   \
    \     pos = date.find('-');\n        year = atoi(date.c_str() + pos + 1);\n  \
    \  } else {\n        pos = date.find('-');\n        day = atoi(date.c_str() +\
    \ pos + 1);\n        pos = date.find('.');\n        month = atoi(date.c_str()\
    \ + pos + 1);\n        pos = date.find('-');\n        year = atoi(date.c_str()\
    \ + pos + 1);\n    }\n    if ((day < 1 || day > 31) && (month <= 2 || month >\
    \ 12)) {\n        return false;\n    }\n    if ((year % 4 != 0 && year % 100 !=\
    \ 0) || (year % 400 == 0)) {\n        if (month == 2) {\n            if (day >\
    \ 29) {\n                return false;\n            }\n        } else {\n    \
    \        if (day > 30) {\n                return false;\n            }\n     \
    \   }\n    } else {\n        if (month > 12 || day > 30) {\n            return\
    \ false;\n        }\n    }\n    int i = 0;\n    for (i = 0; i < 12; i++) {\n \
    \       if (month_days[i] == month_days[month] && day == month_days[i]) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpznulh2ra.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpznulh2ra.cpp:76:9: error: redeclaration of \u2018int i\u2019\n   76\
    \ |     int i = 0;\n      |         ^\n/tmp/tmpznulh2ra.cpp:22:9: note: \u2018\
    int i\u2019 previously declared here\n   22 |     int i = 0;\n      |        \
    \ ^\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    char a[10] = {'\\0'};\n    char b[10] = {'\\0'};\n    int mm;\n    int dd;\n\
    \    int yy;\n    sscanf(date.c_str(), \"%d-%d-%d\", &mm, &dd, &yy);\n    if (mm\
    \ < 1 || mm > 12 || dd < 1 || dd > 31 || (mm == 2 && dd > 29) || (mm == 4 && dd\
    \ > 30) || (mm == 6 && dd > 31) || (mm == 9 && dd > 31) || (mm == 11 && dd > 30))\
    \ {\n        valid = false;\n    }\n    sprintf(a, \"%d\", mm);\n    sprintf(b,\
    \ \"%d\", dd);\n    if (mm_month[a] < 1 || mm_month[a] > 12) {\n        valid\
    \ = false;\n    }\n    if (mm_month[b] < 1 || mm_month[b] > 12) {\n        valid\
    \ = false;\n    }\n    if (mm_year[a] < 1 || mm_year[a] > yy) {\n        valid\
    \ = false;\n    }\n    if (mm_year[b] < 1 || mm_year[b] > yy) {\n        valid\
    \ = false;\n    }\n    if (mm_day[a] < 1 || mm_day[a] > 31) {\n        valid =\
    \ false;\n    }\n    if (mm_day[b] < 1 || mm_day[b] > 31) {\n        valid = false;\n\
    \    }\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphqfnqcjr.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmphqfnqcjr.cpp:33:9: error: \u2018mm_month\u2019 was not declared in\
    \ this scope\n   33 |     if (mm_month[a] < 1 || mm_month[a] > 12) {\n      |\
    \         ^~~~~~~~\n/tmp/tmphqfnqcjr.cpp:36:9: error: \u2018mm_month\u2019 was\
    \ not declared in this scope\n   36 |     if (mm_month[b] < 1 || mm_month[b] >\
    \ 12) {\n      |         ^~~~~~~~\n/tmp/tmphqfnqcjr.cpp:39:9: error: \u2018mm_year\u2019\
    \ was not declared in this scope\n   39 |     if (mm_year[a] < 1 || mm_year[a]\
    \ > yy) {\n      |         ^~~~~~~\n/tmp/tmphqfnqcjr.cpp:42:9: error: \u2018mm_year\u2019\
    \ was not declared in this scope\n   42 |     if (mm_year[b] < 1 || mm_year[b]\
    \ > yy) {\n      |         ^~~~~~~\n/tmp/tmphqfnqcjr.cpp:45:9: error: \u2018mm_day\u2019\
    \ was not declared in this scope\n   45 |     if (mm_day[a] < 1 || mm_day[a] >\
    \ 31) {\n      |         ^~~~~~\n/tmp/tmphqfnqcjr.cpp:48:9: error: \u2018mm_day\u2019\
    \ was not declared in this scope\n   48 |     if (mm_day[b] < 1 || mm_day[b] >\
    \ 31) {\n      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    int dateArray[4];\n    std::string month, day;\n    int daysInMonth[2] =\
    \ {31,30};\n    std::stringstream ss(date);\n    if (getline(ss, month, '-') &&\
    \ getline(ss, day, '-')) {\n        // validate the month, if month not less than\
    \ 1 or higher than 12 return false\n        if (month.length() > 2 && month.length()\
    \ < 13) {\n            // validate the day, \n            // if day not less than\
    \ 1 or higher than daysInMonth[month-1] return false\n            if (day.length()\
    \ > 1 && day.length() < daysInMonth[month - 1])\n                return true;\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8ugz2fve.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp8ugz2fve.cpp:31:70: error: no match for \u2018operator-\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   31 |             if (day.length() > 1 && day.length()\
    \ < daysInMonth[month - 1])\n      |                                         \
    \                       ~~~~~ ^ ~\n      |                                   \
    \                             |       |\n      |                             \
    \                                   |       int\n      |                     \
    \                                           std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8ugz2fve.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8ugz2fve.cpp:31:72:\
    \ note:   \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\n   31\
    \ |             if (day.length() > 1 && day.length() < daysInMonth[month - 1])\n\
    \      |                                                                     \
    \   ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp8ugz2fve."
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Complete the code\
    \ here\n    int day;\n    int month;\n    int year;\n    std::stringstream ss;\n\
    \    ss.str(date);\n    ss >> day >> month >> year;\n    if (month < 1 || month\
    \ > 12) return false;\n    if (day < 1 || day > 31) return false;\n    if (month\
    \ == 2 && day > 30) return false;\n    if (month == 4 && day > 29) return false;\n\
    \    if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 ||\
    \ month == 10 || month == 12 || month == 12)\n    {\n        std::cout << \"Passed\
    \ \" << std::endl;\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9mnsaki2: /tmp/tmp9mnsaki2.cpp:41: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = false;\n\
    \    if (date != \"\") {\n        int dd;\n        int mm;\n        int yyyy;\n\
    \n        // The first split is mm-dd-yyyy\n        std::istringstream iss(date);\n\
    \        iss >> mm >> dd >> yyyy;\n        if (mm > 12 || mm < 1 || dd > 31 ||\
    \ dd < 1 || yyyy > 12 || yyyy < 1) {\n            valid = false;\n        }\n\
    \        else {\n            // Check month range\n            if (mm == 0 &&\
    \ dd == 0 && yyyy == 0) {\n                valid = false;\n            }\n   \
    \         else if (mm > 12 || mm < 1 || dd > 31 || dd < 1 || yyyy > 12 || yyyy\
    \ < 1) {\n                valid = false;\n            }\n            else {\n\
    \                valid = true;\n            }\n        }\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp364yws8y: /tmp/tmp364yws8y.cpp:50: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ date_parts = split_string(date, \"-\");\n    // Check whether the given date\
    \ string is empty or not\n    if (date_parts.size() <= 1)\n        return false;\n\
    \    // Check whether the number of days is greater than 0 and less than 31\n\
    \    int months_days[12] = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n\
    \    if (date_parts[1] < 1 || date_parts[1] > months_days[date_parts[0] - 1] ||\
    \ date_parts[2] < 1 || date_parts[2] > 30)\n        return false;\n    // Check\
    \ the number of months is greater than 0 and less than 12\n    if (date_parts[0]\
    \ < 1 || date_parts[0] > 12)\n        return false;\n    // Check the date format\n\
    \    if (!(date_parts[0] < months_days[date_parts[0] - 1] && date_parts[0] < months_days[date_parts[0]\
    \ - 1]))\n        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp37e2_49k.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp37e2_49k.cpp:21:43: error: \u2018split_string\u2019 was not declared\
    \ in this scope\n   21 |     std::vector<std::string> date_parts = split_string(date,\
    \ \"-\");\n      |                                           ^~~~~~~~~~~~\n/tmp/tmp37e2_49k.cpp:26:77:\
    \ error: too many initializers for \u2018int [12]\u2019\n   26 |     int months_days[12]\
    \ = {0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n      |            \
    \                                                                 ^\n/tmp/tmp37e2_49k.cpp:27:23:\
    \ error: no match for \u2018operator<\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   27 |     if (date_parts[1] < 1 || date_parts[1] > months_days[date_parts[0]\
    \ - 1] || date_parts[2] < 1 || date_parts[2] > 30)\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmp37e2_49k.cpp:2:\n/usr/include/c++/9/bits/regex.h:1048:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator<(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1048 |     operator<(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1048:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmp37e2_49k.cpp:27:25:\
    \ note:   \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } is not derived from \u2018const std::__cxx11::sub_match<_BiIter>\u2019\n   27\
    \ |     if (date_parts[1] < 1 || date_parts[1] > months_days[date_parts[0] - 1]\
    \ || date_parts[2] < 1 || date_parts[2] > 30)\n      |                       \
    \  ^\nIn file included from /usr/include/c++/9/regex:62,\n                 from\
    \ /usr/include/x86"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day, month, year;\n\
    \    bool isLeapYear = daysInYear(2020) == daysInYear(2021) + 1;\n    std::stringstream\
    \ ss;\n    ss.str(date);\n    if (!(ss >> month >> day >> year))\n        return\
    \ false;\n    ss.clear();\n    if (month <= 0 || month > 12)\n        return false;\n\
    \    if (day < 1 || day > 31)\n        return false;\n    if (month != 1 && month\
    \ != 3 && month != 5 && month != 7 && month != 8 && month != 10 && month != 12)\n\
    \        return false;\n    if (year < 2000 || year > 2031)\n        return false;\n\
    \    if (month == 2) {\n        if (isLeapYear && day > 29)\n            return\
    \ false;\n    } else if (month == 4 || month == 6 || month == 9 || month == 11)\
    \ {\n        if (isLeapYear && day > 30)\n            return false;\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprou2uool.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmprou2uool.cpp:22:23: error: \u2018daysInYear\u2019 was not declared\
    \ in this scope\n   22 |     bool isLeapYear = daysInYear(2020) == daysInYear(2021)\
    \ + 1;\n      |                       ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    assert(!date.empty());\n\
    \    if (date.length() == 10) {\n        std::istringstream ss(date);\n      \
    \  ss >> std::get_time(&now, \"%d-%d-%d\");\n    } else {\n        return false;\n\
    \    }\n    int days = now.tm_mday - 1;\n    if (days > 0) {\n        days = days;\n\
    \    } else {\n        if (date.length() == 9) {\n            std::istringstream\
    \ ss(date);\n            ss >> std::get_time(&now, \"%d-%d-%d\");\n        } else\
    \ {\n            return false;\n        }\n        days = (now.tm_mday - 1);\n\
    \        if (days > 29) {\n            return false;\n        }\n    }\n    int\
    \ months = now.tm_mon;\n    if (months > 12) {\n        return false;\n    }\n\
    \    if (months == 1 || months == 3 || months == 5 || months == 7 || months ==\
    \ 8 || months == 10 || months == 12) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyek_u981.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpyek_u981.cpp:24:30: error: \u2018now\u2019 was not declared in this\
    \ scope; did you mean \u2018pow\u2019?\n   24 |         ss >> std::get_time(&now,\
    \ \"%d-%d-%d\");\n      |                              ^~~\n      |          \
    \                    pow\n/tmp/tmpyek_u981.cpp:28:16: error: \u2018now\u2019 was\
    \ not declared in this scope; did you mean \u2018pow\u2019?\n   28 |     int days\
    \ = now.tm_mday - 1;\n      |                ^~~\n      |                pow\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your logic here\n\
    \    date += \"  \";\n    const auto [y, m, d] = date.split('-');\n    if (y.size()\
    \ < 1 || m.size() < 1 || d.size() < 3)\n        return false;\n    auto date_day\
    \ = std::stol(y.c_str());\n    auto date_month = std::stol(m.c_str());\n    auto\
    \ date_year = std::stol(d.c_str());\n    if (date_day < 1 || date_month < 1 ||\
    \ date_month > 12 || date_day > 31 || date_day > 30)\n        return false;\n\
    \    if (date_month < 1 || date_month > 12)\n        return false;\n    if (date_year\
    \ < 1000 || date_year > 2080)\n        return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps_3r64ur.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmps_3r64ur.cpp:23:33: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   23 |     const auto [y, m, d] = date.split('-');\n      |               \
    \                  ^~~~~\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Your code here\n  return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo9syolxb: /tmp/tmpo9syolxb.cpp:27: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133247
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::string months[12]\
    \ = {\n        \"January\", \"February\", \"March\", \"April\", \"May\", \"June\"\
    , \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"\
    \n    };\n    int month_index = 0;\n    int day = 0;\n    int year = 0;\n\n  \
    \  // Make sure the date is not empty.\n    if (date.empty()) {\n        return\
    \ false;\n    }\n\n    // Convert the string in date into ints and compare the\
    \ values.\n    sscanf(date.c_str(), \"%d-%d-%d\", &day, &month, &year);\n    //\
    \ If any of the date is invalid return false.\n    if (day > 31 || month > 12\
    \ || month < 1 || day < 1) {\n        return false;\n    }\n\n    // Check if\
    \ the month is valid and return the corresponding index.\n    for (int i = 1;\
    \ i < 12; i++) {\n        if (months[i] != months[month_index]) {\n          \
    \  break;\n        }\n        month_index++;\n    }\n\n    // If there are any\
    \ number of days is higher than 31, then it is invalid.\n    if (month_index >=\
    \ 12) {\n        return false;\n    }\n\n    // Check if year is valid\n    if\
    \ (year < 1000 || year > 2020) {\n        return false;\n    }\n\n    // Return\
    \ true if all conditions are satisfied.\n    return true;\n}\nint main() {\n \
    \   auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7kws634a.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7kws634a.cpp:34:45: error: \u2018month\u2019 was not declared in this\
    \ scope; did you mean \u2018months\u2019?\n   34 |     sscanf(date.c_str(), \"\
    %d-%d-%d\", &day, &month, &year);\n      |                                   \
    \          ^~~~~\n      |                                             months\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  stringstream ss;\n  ss\
    \ << date;\n  string d1(ss.str());\n  ss.clear();\n  ss >> date;\n  string d2(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d3(ss.str());\n  ss.clear();\n  ss >>\
    \ date;\n  string d4(ss.str());\n  ss.clear();\n  ss << date;\n  string d5(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d6(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d7(ss.str());\n  ss.clear();\n  ss << date;\n  string d8(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d9(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d10(ss.str());\n  ss.clear();\n  ss << date;\n  string d11(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d12(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d13(ss.str());\n  ss.clear();\n  ss << date;\n  string d14(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d15(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d16(ss.str());\n  ss.clear();\n  ss << date;\n  string d17(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d18(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d19(ss.str());\n  ss.clear();\n  ss << date;\n  string d20(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d21(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d22(ss.str());\n  ss.clear();\n  ss << date;\n  string d23(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d24(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d25(ss.str());\n  ss.clear();\n  ss << date;\n  string d26(ss.str());\n\
    \  ss.clear();\n  ss << date;\n  string d27(ss.str());\n  ss.clear();\n  ss <<\
    \ date;\n  string d28(ss.str());\n  ss.clear();\n  ss << date;\n  string d29(ss.str\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxlo9wj2.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptxlo9wj2.cpp:21:3: error: \u2018stringstream\u2019 was not declared\
    \ in this scope; did you mean \u2018std::stringstream\u2019?\n   21 |   stringstream\
    \ ss;\n      |   ^~~~~~~~~~~~\n      |   std::stringstream\nIn file included from\
    \ /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptxlo9wj2.cpp:2:\n/usr/include/c++/9/iosfwd:156:37: note: \u2018std::stringstream\u2019\
    \ declared here\n  156 |   typedef basic_stringstream<char>  stringstream;\n \
    \     |                                     ^~~~~~~~~~~~\n/tmp/tmptxlo9wj2.cpp:22:3:\
    \ error: \u2018ss\u2019 was not declared in this scope\n   22 |   ss << date;\n\
    \      |   ^~\n/tmp/tmptxlo9wj2.cpp:23:3: error: \u2018string\u2019 was not declared\
    \ in this scope\n   23 |   string d1(ss.str());\n      |   ^~~~~~\n/tmp/tmptxlo9wj2.cpp:23:3:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmptxlo9wj2.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /us"
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\
    \    int m = 0, d = 0;\n    // Your code goes here\n    for (int i = 0; i < date.length();\
    \ i++) {\n        if (date[i] != '-'){\n            valid = false;\n         \
    \   break;\n        }\n    }\n    if (m > 12) {\n        valid = false;\n    }\n\
    \    if (d > 31) {\n        valid = false;\n    }\n    if (d == 0) {\n       \
    \ if (m == 0) {\n            valid = false;\n        }\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmporjsymxw: /tmp/tmporjsymxw.cpp:45: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int date_length = date.length();\n\
    \    if (date_length == 0) {\n        return false;\n    }\n    int day = 0;\n\
    \    int month = 0;\n    int year = 0;\n    for (int i = 0; i < date_length; i++)\
    \ {\n        char c = date[i];\n        if (c == '-') {\n            month--;\n\
    \        } else if (c == '/') {\n            if (day != 0 || month != 0 || year\
    \ != 0) {\n                return false;\n            }\n            month++;\n\
    \            day = 31;\n            year = 0;\n        } else if (c == '/') {\n\
    \            if (day != 0 || month != 0 || year != 0) {\n                return\
    \ false;\n            }\n            month++;\n            day = 29;\n       \
    \     year = 0;\n        } else {\n            day++;\n        }\n    }\n    if\
    \ (month < 1 || month > 12) {\n        return false;\n    }\n    if (day < 1 ||\
    \ day > 31) {\n        return false;\n    }\n    if (month == 2) {\n        if\
    \ (day != 31) {\n            return false;\n        }\n    } else {\n        if\
    \ (day != 30) {\n            return false;\n        }\n    }\n    if (year < 2000)\
    \ {\n        return false;\n    }\n    if (year > 2040) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp30zk3jz7: /tmp/tmp30zk3jz7.cpp:75: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    //write your code here\n\
    \    bool valid_date = false;\n    // Your code here\n    if (date != \"\") {\n\
    \        int day;\n        int month;\n        int year;\n        // Your code\
    \ here\n        std::smatch match;\n        std::regex reg(\"^(0?[1-9]|1[012])[-\
    \ /.](0?[1-9]|[12][0-9]|3[01])[- /.](19|20)\\d\\d$\");\n        std::cmatch matchArray;\n\
    \        if(std::regex_match(date, match, matchArray)) {\n            if(match.size()\
    \ != 6) {\n                return valid_date;\n            }\n            std::ssub_match\
    \ sub = match[0];\n            day = std::stoi(sub.first, nullptr, 10);\n    \
    \        month = std::stoi(sub.second, nullptr, 10) - 1;\n            year = std::stoi(sub.third,\
    \ nullptr, 10);\n        }\n        else {\n            return valid_date;\n \
    \       }\n        int daysInMonths[31] = {31,28,31,30,31,30,31,31,30,31,30,31,30,31};\n\
    \        if(month == 2) {\n            if(year % 4 != 0) {\n                return\
    \ valid_date;\n            }\n            else if(year % 100 == 0) {\n       \
    \         daysInMonths[2] = 29;\n            }\n            else if(year % 400\
    \ == 0) {\n                daysInMonths[2] = 28;\n            }\n        }\n \
    \       else {\n            if(daysInMonths[month] == 31) {\n                return\
    \ valid_date;\n            }\n        }\n        if (month < 1 || month > 12)\
    \ {\n            return valid_date;\n        }\n        if (day < 1 || day > daysInMonths[month])\
    \ {\n            return valid_date;\n        }\n        valid_date = true;\n \
    \   }\n    return valid_date;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkysvu134.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpkysvu134.cpp:30:24: warning: unknown escape sequence: '\\d'\n   30\
    \ |         std::regex reg(\"^(0?[1-9]|1[012])[- /.](0?[1-9]|[12][0-9]|3[01])[-\
    \ /.](19|20)\\d\\d$\");\n      |                        ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpkysvu134.cpp:30:24: warning: unknown escape sequence: '\\d'\n/tmp/tmpkysvu134.cpp:32:52:\
    \ error: no matching function for call to \u2018regex_match(std::string&, std::__cxx11::smatch&,\
    \ std::__cxx11::cmatch&)\u2019\n   32 |         if(std::regex_match(date, match,\
    \ matchArray)) {\n      |                                                    ^\n\
    In file included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpkysvu134.cpp:2:\n/usr/include/c++/9/bits/regex.h:2059:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Alloc, class _Ch_type,\
    \ class _Rx_traits> bool std::regex_match(_Bi_iter, _Bi_iter, std::__cxx11::match_results<_BiIter,\
    \ _Alloc>&, const std::__cxx11::basic_regex<_CharT, _TraitsT>&, std::regex_constants::match_flag_type)\u2019\
    \n 2059 |     regex_match(_Bi_iter     __s,\n      |     ^~~~~~~~~~~\n/usr/include/c++/9/bits/regex.h:2059:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpkysvu134.cpp:32:52:\
    \ note:   deduced conflicting types for parameter \u2018_Bi_iter\u2019 (\u2018\
    std::__cxx11::basic_string<char>\u2019 and \u2018std::__cxx11::match_results<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >\u2019)\n   32 |         if(std::regex_match(date,\
    \ match, matchArray)) {\n      |                                             \
    \       ^\nIn file included from /usr/include/c++/9/regex:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n            \
    \     from /tmp/tmpkysvu134.cpp:2:\n/usr/include/c++/9/bits/regex.h:2087:5: note:\
    \ candidate: \u2018template<class _Bi_iter, class _Ch_type, class _Rx_traits>\
    \ bool std::regex_match(_Bi_iter, _Bi_iter, const std"
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int day = stoi(strtok(date,\
    \ \"-\"));\n    int month = stoi(strtok(NULL, \"-\"));\n    int year = stoi(strtok(NULL,\
    \ \"-\"));\n    int daysInMonth[] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31,\
    \ 30, 31 };\n    if (day < 1 || day > daysInMonth[month - 1] || month < 1 || month\
    \ > 12)\n        return false;\n    int checkMonth = month;\n    for (int i =\
    \ 1; i <= month; i++)\n        checkMonth += (month != 12 && i == 2 && year %\
    \ 400 == 0 || (month != 12 && i == 2 && year % 4 == 0 && year % 100 != 0));\n\
    \    return checkMonth == month;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpk8bm82dn.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpk8bm82dn.cpp:21:27: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018char*\u2019\n   21 |\
    \     int day = stoi(strtok(date, \"-\"));\n      |                          \
    \ ^~~~\n      |                           |\n      |                         \
    \  std::string {aka std::__cxx11::basic_string<char>}\nIn file included from /usr/include/c++/9/cstring:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:48,\n\
    \                 from /tmp/tmpk8bm82dn.cpp:2:\n/usr/include/string.h:336:39:\
    \ note:   initializing argument 1 of \u2018char* strtok(char*, const char*)\u2019\
    \n  336 | extern char *strtok (char *__restrict __s, const char *__restrict __delim)\n\
    \      |                      ~~~~~~~~~~~~~~~~~^~~\n/tmp/tmpk8bm82dn.cpp:21:15:\
    \ error: \u2018stoi\u2019 was not declared in this scope; did you mean \u2018\
    std::__cxx11::stoi\u2019?\n   21 |     int day = stoi(strtok(date, \"-\"));\n\
    \      |               ^~~~\n      |               std::__cxx11::stoi\nIn file\
    \ included from /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpk8bm82dn.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:6612:3: note:\
    \ \u2018std::__cxx11::stoi\u2019 declared here\n 6612 |   stoi(const wstring&\
    \ __str, size_t* __idx = 0, int __base = 10)\n      |   ^~~~\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // write your logic here\n\
    \    auto dateSplit = date.substr(6, 10).split('-');\n    if (dateSplit.size()\
    \ != 3 || dateSplit[1] < 1 || dateSplit[1] > 12 || dateSplit[2] < 1 || dateSplit[2]\
    \ > 31) {\n        return false;\n    }\n    if (dateSplit[0] < 1 || dateSplit[0]\
    \ > 12) {\n        return false;\n    }\n    if (dateSplit[1] == 2 && dateSplit[2]\
    \ == 31 && (dateSplit[0] == 1 || dateSplit[0] == 3)) {\n        return false;\n\
    \    }\n    if (dateSplit[1] == 2 && dateSplit[2] == 30 && dateSplit[0] == 4)\
    \ {\n        return false;\n    }\n    if (dateSplit[1] == 2 && dateSplit[2] ==\
    \ 29 && dateSplit[0] == 6) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk24n3xln.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpk24n3xln.cpp:22:41: error: \u2018class std::__cxx11::basic_string<char>\u2019\
    \ has no member named \u2018split\u2019\n   22 |     auto dateSplit = date.substr(6,\
    \ 10).split('-');\n      |                                         ^~~~~\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n\tstd::istringstream iss1(date);\n\
    \tstd::istringstream iss2(date);\n\tstd::istringstream iss3(date);\n\tiss1 >>\
    \ std::setfill('0') >> std::setw(2) >> day1;\n\tiss2 >> std::setfill('0') >> std::setw(2)\
    \ >> day2;\n\tiss3 >> std::setfill('0') >> std::setw(2) >> day3;\n\tassert(day1!='0'&&day2!='0'&&day3!='0'&&day1<=31&&day2<=31&&day3<=30&&day1>=1&&day2>=1&&day3>=1);\n\
    \tassert(day1!='0'&&day2!='0'&&day3!='0'&&day1<=31&&day2<=31&&day3<=30&&day1>=1&&day2>=1&&day3>=1);\n\
    \tassert(day1!='0'&&day2!='0'&&day3!='0'&&day1<=31&&day2<=31&&day3<=29&&day1>=1&&day2>=1&&day3>=1);\n\
    \tassert(day1!='0'&&day2!='0'&&day3!='0'&&day1<=12&&day2<=12&&day3>=1);\n\tassert(day1!='0'&&day2!='0'&&day3!='0'&&day1<=12&&day2<=12&&day3>=1);\n\
    \tassert(day1!='0'&&day2!='0'&&day3!='0'&&day1<=12&&day2<=12&&day3>=1);\n\tbool\
    \ flag=true;\n\tstd::ifstream in(\"day_val.txt\");\n\tstd::string s1,s2,s3;\n\t\
    std::getline(in,s1);\n\tstd::getline(in,s2);\n\tstd::getline(in,s3);\n\tassert(s1==s2);\n\
    \tassert(s3==s2);\n\tassert(s1==s3);\n\tbool flag2=true;\n\twhile (iss1.good()\
    \ && iss2.good() && iss3.good()) {\n\t\tiss1 >> month1;\n\t\tiss1 >> day1;\n\t\
    \tiss2 >> month2;\n\t\tiss2 >> day2;\n\t\tiss3 >> month3;\n\t\tiss3 >> day3;\n\
    \t\tif (month1=='2' && month2=='4' && month3=='6') {\n\t\t\tif (day1==day2&&day2==day3&&day3==1)\
    \ {\n\t\t\t\t\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ga7psvq.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp2ga7psvq.cpp:24:47: error: \u2018day1\u2019 was not declared in this\
    \ scope\n   24 |  iss1 >> std::setfill('0') >> std::setw(2) >> day1;\n      |\
    \                                               ^~~~\n/tmp/tmp2ga7psvq.cpp:25:47:\
    \ error: \u2018day2\u2019 was not declared in this scope\n   25 |  iss2 >> std::setfill('0')\
    \ >> std::setw(2) >> day2;\n      |                                          \
    \     ^~~~\n/tmp/tmp2ga7psvq.cpp:26:47: error: \u2018day3\u2019 was not declared\
    \ in this scope\n   26 |  iss3 >> std::setfill('0') >> std::setw(2) >> day3;\n\
    \      |                                               ^~~~\n/tmp/tmp2ga7psvq.cpp:44:11:\
    \ error: \u2018month1\u2019 was not declared in this scope\n   44 |   iss1 >>\
    \ month1;\n      |           ^~~~~~\n/tmp/tmp2ga7psvq.cpp:46:11: error: \u2018\
    month2\u2019 was not declared in this scope\n   46 |   iss2 >> month2;\n     \
    \ |           ^~~~~~\n/tmp/tmp2ga7psvq.cpp:48:11: error: \u2018month3\u2019 was\
    \ not declared in this scope\n   48 |   iss3 >> month3;\n      |           ^~~~~~\n\
    /tmp/tmp2ga7psvq.cpp:54:12: error: a function-definition is not allowed here before\
    \ \u2018{\u2019 token\n   54 | int main() {\n      |            ^\n/tmp/tmp2ga7psvq.cpp:72:1:\
    \ error: expected \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmp2ga7psvq.cpp:50:50:\
    \ note: to match this \u2018{\u2019\n   50 |   if (month1=='2' && month2=='4'\
    \ && month3=='6') {\n      |                                                 \
    \ ^\n/tmp/tmp2ga7psvq.cpp:72:1: error: expected \u2018}\u2019 at end of input\n\
    \   72 | }\n      | ^\n/tmp/tmp2ga7psvq.cpp:43:52: note: to match this \u2018\
    {\u2019\n   43 |  while (iss1.good() && iss2.good() && iss3.good()) {\n      |\
    \                                                    ^\n/tmp/tmp2ga7psvq.cpp:72:1:\
    \ error: expected \u2018}\u2019 at end of input\n   72 | }\n      | ^\n/tmp/tmp2ga7psvq.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/tmp2ga7psvq.cpp:72:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   72 | }\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Complete the code\
    \ to implement this function\n    int numdays[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n\
    \    int nummonths[12] = {0,4,6,9,11,12};\n    int months[12] = {0,1,2,3,4,5,6,7,8,9,10};\n\
    \    int i = 0;\n    int j = 0;\n    int k = 0;\n    for(i = 0; i < date.size();\
    \ i++) {\n        if(date[i] >= '0' && date[i] <= '9') {\n            continue;\n\
    \        }\n        else {\n            return false;\n        }\n    }\n    for(i\
    \ = 0; i < date.size(); i++) {\n        if(date[i] >= '0' && date[i] <= '9') {\n\
    \            j = i * 10;\n            k = j + numdays[i];\n            date[i]\
    \ = date[k];\n            date[k] = '-';\n            date[k] = date[i];\n   \
    \     }\n        else {\n            return false;\n        }\n    }\n    for(i\
    \ = 0; i < date.size(); i++) {\n        if(date[i] >= '0' && date[i] <= '9') {\n\
    \            j = i * 10;\n            k = j + months[i];\n            date[i]\
    \ = date[k];\n            date[k] = '-';\n            date[k] = date[i];\n   \
    \     }\n        else {\n            return false;\n        }\n    }\n    for(i\
    \ = 0; i < date.size(); i++) {\n        if(date[i] >= '0' && date[i] <= '9') {\n\
    \            j = i * 10;\n            k = j + nummonths[i];\n            date[i]\
    \ = date[k];\n            date[k] = '-';\n            date[k] = date[i];\n   \
    \     }\n        else {\n            return false;\n        }\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwbc2dlmr.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpwbc2dlmr.cpp:22:61: error: too many initializers for \u2018int [12]\u2019\
    \n   22 |     int numdays[12] = {0,31,28,31,30,31,30,31,31,30,31,30,31};\n   \
    \   |                                                             ^\n"
  stdout: ''
  timestamp: 1660133525
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::istringstream ss(date);\n\
    \    std::string token;\n    int days = 0;\n    int months = 0;\n    int years\
    \ = 0;\n    int date1 = 0;\n    int date2 = 0;\n    int month1 = 0;\n    int month2\
    \ = 0;\n    int year1 = 0;\n    int year2 = 0;\n    bool flag = false;\n\n   \
    \ while (std::getline(ss, token, ',')) {\n        // First check for an empty\
    \ string in our token\n        if (token == \"\") {\n            return false;\n\
    \        }\n\n        switch (token.at(0)) {\n            case 'm':\n        \
    \        months = stoi(token);\n                if (months < 1 || months > 12)\
    \ {\n                    return false;\n                }\n                break;\n\
    \            case 'd':\n                date2 = stoi(token);\n               \
    \ if (date2 < 1 || date2 > 31) {\n                    return false;\n        \
    \        }\n                break;\n            case 'y':\n                year2\
    \ = stoi(token);\n                if (year2 < 1 || year2 > 9999) {\n         \
    \           return false;\n                }\n                break;\n       \
    \     default:\n                month1 = stoi(token);\n                if (month1\
    \ < 1 || month1 > 12) {\n                    return false;\n                }\n\
    \                year1 = stoi(token);\n                if (year1 < 1 || year1\
    \ > 9999) {\n                    return false;\n                }\n          \
    \      break;\n        }\n    }\n\n    if (date1 < 1 || date1 > 31) {\n      \
    \  return false;\n    }\n\n    if (date2 < 1 || date2 > 29) {\n        return\
    \ false;\n    }\n\n    if (month1 < 1 || month1 > 12) {\n        return false;\n\
    \    }\n\n    if (month2 < 1 || month2 > 12) {\n        return false;\n    }\n\
    \n    if (year2 < 1 || year2 > 9999) {\n        return false;\n    }\n\n    if\
    \ (year1 < 1 || year1 > 9999) {\n        return false;\n    }\n\n    if (months\
    \ > 0) {\n        days = date2 - date1 + 1;\n        if (days > 31) {\n      \
    \      return false;\n        }\n    }\n\n    if (months > 0) {\n        days\
    \ = date2 - date1 + 1;\n        if (days > 30) {\n            return false;\n\
    \        }\n    }\n\n    if (months > 0) {\n        days = date2 - date1 + 1;\n\
    \        if (days > 29) {\n            return false;\n        }\n    }\n\n   \
    \ if (days > 0) {\n        return true;\n    }\n\n    return false;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5t6jn4na: /tmp/tmp5t6jn4na.cpp:125: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    int day;\n    int month;\n    int year;\n    std::stringstream date(date);\n\
    \    date >> month >> day >> year;\n    if(month < 1 || month > 12){\n       \
    \ return false;\n    }\n    if(day < 1 || day > 31){\n        return false;\n\
    \    }\n    if(year < 1000 || year > 2020){\n        return false;\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjav57et0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpjav57et0.cpp:25:32: error: declaration of \u2018std::stringstream date\u2019\
    \ shadows a parameter\n   25 |     std::stringstream date(date);\n      |    \
    \                            ^\n/tmp/tmpjav57et0.cpp:25:32: error: use of deleted\
    \ function \u2018std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>::basic_stringstream(const\
    \ std::__cxx11::basic_stringstream<_CharT, _Traits, _Alloc>&) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\nIn file\
    \ included from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjav57et0.cpp:2:\n/usr/include/c++/9/sstream:787:7:\
    \ note: declared here\n  787 |       basic_stringstream(const basic_stringstream&)\
    \ = delete;\n      |       ^~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool valid = true;\n\n\
    \    if (date.empty() == false) {\n        valid = false;\n    }\n\n    int day\
    \ = std::stoi(date, nullptr, 10);\n    valid = (day < 1 || day > 30);\n\n    int\
    \ month = std::stoi(date, nullptr, 10);\n    valid = valid && (month < 1 || month\
    \ > 12);\n\n    int year = std::stoi(date, nullptr, 10);\n    valid = valid &&\
    \ (year > 1900);\n\n    return valid;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpbm9lhjkg: /tmp/tmpbm9lhjkg.cpp:40: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::string check;\n  std::istringstream\
    \ input(date);\n  std::getline(input, check, '-');\n  std::getline(input, check,\
    \ '-');\n  std::sscanf(check.c_str(), \"%d-%d-%d\", &date[0], &date[1], &date[2]);\n\
    \  if (date[0] > 12 || date[1] > 31 || date[2] > 31)\n    return false;\n  if\
    \ (date[0] < 1 || date[1] < 1 || date[2] < 1 || date[0] > 12 || date[1] > 31 ||\
    \ date[2] > 30)\n    return false;\n  if (date[1] == 2 && date[2] == 1 || date[2]\
    \ == 2 && date[1] == 1)\n    return false;\n  return true;\n}\nint main() {\n\
    \    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5o43medf: /tmp/tmp5o43medf.cpp:36: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    size_t day = 0, month\
    \ = 0, year = 0;\n    std::stringstream ss(date);\n    if (ss >> month >> day\
    \ >> year) {\n        unsigned int n_day = 0, n_month = 0;\n        if (day >\
    \ 0 && day <= 31 && month > 0 && month <= 12 && year > 0 &&\n            ((month\
    \ > 1 && day > 29 && month < 12) || (month == 1 && day > 29) ||\n            \
    \ (month == 1 && day <= 29))) {\n            n_day = day - 1;\n            month--;\n\
    \        } else if (day > 0 && day <= 30 && month > 1 && month <= 12 && year >\
    \ 0 &&\n                   ((month > 4 && day > 31 && month < 12) || (month ==\
    \ 4 && day > 31) ||\n                    (month == 4 && day <= 31))) {\n     \
    \       n_day = day - 1;\n            month--;\n        } else if (day > 0 &&\
    \ day <= 29 && month > 2 && month <= 12 && year > 0 &&\n                   ((month\
    \ > 6 && day > 30 && month < 12) || (month == 6 && day > 30) ||\n            \
    \        (month == 6 && day <= 30))) {\n            n_day = day - 1;\n       \
    \     month--;\n        }\n        if (n_day < 1 || n_day > 31) return false;\n\
    \        if (n_month < 1 || n_month > 12) return false;\n        if (month ==\
    \ 2 && n_day > 30) return false;\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp03ta4mj0: /tmp/tmp03ta4mj0.cpp:50: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Write your logic here\n\
    \  int date_arr[3];\n  date_arr[0] = stoi(date.substr(6, 2));\n  date_arr[1] =\
    \ stoi(date.substr(3, 2));\n  date_arr[2] = stoi(date.substr(0, 4));\n  if (date_arr[0]\
    \ < 1 || date_arr[0] > 12 || (date_arr[1] < 1 || date_arr[1] > 12)) {\n    return\
    \ false;\n  }\n  if (date_arr[2] < 1 || date_arr[2] > 31 || (date_arr[2] < 1 ||\
    \ date_arr[2] > 30)) {\n    return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"))\
    \ == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn47sx8j_: /tmp/tmpn47sx8j_.cpp:36: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  std::cout<<\"in valid_date()\"\
    <<std::endl;\n  // Your code goes here\n  assert(date.size()>0);\n  int day=0;\n\
    \  int month=0;\n  std::string date_array[] = date.split(\"-\");\n  assert(date_array[0].length()==2);\n\
    \  assert(date_array[1].length()==2);\n  month=atoi(date_array[0].c_str())-1;\n\
    \  day=atoi(date_array[1].c_str());\n  if(day<1 || day>31) return 0;\n  if(month<1\
    \ || month>12) return 0;\n  if(month==2 && day<1 || day>29) return 0;\n  if(month==2\
    \ && day>28) return 0;\n  return 1;\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0642ne0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpd0642ne0.cpp:26:35: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018split\u2019\
    \n   26 |   std::string date_array[] = date.split(\"-\");\n      |           \
    \                        ^~~~~\n"
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int days, month;\n  \
    \  std::string::iterator itr;\n    itr = date.begin();\n    if (itr != date.end())\
    \ {\n        if (*itr == '-') {\n            itr++;\n        }\n        std::sscanf(itr,\
    \ \"%d-%d-%d\", &days, &month, &year);\n        if (month < 1 || month > 12) return\
    \ false;\n        if (days < 1 || days > 31) return false;\n        if (month\
    \ == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10\
    \ || month == 12) return false;\n        if (days == 31) return false;\n     \
    \   if (days == 30) return false;\n        if (days == 29) return false;\n   \
    \     return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6m9hy94l.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp6m9hy94l.cpp:28:54: error: \u2018year\u2019 was not declared in this\
    \ scope\n   28 |         std::sscanf(itr, \"%d-%d-%d\", &days, &month, &year);\n\
    \      |                                                      ^~~~\n"
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::stringstream ss(date);\n\
    \    std::string token;\n    bool valid = true;\n    // >> operator\n    while\
    \ (std::getline(ss, token, '-')) {\n        // Check number of days\n        if\
    \ (std::stoi(token) <= 0 || std::stoi(token) >= 31) {\n            valid = false;\n\
    \        }\n        // Check month\n        else if (std::stoi(token) < 1 || std::stoi(token)\
    \ > 12) {\n            valid = false;\n        }\n        // Check year\n    \
    \    else if (std::stoi(token) < 2016 || std::stoi(token) > 2049) {\n        \
    \    valid = false;\n        }\n    }\n    return valid;\n}\nint main() {\n  \
    \  auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgblcyjnz: /tmp/tmpgblcyjnz.cpp:43: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    if (!date.empty() &&\
    \ date != \"0\" && date != \"-1\") {\n        int day[3];\n        std::istringstream\
    \ stream(date);\n        stream >> day[0] >> day[1] >> day[2];\n        int validdays\
    \ = 0;\n        for (int i = 1; i < 3; i++) {\n            if (day[i] < 1 || day[i]\
    \ > 31) {\n                validdays = 0;\n                break;\n          \
    \  }\n            if (day[i] < 1) {\n                validdays = 0;\n        \
    \        break;\n            }\n        }\n        for (int i = 1; i < 12; i++)\
    \ {\n            if (day[i] < 1 || day[i] > 30) {\n                validdays =\
    \ 0;\n                break;\n            }\n            if (day[i] < 1) {\n \
    \               validdays = 0;\n                break;\n            }\n      \
    \  }\n        if (day[2] < 1 || day[2] > 29) {\n            validdays = 0;\n \
    \       }\n        return validdays == 0 && day[1] < 1 && day[2] < 1;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcvuece03: /tmp/tmpcvuece03.cpp:56: int main(): Assertion `candidate(("15-01-2012"))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Your code goes here\n\
    \    std::string mon[13] = {\"\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\"\
    , \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"};\n    std::string\
    \ day[31] = {\"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"06\", \"07\", \"\
    08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\",\
    \ \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\", \"26\", \"27\"\
    , \"28\", \"29\", \"30\", \"31\"};\n    std::string year[100] = {\"\", \"1900\"\
    , \"1901\", \"1902\", \"1903\", \"1904\", \"1905\", \"1906\", \"1907\", \"1908\"\
    , \"1909\", \"1910\", \"1911\", \"1912\", \"1913\", \"1914\", \"1915\", \"1916\"\
    , \"1917\", \"1918\", \"1919\", \"1920\", \"1921\", \"1922\", \"1923\", \"1924\"\
    , \"1925\", \"1926\", \"1927\", \"1928\", \"1929\", \"1930\", \"1931\", \"1932\"\
    , \"1933\", \"1934\", \"1935\", \"1936\", \"1937\", \"1938\", \"1939\", \"1940\"\
    , \"1941\", \"1942\", \"1943\", \"1944\", \"1945\", \"1946\", \"1947\", \"1948\"\
    , \"1949\", \"1950\", \"1951\", \"1952\", \"1953\", \"1954\", \"1955\", \"1956\"\
    , \"1957\", \"1958\", \"1959\", \"1960\", \"1961\", \"1962\", \"1963\", \"1964\"\
    , \"1965\", \"1966\", \"1967\", \"1968\", \"1969\", \"1970\", \"1971\", \"1972\"\
    , \"1973\", \"1974\", \"1975\", \"1976\", \"1977\", \"1978\", \"1979\", \"1980\"\
    , \"1981\", \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\"\
    , \"1989\", \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\"\
    , \"1997\", \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\"\
    , \"2005\", \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\", \"2012\"\
    , \"2013\", \"2014\", \"2015\", \"2016\", \"2017\", \"2018\", \"2019\", \"2020\"\
    };\n    std::vector<std::string> date_str = date.split('-');\n    \n    // Write\
    \ your code here\n    // The date_str[0] will be the month and date_str[1] will\
    \ be the date\n    // You need to validate the month first\n    if(!std::all_of(date_str.cbegin(),\
    \ date_str.cend(), [](char c){ return (c >= '\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzxavnxd0.cpp:30:82: warning: missing terminating ' character\n\
    \   30 |     if(!std::all_of(date_str.cbegin(), date_str.cend(), [](char c){ return\
    \ (c >= '\n      |                                                           \
    \                       ^\n/tmp/tmpzxavnxd0.cpp:30:82: error: missing terminating\
    \ ' character\n/tmp/tmpzxavnxd0.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpzxavnxd0.cpp:23:216: error: too many initializers for \u2018std::string\
    \ [31]\u2019 {aka \u2018std::__cxx11::basic_string<char> [31]\u2019}\n   23 |\
    \     std::string day[31] = {\"\", \"01\", \"02\", \"03\", \"04\", \"05\", \"\
    06\", \"07\", \"08\", \"09\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\",\
    \ \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\", \"23\", \"24\", \"25\"\
    , \"26\", \"27\", \"28\", \"29\", \"30\", \"31\"};\n      |                  \
    \                                                                            \
    \                                                                            \
    \                                              ^\n/tmp/tmpzxavnxd0.cpp:24:1000:\
    \ error: too many initializers for \u2018std::string [100]\u2019 {aka \u2018std::__cxx11::basic_string<char>\
    \ [100]\u2019}\n   24 |     std::string year[100] = {\"\", \"1900\", \"1901\"\
    , \"1902\", \"1903\", \"1904\", \"1905\", \"1906\", \"1907\", \"1908\", \"1909\"\
    , \"1910\", \"1911\", \"1912\", \"1913\", \"1914\", \"1915\", \"1916\", \"1917\"\
    , \"1918\", \"1919\", \"1920\", \"1921\", \"1922\", \"1923\", \"1924\", \"1925\"\
    , \"1926\", \"1927\", \"1928\", \"1929\", \"1930\", \"1931\", \"1932\", \"1933\"\
    , \"1934\", \"1935\", \"1936\", \"1937\", \"1938\", \"1939\", \"1940\", \"1941\"\
    , \"1942\", \"1943\", \"1944\", \"1945\", \"1946\", \"1947\", \"1948\", \"1949\"\
    , \"1950\", \"1951\", \"1952\", \"1953\", \"1954\", \"1955\", \"1956\", \"1957\"\
    , \"1958\", \"1959\", \"1960\", \"1961\", \"1962\", \"1963\", \"1964\", \"1965\"\
    , \"1966\", \"1967\", \"1968\", \"1969\", \"1970\", \"1971\", \"1972\", \"1973\"\
    , \"1974\", \"1975\", \"1976\", \"1977\", \"1978\", \"1979\", \"1980\", \"1981\"\
    , \"1982\", \"1983\", \"1984\", \"1985\", \"1986\", \"1987\", \"1988\", \"1989\"\
    , \"1990\", \"1991\", \"1992\", \"1993\", \"1994\", \"1995\", \"1996\", \"1997\"\
    , \"1998\", \"1999\", \"2000\", \"2001\", \"2002\", \"2003\", \"2004\", \"2005\"\
    , \"2006\", \"2007\", \"2008\", \"2009\", \"2010\", \"2011\","
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::smatch match;\n\
    \    bool valid = false;\n    std::cout << \"Enter date in MM-DD-YYYY format:\
    \ \";\n    std::cin >> match;\n    if (match.size() != 3) {\n        std::cout\
    \ << \"Invalid Date\";\n    }\n    else {\n        std::regex re(\"^(0[1-9]|[12][0-9]|3[01])-([0][1-9]|[1][0-2])-(20[0-9]{2})$\"\
    );\n        valid = std::regex_match(date, match, re);\n    }\n    return valid;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpheambztm.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpheambztm.cpp:24:14: error: no match for \u2018operator>>\u2019 (operand\
    \ types are \u2018std::istream\u2019 {aka \u2018std::basic_istream<char>\u2019\
    } and \u2018std::__cxx11::smatch\u2019 {aka \u2018std::__cxx11::match_results<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >\u2019})\n   24 |     std::cin >>\
    \ match;\n      |     ~~~~~~~~ ^~ ~~~~~\n      |          |      |\n      |  \
    \        |      std::__cxx11::smatch {aka std::__cxx11::match_results<__gnu_cxx::__normal_iterator<const\
    \ char*, std::__cxx11::basic_string<char> > >}\n      |          std::istream\
    \ {aka std::basic_istream<char>}\nIn file included from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpheambztm.cpp:2:\n/usr/include/c++/9/istream:120:7:\
    \ note: candidate: \u2018std::basic_istream<_CharT, _Traits>::__istream_type&\
    \ std::basic_istream<_CharT, _Traits>::operator>>(std::basic_istream<_CharT, _Traits>::__istream_type&\
    \ (*)(std::basic_istream<_CharT, _Traits>::__istream_type&)) [with _CharT = char;\
    \ _Traits = std::char_traits<char>; std::basic_istream<_CharT, _Traits>::__istream_type\
    \ = std::basic_istream<char>]\u2019\n  120 |       operator>>(__istream_type&\
    \ (*__pf)(__istream_type&))\n      |       ^~~~~~~~\n/usr/include/c++/9/istream:120:36:\
    \ note:   no known conversion for argument 1 from \u2018std::__cxx11::smatch\u2019\
    \ {aka \u2018std::__cxx11::match_results<__gnu_cxx::__normal_iterator<const char*,\
    \ std::__cxx11::basic_string<char> > >\u2019} to \u2018std::basic_istream<char>::__istream_type&\
    \ (*)(std::basic_istream<char>::__istream_type&)\u2019 {aka \u2018std::basic_istream<char>&\
    \ (*)(std::basic_istream<char>&)\u2019}\n  120 |       operator>>(__istream_type&\
    \ (*__pf)(__istream_type&))\n      |                  ~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/istream:124:7: note: candidate: \u2018std::basic_istream<_C"
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    bool flag = true;\n \
    \   int day = -1, month = -1, year = -1;\n    int index = 0;\n    while(index\
    \ != std::string::npos && flag) {\n        index = date.find(\"-\");\n       \
    \ if(index != std::string::npos) {\n            day = std::stoi(date.substr(0,\
    \ index));\n            date = date.substr(index + 1);\n            index = date.find(\"\
    -\");\n            if(index != std::string::npos) {\n                month = std::stoi(date.substr(0,\
    \ index));\n                date = date.substr(index + 1);\n                index\
    \ = date.find(\"-\");\n                if(index != std::string::npos) {\n    \
    \                year = std::stoi(date.substr(0, index));\n                  \
    \  date = date.substr(index + 1);\n                    if(year < 1 || year > 12\
    \ || month < 1 || month > 12 || day < 1 || day > 31) {\n                     \
    \   flag = false;\n                    } else {\n                        break;\n\
    \                    }\n                } else {\n                    flag = false;\n\
    \                }\n            } else {\n                flag = false;\n    \
    \        }\n        } else {\n            flag = false;\n        }\n    }\n  \
    \  return flag;\n}\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"\
    03-11-2000\")) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n\
    \    assert(candidate((\"04-0-2040\")) == (false));\n    assert(candidate((\"\
    06-04-2020\")) == (true));\n    assert(candidate((\"01-01-2007\")) == (true));\n\
    \    assert(candidate((\"03-32-2011\")) == (false));\n    assert(candidate((\"\
    \")) == (false));\n    assert(candidate((\"04-31-3000\")) == (false));\n    assert(candidate((\"\
    06-06-2005\")) == (true));\n    assert(candidate((\"21-31-2000\")) == (false));\n\
    \    assert(candidate((\"04-12-2003\")) == (true));\n    assert(candidate((\"\
    04122003\")) == (false));\n    assert(candidate((\"20030412\")) == (false));\n\
    \    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"2003-04-12\"\
    )) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmprp6mtvur: /tmp/tmprp6mtvur.cpp:56: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your code here\n\
    \    struct tm x;\n    char s[10];\n    bool valid = false;\n    std::string day,\
    \ month, year;\n    int d, m, y;\n    int daysInMonth[] = {31, 28, 31, 30, 31,\
    \ 30, 31, 31, 30, 31, 30, 31};\n    int day;\n    int month;\n\n    sscanf(date.c_str(),\
    \ \"%2d-%2d-%4s\", &m, &d, &y);\n    // month is between 1-12\n    if (m < 1 ||\
    \ m > 12) {\n        return false;\n    }\n    month = m;\n    if (m < 2) {\n\
    \        valid = true;\n    }\n    // day is between 1-28 or 29\n    if (d < 1\
    \ || d > daysInMonth[month - 1]) {\n        return false;\n    }\n    day = d;\n\
    \    valid = true;\n    // year is between 1900 to 2100\n    if (y < 1900 || y\
    \ > 2100) {\n        return false;\n    }\n    year = y;\n    valid = true;\n\n\
    \    x = {0};\n    // set all elements in x to zero\n    x.tm_mon = month - 1;\n\
    \    x.tm_mday = day;\n    x.tm_year = year - 1900;\n    // call mktime() function\n\
    \    mktime(&x);\n\n    if (x.tm_year < 1900 || x.tm_year > 2100 || x.tm_mon <\
    \ 1 || x.tm_mon > 12 || x.tm_mday < 1 || x.tm_mday > daysInMonth[month - 1] ||\
    \ x.tm_mday == 31 && x.tm_mon == 2 && x.tm_year % 400 == 0)\n    {\n        return\
    \ false;\n    }\n\n    valid = true;\n    return valid;\n}\nint main() {\n   \
    \ auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7w7_0313.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp7w7_0313.cpp:28:9: error: conflicting declaration \u2018int day\u2019\
    \n   28 |     int day;\n      |         ^~~\n/tmp/tmp7w7_0313.cpp:25:17: note:\
    \ previous declaration as \u2018std::string day\u2019\n   25 |     std::string\
    \ day, month, year;\n      |                 ^~~\n/tmp/tmp7w7_0313.cpp:29:9: error:\
    \ conflicting declaration \u2018int month\u2019\n   29 |     int month;\n    \
    \  |         ^~~~~\n/tmp/tmp7w7_0313.cpp:25:22: note: previous declaration as\
    \ \u2018std::string month\u2019\n   25 |     std::string day, month, year;\n \
    \     |                      ^~~~~\n/tmp/tmp7w7_0313.cpp:31:37: warning: format\
    \ \u2018%s\u2019 expects argument of type \u2018char*\u2019, but argument 5 has\
    \ type \u2018int*\u2019 [-Wformat=]\n   31 |     sscanf(date.c_str(), \"%2d-%2d-%4s\"\
    , &m, &d, &y);\n      |                                   ~~^           ~~\n \
    \     |                                     |           |\n      |           \
    \                          char*       int*\n      |                         \
    \          %4d\n/tmp/tmp7w7_0313.cpp:41:40: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018int\u2019)\n   41 |     if (d < 1 || d > daysInMonth[month - 1]) {\n\
    \      |                                  ~~~~~ ^ ~\n      |                 \
    \                 |       |\n      |                                  |      \
    \ int\n      |                                  std::string {aka std::__cxx11::basic_string<char>}\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7w7_0313.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_Iterator"
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Write your code here\n\
    \  \n  if(date.empty())\n    return false;\n\n  int day;\n  int month;\n  int\
    \ year;\n  std::string days;\n  std::string months;\n  int num_days;\n  int num_months;\n\
    \  bool is_leap_year;\n\n  if(!(cin >> days >> months >> year))\n  {\n    return\
    \ false;\n  }\n\n  num_months = months.size();\n  num_days = days.size();\n\n\
    \  if(months.size() < 1 || months.size() > 12)\n  {\n    return false;\n  }\n\n\
    \  if(days.size() < 1 || days.size() > 31)\n  {\n    return false;\n  }\n\n  if(months.size()\
    \ > 12)\n  {\n    return false;\n  }\n\n  if(days.size() > 31)\n  {\n    return\
    \ false;\n  }\n\n  if(months.size() < 1 || months.size() > 12)\n  {\n    return\
    \ false;\n  }\n\n  if(days.size() < 1 || days.size() > 31)\n  {\n    return false;\n\
    \  }\n\n  if(months.size() > 12)\n  {\n    return false;\n  }\n\n  if(days.size()\
    \ > 31)\n  {\n    return false;\n  }\n\n  if(months.size() < 1 || months.size()\
    \ > 12)\n  {\n    return false;\n  }\n\n  if(days.size() < 1 || days.size() >\
    \ 30)\n  {\n    return false;\n  }\n\n  if(months.size() > 12)\n  {\n    return\
    \ false;\n  }\n\n  if(days.size() > 30)\n  {\n    return false;\n  }\n\n  if(months.size()\
    \ < 1 || months.size() > 12)\n  {\n    return false;\n  }\n\n  if(days.size()\
    \ < 1 || days.size() > 29)\n  {\n    return false;\n  }\n\n  is_leap_year = true;\n\
    \n  for(int i = 0; i <= num_months; i++)\n  {\n    if(months[i] >= '0' && months[i]\
    \ <= '9')\n    {\n      num_months--;\n    }\n  }\n\n  if(num_months > 0)\n  {\n\
    \    if(months.size() > 2)\n    {\n      for(int i = 0; i <= num_months; i++)\n\
    \      {\n        if(months[i] >= '0' && months[i] <= '9')\n        {\n      \
    \    num_months--;\n        }\n      }\n    }\n\n    is_leap_year = false;\n \
    \ }\n\n  for(int i = 0; i <= num_days - 1; i++)\n  {\n    if(days[i] >= '0' &&\
    \ days[i] <= '9')\n    {\n      num_days--;\n    }\n  }\n\n  for(int i = 0; i\
    \ <= num_days - 1; i++)\n  {\n    if(days[i] >= '0' && days[i] <= '9')\n    {\n\
    \      num_days--;\n    }\n  }\n\n  if(num_days > 0)\n  {\n    if(days.size()\
    \ > 2)\n    {\n      for(int i = 0; i <= num_day\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxg2je66e.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpxg2je66e.cpp:35:8: error: \u2018cin\u2019 was not declared in this\
    \ scope; did you mean \u2018std::cin\u2019?\n   35 |   if(!(cin >> days >> months\
    \ >> year))\n      |        ^~~\n      |        std::cin\nIn file included from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n                 from\
    \ /tmp/tmpxg2je66e.cpp:2:\n/usr/include/c++/9/iostream:60:18: note: \u2018std::cin\u2019\
    \ declared here\n   60 |   extern istream cin;  /// Linked to standard input\n\
    \      |                  ^~~\n/tmp/tmpxg2je66e.cpp:159:27: error: \u2018num_day\u2019\
    \ was not declared in this scope; did you mean \u2018num_days\u2019?\n  159 |\
    \       for(int i = 0; i <= num_day\n      |                           ^~~~~~~\n\
    \      |                           num_days\n/tmp/tmpxg2je66e.cpp:159:34: error:\
    \ expected \u2018;\u2019 before \u2018}\u2019 token\n  159 |       for(int i =\
    \ 0; i <= num_day\n      |                                  ^\n      |       \
    \                           ;\n  160 | }\n      | ~                          \
    \       \n/tmp/tmpxg2je66e.cpp:160:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  160 | }\n      | ^\n/tmp/tmpxg2je66e.cpp:159:34: error:\
    \ expected \u2018)\u2019 before \u2018}\u2019 token\n  159 |       for(int i =\
    \ 0; i <= num_day\n      |          ~                       ^\n      |       \
    \                           )\n  160 | }\n      | ~                          \
    \       \n/tmp/tmpxg2je66e.cpp:160:1: error: expected primary-expression before\
    \ \u2018}\u2019 token\n  160 | }\n      | ^\n/tmp/tmpxg2je66e.cpp:161:12: error:\
    \ a function-definition is not allowed here before \u2018{\u2019 token\n  161\
    \ | int main() {\n      |            ^\n/tmp/tmpxg2je66e.cpp:179:1: error: expected\
    \ \u2018}\u2019 at end of input\n  179 | }\n      | ^\n/tmp/tmpxg2je66e.cpp:156:3:\
    \ note: to match this \u2018{\u2019\n  156 |   {\n      |   ^\n/tmp/tmpxg2je66e.cpp:179:1:\
    \ error: expected \u2018}\u2019 at end of input\n  179 | }\n      | ^\n/tmp/tmpxg2je66e.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 | bool valid_date(std::string date)\
    \ {\n      |                                   ^\n/tmp/"
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int num_days[31] = {31,\
    \ 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};\n    int months[12] = { 0 , 3 ,\
    \ 5 , 7 , 8 , 10 , 12 , 0 , 0 , 0 , 0 , 0 , 0 , 0};\n    // Validate date string\
    \ is not empty.\n    if (date.empty()) {\n        return false;\n    }\n    //\
    \ Validate number of days is more than 1 and less than 31\n    for (auto itr =\
    \ date.cbegin(), end = date.cend(); itr != end; ++itr) {\n        if ((*itr ==\
    \ '-') || (*itr == '/')) {\n            return false;\n        }\n    }\n    int\
    \ m = stoi(date.substr(0, 2));\n    int d = stoi(date.substr(3, 2));\n    int\
    \ y = stoi(date.substr(6, 4));\n    // Validate month is more than 0 and less\
    \ than 12\n    for (int i = 0; i < 12; i++) {\n        if (months[i] && (m !=\
    \ i)) {\n            return false;\n        }\n    }\n    // Validate date is\
    \ less than 1 or greater than 30 for month 2.\n    if (m == 2) {\n        if (d\
    \ >= 1 && d <= 30) {\n            return true;\n        }\n        return false;\n\
    \    }\n    // Validate date is less than 1 or greater than 29 for month 1.\n\
    \    if (m == 1) {\n        if (d >= 1 && d <= 29) {\n            return true;\n\
    \        }\n        return false;\n    }\n    // Validate date is less than 1\
    \ or greater than 28 for month 4.\n    if (m == 4) {\n        if (d >= 1 && d\
    \ <= 28) {\n            return true;\n        }\n        return false;\n    }\n\
    \    // Validate date is less than 1 or greater than 29 for month 6.\n    if (m\
    \ == 6) {\n        if (d >= 1 && d <= 29) {\n            return true;\n      \
    \  }\n        return false;\n    }\n    // Validate date is less than 1 or greater\
    \ than 31 for month 9.\n    if (m == 9) {\n        if (d >= 1 && d <= 31) {\n\
    \            return true;\n        }\n        return false;\n    }\n    // Validate\
    \ date is less than 1 or greater than 31 for month 11.\n    if (m == 11) {\n \
    \       if (d >= 1 && d <= 31) {\n            return true;\n        }\n      \
    \  return false;\n    }\n    // Validate date is less than 1 or greater than 31\
    \ for month 13.\n    if (m == 13) {\n        if (d >= 1 && d <= 31) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    // Validate\
    \ date is less than 1 or greater than 31 for month 15.\n    if (m == 15) {\n \
    \       if (d >= 1 && d <= 31) {\n            return true;\n        }\n      \
    \  return false;\n    }\n    // Validate date is less than 1 or greater than 31\
    \ for month 17.\n    if (m == 17) {\n        if (d >= 1 && d <= 31) {\n      \
    \      return true;\n        }\n        return false;\n    }\n    // Validate\
    \ date is less than 1 or greater than 31 for month 19.\n    if (m == 19) {\n \
    \       if (d >= 1 && d <= 31\n}\nint main() {\n    auto candidate = valid_date;\n\
    \    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptugutilp.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmptugutilp.cpp:22:79: error: too many initializers for \u2018int [12]\u2019\
    \n   22 |     int months[12] = { 0 , 3 , 5 , 7 , 8 , 10 , 12 , 0 , 0 , 0 , 0 ,\
    \ 0 , 0 , 0};\n      |                                                       \
    \                        ^\n/tmp/tmptugutilp.cpp:107:30: error: expected \u2018\
    )\u2019 before \u2018}\u2019 token\n  107 |         if (d >= 1 && d <= 31\n  \
    \    |            ~                 ^\n      |                              )\n\
    \  108 | }\n      | ~                             \n/tmp/tmptugutilp.cpp:108:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  108 | }\n \
    \     | ^\n/tmp/tmptugutilp.cpp:109:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  109 | int main() {\n      |            ^\n\
    /tmp/tmptugutilp.cpp:127:1: error: expected \u2018}\u2019 at end of input\n  127\
    \ | }\n      | ^\n/tmp/tmptugutilp.cpp:20:35: note: to match this \u2018{\u2019\
    \n   20 | bool valid_date(std::string date) {\n      |                       \
    \            ^\n/tmp/tmptugutilp.cpp:127:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n  127 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660133526
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    int month[12] = { 0,\
    \ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int days[12] = { 0, 31,\
    \ 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };\n    int year = 0;\n\n    for\
    \ (size_t i = 0; i < date.size(); i++) {\n        if (date.at(i) == ' ') continue;\n\
    \        else if (date.at(i) == '-') continue;\n        else if (date.at(i) ==\
    \ '+') continue;\n        else if (date.at(i) == '/') continue;\n        else\
    \ if (date.at(i) == ':') continue;\n        else if (date.at(i) == ',') continue;\n\
    \        else if (date.at(i) == '\\n') continue;\n        else if (date.at(i)\
    \ == '\\t') continue;\n        else if (date.at(i) == '\\r') continue;\n     \
    \   else if (date.at(i) == '\\f') continue;\n        else if (date.at(i) == '.')\
    \ continue;\n        else if (date.at(i) == '0') continue;\n        else if (date.at(i)\
    \ == '1') continue;\n        else if (date.at(i) == '2') continue;\n        else\
    \ if (date.at(i) == '3') continue;\n        else if (date.at(i) == '4') continue;\n\
    \        else if (date.at(i) == '5') continue;\n        else if (date.at(i) ==\
    \ '6') continue;\n        else if (date.at(i) == '7') continue;\n        else\
    \ if (date.at(i) == '8') continue;\n        else if (date.at(i) == '9') continue;\n\
    \        else if (date.at(i) == '-') continue;\n        else if (date.at(i) ==\
    \ '/') continue;\n        else if (date.at(i) == '0') continue;\n        else\
    \ if (date.at(i) == '1') continue;\n        else if (date.at(i) == '2') continue;\n\
    \        else if (date.at(i) == '3') continue;\n        else if (date.at(i) ==\
    \ '4') continue;\n        else if (date.at(i) == '5') continue;\n        else\
    \ if (date.at(i) == '6') continue;\n        else if (date.at(i) == '7') continue;\n\
    \        else if (date.at(i) == '8') continue;\n        else if (date.at(i) ==\
    \ '9') continue;\n        else if (date.at(i) == '-') continue;\n        else\
    \ if (date.at(i) == '-') continue;\n        else if (date.at(i) == '-') continue;\n\
    \        else if (date.at(i) == '-') continue;\n        else if (date.at(i) ==\
    \ '+') continue;\n        else if (date.at(i) == '-') continue;\n        else\
    \ if (date.at(i) == '-') continue;\n        else if (date.at(i) == '+') continue;\n\
    \        else if (date.at(i) == ',') continue;\n        else if (date.at(i) ==\
    \ '\\n') continue;\n        else if (date.at(i) == '\\t') continue;\n        else\
    \ if (date.at(i) == '\\r') continue;\n        else if (date.at(i) == '\\f') continue;\n\
    \        else if (date.at(i) == '.') continue;\n        else if (date.at(i) ==\
    \ '-') continue;\n        else if (date.at(i) == '-') continue;\n        else\
    \ if (date.at(i) == ':') continue;\n        else if (date.at(i) == ',') continue;\n\
    \        else if (date.at(i) == '.') continue;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu3_yhs7.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmpqu3_yhs7.cpp:21:73: error: too many initializers for \u2018int [12]\u2019\
    \n   21 |     int month[12] = { 0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30,\
    \ 31 };\n      |                                                             \
    \            ^\n/tmp/tmpqu3_yhs7.cpp:22:72: error: too many initializers for \u2018\
    int [12]\u2019\n   22 |     int days[12] = { 0, 31, 29, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31 };\n      |                                                 \
    \                       ^\n/tmp/tmpqu3_yhs7.cpp:79:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n   79 | int main() {\n     \
    \ |            ^\n/tmp/tmpqu3_yhs7.cpp:97:1: error: expected \u2018}\u2019 at\
    \ end of input\n   97 | }\n      | ^\n/tmp/tmpqu3_yhs7.cpp:20:35: note: to match\
    \ this \u2018{\u2019\n   20 | bool valid_date(std::string date) {\n      |   \
    \                                ^\n/tmp/tmpqu3_yhs7.cpp:97:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n   97 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    std::vector<std::string>\
    \ months = {\"1\", \"3\", \"5\", \"7\", \"8\", \"10\", \"12\"};\n    std::vector<std::string>\
    \ days = {\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"\
    , \"11\", \"12\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"\
    , \"10\", \"11\", \"12\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"\
    8\", \"9\", \"10\", \"11\", \"12\"};\n    std::vector<std::string> years = {\"\
    2000\", \"2004\", \"2008\", \"2012\"};\n    for (size_t i = 0; i < months.size();\
    \ i++) {\n        for (size_t j = 0; j < days.size(); j++) {\n            for\
    \ (size_t k = 0; k < years.size(); k++) {\n                if (date == months[i]\
    \ + \"-\" + days[j] + \" \" + years[k]) {\n                    if (i + 1 < months.size()\
    \ && j + 1 < days.size() && k + 1 < years.size()) {\n                        bool\
    \ flag = false;\n                        for (size_t m = 0; m < months.size();\
    \ m++) {\n                            flag = flag || months[m] == months[i + 1];\n\
    \                        }\n                        for (size_t d = 0; d < days.size();\
    \ d++) {\n                            flag = flag || days[d] == days[j + 1];\n\
    \                        }\n                        for (size_t y = 0; y < years.size();\
    \ y++) {\n                            flag = flag || years[y] == years[k + 1];\n\
    \                        }\n                        if (flag) {\n            \
    \                return true;\n                        }\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyvb0fdc9: /tmp/tmpyvb0fdc9.cpp:51: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133527
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // The code you write\
    \ here ...\n    if (date.empty()) return false;\n    string month;\n    string\
    \ day;\n    string year;\n    istringstream ss1(date);\n    ss1 >> month >> day\
    \ >> year;\n    int day1 = stoi(day);\n    int month1 = stoi(month);\n    int\
    \ year1 = stoi(year);\n    if (month1 < 1 || month1 > 12) return false;\n    if\
    \ (month1 == 2 && day1 < 1 || day1 > 29) return false;\n    if (month1 == 3 &&\
    \ day1 < 1 || day1 > 31) return false;\n    if (month1 == 4 && day1 < 1 || day1\
    \ > 30) return false;\n    if (month1 == 6 && day1 < 1 || day1 > 31) return false;\n\
    \    if (month1 == 9 && day1 < 1 || day1 > 30) return false;\n    if (month1 ==\
    \ 11 && day1 < 1 || day1 > 30) return false;\n    if (month1 == 12 && day1 < 1\
    \ || day1 > 31) return false;\n    \n    return true;\n}\nint main() {\n    auto\
    \ candidate = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n\
    \    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp44d3bkr1.cpp: In function \u2018bool valid_date(std::string)\u2019\
    :\n/tmp/tmp44d3bkr1.cpp:23:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   23 |     string month;\n      |     ^~~~~~\n/tmp/tmp44d3bkr1.cpp:23:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp44d3bkr1.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp44d3bkr1.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp44d3bkr1.cpp:24:11: error: expected \u2018;\u2019 before \u2018day\u2019\
    \n   24 |     string day;\n      |           ^~~~\n      |           ;\n/tmp/tmp44d3bkr1.cpp:25:11:\
    \ error: expected \u2018;\u2019 before \u2018year\u2019\n   25 |     string year;\n\
    \      |           ^~~~~\n      |           ;\n/tmp/tmp44d3bkr1.cpp:26:5: error:\
    \ \u2018istringstream\u2019 was not declared in this scope; did you mean \u2018\
    std::istringstream\u2019?\n   26 |     istringstream ss1(date);\n      |     ^~~~~~~~~~~~~\n\
    \      |     std::istringstream\nIn file included from /usr/include/c++/9/ios:38,\n\
    \    "
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    unsigned int year;\n\
    \    unsigned int month;\n    unsigned int day;\n    bool valid = true;\n\n  \
    \  // Check whether the given date string is empty\n    if (date.empty())\n  \
    \      return false;\n\n    // Extract the date from the given string.\n    std::stringstream\
    \ ss(date);\n    ss >> year >> month >> day;\n\n    // Check the date format.\n\
    \    if (year < 1 || year > 9999 || month < 1 || month > 12 || day < 1 ||\n  \
    \      day > 31 || month > 12 || (month == 2 && day > 30) || day > 29) {\n   \
    \     valid = false;\n    }\n\n    return valid;\n}\nint main() {\n    auto candidate\
    \ = valid_date;\n    assert(candidate((\"03-11-2000\")) == (true));\n    assert(candidate((\"\
    15-01-2012\")) == (false));\n    assert(candidate((\"04-0-2040\")) == (false));\n\
    \    assert(candidate((\"06-04-2020\")) == (true));\n    assert(candidate((\"\
    01-01-2007\")) == (true));\n    assert(candidate((\"03-32-2011\")) == (false));\n\
    \    assert(candidate((\"\")) == (false));\n    assert(candidate((\"04-31-3000\"\
    )) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n    assert(candidate((\"\
    21-31-2000\")) == (false));\n    assert(candidate((\"04-12-2003\")) == (true));\n\
    \    assert(candidate((\"04122003\")) == (false));\n    assert(candidate((\"20030412\"\
    )) == (false));\n    assert(candidate((\"2003-04\")) == (false));\n    assert(candidate((\"\
    2003-04-12\")) == (false));\n    assert(candidate((\"04-2003\")) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_qqgkgwk: /tmp/tmp_qqgkgwk.cpp:44: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133526
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n  // Write your code here\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmphrj8jzsn: /tmp/tmphrj8jzsn.cpp:25: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133527
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You have to write a function\
    \ which validates a given date string and\n// returns true if the date is valid\
    \ otherwise false.\n// The date is valid if all of the following rules are satisfied:\n\
    // 1. The date string is not empty.\n// 2. The number of days is not less than\
    \ 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days\
    \ is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number\
    \ of days is not less than 1 or higher than 29 for the month 2.\n// 3. The months\
    \ should not be less than 1 or higher than 12.\n// 4. The date should be in the\
    \ format: mm-dd-yyyy\n// >>> valid_date((\"03-11-2000\"))\n// (true)\n// >>> valid_date((\"\
    15-01-2012\"))\n// (false)\n// >>> valid_date((\"04-0-2040\"))\n// (false)\n//\
    \ >>> valid_date((\"06-04-2020\"))\n// (true)\n// >>> valid_date((\"06/04/2020\"\
    ))\n// (false)\nbool valid_date(std::string date) {\n    // Write your logic here\n\
    \    std::istringstream ss1(date);\n    std::istringstream ss2(\"31-03-2012\"\
    );\n    std::istringstream ss3(\"30-06-2040\");\n    std::istringstream ss4(\"\
    30/04/2020\");\n    std::istringstream ss5(\"31/12/1968\");\n    std::string day,\
    \ month, year;\n    ss1 >> month >> day >> year;\n    ss2 >> month >> day >> year;\n\
    \    ss3 >> month >> day >> year;\n    ss4 >> month >> day >> year;\n    ss5 >>\
    \ month >> day >> year;\n    int day1 = atoi(day.c_str());\n    int month1 = atoi(month.c_str());\n\
    \    int year1 = atoi(year.c_str());\n\n    // Check validity\n    if ((month1\
    \ < 1 || month1 > 12) || (day1 < 1 || day1 > 31))\n        return false;\n   \
    \ if ((month1 == 2) && day1 > 29)\n        return false;\n    if (month1 == 2\
    \ && day1 > 28)\n        return false;\n    if (month1 == 3)\n        return day1\
    \ < 1 || day1 > 30;\n    if (month1 == 4 && day1 > 31)\n        return false;\n\
    \    if (month1 == 5 && day1 > 31)\n        return false;\n    if (month1 == 6\
    \ && day1 > 30)\n        return false;\n    if (month1 == 6 && day1 > 29)\n  \
    \      return false;\n    if (month1 == 7)\n        return day1 < 1 || day1 >\
    \ 31;\n    if (month1 == 8 && day1 > 31)\n        return false;\n    if (month1\
    \ == 9 && day1 > 31)\n        return false;\n    if (month1 == 10 && day1 > 31)\n\
    \        return false;\n    if (month1 == 11 && day1 > 30)\n        return false;\n\
    \    if (month1 == 12 && day1 > 29)\n        return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = valid_date;\n    assert(candidate((\"03-11-2000\"\
    )) == (true));\n    assert(candidate((\"15-01-2012\")) == (false));\n    assert(candidate((\"\
    04-0-2040\")) == (false));\n    assert(candidate((\"06-04-2020\")) == (true));\n\
    \    assert(candidate((\"01-01-2007\")) == (true));\n    assert(candidate((\"\
    03-32-2011\")) == (false));\n    assert(candidate((\"\")) == (false));\n    assert(candidate((\"\
    04-31-3000\")) == (false));\n    assert(candidate((\"06-06-2005\")) == (true));\n\
    \    assert(candidate((\"21-31-2000\")) == (false));\n    assert(candidate((\"\
    04-12-2003\")) == (true));\n    assert(candidate((\"04122003\")) == (false));\n\
    \    assert(candidate((\"20030412\")) == (false));\n    assert(candidate((\"2003-04\"\
    )) == (false));\n    assert(candidate((\"2003-04-12\")) == (false));\n    assert(candidate((\"\
    04-2003\")) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4u06tkv7: /tmp/tmp4u06tkv7.cpp:70: int main(): Assertion `candidate(("03-11-2000"))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660133527
