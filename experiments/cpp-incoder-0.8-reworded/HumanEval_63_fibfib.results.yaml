language: cpp
name: HumanEval_63_fibfib
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert (n>0);\n    if (n==1)\n        return 0;\n    if (n==2)\n        return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpp9uev4hx: /tmp/tmpp9uev4hx.cpp:27: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 1;\n\tif(n==2)\n\t\treturn 1;\n\
    \tlong ans = 0;\n\tfor(int i=3;i<=n;i+=2)\n\t\tans = ans + fibfib(i) + fibfib(i-1);\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpffbql4al: /tmp/tmpffbql4al.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n <= 1){\n        return n;\n    }\n    long res = fibfib(n-2) + fibfib(n-1);\n\
    \    return res;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpim3o7079: /tmp/tmpim3o7079.cpp:25: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpk9iqllvr: /tmp/tmpk9iqllvr.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert ( n >= 0 );\n    long fibfib[n];\n    fibfib[0] = 0;\n    fibfib[1]\
    \ = 0;\n    fibfib[2] = 1;\n    long fibfibn = fibfib[n];\n    long fibfibnew;\n\
    \    long fibfibnewn;\n    long i = 0;\n    while (fibfibn < fibfibnewn) {\n \
    \       fibfibnew = fibfibn + (fibfibn - fibfib[2]);\n        fibfibnewn = fibfibnew;\n\
    \        fibfibnewn = fibfibnewn;\n        i++;\n    }\n    return fibfibnewn;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp59vidmg9: /tmp/tmp59vidmg9.cpp:36: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpk9iqllvr: /tmp/tmpk9iqllvr.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n<0) return -1;\n\tif(n<1) return 0;\n\tif(n==0) return 0;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpcmzr13cy: /tmp/tmpcmzr13cy.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \     assert(n >= 0);\n     if (n == 0) {\n        return 0;\n    }\n    if (n\
    \ == 1) {\n        return 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpkfoxqsga: /tmp/tmpkfoxqsga.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if\
    \ (n == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpa_lwv9_0: /tmp/tmpa_lwv9_0.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long sum = 0;\n    if(n>1) sum = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpljoct8sw: /tmp/tmpljoct8sw.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\tif (n == 2)\n\t\t\
    return 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpm0q__dzd: /tmp/tmpm0q__dzd.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert (n<=100);\n\tlong sum = 0;\n\tlong cur = 0;\n\twhile (cur < n) {\n\t\t\
    sum += cur;\n\t\tcur += 1;\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpxv0qpjfw: /tmp/tmpxv0qpjfw.cpp:29: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n == 0 || n == 1)\n        return n;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n<=1) {\n        return 0;\n    }\n    if (n==2) {\n        return 1;\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp76ey7tvu: /tmp/tmp76ey7tvu.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1)\n        return n;\n    long a = fibfib(n-2);\n   \
    \ long b = fibfib(n-1);\n    return a + b + fibfib(n-3);\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // write your code here\n    long a,b;\n    if(n==0)\n\treturn 0;\n    if(n==1)\n\
    \treturn 1;\n    if(n==2)\n\treturn 1;\n    a=fibfib(n-1);\n    b=fibfib(n-2);\n\
    \    return a+b;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpn3sobfwp: /tmp/tmpn3sobfwp.cpp:31: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 1;\n    }\n    if (n == 2) {\n        return 1;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpauwe7h59: /tmp/tmpauwe7h59.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132166
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long ret = 0;\n    for (int i = 3; i <= n; ++i) ret += fibfib(i-1);\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpzdvnrlll: /tmp/tmpzdvnrlll.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n == 0)\n        return 0;\n    if(n == 1)\n        return 0;\n    if(n\
    \ == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n <= 2) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp3ma03nfo: /tmp/tmp3ma03nfo.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fibfib[n + 1];\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2]\
    \ = 1;\n    for (int i = 2; i <= n; i++) {\n        fibfib[i] = fibfib[i - 1]\
    \ + fibfib[i - 2];\n    }\n    return fibfib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpjw52qlqi: /tmp/tmpjw52qlqi.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 0;\n    }\n    return fibfib(n-1) + fibfib(n-2);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpm7bshf1q: /tmp/tmpm7bshf1q.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp2ggy97ey: /tmp/tmp2ggy97ey.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if(n == 0)\n        return 0;\n    if(n == 1)\n    \
    \    return 1;\n    if(n >= 2)\n        return fibfib(n-1) + fibfib(n-2);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp59l7dtyq: /tmp/tmp59l7dtyq.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fib, fibbonacci = 1, fibfib = 1;\n    if (n == 0 || n == 1) {\n    \
    \    fibfib = 0;\n        return fibfib;\n    } else if (n == 2) {\n        fibfib\
    \ = 2;\n        return fibfib;\n    } else {\n        for (int i = 4; i <= n;\
    \ i++) {\n            fib = fibbonacci;\n            fibbonacci = fibfib + fib;\n\
    \            fibfib = fibfib + fib;\n        }\n        return fibbonacci;\n \
    \   }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmphm07t6eb: /tmp/tmphm07t6eb.cpp:34: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 0;\n    if\
    \ (n == 2)\n        return 1;\n    long ans = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    cout << ans << endl;\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_ol0swx.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpd_ol0swx.cpp:23:5: error: \u2018cout\u2019 was not declared in this\
    \ scope; did you mean \u2018std::cout\u2019?\n   23 |     cout << ans << endl;\n\
    \      |     ^~~~\n      |     std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpd_ol0swx.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpd_ol0swx.cpp:23:20:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   23 |     cout << ans << endl;\n      |                  \
    \  ^~~~\n      |                    std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpd_ol0swx.cpp:2:\n/usr/include/c++/9/ostream:599:5: note: \u2018std::endl\u2019\
    \ declared here\n  599 |     endl(basic_ostream<_CharT, _Traits>& __os)\n    \
    \  |     ^~~~\n"
  stdout: ''
  timestamp: 1660132165
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<2)\n        return n;\n    else\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpaxv6t0nx: /tmp/tmpaxv6t0nx.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long ans = 0;\n    if (n <= 3) {\n        ans = n;\n    } else if (n == 0)\n\
    \        ans = 0;\n    else\n        ans = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpu_2vo4i8: /tmp/tmpu_2vo4i8.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    if\
    \ (n == 3)\n        return 2;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmplfou6bls: /tmp/tmplfou6bls.cpp:28: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // your code goes here\n    assert(n>=0);\n    if(n<2)\n        return 0;\n\
    \    long ans = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return ans;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp2xjd3rxq: /tmp/tmp2xjd3rxq.cpp:17: long int fibfib(long int): Assertion
    `n>=0'' failed.

    '
  stdout: ''
  timestamp: 1660132166
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n > 0);\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9wc5j4_z: /tmp/tmp9wc5j4_z.cpp:16: long int fibfib(long int): Assertion
    `n > 0'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \   if(n<0){\n     assert(false); //change this to throw exception or something\n\
    \     return 0;\n   }\n   if(n==1){\n      return 0;\n   }\n   if(n==2){\n   \
    \   return 1;\n   }\n   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp2twlnuqi: /tmp/tmp2twlnuqi.cpp:17: long int fibfib(long int): Assertion
    `false'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Your code here\n    long ans=0;\n    if(n==0) return 0;\n    if(n==1)\
    \ return 1;\n    if(n==2) return 2;\n    ans=fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpbnzw4f_o: /tmp/tmpbnzw4f_o.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n==0) return 0;\n    if (n==1) return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpuuqi3_xr: /tmp/tmpuuqi3_xr.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // write your code here\n    if(n <= 2)\n        return 0;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmp1m9uk0pj: /tmp/tmp1m9uk0pj.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n<0) return -1;\n\tif (n<=1){\n\t\treturn 0;\n\t}\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmp7saqfv6n: /tmp/tmp7saqfv6n.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n==0) return 0;\n    if(n==1) return 0;\n    if(n==2) return 1;\n    long\
    \ res = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  long s = 0;\n  long fibfib(n-2);\n  for (long i = 3; i<\
    \ n; i+=2) {\n    s += fibfib;\n    fibfib += fibfib;\n  }\n  return s;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpd9_iphtd: /tmp/tmpd9_iphtd.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n == 1)\n        return 0;\n    if(n == 2)\n        return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmppy9h6loy: /tmp/tmppy9h6loy.cpp:26: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n == 0 || n == 1)\n        return n;\n    if(n > 3)\n        return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    return fibfib(n-2) + fibfib(n-3);\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert (n>=0&&n<=31);\n    if(n==0)\n        return 0;\n    if(n==1)\n  \
    \      return 1;\n    if(n==2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpq07n3xok: /tmp/tmpq07n3xok.cpp:28: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0)\n    return (0L);\n  else if (n == 1)\n    return (1L);\n  else\
    \ if (n == 2)\n    return (1L);\n  else {\n    long a = fibfib(n-1);\n    long\
    \ b = fibfib(n-2);\n    long c = fibfib(n-3);\n    return (b+c+a);\n  }\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_bobx12n: /tmp/tmp_bobx12n.cpp:32: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long n1, n2, fibfib;\n    if (n == 0)\n        return 0;\n    if (n == 1)\n\
    \        return 1;\n    n1 = fibfib(n-1);\n    n2 = fibfib(n-2);\n    fibfib =\
    \ n1 + n2;\n    return fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fxy1mwt.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp7fxy1mwt.cpp:21:20: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   21 |     n1 = fibfib(n-1);\n      |                    ^\n/tmp/tmp7fxy1mwt.cpp:22:20:\
    \ error: \u2018fibfib\u2019 cannot be used as a function\n   22 |     n2 = fibfib(n-2);\n\
    \      |                    ^\n"
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1)\n        return n;\n    long f = fibfib(n-1);\n   \
    \ long b = fibfib(n-2);\n    return f + b;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_i8y4teh: /tmp/tmp_i8y4teh.cpp:25: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fibbonacci;\n    if(n<=0)\n        return 0;\n    else if(fibbonacci\
    \ = (fibfib(n-2) + fibfib(n-1) + fibfib(n-3))%10)\n        return fibbonacci;\n\
    \    else\n        return 0;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpk046sva2: /tmp/tmpk046sva2.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // your code goes here\n  int a[n];\n  for (int i = 0; i < n; ++i) {\n    a[i]\
    \ = 1;\n    for (int j = i; j > 0; --j)\n      a[i] = a[j] + a[j - 1];\n  }\n\
    \  return a[n];\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpd0t_mrij: /tmp/tmpd0t_mrij.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Write your code here\n    long ans = 0, last_val = 0, tmp;\n    long i;\n\
    \    for (i = 2; i <= n; i++) {\n        last_val = i;\n        tmp = 0;\n   \
    \     while (last_val > 0) {\n            tmp += last_val;\n            last_val\
    \ = last_val - 2;\n        }\n        ans += tmp;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpq7di11e_: /tmp/tmpq7di11e_.cpp:32: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n<3) {\n        return n;\n    }\n    return fibfib(n-2) + fibfib(n-1);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpb_rsx15a: /tmp/tmpb_rsx15a.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132166
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // write your code here\n    long ans=0;\n    for(int i=3;i<=n;i++){\n  \
    \      ans=ans+(i*(i-1));\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9m064i16: /tmp/tmp9m064i16.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n == 0) return 0;\n\tif (n == 1) return 0;\n\tif (n == 2) return 1;\n\t\
    else return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<0){\n        n=-n;\n    }\n    if(n==0 || n==1){\n        return n;\n\
    \    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpeop_i447: /tmp/tmpeop_i447.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 1;\n    } else {\n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long sum = 0;\n    long cur;\n    if (n == 0) {\n        sum = 0;\n    }\
    \ else if (n == 1) {\n        sum = 1;\n    } else {\n        cur = fibfib(n-1);\n\
    \        sum = cur + cur + cur;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpf9a613dy: /tmp/tmpf9a613dy.cpp:30: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  if (n <= 2) return 0;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpqshdyczd: /tmp/tmpqshdyczd.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert(n >= 0 && n <= 100);\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp0t9twr5x: /tmp/tmp0t9twr5x.cpp:16: long int fibfib(long int): Assertion
    `n >= 0 && n <= 100'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long long ret = 0;\n    \n    for(long long i = 1; i <= n; i++) {\n     \
    \   ret = ret + i;\n    }\n    \n    return ret;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpuy7y4a57: /tmp/tmpuy7y4a57.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fibfib[MAX] = {0};\n    long fib = 1;\n    for (int i = 0; i < n; i++)\
    \ {\n        fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n    \
    \    fib = fibfib[i] + fibfib[i - 1];\n    }\n    return fibfib[n];\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu7a36dif.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpu7a36dif.cpp:16:17: error: \u2018MAX\u2019 was not declared in this\
    \ scope\n   16 |     long fibfib[MAX] = {0};\n      |                 ^~~\n/tmp/tmpu7a36dif.cpp:19:17:\
    \ warning: pointer to a function used in arithmetic [-Wpointer-arith]\n   19 |\
    \         fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n      |\
    \                 ^\n/tmp/tmpu7a36dif.cpp:19:33: warning: pointer to a function\
    \ used in arithmetic [-Wpointer-arith]\n   19 |         fibfib[i] = fibfib[i -\
    \ 1] + fibfib[i - 2] + fibfib[i - 3];\n      |                               \
    \  ^\ncc1plus: warning: pointer to a function used in arithmetic [-Wpointer-arith]\n\
    /tmp/tmpu7a36dif.cpp:19:49: warning: pointer to a function used in arithmetic\
    \ [-Wpointer-arith]\n   19 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2]\
    \ + fibfib[i - 3];\n      |                                                 ^\n\
    cc1plus: warning: pointer to a function used in arithmetic [-Wpointer-arith]\n\
    /tmp/tmpu7a36dif.cpp:19:35: error: invalid operands of types \u2018long int(long\
    \ int)\u2019 and \u2018long int(long int)\u2019 to binary \u2018operator+\u2019\
    \n   19 |         fibfib[i] = fibfib[i - 1] + fibfib[i - 2] + fibfib[i - 3];\n\
    \      |                     ~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n      |          \
    \                       |               |\n      |                           \
    \      |               long int(long int)\n      |                           \
    \      long int(long int)\n/tmp/tmpu7a36dif.cpp:19:65: warning: pointer to a function\
    \ used in arithmetic [-Wpointer-arith]\n   19 |         fibfib[i] = fibfib[i -\
    \ 1] + fibfib[i - 2] + fibfib[i - 3];\n      |                               \
    \                                  ^\ncc1plus: warning: pointer to a function\
    \ used in arithmetic [-Wpointer-arith]\n/tmp/tmpu7a36dif.cpp:20:23: warning: pointer\
    \ to a function used in arithmetic [-Wpointer-arith]\n   20 |         fib = fibfib[i]\
    \ + fibfib[i - 1];\n      |                       ^\n/tmp/tmpu7a36dif.cpp:20:39:\
    \ warning: pointer to a function used in arithmetic [-Wpo"
  stdout: ''
  timestamp: 1660132168
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Your code goes here\n    std::ifstream myFile(\"fibfibs.txt\");\n    long\
    \ sum = 0;\n    \n    for(int i = 0; i<n; i++){\n        sum+=myFile>>i;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphpimvr5y.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmphpimvr5y.cpp:21:12: error: no match for \u2018operator+=\u2019 (operand\
    \ types are \u2018long int\u2019 and \u2018std::basic_istream<char>::__istream_type\u2019\
    \ {aka \u2018std::basic_istream<char>\u2019})\n   21 |         sum+=myFile>>i;\n\
    \      |         ~~~^~~~~~~~~~~\n/tmp/tmphpimvr5y.cpp:21:12: note: candidate:\
    \ \u2018operator+=(long int&, int)\u2019 <built-in>\n/tmp/tmphpimvr5y.cpp:21:12:\
    \ note:   no known conversion for argument 2 from \u2018std::basic_istream<char>::__istream_type\u2019\
    \ {aka \u2018std::basic_istream<char>\u2019} to \u2018int\u2019\n"
  stdout: ''
  timestamp: 1660132167
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n <= 2) {\n\t\treturn 0;\n\t} else if (n > 2) {\n\t\treturn fibfib(n - 1)\
    \ + fibfib(n - 2);\n\t}\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpx1d1az9p: /tmp/tmpx1d1az9p.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0 || n == 1) {\n        return n;\n    }\n\
    \    long a = fibfib(n-1);\n    long b = fibfib(n-2);\n    return a+b;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp5agql59f: /tmp/tmp5agql59f.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1) {\n        return 0;\n    }\n    long a = fibfib(n-2);\n\
    \    long b = fibfib(n-1);\n    long c = fibfib(n-3);\n    return a + b + c;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    else if (n == 1) return 1;\n    else return fibfib(n-1)\
    \ + fibfib(n-2);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp82paczt3: /tmp/tmp82paczt3.cpp:23: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n < 3) {\n        return 0;\n    }\n    if (n == 3) {\n        return\
    \ 1;\n    }\n    return fibfib(n-2) + fibfib(n-3) + fibfib(n-1);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp4j7iylpn: /tmp/tmp4j7iylpn.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    int result = 0;\n    long sum = 1;\n    long temp;\n    // Write your code\
    \ here\n    if (n == 0) {\n        result = 1;\n    }\n    else if (n == 1) {\n\
    \        result = 0;\n    }\n    else {\n        temp = 0;\n        for (long\
    \ i = 2; i <= n; i++) {\n            temp = sum;\n            sum = temp + temp;\n\
    \        }\n        result = sum;\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmppw513cy1: /tmp/tmppw513cy1.cpp:38: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n==0 || n==1)\n        return n;\n    else if(n==2)\n        return 3;\n\
    \    else \n        return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmppeo0zt8l: /tmp/tmppeo0zt8l.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 0;\n    if (n == 2)\n        return 1;\n    return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Write your code here\n    long ret=1;\n    for(int i=2;i<=n;i++)\n   \
    \     ret=ret+fibfib(i);\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 3)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpuox_ph1e: /tmp/tmpuox_ph1e.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n < 1) return 0;\n\tif (n == 2) return 1;\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \   assert(n >= 0);\n   if (n <= 1)\n      return n;\n   return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmp55la1oek: /tmp/tmp55la1oek.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n==0) return 0;\n\tif(n==1) return 1;\n\tif(n==2) return 1;\n\tif(n==3) return\
    \ 1;\n\treturn fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpw6_nkang: /tmp/tmpw6_nkang.cpp:25: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpk9iqllvr: /tmp/tmpk9iqllvr.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if\
    \ (n == 2)\n        return 1;\n    if (n > 2) {\n        return fibfib(n-1) +\
    \ fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmp7zuq_raq: /tmp/tmp7zuq_raq.cpp:29: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0) return 0;\n    if (n == 1) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpyqqfz2h3: /tmp/tmpyqqfz2h3.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Write your code here.\n    if(n==0)\n    {\n        return 0;\n    }\n\
    \    if(n==1)\n    {\n        return 0;\n    }\n    if(n==2)\n    {\n        return\
    \ 1;\n    }\n    long ans=fibfib(n-1);\n    ans=ans+fibfib(n-2);\n    ans=ans+fibfib(n-3);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    long num = 1;\n    for (long i = 2; i <= n; i++) {\n\
    \        num = num * i;\n    }\n    return num;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpni3ldqjk: /tmp/tmpni3ldqjk.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    \n    if(n == 1)\n        return 0;\n    \n    if(n == 2)\n        return\
    \ 1;\n    \n    if(n == 3)\n        return 2;\n    \n    if(n == 4)\n        return\
    \ 3;\n    \n    if(n == 5)\n        return 8;\n    \n    if(n == 6)\n        return\
    \ 14;\n    \n    if(n == 7)\n        return 42;\n    \n    if(n == 8)\n      \
    \  return 105;\n    \n    if(n == 9)\n        return 203;\n    \n    if(n == 10)\n\
    \        return 428;\n    \n    if(n == 11)\n        return 1045;\n    \n    if(n\
    \ == 12)\n        return 2047;\n    \n    if(n == 13)\n        return 4348;\n\
    \    \n    if(n == 14)\n        return 1052;\n    \n    if(n == 15)\n        return\
    \ 2033;\n    \n    if(n == 16)\n        return 4258;\n    \n    if(n == 17)\n\
    \        return 1049;\n    \n    if(n == 18)\n        return 2037;\n    \n   \
    \ if(n == 19)\n        return 4231;\n    \n    if(n == 20)\n        return 1051;\n\
    \    \n    if(n == 21)\n        return 2035;\n    \n    if(n == 22)\n        return\
    \ 4227;\n    \n    if(n == 23)\n        return 1054;\n    \n    if(n == 24)\n\
    \        return 2039;\n    \n    if(n == 25)\n        return 4192;\n    \n   \
    \ if(n == 26)\n        return 1055;\n    \n    if(n == 27)\n        return 2038;\n\
    \    \n    if(n == 28)\n        return 4185;\n    \n    if(n == 29)\n        return\
    \ 1054;\n    \n    if(n == 30)\n        return 2039;\n    \n    if(n == 31)\n\
    \        return 4185;\n    \n    if(n == 32)\n        return 1056;\n    \n   \
    \ if(n == 33)\n        return 2040;\n    \n    if(n == 34)\n        return 4186;\n\
    \    \n    if(n == 35)\n        return 1055;\n    \n    if(n == 36)\n        return\
    \ 2040;\n    \n    if(n == 37)\n        return 4186;\n    \n    if(n == 38)\n\
    \        return 1053;\n    \n    if(n == 39)\n        return 2040;\n    \n   \
    \ if(n == 40)\n        return 4177;\n    \n    if(n == 41)\n        return 1053;\n\
    \    \n    if(n == 42)\n        return 2040;\n    \n    if(n == 43)\n        return\
    \ 4177;\n    \n    if(n == 44)\n        return 1054;\n\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpna5m6coq: /tmp/tmpna5m6coq.cpp:154: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n < 0)\n    n = 0;\n  if (n > 100)\n    n = 100;\n  if (n == 0)\n    return\
    \ 0;\n  long a = 1, b = 1, res = 0;\n  for (long i = 2; i <= n; i++) {\n    res\
    \ = a + b;\n    a = b;\n    b = res;\n  }\n  return res;\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpcvto4d6h: /tmp/tmpcvto4d6h.cpp:32: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if(n==0)\n    return 0;\n  if(n==1)\n    return 1;\n  if(n==2)\n    return\
    \ 1;\n  if(n>2){\n    return fibfib(n-1)+fibfib(n-2);\n  }\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmplcurb_8x: /tmp/tmplcurb_8x.cpp:29: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n <= 3) return n;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp988vosl8: /tmp/tmp988vosl8.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n > 0);\n  if (n <= 2) return 0;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp2ffyavr9: /tmp/tmp2ffyavr9.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 0;\n    if (n == 2) return\
    \ 1;\n    long first = 0, second = 1, third = 1;\n    for (int i = 2; i <= n;\
    \ i++) {\n        first = second;\n        second = third;\n        third = first\
    \ + second + third;\n    }\n    return first;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpjtukh72r: /tmp/tmpjtukh72r.cpp:31: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1) {\n        return n;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long f = 0;\n    long temp = 0;\n    for (int i = 0; i < n; i++) {\n    \
    \    temp = f;\n        f += 1;\n    }\n    return temp;\n}\nint main() {\n  \
    \  auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpcn1pgazz: /tmp/tmpcn1pgazz.cpp:29: int main(): Assertion `candidate((8))
    == (24)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1) {\n        return n;\n    } else {\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong sum = 0;\n\tfor (int i = 0; i <= n; i++) {\n\t\tif (i == 0 || i == 1 ||\
    \ i == 2) {\n\t\t\tsum = sum + i;\n\t\t}\n\t\telse {\n\t\t\tsum = sum + i + fibfib(i-1);\n\
    \t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = fibfib;\n   \
    \ assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpjo8lsh54: /tmp/tmpjo8lsh54.cpp:29: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132168
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0) return 0;\n  if (n == 1) return 0;\n  if (n == 2) return 1;\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132165
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1) {\n        return 0;\n    }\n    long res = fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert((int)n > 0);\n\tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn 1;\n\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp9kndl9t7: /tmp/tmp9kndl9t7.cpp:16: long int fibfib(long int): Assertion
    `(int)n > 0'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if(n <= 1) return 0;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\n\
    int main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmptu1xjqa7: /tmp/tmptu1xjqa7.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \   long fibfib = 0;\n   if (n == 0) {\n      fibfib = 0;\n   }\n   else if (n\
    \ == 1) {\n      fibfib = 0;\n   }\n   else if (n == 2) {\n      fibfib = 1;\n\
    \   }\n   else {\n      fibfib = (fibfib + fibfib - fibfib - fibfib + fibfib +\
    \ fibfib + fibfib - fibfib + fibfib - fibfib - fibfib - fibfib + fibfib - fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ - fibfib - fibfib + fibfib - fibfib - fibfib + fibfib - fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fib\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmf5adrol.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpmf5adrol.cpp:27:1403: error: \u2018fib\u2019 was not declared in this\
    \ scope\n   27 |       fibfib = (fibfib + fibfib - fibfib - fibfib + fibfib +\
    \ fibfib + fibfib - fibfib + fibfib - fibfib - fibfib - fibfib + fibfib - fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ - fibfib - fibfib + fibfib - fibfib - fibfib + fibfib - fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib\
    \ - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib + fibfib - fibfib\
    \ + fibfib - fibfib + fibfib - fibfib + fibfib - fib\n      |                \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \                                                                            \
    \          "
  stdout: ''
  timestamp: 1660132168
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n < 2) return 0;\n    if(n == 2) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132168
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    // write your code here\n    return 1;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpcrbizqjk: /tmp/tmpcrbizqjk.cpp:22: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1) {\n        return 0;\n    }\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132119
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0) {\n        return 0;\n    } else if (n ==\
    \ 1) {\n        return 1;\n    } else {\n        return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp8ei9foig: /tmp/tmp8ei9foig.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert(n > 0);\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\tif (n ==\
    \ 2) return 2;\n\tif (n >= 3) return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \treturn -1;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpajrquqq4: /tmp/tmpajrquqq4.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0 && n < 31);\n    if (n == 0) return 0;\n    if (n == 1) return\
    \ 1;\n    if (n == 2) return 2;\n    long a = fibfib(n-1);\n    long b = fibfib(n-2);\n\
    \    long c = fibfib(n-3);\n    return a + b + c;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpzfe2dkj4: /tmp/tmpzfe2dkj4.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<2){\n        return 0;\n    }\n    return fibfib(n-2) + fibfib(n-1);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpndsh39sp: /tmp/tmpndsh39sp.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if(n==0)\n    return 0;\n  if(n==1)\n    return 1;\n  if(n==2)\n    return\
    \ 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpn4dq8lyo: /tmp/tmpn4dq8lyo.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn 1;\n\tif (n == 2)\n\t\t\
    return 2;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpcw1jvp4p: /tmp/tmpcw1jvp4p.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp2ggy97ey: /tmp/tmp2ggy97ey.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132165
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return 1;\n\
    \    else if (n == 2)\n        return 2;\n    else {\n        long a = fibfib(n-2);\n\
    \        long b = fibfib(n-3);\n        return a+b+a;\n    }\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpfuyg_opn: /tmp/tmpfuyg_opn.cpp:30: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpk9iqllvr: /tmp/tmpk9iqllvr.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n == 0) return 0;\n\tif(n == 1) return 1;\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132172
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n==0)\n\t\treturn 0;\n\tif(n==1)\n\t\treturn 0;\n\tif(n==2)\n\t\treturn 1;\n\
    \treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if(n<0) return 0;\n  if(n<2) return 1;\n  return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp78eyyas4: /tmp/tmp78eyyas4.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Your code here\n    if(n<1)\n        return 0;\n    if(n==1)\n       \
    \ return 1;\n    if(n==2)\n        return 1;\n    if(n==3)\n        return 2;\n\
    \    if(fibfib(n-1)+fibfib(n-2)+fibfib(n-3)==n)\n        return n;\n    else return\
    \ fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp4w4z9gyj: /tmp/tmp4w4z9gyj.cpp:32: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n<=0) return 0;\n    if (n<=1) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp_h1y9lr9: /tmp/tmp_h1y9lr9.cpp:23: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n > 0);\n  long f = 0;\n  for (long i = 1; i <= n; i++) {\n    f = f\
    \ + i;\n  }\n  return f;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmphykrtpe7: /tmp/tmphykrtpe7.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0) return 0;\n  if (n == 1) return 1;\n  if (n == 2) return 1;\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmph85t0_lp: /tmp/tmph85t0_lp.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  // YOUR CODE STARTS HERE\n  assert(n > 0);\n  if (n == 0)\n    return 0;\n\
    \  if (n == 1)\n    return 1;\n  if (n == 2)\n    return 1;\n  if (n == 3)\n \
    \   return 2;\n  if (n == 4)\n    return 6;\n\n  // YOUR CODE ENDS HERE\n  long\
    \ fibfibsum = 0;\n  for (int i = 0; i <= 3; i++) {\n    if (i % 2 == 0) {\n  \
    \    fibfibsum = fibfibsum + fibfib(n-i-1);\n    }\n    else {\n      fibfibsum\
    \ = fibfibsum + fibfib(n-i+1);\n    }\n  }\n  return fibfibsum;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpxzyhg06k: /tmp/tmpxzyhg06k.cpp:44: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n<=0) return 0;\n    if (n==1) return 0;\n    if (n==2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132171
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// Write your code here.\n\tif (n == 0 || n == 1) {\n\t\treturn n;\n\t} else\
    \ {\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\t}\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132172
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n==0 || n==1)\n        return 0;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 2){\n        return 1;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpi8t5yu4w: /tmp/tmpi8t5yu4w.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong prev=n, prevprev=prev;\n\tlong fib_number=0;\n\tlong i;\n\tassert(n >=\
    \ 0);\n\tassert(n <= 31);\n\tassert(!(n == 0 || n == 1 || n == 2));\n\tassert(!(n%2\
    \ != 0 && n%2 != 1));\n\tfor(i=3; i>=2; i--) {\n\t\tfib_number+=prevprev;\n\t\t\
    prevprev=prev;\n\t\tprev=fib_number;\n\t\tfib_number+=i;\n\t}\n\treturn fib_number;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpb257ykwl: /tmp/tmpb257ykwl.cpp:21: long int fibfib(long int): Assertion
    `!(n == 0 || n == 1 || n == 2)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Write your code here\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpkow16hxb: /tmp/tmpkow16hxb.cpp:20: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fib = 0;\n    long fib1 = 1;\n    long fib2 = 2;\n    long fib3 = 1;\n\
    \    \n    while(n>0) {\n        fib = fib3;\n        fib3 = fib2 + fib1;\n  \
    \      fib2 = fib1;\n        fib1 = fib;\n        n--;\n    }\n    return fib3;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpdxfks85g: /tmp/tmpdxfks85g.cpp:32: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    return n > 1 ? fibfib(n-1) + fibfib(n-2) + fibfib(n-3) : n;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpu_nr7xoz: /tmp/tmpu_nr7xoz.cpp:20: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n <= 0) return 0;\n\tif (n <= 3) return 1;\n\treturn fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpzac4d9w0: /tmp/tmpzac4d9w0.cpp:23: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  long prev = 0;\n  long curr = 1;\n  long cur = n;\n  long\
    \ ans;\n  if (n == 1) {\n    ans = 1;\n  } else {\n    ans = fibfib(n-2);\n  }\n\
    \  while ( cur > 0) {\n    prev = cur;\n    cur = curr + prev;\n    curr += prev;\n\
    \    ans = ans - prev;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_7qe0iwn: /tmp/tmp_7qe0iwn.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n==0) return 0;\n    if(n==1) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<=1)\n        return n;\n    return fibfib(n-1)+fibfib(n-2)+fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp3dawi2q0: /tmp/tmp3dawi2q0.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong fiboval = (long) 0, currval = 1;\n\tfor (long i = 0; i < (long)n; i++)\
    \ {\n\t\tfiboval = fiboval + currval;\n\t\tcurrval = fiboval - currval;\n\t}\n\
    \treturn fiboval;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpq34znqsz: /tmp/tmpq34znqsz.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n<=1)\n\t\treturn 0;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpgvaayynh: /tmp/tmpgvaayynh.cpp:22: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long ans;\n    if (n == 0)\n        ans = 0;\n    else if (n == 1)\n    \
    \    ans = 1;\n    else if (n == 2)\n        ans = 1;\n    else\n        ans =\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    return ans;\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp6ew25_45: /tmp/tmp6ew25_45.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong a = 0, b = 1, c = 1;\n\twhile(n != 0) {\n\t\tc = a + b + c;\n\t\ta = b;\n\
    \t\tb = c;\n\t\tn -= 1;\n\t}\n\treturn b;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp1hr78mhg: /tmp/tmp1hr78mhg.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1)\n        return n;\n    if (n == 2)\n        return\
    \ 1;\n    long sum = 0;\n    long mid = (n - 1) >> 1;\n    sum = fibfib(n) + fibfib(mid)\
    \ + fibfib(mid + 1);\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpym9gie3y: /tmp/tmpym9gie3y.cpp:28: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132171
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// Write your code here\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\treturn\
    \ 1;\n\tif (n == 2)\n\t\treturn 1;\n\tif (n % 2 == 0)\n\t\treturn fibfib((n -\
    \ 1) + fibfib((n - 2)) + fibfib((n - 3)));\n\treturn fibfib((n - 1) + fibfib((n\
    \ - 2)) + fibfib((n - 3)));\n}\nint main() {\n    auto candidate = fibfib;\n \
    \   assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpgj3u4inf: /tmp/tmpgj3u4inf.cpp:30: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // code here\n    if(n<=0) return 0;\n    if(n==1) return 0;\n    if(n==2)\
    \ return 1;\n    long sum=0;\n    long n=n-1;\n    while(n>0){\n        if(n%2==0){\n\
    \            sum+=1;\n        }\n        n/=2;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_blx_eq0.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmp_blx_eq0.cpp:21:10: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   21 |     long n=n-1;\n      |          ^\n"
  stdout: ''
  timestamp: 1660132171
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n == 0)\n\t\treturn 0;\n\tif(n == 1)\n\t\treturn 0;\n\tif(n == 2)\n\t\treturn\
    \ 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n   \
    \ auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132172
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n        return\
    \ 0;\n    }\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132169
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  long x = 0;\n  if (n == 0) return 0;\n  if (n == 1) return 1;\n  if (n == 2)\
    \ return 1;\n  if (n == 3) return 1;\n  while (n < 1000) {\n    x += 1;\n    if\
    \ (x == n) return x;\n  }\n  long fx = x;\n  x += 1;\n  x = x - fx;\n  x += 1;\n\
    \  return x;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp5v5eir4o: /tmp/tmp5v5eir4o.cpp:34: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // code goes here\n    return 0L;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpjfts6xua: /tmp/tmpjfts6xua.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    if\
    \ (n == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpa_lwv9_0: /tmp/tmpa_lwv9_0.cpp:27: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n > 0);\n    if (n == 0)\n        return 0;\n    if (n == 1)\n   \
    \     return 1;\n    return fibfib(n-2) + fibfib(n-1);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp8rcs9m2g: /tmp/tmp8rcs9m2g.cpp:16: long int fibfib(long int): Assertion
    `n > 0'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) {\n        return 0;\n    } else if (n == 1) {\n        return\
    \ 1;\n    } else if (n == 2) {\n        return 1;\n    } else {\n        return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n    }\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpto9w1cka: /tmp/tmpto9w1cka.cpp:29: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert(n >= 0);\n\tif (n == 0 || n == 1)\n\t\treturn n;\n\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmprez1izfe: /tmp/tmprez1izfe.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    int a[n + 1] = {1}, b = 2, i;\n    for (i = 3; i <= n; i++) {\n        a[i]\
    \ = b + a[i-1];\n        b = a[i];\n    }\n    return a[n];\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp5w53k590: /tmp/tmp5w53k590.cpp:25: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 1)\n        return 0;\n    if (n == 2)\n        return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 2;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpjoe_i962: /tmp/tmpjoe_i962.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n == 1 || n == 0)\n\t\treturn 0;\n\tlong prev = fibfib(n-2);\n\tlong next\
    \ = fibfib(n-1);\n\treturn prev + next;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpvn7znd15: /tmp/tmpvn7znd15.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// Write your code here\n\tlong temp, sum = 0;\n\tassert(n > 0);\n\tif(n==1)\
    \ return 0;\n\tif(n==2) return 1;\n\tif(n==3) return 1;\n\tif(n==4) return 2;\n\
    \tif(n==5) return 3;\n\tif(n==6) return 5;\n\tif(n==7) return 8;\n\tif(n==8) return\
    \ 13;\n\tif(n==9) return 26;\n\tif(n==10) return 49;\n\tif(n==11) return 83;\n\
    \tif(n==12) return 127;\n\tif(n==13) return 256;\n\tif(n==14) return 513;\n\t\
    if(n==15) return 1028;\n\tif(n==16) return 2045;\n\tif(n==17) return 4076;\n\t\
    if(n==18) return 8089;\n\tif(n==19) return 16210;\n\tif(n==20) return 32737;\n\
    \tif(n==21) return 65521;\n\tif(n==22) return 131072;\n\tif(n==23) return 262144;\n\
    \tif(n==24) return 524287;\n\tif(n==25) return 1048576;\n\tif(n==26) return 2097152;\n\
    \tif(n==27) return 4194304;\n\tif(n==28) return 8388608;\n\tif(n==29) return 16777216;\n\
    \tif(n==30) return 33554432;\n\tif(n==31) return 67108864;\n\tif(n==32) return\
    \ 134217728;\n\tif(n==33) return 268435456;\n\tif(n==34) return 536870912;\n\t\
    if(n==35) return 1073741824;\n\tif(n==36) return -2147483648;\n\tif(n==37) return\
    \ -268435456;\n\tif(n==38) return -536870912;\n\tif(n==39) return -1073741824;\n\
    \tif(n==40) return -2147483648;\n\tif(n==41) return -268435456;\n\tif(n==42) return\
    \ -536870912;\n\tif(n==43) return -1073741824;\n\tif(n==44) return -2147483648;\n\
    \tif(n==45) return -268435456;\n\tif(n==46) return -536870912;\n\tif(n==47) return\
    \ -1073741824;\n\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp49w08785: /tmp/tmp49w08785.cpp:72: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132172
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n == 0) return 0;\n    if(n == 1) return 0;\n    if(n == 2) return 1;\n\
    \    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132172
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    int count = 0;\n    if (n == 1) {\n        count = 1;\n    }\n    else {\n\
    \        int mid = n / 2;\n        int mid2 = mid / 2;\n        int mid3 = mid\
    \ / 3;\n        int mid4 = mid / 4;\n        int mid5 = mid / 5;\n        int\
    \ mid6 = mid / 6;\n        int mid7 = mid / 7;\n        int mid8 = mid / 8;\n\
    \        int mid9 = mid / 9;\n        int mid10 = mid / 10;\n        int mid11\
    \ = mid / 11;\n        int mid12 = mid / 12;\n        int mid13 = mid / 13;\n\
    \        int mid14 = mid / 14;\n        int mid15 = mid / 15;\n        int mid16\
    \ = mid / 16;\n        int mid17 = mid / 17;\n        int mid18 = mid / 18;\n\
    \        int mid19 = mid / 19;\n        int mid20 = mid / 20;\n        int mid21\
    \ = mid / 21;\n        int mid22 = mid / 22;\n        int mid23 = mid / 23;\n\
    \        int mid24 = mid / 24;\n        int mid25 = mid / 25;\n        int mid26\
    \ = mid / 26;\n        int mid27 = mid / 27;\n        int mid28 = mid / 28;\n\
    \        int mid29 = mid / 29;\n        int mid30 = mid / 30;\n        int mid31\
    \ = mid / 31;\n        int mid32 = mid / 32;\n        int mid33 = mid / 33;\n\
    \        int mid34 = mid / 34;\n        int mid35 = mid / 35;\n        int mid36\
    \ = mid / 36;\n        int mid37 = mid / 37;\n        int mid38 = mid / 38;\n\
    \        int mid39 = mid / 39;\n        int mid40 = mid / 40;\n        int mid41\
    \ = mid / 41;\n        int mid42 = mid / 42;\n        int mid43 = mid / 43;\n\
    \        int mid44 = mid / 44;\n        int mid45 = mid / 45;\n        int mid46\
    \ = mid / 46;\n        int mid47 = mid / 47;\n        int mid48 = mid / 48;\n\
    \        int mid49 = mid / 49;\n        int mid50 = mid / 50;\n        int mid51\
    \ = mid / 51;\n        int mid52 = mid / 52;\n        int mid53 = mid / 53;\n\
    \        int mid54 = mid / 54;\n        int mid55 = mid / 55;\n        int mid56\
    \ = mid / 56;\n        int mid57 = m\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb77y__na.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpb77y__na.cpp:77:21: error: \u2018m\u2019 was not declared in this scope\n\
    \   77 |         int mid57 = m\n      |                     ^\n/tmp/tmpb77y__na.cpp:79:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   79 | int main() {\n      |            ^\n/tmp/tmpb77y__na.cpp:88:1: error:\
    \ expected \u2018}\u2019 at end of input\n   88 | }\n      | ^\n/tmp/tmpb77y__na.cpp:15:21:\
    \ note: to match this \u2018{\u2019\n   15 | long fibfib(long n) {\n      |  \
    \                   ^\n/tmp/tmpb77y__na.cpp:88:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n   88 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132172
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long sum = 0;\n    long i = 0;\n    while (i<n) {\n        if(i%2==0) {\n\
    \            sum = sum + i;\n        }\n        i=i+2;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp5609tfel: /tmp/tmp5609tfel.cpp:28: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132173
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 3)\n        return 0;\n    else\n        return fibfib(n-2) + fibfib(n-3)\
    \ + fibfib(n-4);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpt3bjlc27: /tmp/tmpt3bjlc27.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  if (n == 0 || n == 1)\n    return 0;\n  else if (n == 2)\n    return 1;\n \
    \ return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132174
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fib;\n    if(n==0 || n==1){\n        fib = 0;\n        return fib;\n\
    \    }\n    else{\n        fib = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n  \
    \      return fib;\n    }\n}\nint main() {\n    auto candidate = fibfib;\n   \
    \ assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n==0){\n\t\treturn 0;\n\t}\n\tif(n<2){\n\t\treturn 1;\n\t}\n\tlong fibo =\
    \ fibfib(n-1);\n\treturn fibo + fibo + fibo;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmphhayhn11: /tmp/tmphhayhn11.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n<3)\n    {\n        return 0;\n    }\n    else\n    {\n        long\
    \ temp;\n        temp = fibfib(n-1);\n        temp = temp + fibfib(n-2);\n   \
    \     temp = temp + fibfib(n-3);\n        return temp;\n    }\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpd6icbxov: /tmp/tmpd6icbxov.cpp:31: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  assert(n >= 0);\n  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n\
    \  if (n == 2)\n    return 1;\n  return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpk4q6rm1j: /tmp/tmpk4q6rm1j.cpp:28: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 1);\n    if (n <= 3) {\n        return n;\n    }\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmphnkaqvcn: /tmp/tmphnkaqvcn.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 1);\n    if (n == 0 || n == 1)\n        return 0;\n    if (n\
    \ == 2)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_q320wok: /tmp/tmp_q320wok.cpp:16: long int fibfib(long int): Assertion
    `n >= 1'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // Write your code here\n    if (n == 0)\n        return 0;\n    else if\
    \ (n == 1)\n        return 1;\n    \n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // code here\n    long result = 0;\n    long fibfib = (long)sqrt(n);\n  \
    \  long i;\n    for(i = 0; i < n; i++) {\n        result += fibfib;\n        fibfib\
    \ += fibfib - i;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp1gtqcz11: /tmp/tmp1gtqcz11.cpp:28: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // write your code here\n    long sum = n;\n    long fibfib = 0;\n    if\
    \ (n == 0 || n == 1) {\n        fibfib = 0;\n    }\n    if (n >= 2) {\n      \
    \  fibfib = (fibfib + fibfib(n - 1)) + fibfib(n - 2);\n    }\n    return fibfib;\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0xeajcz.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpk0xeajcz.cpp:23:40: error: \u2018fibfib\u2019 cannot be used as a function\n\
    \   23 |         fibfib = (fibfib + fibfib(n - 1)) + fibfib(n - 2);\n      | \
    \                                       ^\n/tmp/tmpk0xeajcz.cpp:23:57: error:\
    \ \u2018fibfib\u2019 cannot be used as a function\n   23 |         fibfib = (fibfib\
    \ + fibfib(n - 1)) + fibfib(n - 2);\n      |                                 \
    \                        ^\n"
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tlong fibfib(n);\n\treturn fibfib;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpmp59t12e: /tmp/tmpmp59t12e.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n == 0 || n == 1)\n\t\treturn 0;\n\tif (n >= 3)\n\t\treturn fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n\tif (n >= 2)\n\t\treturn fibfib(n-2) + fibfib(n-1);\n\
    \treturn 1;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpaz4n913t: /tmp/tmpaz4n913t.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long ans = 1;\n    for (int i = 3; i <= n; i++) {\n        ans = ans + fibfib(i-1);\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpbs4cwokf: /tmp/tmpbs4cwokf.cpp:25: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<=2) return 0;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpiu3blz4s: /tmp/tmpiu3blz4s.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 1);\n    if (n == 1) return 0;\n    if (n == 2) return 1;\n \
    \   return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto\
    \ candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp7xia1fle: /tmp/tmp7xia1fle.cpp:16: long int fibfib(long int): Assertion
    `n >= 1'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long res = 0;\n    long curr = 0;\n    long prev = 0;\n    long next = n;\n\
    \    while (curr < next) {\n        prev += next;\n        next = prev - curr;\n\
    \        res += next;\n        curr += next;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpd7toto0j: /tmp/tmpd7toto0j.cpp:30: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long sum = 0;\n    long a = 1;\n    long b = 0;\n    while (n) {\n      \
    \  if (n & 1) {\n            sum += a;\n        }\n        a *= b;\n        b\
    \ ^= 3;\n        n--;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpchr_oehp: /tmp/tmpchr_oehp.cpp:31: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n<=0)\n        return 0;\n    if (n==1)\n        return 0;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpli_vdc18: /tmp/tmpli_vdc18.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0)\n        return 0;\n    if (n == 1)\n  \
    \      return 1;\n    if (n == 2)\n        return 1;\n    if (n <= 3)\n      \
    \  return fibfib(n-1) + fibfib(n-2);\n    long result = 0;\n    long last_result\
    \ = fibfib(n-2);\n    for (int i = 0; i < n-3; i++) {\n        result = result\
    \ + last_result;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpvr448_u3: /tmp/tmpvr448_u3.cpp:35: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0 || n == 1)\n        return n;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp1c7pxs7k: /tmp/tmp1c7pxs7k.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132174
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert(n >= 0);\n\tlong prevprev = 0;\n\tif (n == 0)\n\t\treturn 0;\n\telse\
    \ if (n == 1)\n\t\treturn 1;\n\telse {\n\t\tlong x = 1;\n\t\tlong y = 1;\n\t\t\
    for (long i = 2; i <= n; i++) {\n\t\t\tx = (prevprev + x) + y;\n\t\t\tprevprev\
    \ = y;\n\t\t\ty = x;\n\t\t}\n\t\treturn y;\n\t}\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp_lb63fq1: /tmp/tmp_lb63fq1.cpp:35: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \  long sum = 0;\n  for(int i = 2; i <= n; i++) {\n    sum += i;\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp4kznjruo: /tmp/tmp4kznjruo.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n <= 2) return n;\n    long fibfib[2] = {0, 1};\n    long sum = 0;\n \
    \   for(int i = 0; i < n-1; i++){\n        sum += fibfib[i];\n    }\n    sum +=\
    \ fibfib[n-1];\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmp4i7rsec9: /tmp/tmp4i7rsec9.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // code goes here\n    return ((n < 2) || (n == 0))? n : fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmprhlci1i0: /tmp/tmprhlci1i0.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long a = 0, b = 1, c;\n    while (b < n) {\n        c = a;\n        a = b;\n\
    \        b = a + b;\n    }\n    return c;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp7wm0hsv9: /tmp/tmp7wm0hsv9.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpk9iqllvr: /tmp/tmpk9iqllvr.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 2) {\n        return n;\n    }\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp80ycafmi: /tmp/tmp80ycafmi.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<2)\n        return 0;\n    if(n==2)\n        return 1;\n    return fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 3) return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp0cafbv13: /tmp/tmp0cafbv13.cpp:22: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif(n<2) return n;\n\tlong a=0,b=1,s=0;\n\twhile(n>3){\n\t\ta+=b;\n\t\tn-=3;\n\
    \t\tb+=s;\n\t\ts+=a;\n\t}\n\treturn a;\n}\nint main() {\n    auto candidate =\
    \ fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n\
    \    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n   \
    \ assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n  \
    \  assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpaaqwk30m: /tmp/tmpaaqwk30m.cpp:28: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0 || n == 1)\n        return n;\n    if (n == 2)\n        return\
    \ 1;\n    return (fibfib(n-1) + fibfib(n-2) + fibfib(n-3));\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmph31a2co1: /tmp/tmph31a2co1.cpp:25: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long fibfib[n] = {0};\n    fibfib[0] = 0;\n    fibfib[1] = 0;\n    fibfib[2]\
    \ = 1;\n    for(int i = 3; i <= n; i++) {\n        fibfib[i] = fibfib[i-1] + fibfib[i-2]\
    \ + fibfib[i-3];\n    }\n    return fibfib[n];\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<2) {\n        return 0;\n    }\n    long p1 = fibfib(n-1);\n    long\
    \ p2 = fibfib(n-2);\n    long p3 = fibfib(n-3);\n    return p1*p2*p3;\n}\nint\
    \ main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpoqbvap_v: /tmp/tmpoqbvap_v.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n==0) return 0;\n    if (n==1) return 1;\n    return fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    long first = 0, second = 1, sum = 0;\n    while (n >= 2) {\n        sum +=\
    \ first;\n        sum += second;\n        first *= 2;\n        second *= 3;\n\
    \        n--;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpq2uqk1l_: /tmp/tmpq2uqk1l_.cpp:30: int main(): Assertion `candidate((5))
    == (4)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    assert(n >= 0);\n    if (n == 0 || n == 1)\n        return 0;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp41zzoh5z: /tmp/tmp41zzoh5z.cpp:16: long int fibfib(long int): Assertion
    `n >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n < 2)\n        return n;\n    if (n == 0)\n        return 0;\n    if\
    \ (n == 1)\n        return 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp41et2mxd: /tmp/tmp41et2mxd.cpp:26: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n<0) return 0;\n    if(n==0) return 0;\n    if(n==1) return 1;\n    return\
    \ fibfib(n-2) + fibfib(n-1);\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpw5n9zkgb: /tmp/tmpw5n9zkgb.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    // write your code here\n    \n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpqqphflsg: /tmp/tmpqqphflsg.cpp:21: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tassert(n >= 0 && n <= 2);\n\tif (n == 0)\n\t\treturn 0;\n\tif (n == 1)\n\t\t\
    return 1;\n\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n\
    \    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmp7lzmp24o: /tmp/tmp7lzmp24o.cpp:16: long int fibfib(long int): Assertion
    `n >= 0 && n <= 2'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n <= 1) {\n        return 0;\n    }\n    long prev = 0;\n    long current\
    \ = 1;\n    for (int i = 3; i < n; i++) {\n        prev = current;\n        current\
    \ = current + prev;\n    }\n    return current;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpztegk73r: /tmp/tmpztegk73r.cpp:32: int main(): Assertion `candidate((8))
    == (24)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// base case\n\tif(n <= 3)\n\t\treturn 0;\n\tlong res = fibfib(n-1) + fibfib(n-2)\
    \ + fibfib(n-3);\n\treturn res;\n}\nint main() {\n    auto candidate = fibfib;\n\
    \    assert(candidate((2)) == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5))\
    \ == (4));\n    assert(candidate((8)) == (24));\n    assert(candidate((10)) ==\
    \ (81));\n    assert(candidate((12)) == (274));\n    assert(candidate((14)) ==\
    \ (927));\n}\n"
  status: Exception
  stderr: 'tmpnznexewy: /tmp/tmpnznexewy.cpp:24: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n <= 0) return 0;\n\tif (n == 1) return 1;\n\tif (n == 2) return 2;\n\t\
    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmparef8gqx: /tmp/tmparef8gqx.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    // assert((int)n >= 0);\n    if(n == 0) return 0;\n    if(n == 1) return\
    \ 1;\n    return fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n \
    \   auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1))\
    \ == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132175
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    // Write your code here\nif(n<0){\n    return -1;\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo6s5vxyp.cpp: In function \u2018long int fibfib(long int)\u2019\
    :\n/tmp/tmpo6s5vxyp.cpp:20:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   20 | int main() {\n      |            ^\n/tmp/tmpo6s5vxyp.cpp:29:1:\
    \ error: expected \u2018}\u2019 at end of input\n   29 | }\n      | ^\n/tmp/tmpo6s5vxyp.cpp:15:21:\
    \ note: to match this \u2018{\u2019\n   15 | long fibfib(long n) {\n      |  \
    \                   ^\n/tmp/tmpo6s5vxyp.cpp:29:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n   29 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if (n == 0) return 0;\n    if (n == 1) return 1;\n    if (n == 2) return\
    \ 1;\n    if (n == 3) return 2;\n    long res = fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    \    return res;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmp_84s0na_: /tmp/tmp_84s0na_.cpp:26: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132175
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \tif (n <= 1)\n\t\treturn 0;\n\telse\n\t\treturn fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n\
    }\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2)) == (1));\n\
    \    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8))\
    \ == (24));\n    assert(candidate((10)) == (81));\n    assert(candidate((12))\
    \ == (274));\n    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpj3am418h: /tmp/tmpj3am418h.cpp:23: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132119
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \    if(n==0) return 0;\n    if(n==1) return 1;\n    if(n==2) return 1;\n    return\
    \ fibfib(n-1) + fibfib(n-2) + fibfib(n-3);\n}\nint main() {\n    auto candidate\
    \ = fibfib;\n    assert(candidate((2)) == (1));\n    assert(candidate((1)) ==\
    \ (0));\n    assert(candidate((5)) == (4));\n    assert(candidate((8)) == (24));\n\
    \    assert(candidate((10)) == (81));\n    assert(candidate((12)) == (274));\n\
    \    assert(candidate((14)) == (927));\n}\n"
  status: Exception
  stderr: 'tmpli3g7ltf: /tmp/tmpli3g7ltf.cpp:24: int main(): Assertion `candidate((1))
    == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660132176
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// The FibFib number sequence\
    \ is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n\
    // fibfib(0) == 0\n// fibfib(1) == 0\n// fibfib(2) == 1\n// fibfib(n) == fibfib(n-1)\
    \ + fibfib(n-2) + fibfib(n-3).\n// Please write a function to efficiently compute\
    \ the n-th element of the fibfib number sequence.\n// >>> fibfib((1))\n// (0)\n\
    // >>> fibfib((5))\n// (4)\n// >>> fibfib((8))\n// (24)\nlong fibfib(long n) {\n\
    \t// write your code in C++11\n\t// use the concept of std::vector to store the\
    \ fibfib(n) sequence.\n\t// you can use vector to store all the values of fibfib(n)\
    \ in a vector and use std::accumulate to compute fibfib(n)\n\t// you dont need\
    \ to store the entire value of fibfib(n) in a vector as the fibfib(n) sequence\
    \ is going to be huge.\n\t// you can use a map to store values of fibfib(n) at\
    \ different indexes and use std::accumulate to compute fibfib(n)\n\t// but remember\
    \ std::map is sorted and requires random access for accessing the values.\n\t\
    // use vector if you  cannot use std::map and want to do an efficient computation\n\
    \treturn 0;\n}\nint main() {\n    auto candidate = fibfib;\n    assert(candidate((2))\
    \ == (1));\n    assert(candidate((1)) == (0));\n    assert(candidate((5)) == (4));\n\
    \    assert(candidate((8)) == (24));\n    assert(candidate((10)) == (81));\n \
    \   assert(candidate((12)) == (274));\n    assert(candidate((14)) == (927));\n\
    }\n"
  status: Exception
  stderr: 'tmpk11lsufm: /tmp/tmpk11lsufm.cpp:27: int main(): Assertion `candidate((2))
    == (1)'' failed.

    '
  stdout: ''
  timestamp: 1660132176
