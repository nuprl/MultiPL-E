language: cpp
name: HumanEval_122_add_elements
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here.\n    long res = 0;\n    if (arr.size() >= k) {\n        res += arr[k\
    \ - 1];\n    }\n    for(int i = 0; i < arr.size() - k; i++) {\n        res +=\
    \ arr[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp39g1oioo: /tmp/tmp39g1oioo.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (auto it = arr.begin(); it != arr.begin() + k; ++it) {\n       \
    \ sum += *it;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvs0ycdex: /tmp/tmpvs0ycdex.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here\n    if(arr.size() < 1 || arr.size() > 100 || k < 1 || k > arr.size())\
    \ {\n        return -1;\n    }\n    long sum = 0;\n    int left = 1;\n    int\
    \ right = 0;\n    int index = k;\n    while(left <= right) {\n        if(left\
    \ == right) {\n            sum += arr[index];\n        } else {\n            sum\
    \ += (arr[index] + arr[right]);\n            sum += (arr[index] - (arr[left] +\
    \ arr[right]));\n        }\n        if(index == 0) break;\n        index--;\n\
    \        right--;\n        left++;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4sn5kiq3: /tmp/tmp4sn5kiq3.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ != 0);\n    long sum = 0;\n    for(int i = 0; i < (int)arr.size(); i++) {\n\
    \        if((int)arr.at(i) < 10) {\n            sum += (int)arr.at(i);\n     \
    \   }\n        if((int)arr.at(i) < 100 && (int)arr.at(i) < 1000) {\n         \
    \   sum += (int)arr.at(i);\n        }\n        if((int)arr.at(i) < 1000) {\n \
    \           sum += (int)arr.at(i);\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_splx566: /tmp/tmp_splx566.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(k <=\
    \ arr.size());\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n      \
    \  sum += arr[i];\n    }\n    for (int i = k; i < arr.size(); i++) {\n       \
    \ sum += arr[i] - arr[k];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpeczvc_9a: /tmp/tmpeczvc_9a.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // code here\n\
    \    if(k<0)\n        return 0;\n    long long sum=0;\n    for(long i=0;i<k;++i)\n\
    \        sum += arr[i];\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp47pqaka6: /tmp/tmp47pqaka6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    long sum = 0;\n    for(int i = 0; i < k; i++) {\n        sum += arr[i];\n\
    \    }\n    for(int i = 0; i < arr.size(); i++) {\n        if(i % k == 0) {\n\
    \            sum += arr[i];\n        }\n    }\n    ans = sum;\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdeduf8x9: /tmp/tmpdeduf8x9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    std::vector<long> digits(k+1);\n    for (long num: arr) {\n        long\
    \ mod = num % 10;\n        digits[mod] += num / 10;\n    }\n\n    for (long i\
    \ = 0; i <= k; ++i) {\n        long digit = digits[i];\n        if (digit < 2)\
    \ {\n            ans += digit;\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp25fvjd5k: /tmp/tmp25fvjd5k.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    long result = 0;\n    long pos = 0;\n    for (auto it = arr.begin();\
    \ it != arr.begin() + k; ++it) {\n        result += (*it);\n        if (result\
    \ > 1000000000 || result < -10000) {\n            return -1;\n        }\n    \
    \    pos++;\n    }\n    return result % 1000000000;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_dmyhydx: /tmp/tmp_dmyhydx.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here\n    \n    return -1LL;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp0u0u3dep: /tmp/tmp0u0u3dep.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    return 0;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpjg9uawyc: /tmp/tmpjg9uawyc.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::sort(arr.begin(),\
    \ arr.end());\n    if (k == 0 || arr.size() <= k) return arr[0];\n    if (k <=\
    \ 0) return 0;\n    long sum = 0;\n    for (long i = arr.size(); i > 0; i--) {\n\
    \        long cur_sum = sum + arr[i - 1];\n        if (cur_sum / 10 < k) break;\n\
    \        sum = cur_sum;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmplrdavr9w: /tmp/tmplrdavr9w.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here.\n    long ans = 0;\n    for (long i = k; i < arr.size(); i++) {\n\
    \        if (arr[i] > 0)\n            ans += arr[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmppmcqycyi: /tmp/tmppmcqycyi.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ret =\
    \ 0;\n    long carry = 0;\n    long len = arr.size();\n    for (long i = 0; i\
    \ < k; i++) {\n        ret += arr[i] + carry;\n        carry = ret + carry + 1;\n\
    \        ret %= 100;\n    }\n    return ret + carry;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3gsucb43: /tmp/tmp3gsucb43.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n        long sum\
    \ = 0;\n        long max = 0;\n        for (long i = 0; i < k; i++) {\n      \
    \      sum += arr[i];\n            if (sum >= 10) {\n                sum += 10\
    \ - sum;\n                max += sum / 10;\n                sum -= max * 10;\n\
    \                max += sum / 10;\n            }\n        }\n        return max;\n\
    \    }\n</code>\n<|/ a tags=dynamic-programming,algorithm,c++ |>\n<| a tags=dynamic-programming,algorithm,c++\
    \ |>\n<code>\nlong long long sum(vector<int> a, long long k) {\n    vector<long>\
    \ d(a.size()), temp(d);\n\n    long long res = 0;\n    temp[0] = a[0];\n    for(int\
    \ i = 1; i < a.size(); ++i) {\n        temp[i] = temp[i - 1] + a[i];\n       \
    \ if(temp[i] + k > 100) {\n            res++;\n        }\n        else {\n   \
    \         d [i] = temp[i] + k;\n            if(temp[i] > 100) {\n            \
    \    res++;\n            }\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpikt_8ncb.cpp:25:1: error: expected unqualified-id before \u2018\
    <\u2019 token\n   25 | </code>\n      | ^\n"
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; ++i) {\n        sum += arr[i];\n    }\n    for\
    \ (long i = k; i < arr.size(); ++i) {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpiknv1vbr: /tmp/tmpiknv1vbr.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::stack<long>\
    \ s; //Used to store first k elements\n    long ans = 0; //Sum of the first k\
    \ elements\n    assert(arr.size() >= k);\n    for(long i = 0, end = k; i < end;\
    \ i++) {\n        assert(arr[i] >= 0);\n        if(s.empty() || arr[i] >= s.top())\
    \ {\n            s.push(arr[i]);\n        }else {\n            ans += s.top();\n\
    \            s.pop();\n            s.push(arr[i]);\n        }\n    }\n    if(!s.empty())\
    \ ans += s.top();\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvqc8hpve: /tmp/tmpvqc8hpve.cpp:16: long int add_elements(std::vector<long
    int>, long int): Assertion `arr[i] >= 0'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::vector<long>\
    \ v;\n    // Create a vector with k+1 size\n    v.reserve(k + 1);\n    // Initialize\
    \ first k elements of v\n    for (long i = 0; i < k; i++)\n        v.push_back(arr[i]);\n\
    \    // Initialize v[k] by 0\n    v.push_back(arr[k]);\n    // Initialize sum\
    \ by 0\n    long sum = 0;\n    // Traverse the vector from k till the end\n  \
    \  for (long i = k + 1; i < arr.size(); i++) {\n        // If the current element\
    \ of vector is less than or equal to 10 and sum of previous elements\n       \
    \ // is greater than 9, then increment sum\n        if (arr[i] >= 10 && sum +\
    \ arr[i] > 9) {\n            sum += arr[i] - 10;\n        } else {\n         \
    \   sum += arr[i];\n        }\n        // Store the element of vector\n      \
    \  v.push_back(arr[i]);\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpafhc_47i: /tmp/tmpafhc_47i.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0);\n    assert(k <= arr.size());\n    long ret = 0;\n    for (long i = 0;\
    \ i < k; i++) {\n        ret = ret + arr[i];\n    }\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1l73og6f: /tmp/tmp1l73og6f.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    // Sort the array \n    // std::sort(arr.begin(), arr.end());\n    sort(arr.begin(),\
    \ arr.end());\n    // Add the element to the answer if the sum of first k - 1\
    \ digits is less than or equal to \n    // 10^(k-1) \n    for (int i = 0; i <\
    \ (k - 1); ++i) {\n        ans += arr[i];\n    }\n    ans += arr[k - 1];\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpp5yfz2n2: /tmp/tmpp5yfz2n2.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long temp = 0, temp2 = 0;\n    long len = arr.size();\n    if (k > len\
    \ || k == 0) {\n        return 0;\n    }\n    \n    long i = k;\n    while (i\
    \ >= 0) {\n        sum = sum + (arr[k] + temp);\n        temp = temp*10 + arr[k]\
    \ - temp2;\n        k += i;\n        i = k - 1;\n    }\n    \n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    long curr = 0;\n    long sum = 0;\n    for (size_t i = 0; i < k; ++i)\
    \ {\n        curr = arr[i];\n        assert(curr > 0);\n        sum += curr;\n\
    \    }\n    for (size_t i = 0; i < k; ++i) {\n        ans += (sum % 10);\n   \
    \     sum /= 10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpy6_xz6ro: /tmp/tmpy6_xz6ro.cpp:17: long int add_elements(std::vector<long
    int>, long int): Assertion `curr > 0'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  long last_two_digits\
    \ = sum % 10;\n  sum = sum / 10;\n  sum += last_two_digits;\n  return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphdkpsd0i: /tmp/tmphdkpsd0i.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (auto it = arr.begin(); it != arr.end(); it++) {\n        long val\
    \ = *it;\n        if (val < 0) {\n            val *= -1;\n        }\n        if\
    \ (val <= 9) {\n            sum += val;\n        }\n    }\n    return sum + add_elements(arr.subvector(arr.begin()\
    \ + k), k - 1);\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg3xsrqqp.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpg3xsrqqp.cpp:22:35: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018subvector\u2019; did you mean \u2018vector\u2019\
    ?\n   22 |     return sum + add_elements(arr.subvector(arr.begin() + k), k - 1);\n\
    \      |                                   ^~~~~~~~~\n      |                \
    \                   vector\n"
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    long ans = 0;\n    int count = 0;\n    for(int i=0; i<k; i++)\
    \ {\n        if(arr[i]%10==0) {\n            count++;\n        }\n        if(count>2)\
    \ {\n            ans+=arr[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6fhtbixi: /tmp/tmp6fhtbixi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    long sum = 0;\n    \n    for(int i = 0; i < k; i++) {\n     \
    \   sum += arr[i];\n    }\n    \n    for(int i = k; i < arr.size(); i++) {\n \
    \       if(i % 2 == 0 && sum % 10 != 0) {\n            sum += arr[i - 2];\n  \
    \      } else if(i % 2 != 0 && sum % 10 == 0) {\n            sum += arr[i - 1];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1mwilgjf: /tmp/tmp1mwilgjf.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    // The size of the prefix with two digits of arr[k]\n    long p = 2\
    \ * k;\n    // The size of the prefix with 3 digits of arr[k]\n    long q = 2\
    \ * q;\n    while (k != 0 && p < arr.size() && q < arr.size()) {\n        // If\
    \ two digits from arr[k] are already added, add the 3 digits\n        if (ans\
    \ + arr[p] > ans + arr[q]) {\n            ans += arr[q];\n            q += q;\n\
    \        } else {\n            ans += arr[p];\n            p += p;\n        }\n\
    \        k -= 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmptijez28t: /tmp/tmptijez28t.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long ans = 0, first_k_sum = 0;\n    for(long i = 0; i < k; ++i){\n\
    \        ans += arr[i];\n        first_k_sum += arr[i];\n    }\n    for(long i\
    \ = k; i < arr.size(); ++i){\n        ans += first_k_sum;\n        first_k_sum\
    \ += arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpd33iik65: /tmp/tmpd33iik65.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101979
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ != 0);\n    assert(k <= arr.size());\n    long sum = 0;\n    for (long i = 1;\
    \ i < arr.size() - k + 1; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyexx9nq6: /tmp/tmpyexx9nq6.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0, x = 0, y = 0, last = 0;\n    if (arr.size() <= k) {\n        return 0;\n\
    \    }\n    sort(arr.begin(), arr.end());\n    for (auto ele : arr) {\n      \
    \  x = ele;\n        y = last + ele;\n        last = y;\n        if (x % 10 ==\
    \ y % 10) {\n            ans += 1;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpji_q1fcq: /tmp/tmpji_q1fcq.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long ans = 0;\n    long sum1 = sum + arr[0];\n    long sum2 = sum1 +\
    \ arr[1];\n    for(long i = 2; i < arr.size(); i++) {\n        long sum3 = sum2\
    \ + arr[i];\n        ans = max(ans, sum3);\n        sum2 = sum3;\n    }\n    for(long\
    \ i = k; i < arr.size(); i++) {\n        long sum3 = sum + arr[i];\n        sum1\
    \ = max(sum1, sum3);\n        sum2 = sum3;\n    }\n    sum1 = max(sum1, sum2);\n\
    \    ans = max(ans, sum1);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpd0pyb2he.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpd0pyb2he.cpp:18:15: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   18 |    \
    \     ans = max(ans, sum3);\n      |               ^~~\n      |              \
    \ std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n        \
    \         from /tmp/tmpd0pyb2he.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpd0pyb2he.cpp:23:16: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   23 |         sum1 = max(sum1, sum3);\n      |                ^~~\n      |\
    \                std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd0pyb2he.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpd0pyb2he.cpp:26:12: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   26 |     sum1 = max(sum1, sum2);\n      |            ^~~\n      |        \
    \    std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n      \
    \           from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n     \
    \            from /tmp/tmpd0pyb2he.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // code here\n\
    \    long ans = 0;\n    long sum = 0;\n    long temp = 0;\n    long first = arr[0];\n\
    \    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    for (long\
    \ i = 0; i < k; i++) {\n        temp = sum - arr[i];\n        sum += arr[i];\n\
    \        while (temp > 9) {\n            sum += first;\n            temp -= 10;\n\
    \        }\n        ans += sum;\n    }\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzwp3hwr0: /tmp/tmpzwp3hwr0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (arr.size()\
    \ == 0) return 0;\n\n    long long result = 0;\n\n    for (long i = 0; i < k;\
    \ ++i) {\n        result += (arr[i] % 10);\n        arr[i] /= 10;\n    }\n\n \
    \   for (long i = k; i < arr.size(); ++i) {\n        result += (arr[i] % 10);\n\
    \        arr[i] /= 10;\n    }\n\n    return result;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5tfi14yy: /tmp/tmp5tfi14yy.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    \n    return 0;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpht0m805f: /tmp/tmpht0m805f.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0, counter = 0;\n    for (std::size_t i = 0; i < arr.size();\
    \ i++) {\n        while (counter >= 2) {\n            sum += arr[i];\n       \
    \     counter -= 2;\n        }\n        sum += arr[i];\n        counter++;\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpcy6z5oxe: /tmp/tmpcy6z5oxe.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for (long i = 0; i < k; i++)\n        ans += arr[i];\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpefr7dhax: /tmp/tmpefr7dhax.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0);\n    assert(k > 0);\n    long ans = arr[0];\n    for (size_t i = 1; i\
    \ < arr.size(); i++) {\n        long val = arr[i];\n        if (val / 10 % 10\
    \ < k % 10)\n            ans += val;\n        else\n            ans -= val;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmnk56pw4: /tmp/tmpmnk56pw4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    long sum = 0;\n    long firstTwoDigitSum = 0;\n    long sumOfSumsAboveFirstDigit\
    \ = 0;\n    for(long i = 0; i < k; i++)\n    {\n        firstTwoDigitSum += arr[i];\n\
    \        sumOfSumsAboveFirstDigit += firstTwoDigitSum;\n    }\n    for(long i\
    \ = k; i < arr.size(); i++)\n    {\n        sum += arr[i];\n    }\n    sum -=\
    \ sumOfSumsAboveFirstDigit;\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_cqqnd1s: /tmp/tmp_cqqnd1s.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k > arr.size())\
    \ k = arr.size();\n    long s = 0;\n    for (long i = 0; i < k; i++) {\n     \
    \   s += arr[i];\n    }\n    while (k <= arr.size() && arr.back() >= s) {\n  \
    \      arr.pop_back();\n        k--;\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        s += arr[i];\n        if (s <= 9) {\n            return s;\n\
    \        }\n        s -= 10;\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpijg1e40v: /tmp/tmpijg1e40v.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    for\
    \ (long i = k; i < arr.size(); i++) {\n        sum += arr[i] - 10*i;\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpu89jnyer: /tmp/tmpu89jnyer.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // code here\n\
    \    return 0;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp2eew8p3t: /tmp/tmp2eew8p3t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr.at(i) >= 100000000\
    \ || arr.at(i) < 0) {\n            continue;\n        }\n        while(ans < 10\
    \ && (ans + arr.at(i)) >= 100000000) {\n            ans += 10;\n        }\n  \
    \      if(ans < 10 && (ans + arr.at(i)) >= 1000000) {\n            ans += 100;\n\
    \        }\n        if(ans < 10 && (ans + arr.at(i)) >= 10000) {\n           \
    \ ans += 1000;\n        }\n        if(ans < 10 && (ans + arr.at(i)) >= 100) {\n\
    \            ans += 10000;\n        }\n        if(ans < 10 && (ans + arr.at(i))\
    \ >= 1000) {\n            ans += 100000;\n        }\n        if(ans < 10 && (ans\
    \ + arr.at(i)) >= 10000) {\n            ans += 100000;\n        }\n        if(ans\
    \ < 10 && (ans + arr.at(i)) >= 100000) {\n            ans += 1000000;\n      \
    \  }\n        if(ans < 10 && (ans + arr.at(i)) >= 1000000) {\n            ans\
    \ += 10000000;\n        }\n        if(ans < 10 && (ans + arr.at(i)) >= 10000000)\
    \ {\n            ans += 1000000000;\n        }\n        if(ans < 10 && (ans +\
    \ arr.at(i)) >= 1000000000) {\n            ans += 10000000000;\n        }\n  \
    \      if(ans < 10 && (ans + arr.at(i)) >= 10000000000) {\n            ans +=\
    \ 100000000000;\n        }\n        if(ans < 10 && (ans + arr.at(i)) >= 100000000000)\
    \ {\n            ans += 1000000000000;\n        }\n        if(ans < 10 && (ans\
    \ + arr.at(i)) >= 1000000000000) {\n            ans += 10000000000000;\n     \
    \   }\n        if(ans < 10 && (ans + arr.at(i)) >= 10000000000000) {\n       \
    \     ans += 100000000000000;\n        }\n        if(ans < 10 && (ans + arr.at(i))\
    \ >= 100000000000000) {\n            ans += 1000000000000000;\n        }\n   \
    \     if(ans < 10 && (ans + arr.at(i)) >= 1000000000000000) {\n            ans\
    \ += 10000000000000000;\n        }\n        if(ans < 10 && (ans + arr.at(i)) >=\
    \ 1000000000000000) {\n            ans += 100000000000000000;\n        }\n   \
    \     if(ans < 10 && (ans + arr.at(i)) >= 10000000000000000) {\n            ans\
    \ += 100000000000000000;\n        }\n        if(ans < 10 && (ans + arr.at(i))\
    \ >= 10000000000000000) {\n            ans += 1000000000000000000;\n        }\n\
    \        if(ans < 10 && (ans + arr.at\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ldiyh5b.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0ldiyh5b.cpp:74:29: error: invalid operands\
    \ of types \u2018long int\u2019 and \u2018<unresolved overloaded function type>\u2019\
    \ to binary \u2018operator+\u2019\n   74 |         if(ans < 10 && (ans + arr.at\n\
    \      |                         ~~~ ^ ~~~~~~\n      |                       \
    \  |         |\n      |                         long int  <unresolved overloaded\
    \ function type>\n/tmp/tmp0ldiyh5b.cpp:74:37: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n   74 |         if(ans < 10 && (ans + arr.at\n      | \
    \                       ~            ^\n      |                              \
    \       )\n   75 | }\n      | ~                                    \n/tmp/tmp0ldiyh5b.cpp:74:37:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   74 |         if(ans\
    \ < 10 && (ans + arr.at\n      |           ~                         ^\n     \
    \ |                                     )\n   75 | }\n      | ~              \
    \                      \n/tmp/tmp0ldiyh5b.cpp:75:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   75 | }\n      | ^\n/tmp/tmp0ldiyh5b.cpp:76:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   76 | int main() {\n      |            ^\n/tmp/tmp0ldiyh5b.cpp:83:1: error:\
    \ expected \u2018}\u2019 at end of input\n   83 | }\n      | ^\n/tmp/tmp0ldiyh5b.cpp:11:50:\
    \ note: to match this \u2018{\u2019\n   11 | long add_elements(std::vector<long>\
    \ arr, long k) {\n      |                                                  ^\n\
    /tmp/tmp0ldiyh5b.cpp:83:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n   83 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660101977
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    // Your code goes here\n    // Your code goes here\n    // Your\
    \ code goes here\n    // Your code goes here\n    // Your code goes here\n   \
    \ // Your code goes here\n    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    // Your code\
    \ goes here\n    // Your code goes here\n    // Your code goes here\n    // Your\
    \ code goes here\n    // Your code goes here\n    // Your code goes here\n   \
    \ // Your code goes here\n    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    // Your code\
    \ goes here\n    // Your code goes here\n    // Your code goes here\n    // Your\
    \ code goes here\n    // Your code goes here\n    // Your code goes here\n   \
    \ // Your code goes here\n    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    // Your code\
    \ goes here\n    // Your code goes here\n    // Your code goes here\n    // Your\
    \ code goes here\n    // Your code goes here\n    // Your code goes here\n   \
    \ // Your code goes here\n    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    // Your code\
    \ goes here\n    // Your code goes here\n    // Your code goes here\n    // Your\
    \ code goes here\n    // Your code goes here\n    // Your code goes here\n   \
    \ // Your code goes here\n    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    // Your code\
    \ goes here\n    // Your code goes here\n    // Your code goes here\n    // Your\
    \ code goes here\n    // Your code goes here\n    // Your code goes here\n   \
    \ // Your code goes here\n    // Your code goes here\n    // Your code goes here\n\
    \    // Your code goes here\n    // Your code goes here\n    // Your code goes\
    \ here\n    // Your code goes here\n    // Your code goes here\n    // Your code\
    \ goes here\n    // Your \n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmplb962bgk: /tmp/tmplb962bgk.cpp:101: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i : arr) {\n        sum += i;\n        if (sum > 9) {\n  \
    \          sum -= 10;\n        }\n    }\n    while (sum > 9) {\n        sum -=\
    \ 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpbg6dclcx: /tmp/tmpbg6dclcx.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    if (k == 0)\n        return arr[0] + arr[1];\n    \n    std::vector<long>\
    \ max_digits(k);\n    for (auto v : arr)\n        max_digits[v / 100 % 10] +=\
    \ 1;\n    \n    for (auto i = 0; i < max_digits.size(); ++i) {\n        long v\
    \ = max_digits[i];\n        if (i == 0) {\n            ans += v;\n        } else\
    \ if (v > 1) {\n            ans += arr[i * 2] + arr[i * 2 + 1];\n            ans\
    \ %= 10;\n        } else if (v == 1) {\n            ans += arr[i];\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmppc86by3f: /tmp/tmppc86by3f.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  // code here\n\
    \  assert(arr.size() >= 1 && k <= arr.size());\n\n  long sum = 0;\n\n  for (int\
    \ i = 0; i < k; i++)\n  {\n    sum += arr[i];\n  }\n\n  for (int i = k; i < arr.size();\
    \ i++)\n  {\n    sum += arr[i] - 10 * arr[i-k];\n  }\n  \n  return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpeo8mlzvx: /tmp/tmpeo8mlzvx.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101978
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    return sum(arr);\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxx4sia8l.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxx4sia8l.cpp:13:12: error: \u2018sum\u2019 was\
    \ not declared in this scope\n   13 |     return sum(arr);\n      |          \
    \  ^~~\n"
  stdout: ''
  timestamp: 1660101979
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::vector<long>::iterator\
    \ it;\n    long ret = 0;\n    if (arr.size() <= k) {\n        return ret;\n  \
    \  }\n    for (it = arr.begin(); it != arr.begin() + k; ++it) {\n        ret +=\
    \ *it % 10;\n    }\n    return ret + add_elements(arr.begin() + k + 1, k - k);\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpny9o22ht.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpny9o22ht.cpp:20:47: error: could not convert\
    \ \u2018arr.std::vector<long int>::begin().__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >::operator+(k).__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >::operator+(1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  20 |     return ret + add_elements(arr.begin() + k + 1, k - k);\n      |  \
    \                             ~~~~~~~~~~~~~~~~^~~\n      |                   \
    \                            |\n      |                                      \
    \         __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660101980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k <= 0)\n\
    \        return 0;\n    long ans = arr[0] + arr[1];\n    for (int i = 2; i <=\
    \ k; i++) {\n        ans += arr[i];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpqrdir_j8: /tmp/tmpqrdir_j8.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::ios_base::sync_with_stdio(false);\n\
    \    // Your code here\n    long ans = 0;\n    long n = arr.size();\n    long\
    \ max_two = INT_MAX / 10;\n    long mins = n * max_two;\n    long sum = 0;\n \
    \   long count = 0;\n    for (long i = 0; i < n; i++) {\n        if (i < k) sum\
    \ = sum + arr[i];\n        else sum += arr[i] - mins;\n        count++;\n    \
    \    if (count % 2 == 0 && count < mins) {\n            ans = sum;\n         \
    \   mins = count;\n            sum = 0;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_7khgc53: /tmp/tmp_7khgc53.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k == 0)\n\
    \        return arr[0];\n    long result = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        result += arr[i];\n    }\n    for (int i = k; i < arr.size(); i++)\
    \ {\n        result += arr[i];\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpq9szaya1: /tmp/tmpq9szaya1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < k; ++i) {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzuz5th7a: /tmp/tmpzuz5th7a.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum=0;\n\
    \    long min;\n    long max;\n    long sum1=0;\n    // Sort the array in non-decreasing\
    \ order\n    std::sort(arr.begin(), arr.end());\n    // Sort the first k elements\
    \ of the array in non-decreasing order\n    std::sort(arr.begin(), arr.begin()\
    \ + k);\n    // Calculate the sum\n    for(int i=0; i<k; ++i) {\n        sum =\
    \ sum + arr[i];\n    }\n    // Find minimum value in the first k elements of the\
    \ array\n    min=arr[0];\n    for(int i=1; i<k; ++i) {\n        if(arr[i] < min)\
    \ {\n            min = arr[i];\n        }\n    }\n    // Find maximum value in\
    \ the first k elements of the array\n    max=arr[0];\n    for(int i=1; i<k; ++i)\
    \ {\n        if(arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    // Calculate sum for first k elements\n    for(int i=0; i<k; ++i) {\n   \
    \     sum1 = sum1 + arr[i];\n    }\n    // Calculate sum for rest of the elements\
    \ of the array\n    for(int i=0; i<arr.size(); ++i) {\n        sum = sum + arr[i];\n\
    \    }\n    // Calculate the sum for first k elements of the array\n    sum1 =\
    \ sum + sum1;\n    // Calculate the sum for rest of the elements of the array\n\
    \    sum1=sum+sum1;\n    // Return sum of the minimum k elements minus sum of\
    \ the first k elements\n    return sum + sum1 - min - max;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpw4tct11o: /tmp/tmpw4tct11o.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (auto n: arr) {\n        if (n % 10 == 0 || n <= 0)\n          \
    \  break;\n        sum += n;\n    }\n    for (auto n: arr) {\n        if (n %\
    \ 10 == 1)\n            break;\n        sum += n;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpn01fi2q5: /tmp/tmpn01fi2q5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum=0;\n\
    \    for(int i=0;i<arr.size();i++){\n        sum+=arr[i];\n        if(i<k){\n\
    \            sum*=10;\n            sum+=arr[i]%10;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1jctctzg: /tmp/tmp1jctctzg.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    if(arr.size() < k){\n        return 0;\n    }\n    long ans = 0;\n\
    \    for(long i = 0l; i < k; ++i){\n        long first = arr[i];\n        long\
    \ second = arr[i + 1];\n        if(second == first){\n            ans += second;\n\
    \            i += 2;\n        }else{\n            ans += first;\n            ++i;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpvz_yll08: /tmp/tmpvz_yll08.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    int cnt =\
    \ 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i] > 99)\
    \ cnt++;\n        if (cnt > 2) break;\n    }\n    return arr[0] + arr[arr.size()\
    \ - 1] + arr[arr.size() - k - 1];\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpab8rq0tj: /tmp/tmpab8rq0tj.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // your code\
    \ goes here\n    long sum = 0;\n    for(int i=0;i<k;i++){\n        sum+=arr[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpa1gpuaio: /tmp/tmpa1gpuaio.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long ans = 0;\n    long sum = 0;\n    long last_pos = 0;\n    long\
    \ first = 0;\n    for (auto it = arr.begin(); it != arr.end(); ++it) {\n     \
    \   sum += *it;\n        if (sum > k) {\n            if (first == 0) {\n     \
    \           first = *it;\n                last_pos = it;\n            } else {\n\
    \                sum = sum - first;\n                ans += (it - last_pos);\n\
    \                last_pos = it;\n                first = 0;\n            }\n \
    \       }\n    }\n    ans += (arr.end() - last_pos);\n    sum = sum - first;\n\
    \    ans += (arr.end() - last_pos);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7q7vmczs.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp7q7vmczs.cpp:22:28: error: cannot convert \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in assignment\n   22 |                 last_pos = it;\n      |\
    \                            ^~\n      |                            |\n      |\
    \                            __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n/tmp/tmp7q7vmczs.cpp:25:21: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   25 |                 ans += (it - last_pos);\n\
    \      |                 ~~~~^~~~~~~~~~~~~~~~~~\n/tmp/tmp7q7vmczs.cpp:26:28: error:\
    \ cannot convert \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018long int\u2019 in assignment\n   26 |                \
    \ last_pos = it;\n      |                            ^~\n      |             \
    \               |\n      |                            __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmp7q7vmczs.cpp:31:9: error: no match for\
    \ \u2018operator+=\u2019 (operand types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   31 |     ans += (arr.end() - last_pos);\n\
    \      |     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n/tmp/tmp7q7vmczs.cpp:33:9: error:\
    \ no match for \u2018operator+=\u2019 (operand types are \u2018long int\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    )\n   33 |     ans += (arr.end() - last_pos);\n      |     ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660101980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long max_sum = arr[0] + arr[1];\n    for (int i = 2; i < arr.size();\
    \ i++) {\n        if (arr[i] < max_sum) {\n            max_sum = arr[i] + arr[i-1];\n\
    \        } else {\n            sum = sum + arr[i];\n        }\n    }\n    if (sum\
    \ > k) return sum;\n    return k;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpc2ichkq2: /tmp/tmpc2ichkq2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    auto itr =\
    \ arr.begin();\n    long sum = 0;\n    while (itr != arr.end() && itr != arr.begin()\
    \ + k) {\n        sum += *itr;\n        ++itr;\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3a7xean9: /tmp/tmp3a7xean9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long ans = 0;\n    for(int i = 0; i < k; ++i){\n        long sum =\
    \ 0;\n        for(int j = 0; j < k; ++j){\n            if(j != i)\n          \
    \      sum += arr[j];\n        }\n        if(sum % 10 != 0)\n            ans +=\
    \ sum % 10;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp0a7x8a_u: /tmp/tmp0a7x8a_u.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0, sum = 0;\n    for (int i = 0; i <= k; i++) {\n        sum += arr[i];\n  \
    \      long temp = sum;\n        while ((temp % 10) > 0) {\n            sum -=\
    \ (temp % 10);\n            temp /= 10;\n        }\n        ans += sum;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyczb1h55: /tmp/tmpyczb1h55.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  int sum = 0;\n\
    \  long first_elements_sum = 0;\n  long last_elements_sum = 0;\n  for (long i\
    \ = 0; i < k; i++) {\n    first_elements_sum += arr[i];\n  }\n  for (long i =\
    \ k; i < arr.size(); i++) {\n    last_elements_sum += arr[i];\n  }\n  sum += first_elements_sum\
    \ + last_elements_sum;\n  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxghw37lt: /tmp/tmpxghw37lt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // code here\n\
    \    \n    long result = 0;\n    long sum = 0;\n    long i = 0;\n    while(i <\
    \ k)\n    {\n        if(i >= arr.size())\n        {\n            break;\n    \
    \    }\n        sum = sum + arr[i];\n        ++i;\n    }\n    while(i++ < arr.size())\n\
    \    {\n        if(sum == 0)\n        {\n            result = sum + arr[i];\n\
    \        }\n        else\n        {\n            sum = sum - arr[i] - 1;\n   \
    \         result = sum + arr[i];\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpv2axx0v5: /tmp/tmpv2axx0v5.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    long i = 0;\n    for (i = 0; i < arr.size(); ++i)\n\
    \    {\n        int val = arr[i] - '0';\n        assert(val > 0);\n        int\
    \ temp = val + val;\n        int sum = temp % 10;\n        sum += sum;\n     \
    \   assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >=\
    \ 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= 0 && sum < 10);\n        sum += sum;\n\
    \        assert(sum >= 0 && sum < 10);\n        sum += sum;\n        assert(sum\
    \ >= 0 && sum < 10);\n        sum += sum;\n        assert(sum >= 0 && sum < 10);\n\
    \        sum += sum;\n        assert(sum >= \n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj2ew91ph.cpp:101: error: unterminated argument list invoking macro\
    \ \"assert\"\n  101 | }\n      | \n/tmp/tmpj2ew91ph.cpp: In function \u2018long\
    \ int add_elements(std::vector<long int>, long int)\u2019:\n/tmp/tmpj2ew91ph.cpp:92:9:\
    \ error: \u2018assert\u2019 was not declared in this scope\n   92 |         assert(sum\
    \ >=\n      |         ^~~~~~\n/tmp/tmpj2ew91ph.cpp:3:1: note: \u2018assert\u2019\
    \ is defined in header \u2018<cassert>\u2019; did you forget to \u2018#include\
    \ <cassert>\u2019?\n    2 | #include<bits/stdc++.h>\n  +++ |+#include <cassert>\n\
    \    3 | // Given a non-empty vector of integers arr and an integer k, return\n\
    /tmp/tmpj2ew91ph.cpp:92:9: error: expected \u2018}\u2019 at end of input\n   92\
    \ |         assert(sum >=\n      |         ^~~~~~\n/tmp/tmpj2ew91ph.cpp:16:5:\
    \ note: to match this \u2018{\u2019\n   16 |     {\n      |     ^\n/tmp/tmpj2ew91ph.cpp:92:9:\
    \ error: expected \u2018}\u2019 at end of input\n   92 |         assert(sum >=\n\
    \      |         ^~~~~~\n/tmp/tmpj2ew91ph.cpp:11:50: note: to match this \u2018\
    {\u2019\n   11 | long add_elements(std::vector<long> arr, long k) {\n      | \
    \                                                 ^\n/tmp/tmpj2ew91ph.cpp:92:9:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   92 | \
    \        assert(sum >=\n      |         ^~~~~~\n"
  stdout: ''
  timestamp: 1660101980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    int sum = 0;\n    int n = arr.size();\n    if (k > n) {\n   \
    \     k = n;\n    }\n    \n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n\
    \    }\n    int max_count = 0;\n    \n    for (int i = k; i < n; i++) {\n    \
    \    sum += arr[i];\n        if (sum < 10) {\n            sum += 10;\n       \
    \ }\n        \n        if (sum > max_count) {\n            max_count = sum;\n\
    \        }\n        \n        sum -= arr[i];\n    }\n    \n    return max_count\
    \ + k;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpz2dxt1je: /tmp/tmpz2dxt1je.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long long\
    \ sum = 0;\n    long long max_digit_sum = 0;\n    long long max_digit_sum_pos\
    \ = 0;\n\n    for (int i = 0; i < k; i++) {\n        max_digit_sum_pos = std::max(max_digit_sum_pos,\
    \ arr[i].length());\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n   \
    \     long long cur_digit_sum = 0;\n        for (int j = 0; j < arr[i].length();\
    \ j++) {\n            cur_digit_sum += arr[i][j] / 10;\n        }\n        max_digit_sum\
    \ = std::max(max_digit_sum, cur_digit_sum);\n        sum += arr[i];\n    }\n\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5_42ycxs.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5_42ycxs.cpp:17:64: error: request for member\
    \ \u2018length\u2019 in \u2018arr.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   17 |      \
    \   max_digit_sum_pos = std::max(max_digit_sum_pos, arr[i].length());\n      |\
    \                                                                ^~~~~~\n/tmp/tmp5_42ycxs.cpp:22:36:\
    \ error: request for member \u2018length\u2019 in \u2018arr.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   22 |      \
    \   for (int j = 0; j < arr[i].length(); j++) {\n      |                     \
    \               ^~~~~~\n/tmp/tmp5_42ycxs.cpp:23:38: error: invalid types \u2018\
    __gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type {aka\
    \ long int}[int]\u2019 for array subscript\n   23 |             cur_digit_sum\
    \ += arr[i][j] / 10;\n      |                                      ^\n"
  stdout: ''
  timestamp: 1660101980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(k <=\
    \ arr.size());\n    long ans = 0;\n    for (auto i : arr) {\n        if (i < 10)\
    \ {\n            ans += i;\n        } else {\n            long rem = 0;\n    \
    \        while (i%10 != 0) {\n                rem += 1;\n                i /=\
    \ 10;\n            }\n            if (rem >= 2) {\n                ans += (i -\
    \ rem);\n            }\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpkqd4wxgt: /tmp/tmpkqd4wxgt.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long s = 0;\n\
    \    for (long i = 0; i < k; i++)\n        s += arr[i];\n    for (long i = k;\
    \ i < arr.size(); i++)\n        s += arr[i];\n    return s;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpnc6v1ao8: /tmp/tmpnc6v1ao8.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for(int i = 0; i < k; i++)\n        sum += arr[i];\n    for(int i =\
    \ k; i < arr.size(); i++)\n        sum += arr[i] - arr[i - k];\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpwt8zzaz9: /tmp/tmpwt8zzaz9.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    long sum = 0;\n    long l = 0;\n    long r = 0;\n    long sum1\
    \ = 0;\n    while (l < k) {\n        while (sum1 < 9) {\n            sum1 += arr[l];\n\
    \            l++;\n        }\n        while (r < k) {\n            sum1 += arr[r];\n\
    \            r++;\n        }\n        sum = sum1 + sum;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9xd9fy9b: /tmp/tmp9xd9fy9b.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    if (k > arr.size())\n        k = arr.size();\n\n    long sum\
    \ = 0;\n\n    long last;\n    for (long i = 0; i < k; i++) {\n        last = arr[i];\n\
    \        sum += last;\n        for (long j = i + 1; j < (arr.size() - 1); j++)\
    \ {\n            if (arr[j] >= last + 1 && arr[j] < last + 2) {\n            \
    \    sum += arr[j];\n                arr[j] = last;\n            }\n        }\n\
    \    }\n\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpn4r5hefd: /tmp/tmpn4r5hefd.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::vector<long>\
    \ arr1(arr.begin()+k, arr.end()+k);\n    assert(arr1.size() > 0);\n    long ans\
    \ = 0;\n    for (long i : arr1) {\n        for (long j = 1; j < k; j++) {\n  \
    \          if (i != j && arr1[i-j]/10 + arr1[j-k]/10 > arr1[i]/10 + arr1[j]/10)\
    \ {\n                ans += arr1[i] + arr1[j];\n                break;\n     \
    \       }\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpm57zgo50: /tmp/tmpm57zgo50.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long lk = k;\n    long max_len = find_max(arr);\n    long sum1 = sum;\n\
    \    long sum2 = 0;\n    for(long i=0;i<arr.size();i++) {\n        // if the current\
    \ sum is greater than the sum1, then add the current number to the sum\n     \
    \   if(sum + arr[i] > sum1) {\n            sum += arr[i];\n        }\n       \
    \ // if the current sum is less than the sum2, then add the current number to\
    \ sum1\n        else if((sum + arr[i]) < sum2) {\n            sum1 = sum + arr[i];\n\
    \        }\n        // if the current sum is equal to the sum2 then subtract the\
    \ current number from sum2\n        else {\n            sum2 = sum - arr[i];\n\
    \        }\n        // if the current sum is less than the sum1 and less than\
    \ the sum2, then add the current number to the sum\n        if(sum2 < sum1) {\n\
    \            sum += arr[i];\n        }\n    }\n    // if the sum is equal to 0\
    \ and we are still less than the length of arr, then find the max number\n   \
    \ // of elements from the first k and subtract it from sum to get the sum\n  \
    \  if(sum == 0) {\n        lk = k - 1;\n        sum = sum1;\n    }\n    // if\
    \ the sum is greater than 0 but greater than the length of arr, then find the\
    \ max number\n    // of elements from the first k-1 and subtract it from sum to\
    \ get the sum\n    else if(sum > 0 && sum >= max_len) {\n        lk = k - 1;\n\
    \        sum = sum1;\n    }\n    // if the sum is less than 0 but less than the\
    \ length of arr, then find the max number\n    // of elements from the first k-2\
    \ and subtract it from sum to get the sum\n    else if(sum < 0 && sum <= max_len)\
    \ {\n        lk = k - 2;\n        sum = sum2;\n    }\n    // if the sum is greater\
    \ than 0 but less than the length of arr, then find the max number\n    // of\
    \ elements from the first k-2 and subtract it from sum to get the sum\n    else\
    \ if(sum > 0 && sum <= max_len) {\n        lk = k - 2;\n        sum = sum2;\n\
    \    }\n    else if(sum < 0 && sum >= max_len) {\n        lk = k - 1;\n      \
    \  sum = sum1;\n    }\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3,\
    \ (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n\
    \    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3, (long)4000,\
    \ (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp5ew8fix7.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp5ew8fix7.cpp:14:20: error: \u2018find_max\u2019\
    \ was not declared in this scope\n   14 |     long max_len = find_max(arr);\n\
    \      |                    ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660101980
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    long sum2 = 0, sum3 = 0, sum4 = 0;\n    for (auto\
    \ &num: arr) {\n        if (k >= 2) {\n            sum = sum + num;\n        \
    \    sum2 = sum2 + num * num;\n            sum3 = sum3 + num * num * num;\n  \
    \          sum4 = sum4 + num * num * num * num;\n            k = k - 2;\n    \
    \    } else {\n            sum = sum + num;\n            k = k - 1;\n        }\n\
    \    }\n    return sum + sum2 + sum3 + sum4;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpn_7qor62: /tmp/tmpn_7qor62.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long len = arr.size();\n    long first = k * 10;\n\n    if (len <= k)\
    \ {\n        sum += arr[0];\n        return sum;\n    }\n\n    long mid = len\
    \ - k;\n    while (k <= mid) {\n        sum += arr[first];\n        first += 10;\n\
    \        k++;\n    }\n    sum += arr[first];\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp2vujja8f: /tmp/tmp2vujja8f.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long len = arr.size();\n    // This loop iterates through every number\
    \ in arr and adds it to the sum\n    // for those elements up to and including\
    \ the kth element in arr. Note that\n    // by definition the kth element is the\
    \ last element added to sum.\n    // The loop stops when there are two consecutive\
    \ elements whose sum\n    // is greater than 9 and k is greater than or equal\
    \ to twice the largest\n    // element from arr. \n    for (long i = 0; i < len;\
    \ i++) {\n        // If our sum is greater than 9, we know we have reached a digit\
    \ > 9\n        if (sum > 9) {\n            // We are now adding the first k elements\
    \ to sum\n            sum += arr[i];\n            // We now know that we have\
    \ less than k elements left to add to\n            // sum\n            if (len\
    \ > k) {\n                // We are now going to add the next element in the array\n\
    \                sum += arr[i + 1];\n            }\n            // We are now\
    \ at the kth element to add to sum, so we can stop iterating.\n            break;\n\
    \        }\n        // We are adding the first element to sum so we need to add\
    \ it now\n        sum += arr[i];\n        // We are now going to add the next\
    \ element in the array\n        sum += arr[i + 1];\n        // We are now at the\
    \ kth element to add to sum, so we can stop iterating.\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpwljzfbd3: /tmp/tmpwljzfbd3.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long sum2 = 0;\n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n\
    \        sum2 += arr[i];\n    }\n    return sum + sum2;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpaeba5rnv: /tmp/tmpaeba5rnv.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (auto it : arr) {\n        while (it < 10) {\n            sum +=\
    \ it;\n            it *= 10;\n        }\n        while (it > 9) {\n          \
    \  sum += it;\n            it /= 10;\n        }\n        sum += it;\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp27jozmfd: /tmp/tmp27jozmfd.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    int i = 0;\n    int j = 0;\n    while (j < k) {\n\
    \        if (arr[i] > arr[j]) {\n            sum += arr[i];\n            i++;\n\
    \        } else {\n            sum += arr[j];\n            j++;\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpkoiaycib: /tmp/tmpkoiaycib.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (arr.empty())\
    \ {\n        return 0;\n    }\n    long sum = 0;\n    for (long i = 0; i < k;\
    \ i++) {\n        sum += arr[i];\n    }\n    for (long i = k; i < arr.size();\
    \ i++) {\n        sum += arr[i];\n        sum += (arr[i] - sum % 10);\n    }\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6xx98jct: /tmp/tmp6xx98jct.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k == 0)\n\
    \        return 0;\n    long sum = 0;\n    for (long i = 0; i < k; i++) {\n  \
    \      sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpz3r14pmh: /tmp/tmpz3r14pmh.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0 && k <= arr.size());\n    std::sort(arr.begin(), arr.end());\n    long sum\
    \ = 0;\n    int i = k;\n    while (arr[i] > 0){\n        sum += arr[i--];\n  \
    \  }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp38ejcnt2: /tmp/tmp38ejcnt2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long result\
    \ = 0;\n    for (auto &i : arr) {\n        // If k has reached a number which\
    \ is greater than the sum of two numbers in the array\n        if (k > result\
    \ + i && k > i) {\n            break;\n        }\n        // If two numbers have\
    \ reached this point, they cannot be added to the sum\n        if (k == i + result)\
    \ {\n            break;\n        }\n        result += i;\n        k = k - i;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp8kco1mw8: /tmp/tmp8kco1mw8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  // Your code\
    \ here\n  assert(arr.size() > 0);\n  assert(arr.size() <= 100);\n  assert(k <=\
    \ arr.size());\n  long result = 0;\n  long min_num = arr[0];\n  for (size_t i\
    \ = 1; i < arr.size(); i++) {\n    if (arr[i] > min_num) {\n      result += min_num;\n\
    \      min_num = arr[i];\n    } else {\n      if (i == k) result += min_num;\n\
    \      min_num = arr[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmccwfk1g: /tmp/tmpmccwfk1g.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101981
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for(int i=0; i < arr.size()-(k+1); i++){\n    sum += arr[i];\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpg520p5c7: /tmp/tmpg520p5c7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0, count = 0;\n    for (long i : arr) {\n        if (count < k) {\n        \
    \    ans += i;\n            count++;\n        } else {\n            ans += i +\
    \ ans % (2 * 10 + 1);\n            count = 0;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpe8v2ko_j: /tmp/tmpe8v2ko_j.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    long ans = 0;\n    long sum = 0;\n    for(int i=0;i<k;i++){\n\
    \        sum += arr[i];\n    }\n    for(int i=0;i<k;i++){\n        ans += (sum%10)+arr[i];\n\
    \        sum = (sum/10)-1;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpt5ru0zmv: /tmp/tmpt5ru0zmv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    auto sum =\
    \ (k == 1) ? arr[0] : arr[0] + arr[1];\n    long cnt = (k == 1) ? 1 : 0;\n   \
    \ for (long i = 2; i < arr.size(); i++) {\n        sum += arr[i];\n        cnt\
    \ += (arr[i] > sum) ? 1 : 0;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxiqqbqm_: /tmp/tmpxiqqbqm_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long long\
    \ ans = 0ll;\n    for(long i = 0; i < arr.size(); i++)\n    {\n        if(arr[i]\
    \ < 10){\n            ans += arr[i];\n        }else{\n            ans += arr[i]\
    \ - 10;\n        }\n    }\n    if(ans <= 10){\n        return ans;\n    }\n  \
    \  long long first_two_digits = ans / 10;\n    long long rest = ans - first_two_digits\
    \ * 10;\n    long long final_number = first_two_digits + rest;\n    long long\
    \ counter = 1;\n    while(final_number / 10 != final_number){\n        final_number\
    \ += counter;\n        counter++;\n    }\n    return final_number;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  for (long i = 0; i < k; ++i)\n    sum += arr[i];\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9rxogy4n: /tmp/tmp9rxogy4n.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    \n    // Your\
    \ code goes here\n    \n    long ans = 0;\n    for(long i = 0; i < k; i++)\n \
    \   {\n        if(arr[i]%10 != 0)\n            ans+=arr[i];\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp8lkh414g: /tmp/tmp8lkh414g.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101982
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here.\n    long sum = 0;\n    \n    long start = 0;\n    long end = 0;\n\
    \    long left = 0;\n    long right = 0;\n    \n    if(arr.size() <= k){\n   \
    \     return 0;\n    }\n    \n    for(long i = 0; i < k; i++){\n        start\
    \ = arr[i].first;\n        end = arr[i].second;\n        left = k - i;\n     \
    \   right = k - i - 1;\n        sum += arr[end] - arr[start];\n        \n    \
    \    for(long j = start; j < end + 1; j++){\n            if(arr[j] > arr[end]){\n\
    \                std::swap(arr[j], arr[end]);\n                std::swap(sum,\
    \ sum + arr[j] - arr[end]);\n            }\n            \n            if(j + 1\
    \ != end && arr[j] < arr[end]){\n                sum += arr[j] - arr[end];\n \
    \           }\n        }\n    }\n    \n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxijuvgsv.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxijuvgsv.cpp:25:24: error: request for member\
    \ \u2018first\u2019 in \u2018arr.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   25 |      \
    \   start = arr[i].first;\n      |                        ^~~~~\n/tmp/tmpxijuvgsv.cpp:26:22:\
    \ error: request for member \u2018second\u2019 in \u2018arr.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   26 |      \
    \   end = arr[i].second;\n      |                      ^~~~~~\n/tmp/tmpxijuvgsv.cpp:34:55:\
    \ error: no matching function for call to \u2018swap(long int&, long int)\u2019\
    \n   34 |                 std::swap(sum, sum + arr[j] - arr[end]);\n      |  \
    \                                                     ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_pair.h:59,\n                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpxijuvgsv.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&) [with _Tp = long int; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ = void]\u2019 <near match>\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |  \
    \   ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   conversion of argument\
    \ 2 would be ill-formed:\n/tmp/tmpxijuvgsv.cpp:34:45: error: cannot bind non-const\
    \ lvalue refer"
  stdout: ''
  timestamp: 1660101982
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    if(k>arr.size())\n        return 0;\n    long long sum=0;\n    for(int\
    \ i=0;i<k;i++)\n    {\n        if(arr[i]%10==0)\n        {\n            sum+=arr[i];\n\
    \        }\n        else\n        {\n            sum+=sum+(arr[i]%10)*pow(10,arr[i]/10);\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3_uovf9h: /tmp/tmp3_uovf9h.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ != 0);\n    assert(k <= arr.size());\n    long sum = 0;\n    for (long i = 0;\
    \ i < k; i++) {\n        sum += arr[i];\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp8kb8hsgo: /tmp/tmp8kb8hsgo.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long long\
    \ ans = 0;\n    for(int i = 0; i< k; i++){\n        ans += arr[i];\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1st6bjrd: /tmp/tmp1st6bjrd.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n        std::vector<long>\
    \ new_arr;\n        // Find the two digits having maximum number of occurrences\
    \ among arr elements which have less than k occurrences.\n        std::sort(arr.begin(),\
    \ arr.end());\n        long max_occur = 0;\n        int max_occur_index = 0;\n\
    \        for (int i = 0; i < k; i++) {\n                for (int j = 0; j < arr.size();\
    \ j++) {\n                        if ((arr[j] - arr[i] < max_occur) && (j < i))\
    \ {\n                                max_occur = arr[j] - arr[i];\n          \
    \                      max_occur_index = j;\n                        }\n     \
    \           }\n        }\n        // For each pair of elements having two adjacent\
    \ digits, sum the digits from arr which have less than k occurrences.\n      \
    \  for (int i = 0; i < arr.size(); i++) {\n                for (int j = i+1; j\
    \ < arr.size(); j++) {\n                        if ((arr[j] - arr[i] < max_occur)\
    \ && (j < i)) {\n                                new_arr.push_back(arr[i] + arr[j]);\n\
    \                        }\n                }\n        }\n        return std::accumulate(new_arr.begin(),\
    \ new_arr.end(), 0);\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmprz_8jew_: /tmp/tmprz_8jew_.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  // Your code\
    \ here\n  //assert(arr.size() != 0);\n  //assert(k <= arr.size());\n  long sum\
    \ = 0;\n  for(long i = 0; i <= k; ++i){\n    sum += arr[i];\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpqnyrk3iu: /tmp/tmpqnyrk3iu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    std::sort(arr.begin(), arr.end());\n    long sum = 0;\n    for(int\
    \ i=0; i< arr.size()-k; ++i) {\n        sum += arr[i];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp11utk517: /tmp/tmp11utk517.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long result\
    \ = 0;\n    for(long i = 0; i <= k; ++i) {\n        if(i >= arr.size()) return\
    \ 0;\n        result += arr[i];\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpceif6u1g: /tmp/tmpceif6u1g.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (size_t i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n  \
    \  for (size_t i = k; i < arr.size(); i++) {\n        sum += arr[i] - 9;\n   \
    \ }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1ogbts29: /tmp/tmp1ogbts29.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long result\
    \ = 0;\n    for (long i = 0; i <= arr.size() - k; ++i) {\n        result += arr[i];\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3ussaxxv: /tmp/tmp3ussaxxv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ >= k);\n    long ans = arr[0] + arr[1] + arr[2] + arr[3];\n    for (long i=\
    \ 4; i < k; i++) {\n        ans += arr[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1i_clfup: /tmp/tmp1i_clfup.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0);\n    assert(k > 0);\n    long ans = 0;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(i >= k) {\n            break;\n        }\n        long digit1\
    \ = arr[i];\n        long digit2 = arr[i - k];\n        ans += digit1 + digit2;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpyzqc38n1: /tmp/tmpyzqc38n1.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::vector<long>\
    \ new_arr(arr.begin() + k, arr.end());\n    long result = 0;\n    for (int i =\
    \ k; i < arr.size(); i++) {\n        result += arr[i];\n    }\n    for (int i\
    \ = 0; i < new_arr.size() - 1; i++) {\n        result += new_arr[i];\n    }\n\
    \    result += new_arr[k];\n    return result;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpzcr1c0i_: /tmp/tmpzcr1c0i_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long sum = 0;\n\
    \  assert(arr.size() > k);\n  for (long i = 0; i < k; i++) {\n    sum += arr[i];\n\
    \  }\n  for (long i = 0; i < k; i++) {\n    sum += arr[k + i];\n  }\n  return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpgg8hn5s9: /tmp/tmpgg8hn5s9.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i != arr.size(); i++) {\n        sum += arr[i];\n  \
    \      if (sum < 10) {\n            if (sum < 100) {\n                sum += 10\
    \ * i;\n            } else {\n                sum += 100 * i + arr[i];\n     \
    \       }\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphbaob9k7: /tmp/tmphbaob9k7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxvsigyyb: /tmp/tmpxvsigyyb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        ans += arr[i];\n    }\n    for\
    \ (long i = k; i < arr.size(); i++) {\n        ans += (arr[i] - 1L) * (arr[i]\
    \ + 1L);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp6dom3f2o: /tmp/tmp6dom3f2o.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101983
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long sum2 = 0;\n    long temp = 0;\n    long count = 0;\n    for (long\
    \ i = 0; i < k; i++) {\n        sum2 = sum2 + arr[i];\n        temp = arr[i];\n\
    \    }\n    sum = sum + sum2;\n    if (k % 2 == 0)\n        sum = sum + temp;\n\
    \    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxjss0pbh: /tmp/tmpxjss0pbh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    // code goes here\n    long sum = 0;\n    long temp = arr[0];\n\
    \    for(int i = 1; i < arr.size(); i++) {\n        if(i != k && temp / 10 + (arr[i]\
    \ / 10) > temp / 10 + (arr[i - 1] / 10)) {\n            sum += temp;\n       \
    \ }\n        temp += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpdo7kf88b: /tmp/tmpdo7kf88b.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ >= k);\n    long ans = 0;\n    long len = arr.size();\n    long i = 0;\n   \
    \ long j = 0;\n    while ((j + k) < len) {\n        ans += arr[j] + arr[j + k];\n\
    \        i += 2;\n        j += 2;\n    }\n    if (j < len) {\n        ans += arr[j];\n\
    \        i += 1;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9uba3tkt: /tmp/tmp9uba3tkt.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(k <=\
    \ arr.size());\n    long sum = 0;\n    long i = 0;\n    while (i < arr.size()\
    \ && sum < 1000000000L) {\n        while (i < arr.size() && arr[i] < 10) {\n \
    \           sum += arr[i];\n            i++;\n        }\n        sum -= arr[i++]\
    \ - 10;\n    }\n    sum += arr[i];\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmph4x70njr: /tmp/tmph4x70njr.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    if(k == 0){\n        return sum;\n    }\n    for(long\
    \ i = 0; i<k;i++){\n        sum += arr[i];\n    }\n    for(int i=k;i<arr.size();i++){\n\
    \        sum -= arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9ov7oxnu: /tmp/tmp9ov7oxnu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    long max_val = arr[0];\n    int count = 0;\n  \
    \  for(int i = 1; i < arr.size(); i++) {\n        if(arr[i] > max_val) {\n   \
    \         count++;\n            max_val = arr[i];\n        }\n    }\n    \n  \
    \  for(int i = k; i < arr.size(); i++) {\n        long diff = abs(arr[i] - max_val);\n\
    \        if(diff > 2) {\n            sum += diff;\n        }\n    }\n    \n  \
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpey61ys7v: /tmp/tmpey61ys7v.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here.\n    assert(arr.size() != 0);\n    long result = 0;\n    long start\
    \ = 0;\n    long next = 0;\n    for (int i = 0; i <= arr.size(); i++) {\n    \
    \    if (next + 1 < arr.size() && arr[i] > arr[next]) {\n            result +=\
    \ arr[next];\n            start = next;\n            next = next+1;\n        }\
    \ else {\n            result += (i - start) * arr[next];\n            start =\
    \ i;\n            next = i;\n        }\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmzi0mekx: /tmp/tmpmzi0mekx.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    long result=0;\n    \n    for(auto x:arr) {\n        long temp=x;\n\
    \        \n        while((temp%10)<k) {\n            result+=temp%10;\n      \
    \      temp/=10;\n        }\n        result+=temp%10;\n    }\n    \n    return\
    \ result;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660101989
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    int ans =\
    \ 0;\n    std::vector<int> freq(20, 0);\n    for (long i : arr) {\n        //\
    \ add 1 to freq[i] because i comes with two digits\n        freq[i % 20] += 1;\n\
    \    }\n    for (int i = 0; i < k; i++) {\n        // we know freq[i] is a multiple\
    \ of 10\n        if (freq[i] % 10 == 0) ans += freq[i];\n        // we can add\
    \ 1 if freq[i] has at least two digits\n        else if (freq[i] % 10 == 1 &&\
    \ freq[i] % 100 != 0) ans += freq[i];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'munmap_chunk(): invalid pointer

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0L;\n    long sum = 0;\n\n    for (long i = 0; i < k; i++) {\n        sum =\
    \ arr[i] + sum;\n    }\n\n    long a = sum / 10;\n    long b = sum % 10;\n\n \
    \   for (int i = 0; i < k; i++) {\n        sum = arr[i] + sum;\n\n        long\
    \ x = sum / 10;\n        long y = sum % 10;\n\n        if (i == 0) {\n       \
    \     ans += (long)a;\n        } else {\n            ans += (long)b * 10 + y;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpo0p92phu: /tmp/tmpo0p92phu.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // write your\
    \ code here\n    long ans = 0;\n    long sum = 0;\n    \n    for(auto &x: arr)\n\
    \    {\n        sum+=x;\n    }\n    \n    for(int i = 0; i < k; i++)\n    {\n\
    \        sum -= arr[i];\n        ans+=sum;\n    }\n    \n    return ans;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpewh3zq_0: /tmp/tmpewh3zq_0.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0, count = 0;\n    auto n = arr.size();\n    // k is less than or equal to n\n\
    \    if (k > n) k = n;\n    // k is greater than length of arr\n    if (k > arr.size())\
    \ k = arr.size();\n    for (long i = 0; i < k; ++i)\n        ans += arr[i];\n\
    \    for (long i = k; i < n; ++i)\n        ans += arr[i] - 10;\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpf06qg6o1: /tmp/tmpf06qg6o1.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    for\
    \ (long i = 0; i < k; i++) {\n        sum += arr[i + k];\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_hzdi9dd: /tmp/tmp_hzdi9dd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long result\
    \ = 0;\n  long sum = 0;\n  for (int i = 0; i < k; i++)\n    sum += arr[i];\n \
    \ for (int i = 0; i < k; i++)\n    result += arr[i];\n  result = result % 10;\n\
    \  if (result > 9)\n    result += 1;\n  else \n    result *= 10;\n  for (int i\
    \ = 0; i < k; i++)\n    result += arr[i] % 10;\n  result = result % 10;\n  return\
    \ result;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp132rsj59: /tmp/tmp132rsj59.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // arr will\
    \ be modified in place\n    assert(k > 0);\n    // Start with first two digits\n\
    \    long result = 0;\n    long current_val = arr[0];\n    for (long i = 1; i\
    \ < k; i++) {\n        current_val += arr[i];\n        result = max(result, current_val);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjksne2n3.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpjksne2n3.cpp:19:18: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   19 |    \
    \     result = max(result, current_val);\n      |                  ^~~\n     \
    \ |                  std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjksne2n3.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    if(arr.size()<2){\n        return 0;\n    }\n    long sum=0;\n   \
    \ for(long i=0;i<k;i++)\n        sum+=arr[i];\n    for(long i=k;i<arr.size();i++){\n\
    \        sum+=arr[i]%10;\n        sum*=10;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpy92z75e5: /tmp/tmpy92z75e5.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n        long sum\
    \ = 0;\n        long n = arr.size();\n        long sumOf2FirstElements = 0;\n\
    \        for(int i = 0;i<n; i++) {\n            sum = sum + (arr[i]/10) + (sumOf2FirstElements/10);\n\
    \            sumOf2FirstElements = sumOf2FirstElements + (arr[i]%10);\n      \
    \      if(i<k) \n                sum = sum + (arr[i]/10) + (sumOf2FirstElements/10);\n\
    \        }\n        return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmphhnfp84p: /tmp/tmphhnfp84p.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    int i = 0;\n\
    \    long sum = 0;\n    \n    while (i + k <= arr.size()) {\n        sum += arr[i]\
    \ - arr[i - k];\n        i++;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpbm9bv0cj: /tmp/tmpbm9bv0cj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    int n = arr.size();\n\
    \    if (k >= n) return 0;\n    if (n == 1) return arr[0];\n    // k is less than\
    \ or equal to 2n+1 since any 2 element in the vector has at least 2 digits\n \
    \   // k is 2n since the first element has at least 2 digits and 2n+1 elements\
    \ have at most 2 digits\n    if (k >= 2 * n + 1) return 0;\n    long ans = 0,\
    \ sum = 0;\n    long cur_digit = 0;\n    for (int i = k; i < 2 * n; i++) {\n \
    \       sum += arr[i];\n        cur_digit = sum % 10;\n        sum += cur_digit;\n\
    \        if (sum < 10 || sum > 100) {\n            ans += cur_digit;\n       \
    \     sum = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpoxxim35n: /tmp/tmpoxxim35n.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    // Solve with brute force\n    if(k == 0) return 0;\n    int sum =\
    \ 0;\n    for(long i: arr) {\n        sum += i;\n        if(sum < 10 && sum >\
    \ 0) break;\n        sum -= 10;\n    }\n    return sum;\n}\nint main() {\n   \
    \ auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpsgxrea5f: /tmp/tmpsgxrea5f.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    for\
    \ (int i = k; i < arr.size(); i++) {\n        sum += arr[i] - 9 * (arr[i] / 10);\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpstr6bcg6: /tmp/tmpstr6bcg6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ arr[0] + arr[1];\n    for(int i = 2; i < arr.size(); i++) {\n        long curr\
    \ = arr[i];\n        long tmp = curr;\n        while(tmp < 10) {\n           \
    \ ans += curr;\n            tmp++;\n        }\n        ans += curr;\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpobzmyek3: /tmp/tmpobzmyek3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxvsigyyb: /tmp/tmpxvsigyyb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    assert(k <= arr.size());\n    for (long i = 0; i < k; i++) {\n     \
    \   sum += arr[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp7vs8o9yq: /tmp/tmp7vs8o9yq.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    assert(arr.size() > 0);\n    assert(k <= arr.size());\n\n    long index\
    \ = 0;\n    long sum = arr[index];\n    index = k + 1;\n    for (; index < arr.size();\
    \ index++) {\n        sum += arr[index];\n        if (sum > 900)\n           \
    \ break;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa93v_b5e.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpa93v_b5e.cpp:17:10: error: redeclaration of\
    \ \u2018long int sum\u2019\n   17 |     long sum = arr[index];\n      |      \
    \    ^~~\n/tmp/tmpa93v_b5e.cpp:12:10: note: \u2018long int sum\u2019 previously\
    \ declared here\n   12 |     long sum = 0;\n      |          ^~~\n"
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long ans = 0; \n    for(long i = 0; i < k; ++i){\n        long sum\
    \ = 0;\n        for(long j = 0; j < k; ++j){\n            if(j >= i){\n      \
    \          sum += arr[j];\n            }\n        }\n        ans += sum % 10;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpre6k4z5f: /tmp/tmpre6k4z5f.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    int count = 0;\n    while (count < k) {\n        sum += arr.pop();\n\
    \        count++;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgopj_rm.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpbgopj_rm.cpp:15:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018pop\u2019\n   15 |         sum += arr.pop();\n\
    \      |                    ^~~\n"
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::vector<long>::const_iterator\
    \ it;\n    std::vector<long>::const_iterator itr;\n    // Initialize sum variable\
    \ with the first element of arr\n    long long sum = 0;\n    // Find the sum of\
    \ all elements from 2k to end of arr\n    for (it = arr.begin(), itr = arr.begin()\
    \ + k; it != arr.end(); ++it, ++itr) {\n        sum += *it - *itr;\n    }\n  \
    \  return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpcf_qq3d6: /tmp/tmpcf_qq3d6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    if(arr.empty()) return 0;\n    long sum = 0;\n    long x = arr[0];\n\
    \    for(long i =1 ; i <k ; i++){\n        if((x % 10) + arr[i] > 9 ) \n     \
    \   sum += (x % 10) + arr[i] - 9;\n        else \n        sum += (x % 10) + arr[i];\n\
    \        x = arr[i] + x;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpy2cryr8y: /tmp/tmpy2cryr8y.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    \n    long sum = 0;\n    if (arr.size() <= k || k <= 0) {\n      \
    \  return sum;\n    }\n    long count = 0;\n    \n    long last_element = arr[k\
    \ - 1];\n    \n    for(auto ele : arr) {\n        if(ele == last_element) {\n\
    \            count++;\n        } else {\n            sum+=last_element;\n    \
    \        count = 1;\n            last_element = ele;\n        }\n    }\n    \n\
    \    sum+=last_element;\n    \n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add_elements;\n    assert(candidate((std::vector<long>({(long)1, (long)-2,\
    \ (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})), (3))\
    \ == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121, (long)3,\
    \ (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1mp5jc45: /tmp/tmp1mp5jc45.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101985
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::stack<long>\
    \ digitStack;\n    long sum = 0;\n    for (long i = 0, size = arr.size(); i <\
    \ size; i++) {\n        while (digitStack.size() && arr[digitStack.top()] >= arr[i])\n\
    \            digitStack.pop();\n        digitStack.push(arr[i]);\n    }\n    while\
    \ (digitStack.size() >= k) {\n        sum += digitStack.top();\n        digitStack.pop();\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpycsgmvd6: /tmp/tmpycsgmvd6.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for (auto &i : arr) {\n        if (i >= 100) {\n            break;\n\
    \        }\n        ans += i;\n        if (ans >= 10) {\n            ans -= 10;\n\
    \        }\n        if (ans > k) {\n            break;\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3igm1h0j: /tmp/tmp3igm1h0j.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k == 0)\n\
    \        return 0;\n    long ans = 0, sum = 0, i = 0;\n    while (i + k <= arr.size())\
    \ {\n        sum += arr[i + k];\n        ++i;\n    }\n    ans = sum + add_elements(arr,\
    \ i - k);\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    assert(arr.size() >= k);\n    long ans = arr[0];\n    for (size_t\
    \ i = 1, sum = 0; i < arr.size(); i++, sum += arr[i]) {\n        if (sum % 10\
    \ != arr[i] - arr[i-1])\n            return ans + sum;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmlmkfxus: /tmp/tmpmlmkfxus.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  std::sort(arr.begin(),\
    \ arr.end());\n  long ans = 0;\n  for (auto i : arr) {\n    if (i - 1 == 0) {\n\
    \      if (i - 2 > ans) {\n        ans = i - 2;\n      }\n    } else if (i - 1\
    \ >= 0) {\n      if (i - 2 > ans && (i - 2) <= k) {\n        ans += i - 1;\n \
    \     }\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp73bumsiy: /tmp/tmp73bumsiy.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // code here\n\
    \    if(arr.size() <= k)\n        return 0;\n    std::vector<long> v;\n    long\
    \ sum = 0;\n    for(long i = 0; i < k; i++) {\n        v.push_back(arr[i]);\n\
    \    }\n    v.push_back(arr[arr.size()-1]);\n    for(long i = 0; i < v.size()\
    \ - 1; i++) {\n        long a = v[i];\n        long b = v[i+1];\n        long\
    \ sum1 = 0, sum2 = 0;\n        for(long j = 0; j < (long)INT_MAX; j++) {\n   \
    \         long sum = a + j;\n            sum1 += sum <= b ? sum : sum + 1;\n \
    \           sum2 += sum > b ? sum : sum + 1;\n        }\n        sum += sum1 +\
    \ sum2;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660101991
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n\t// code here\n\
    \tlong ans=0;\n\t\n\tassert(arr.size()>0 && arr.size()<=100 && k<=arr.size());\n\
    \tstd::sort(arr.begin(), arr.end());\n\tfor(long i=0; i<k;i++)\n\t{\n\t\tans+=(arr[i]-arr[i-1])*(arr[i]-arr[i-1]);\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpir86huog: /tmp/tmpir86huog.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  std::stack<long>\
    \ st;\n  long ans = 0;\n  for (int i = 0; i < k; i++) {\n    if (st.empty()) {\n\
    \      st.push(arr[i]);\n      ans += arr[i];\n    } else {\n      st.push(arr[i]);\n\
    \      if (st.top() - arr[i] > 2) ans += arr[i];\n    }\n  }\n  while (!st.empty())\
    \ st.push(st.top());\n  return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660101991
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    int sum = 0;\n    std::vector<int> arr_size;\n    for (auto it = arr.begin();\
    \ it != arr.end(); ++it) {\n        arr_size.push_back(*it);\n        if (arr_size.size()\
    \ > k) arr_size.pop_back();\n    }\n    for (int i = 0; i < arr_size.size(); i++)\
    \ {\n        sum += arr_size[i];\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5br7qv8j: /tmp/tmp5br7qv8j.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    long ans = 1;\n    for (long i = 0; i < k; i++)\
    \ {\n        ans += arr[i];\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpne9t9z36: /tmp/tmpne9t9z36.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long ans = 0;\n\
    \  for (int i = k; i < arr.size(); i++) {\n    ans += arr[i];\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp06vfze1b: /tmp/tmp06vfze1b.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    \n    long\
    \ sum = 0;\n    long sumOfAllElements = std::accumulate(arr.begin(), arr.end(),\
    \ 0);\n    \n    // k is larger than sum of the whole vector arr\n    long kMax\
    \ = sumOfAllElements - k;\n    \n    // k is less than 0\n    if (k <= 0) return\
    \ 0;\n    \n    long max = 0;\n    \n    // find out the max number of digits\
    \ of arr[k..kMax] that can be summed\n    for (long i = k; i <= kMax; ++i) \n\
    \        max += arr[i] - '0';\n    \n    long digit = max / 10;\n    \n    //\
    \ find the max number of digits that can be summed with arr[k..kMax] \n    //\
    \ from the second k elements of arr\n    for (long i = k; i <= kMax; ++i) \n \
    \       sum += arr[i - k] * digit;\n    \n    return sum;\n}\nint main() {\n \
    \   auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpudc8oois: /tmp/tmpudc8oois.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++)\n        sum += arr[i];\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp283mdmuw: /tmp/tmp283mdmuw.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (arr.size()\
    \ < 2)\n        return 0;\n    long ans = 0;\n    long temp = 0;\n    for (long\
    \ i = 2; i < k; i++)\n        temp += arr[i];\n    for (long i = k; i < arr.size();\
    \ i++)\n        temp += arr[i] - arr[i - k];\n    ans = temp;\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpfa9vehn8: /tmp/tmpfa9vehn8.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n\t// code here\n\
    \tlong sum = 0;\n\tlong temp = 0;\n\tfor (long i = 0; i < k; i++) {\n\t\ttemp\
    \ = arr[i] + temp;\n\t\tsum += temp;\n\t}\n\treturn sum;\n}\nint main() {\n  \
    \  auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpe4p5tbvx: /tmp/tmpe4p5tbvx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n\tassert(arr.size()\
    \ > 1);\n\tlong ans = 0;\n\tlong sum = 0;\n\tfor (long i = 0; i < k; i++)\n\t\t\
    sum += arr[i];\n\tfor (long i = 0; i < arr.size(); i++) {\n\t\tif (sum - arr[i]\
    \ > 1)\n\t\t\tans += sum - arr[i];\n\t\tsum += arr[i];\n\t}\n\treturn ans;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpk70au8se: /tmp/tmpk70au8se.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(k <=\
    \ arr.size());\n    if (k == 0)\n        return arr[0] + arr[1];\n    std::vector<long>\
    \ vec;\n    vec.resize(arr.size());\n    for (long i = 0; i < k; i++) {\n    \
    \    vec[i] = arr[i];\n    }\n    long ans = 0, len = arr.size();\n    long max_idx\
    \ = len - k;\n    long cur_sum = 0;\n    for (long i = 0; i < max_idx; i++) {\n\
    \        cur_sum += vec[i];\n        ans += cur_sum;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpeg4gz8yr: /tmp/tmpeg4gz8yr.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k == 0\
    \ || k > arr.size()) {\n        return 0LL;\n    }\n    long sum = 0LL;\n    for\
    \ (long i = 1; i <= k; i++) {\n        sum += arr[i] - arr[k-1];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp68sam1ok: /tmp/tmp68sam1ok.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0);\n    assert(arr.size() <= 100);\n    assert(k <= arr.size());\n    int\
    \ count = 0;\n    long sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (count < k) {\n            sum += arr[i];\n            count++;\n\
    \        } else {\n            sum -= arr[i];\n            count--;\n        }\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpobpy_22z: /tmp/tmpobpy_22z.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > k);\n    long sum = 0;\n    int n = arr.size();\n    long max_elements = n\
    \ - k;\n    for(long i = 0; i < max_elements; i++) {\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpd2v3p_bd: /tmp/tmpd2v3p_bd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long cur = 0;\n    for (long i = 0; i <= k; i++) {\n        if (arr[i]\
    \ > cur) {\n            sum += arr[i] - cur;\n            cur = 0;\n        }\
    \ else {\n            cur += arr[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp0lgbn6q5: /tmp/tmp0lgbn6q5.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // your code\
    \ goes here\n    long sum = 0;\n    for(int i = k; i < arr.size(); i++) {\n  \
    \      if(arr[i] > 1000000000)\n            break;\n        sum += arr[i];\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpwl2dztv6: /tmp/tmpwl2dztv6.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for (int i = 0; i <= arr.size()-k; i++) {\n        ans += arr[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9rmxgf0l: /tmp/tmp9rmxgf0l.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here\n    long long sum = 0;\n    for(auto i : arr)\n    {\n        int\
    \ temp = (int)i;\n        if(temp < 10)\n        {\n            sum += i;\n  \
    \      }\n        else\n        {\n            sum += (temp % 10) + temp/10;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp976wnjly: /tmp/tmp976wnjly.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i <= k; ++i) {\n        sum += arr[i];\n    }\n   \
    \ return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp21d3h1ag: /tmp/tmp21d3h1ag.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Do not\
    \ write main() function.\n    // Do not read input, instead use the arguments\
    \ to the function.\n    // Do not print the output, instead return values as specified\n\
    \    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/\
    \ for more details\n    long sum=0;\n    long length=arr.size();\n    long cnt=0;\n\
    \    for (int i=0;i<length;i++) {\n        if (arr[i] < 10) {\n            sum\
    \ = sum + arr[i];\n            cnt++;\n        }\n        else {\n           \
    \ sum = sum + arr[i] % 10;\n            arr[i] = arr[i] / 10;\n            cnt--;\n\
    \        }\n        if (cnt > k) {\n            sum++;\n            cnt=k-1;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpax7l7ej2: /tmp/tmpax7l7ej2.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if(arr.size()\
    \ == 0 || arr.size() <= k) {\n        return 0;\n    }\n    auto max_range = std::min(\
    \ arr.size(), k);\n    for(long index = 0; index < max_range; ++index) {\n   \
    \     if(index == 0 || arr[index] < arr[index-1]) {\n            arr[index] +=\
    \ arr[index-1];\n        }\n        arr[index] = arr[index] - arr[index-1];\n\
    \    }\n    return arr[0];\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqb0ustek.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpqb0ustek.cpp:15:45: error: no matching function\
    \ for call to \u2018min(std::vector<long int>::size_type, long int&)\u2019\n \
    \  15 |     auto max_range = std::min( arr.size(), k);\n      |              \
    \                               ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqb0ustek.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpqb0ustek.cpp:15:45: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long unsigned\
    \ int\u2019 and \u2018long int\u2019)\n   15 |     auto max_range = std::min(\
    \ arr.size(), k);\n      |                                             ^\nIn file\
    \ included from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpqb0ustek.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqb0ustek.cpp:15:45:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long unsigned int\u2019 and \u2018long int\u2019)\n   15 |     auto max_range\
    \ = std::min( arr.size(), k);\n      |                                       \
    \      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n           \
    \      from /usr/include/x86_6"
  stdout: ''
  timestamp: 1660101986
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  long ans = 0;\n\
    \  for (int i = 0; i < k; i++) {\n    ans += arr[i];\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpsfxuvart: /tmp/tmpsfxuvart.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    assert(arr.size() > 0);\n    assert(k <= arr.size());\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        assert(arr[i] <= 100000);\n        if(i\
    \ < k) {\n            sum += arr[i];\n        } else {\n            int count\
    \ = 0;\n            for(long j = i; j < k; j++) {\n                if(arr[j] >\
    \ 10000) {\n                    count++;\n                    break;\n       \
    \         }\n            }\n            if(count > 2) {\n                sum +=\
    \ arr[i];\n            }\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp5_98hma7: /tmp/tmp5_98hma7.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long long\
    \ sum=0;\n    long long digits[100];\n    // Initialize all elements to 0\n  \
    \  for (int i=0; i<arr.size(); i++) {\n        digits[i]=0;\n    }\n    // Digit\
    \ sum\n    for (int i=0; i<arr.size(); i++) {\n        long long curr = arr[i];\n\
    \        for (int j=i; j>=0; i--) {\n            long long curr = curr*10 + digits[j];\n\
    \            digits[i] = curr%10;\n            sum+=curr/10;\n            if (sum\
    \ >= k) {\n                break;\n            }\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpz_emkni9: /tmp/tmpz_emkni9.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    if(arr.size() == 0 || k < 1){\n        return 0;\n    }\n    long\
    \ sum = 0;\n    for(int i = 0; i < k; i++){\n        sum += arr[i];\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmptegse0wn: /tmp/tmptegse0wn.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    std::vector<long> tmp(arr.begin(), arr.end());\n    long res = 0;\n\
    \    while (tmp.size() > 0) {\n        long ans = sum_tmp(tmp, k);\n        if\
    \ (ans == 0)\n            break;\n        tmp.pop_front();\n        res += ans;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxplyt9gn.cpp: In function \u2018long int add_elements(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxplyt9gn.cpp:16:20: error: \u2018sum_tmp\u2019\
    \ was not declared in this scope\n   16 |         long ans = sum_tmp(tmp, k);\n\
    \      |                    ^~~~~~~\n/tmp/tmpxplyt9gn.cpp:19:13: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018pop_front\u2019\n\
    \   19 |         tmp.pop_front();\n      |             ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ goes here\n    long sum=0;\n    for(long i=0;i<k;i++)\n    {\n        long sum2=0;\n\
    \        for(long j=0;j<i;j++)\n            sum2+=arr[j];\n        sum+=sum2;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp_2cixn4z: /tmp/tmp_2cixn4z.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n  assert(arr.size()\
    \ <= 100 && \"the vector should not be greater than 100\");\n  assert(k <= arr.size()\
    \ && \"k should not be greater than the length of the array\");\n  long ans =\
    \ 0;\n  for (int i = 0; i < k; i++) {\n    ans += arr[i];\n  }\n  ans += std::accumulate(arr.begin(),\
    \ arr.begin() + k + 1, 1, std::multiplies<long>());\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmps8tr_bfd: /tmp/tmps8tr_bfd.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // your code\
    \ goes here\n    long ret = 0;\n    long sum = 0;\n    for (int i = 0; i < k;\
    \ i++) {\n        sum += arr[i];\n    }\n    ret += sum;\n    for (int i = k;\
    \ i < arr.size(); i++) {\n        if (arr[i - 1] > arr[i]) {\n            sum\
    \ += arr[i];\n        } else {\n            sum += (sum + arr[i - 1]) / 2;\n \
    \       }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpkd8vt67l: /tmp/tmpkd8vt67l.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    int len =\
    \ arr.size();\n    if (k > len)\n        k = len;\n    assert(k == 0 || k > len);\n\
    \    long ans = 0;\n    long t = 0;\n    for (int i = 0; i < k; ++i) {\n     \
    \   t += arr[i];\n    }\n    bool is_large = true;\n    for (size_t i = 0; i <\
    \ k; ++i) {\n        if (arr[i] >= 1000000000 && is_large) {\n            ans\
    \ = t - arr[i];\n            is_large = false;\n        } else if (arr[i] < 1000000000\
    \ && !is_large) {\n            ans += t - arr[i];\n            is_large = true;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp19wpj4e_: /tmp/tmp19wpj4e_.cpp:15: long int add_elements(std::vector<long
    int>, long int): Assertion `k == 0 || k > len'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Add all\
    \ the elements at index 0, and add all the elements at\n    // index k minus 1\n\
    \    long sum = 0;\n    for(int i = 0; i < arr.size() - 1; i++) {\n        sum\
    \ += arr[i] + arr[i + k - 1];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmtf6x7ll: /tmp/tmpmtf6x7ll.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (arr.empty())\
    \ {\n        std::cerr << \"No elements\";\n        std::cin.ignore();\n     \
    \   std::cerr << std::endl;\n        exit(0);\n    }\n    if (k > arr.size())\
    \ {\n        std::cerr << \"k can't be greater than the length of arr\";\n   \
    \     std::cin.ignore();\n        std::cerr << std::endl;\n        exit(0);\n\
    \    }\n    long long ans = 0;\n    long long count = 0;\n    for (long i = 0;\
    \ i < arr.size(); ++i) {\n        if (arr.at(i) % 10 == 0) {\n            count++;\n\
    \        }\n        if (count > k) {\n            ans += arr.at(i); // Only add\
    \ the elements which are divisible by 10 \n            count = 0;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3_eihcbu: /tmp/tmp3_eihcbu.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0, index = 0;\n    int n = arr.size();\n    while (index\
    \ < k) {\n        sum += arr[index];\n        index++;\n    }\n    while (index\
    \ < n) {\n        sum += arr[index];\n        index++;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp1pkszwfb: /tmp/tmp1pkszwfb.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Add up\
    \ the first k elements.\n    long s = 0;\n    for (auto &x: arr) {\n        s\
    \ += x;\n    }\n    // Find the greatest power of 10 smaller than the sum of the\
    \ first k elements.\n    long pow10;\n    while (s > 10) {\n        pow10++;\n\
    \        s -= 10;\n    }\n    // Starting from pow10 - 1, we add each element\
    \ modulo 10^k until\n    // the remainder is less than 10^-k. If remainder is\
    \ less than 10^-k, we\n    // stop adding elements and set the remainder to 0.\n\
    \    long rem = 0;\n    for (long i = pow10; i > 1; i--) {\n        rem = 10 *\
    \ rem + arr[i] % 10;\n        arr[i] /= 10;\n        if (rem >= 10) {\n      \
    \      s += rem;\n            arr[i] %= 10;\n            break;\n        }\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = add_elements;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long result\
    \ = 0;\n    for (long index = 0; index < arr.size(); index++) {\n        result\
    \ += arr[index];\n    }\n    return result * ((arr.size() > k)) + ((arr.size()\
    \ < k) ? 0 : 0);\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpbs0i5g01: /tmp/tmpbs0i5g01.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if(arr.size()<k)\
    \ return 0;\n    long ans = 0;\n    long sum = 0;\n    for(auto itr=arr.begin();itr!=arr.end();itr++){\n\
    \        if(k==0)\n            ans+=*itr;\n        else\n            ans+=*itr%10+(*itr/10)%10;\n\
    \        sum+=*itr;\n        k--;\n        if(k==0) break;\n    }\n    return\
    \ sum+ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpt0x3nm0v: /tmp/tmpt0x3nm0v.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101987
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    std::vector<long>\
    \ temp(arr.begin() + k, arr.end());\n    std::vector<long> arrCopy;\n    arrCopy.insert(arrCopy.end(),\
    \ arr.begin(), arr.end());\n    for (auto i : temp) {\n        arrCopy.erase(std::remove(arrCopy.begin(),\
    \ arrCopy.end(), i), arrCopy.end());\n    }\n    long sum = 0;\n    for (int i\
    \ = 0; i < k; i++) {\n        sum += arrCopy[i];\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpl3iuz649: /tmp/tmpl3iuz649.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0 && k <= arr.size());\n    long ans = 0;\n    for (long i = 0; i < k; i++)\
    \ {\n        ans += arr[i];\n    }\n    for (long i = 0; i + 1 < arr.size(); i++)\
    \ {\n        ans += arr[i + k - 1];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp8jm19y_i: /tmp/tmp8jm19y_i.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long sumOfTwoDigits = 0;\n    for (long i = 0; i < k; i++) {\n     \
    \   sum += arr[i];\n        sumOfTwoDigits += arr[i] % 10;\n        arr[i] /=\
    \ 10;\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp3qz0xngc: /tmp/tmp3qz0xngc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum=0;\n\
    \    assert(k<=arr.size());\n    for(long i=0; i<k; ++i)\n        sum += arr[i];\n\
    \    for(long i=k; i<arr.size(); ++i)\n        sum += arr[i];\n    return sum;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9konia99: /tmp/tmp9konia99.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    int sum=0;\n\
    \    for(int i=k;i<arr.size();++i){\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxd92agw_: /tmp/tmpxd92agw_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (k > arr.size()\
    \ || k < 0)\n        return 0;\n    long sum = 0;\n    int count = 0;\n    for\
    \ (auto &i : arr) {\n        count += 1;\n        if (count == k) {\n        \
    \    sum += i;\n            count = 0;\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpj7ts9s8_: /tmp/tmpj7ts9s8_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    for (long i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpxvsigyyb: /tmp/tmpxvsigyyb.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101984
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    // Your code here\n    // Your code here\n    long sum=0;\n    for(long\
    \ i=0;i<k;i++){\n        long j=arr[i];\n        int digit;\n        while(j!=0){\n\
    \            digit=j%10;\n            sum+=digit*pow(10,i);\n            j=j/10;\n\
    \            i++;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpax62w49i: /tmp/tmpax62w49i.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    if (arr.size()\
    \ == 0 || k <= 0) return 0;\n    long long ans = 0;\n    for (long i = 0; i <\
    \ k; i++) {\n        ans += arr[i];\n    }\n    long long last_two_digits = arr[arr.size()\
    \ - 1];\n    for (long i = k + 1; i < arr.size(); i++) {\n        ans += arr[i]\
    \ - last_two_digits;\n        last_two_digits = arr[i];\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpsh0ldx1o: /tmp/tmpsh0ldx1o.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long cnt = 0;\n    long cnt3 = 0;\n    while (k >= 0 && cnt < 10000)\
    \ {\n        if (k == 0 && cnt < 10000) {\n            for (long i = cnt + (k\
    \ - 1); i < arr.size(); i++) {\n                sum = sum + arr[i];\n        \
    \        cnt += 1;\n            }\n        } else {\n            for (long i =\
    \ cnt + (k - 1); i < arr.size(); i++) {\n                if (arr[i] < 100) {\n\
    \                    sum = sum + arr[i];\n                    cnt += 1;\n    \
    \            } else {\n                    cnt3 = cnt3 + arr[i];\n           \
    \         if (cnt3 < 100) {\n                        sum = sum + arr[i];\n   \
    \                     cnt += 1;\n                    }\n                }\n  \
    \          }\n        }\n        k--;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp19avg3nx: /tmp/tmp19avg3nx.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for (int i = 0; i < k; i++) {\n        ans += arr[i];\n    }\n    int\
    \ cur = 1;\n    for (int i = 0; i < k; i++) {\n        ans += arr[i];\n      \
    \  while (ans > 10 || (ans < 10 && (ans % 10 == 0 || ans % cur == 0 ))) {\n  \
    \          ans--;\n            cur++;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpztrqasst: /tmp/tmpztrqasst.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    long temp = 0;\n    long count = 0;\n\n    // Add first k elements to\
    \ sum.\n    sum += arr[0];\n    count++;\n\n    // Keep adding elements until\
    \ total is less than 100 and\n    // there are no more than 'k' elements.\n  \
    \  while (count < k && sum < 100) {\n        temp += arr[count];\n        sum\
    \ += temp;\n        count++;\n    }\n\n    // Return sum of elements less than\
    \ 100 and no more than 'k' elements.\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp9h_twj7i: /tmp/tmp9h_twj7i.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    assert(arr.size()\
    \ > 0);\n    assert(k <= arr.size());\n    long long ans = 0;\n    for(long i\
    \ = 0; i < k; i++) {\n        ans += arr[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpej1xjsll: /tmp/tmpej1xjsll.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101989
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0, len = arr.size();\n    // Check if the input vector is empty.\n    if (len\
    \ == 0) {\n        return ans;\n    }\n    // Check if the size of the input vector\
    \ is greater than the given value of k\n    if (len > k) {\n        return 0;\n\
    \    }\n    // If the size of the input vector is less than k, return the sum\
    \ of arr[0] and arr[1]\n    if (len < 2) {\n        return arr[0] + arr[1];\n\
    \    }\n    // Initialize two variables to hold the sums.\n    long sum1 = arr[0],\
    \ sum2 = arr[1];\n    // Initialize a boolean variable set to false that keeps\
    \ track of the current number of\n    // digits in sum1 and sum2.\n    bool flag\
    \ = false;\n    // Initialize the variable j to start summing from arr[2] and\
    \ iterate through the elements\n    // from arr[2] to arr[k].\n    long j = arr[2];\n\
    \    // Iterate through the remaining elements in the vector starting from arr[2].\n\
    \    for (long i = 2; i < len; i++) {\n        // If flag is true, then sum1 and\
    \ sum2 are both not equal to zero and\n        // sum1 has more digits than sum2,\
    \ then add sum1 to sum2 and remove sum1 from sum2.\n        // Else, add the current\
    \ element to sum1 and set flag to true.\n        if (flag == true) {\n       \
    \     sum2 += sum1;\n            sum1 += arr[i];\n            flag = false;\n\
    \        } else {\n            sum1 += arr[i];\n            flag = true;\n   \
    \     }\n        // If sum2 still has more digits than sum1, add the current element\
    \ to sum2 and reset\n        // the flag to false.\n        if (sum2 > sum1) {\n\
    \            sum2 += arr[i];\n            flag = false;\n        }\n    }\n  \
    \  // If sum2 is not equal to sum1, then the input vector did not contain all\
    \ elements from\n    // arr[0] to arr[k-1] and therefore the sum of the elements\
    \ with at most two digits\n    // from the first k elements of arr can be determined.\n\
    \    if (sum2 != sum1) {\n        ans = sum1 + sum2;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpmdbpyo98: /tmp/tmpmdbpyo98.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Write your\
    \ code here\n    long sum = 0;\n    for(long i=1; i<=k; i++){\n        if(arr[i]%10\
    \ >= arr[i-1]%10){\n            sum += arr[i-1];\n        }\n        else{\n \
    \           sum += arr[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpug23ovw7: /tmp/tmpug23ovw7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    // Your code\
    \ here\n    long sum = 0;\n    for(int i=0; i< k; i++){\n        sum += arr[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add_elements;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)-2, (long)-3, (long)41,\
    \ (long)57, (long)76, (long)87, (long)88, (long)99})), (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111,\
    \ (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp42wfro2y: /tmp/tmp42wfro2y.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long sum =\
    \ 0;\n    // Add all elements except first k elements, then the k elements is\
    \ the last element\n    for (size_t i = 1; i < arr.size() - k; ++i) {\n      \
    \  sum += arr[i];\n    }\n    sum += arr[k];\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmpt4h_2o4p: /tmp/tmpt4h_2o4p.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),
    (3)) == (-4)'' failed.

    '
  stdout: ''
  timestamp: 1660101988
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers arr and an integer k, return\n// the sum of the elements with at\
    \ most two digits from the first k elements of arr.\n// Example:\n// >>> add_elements((std::vector<long>({(long)111,\
    \ (long)21, (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4))\n// (24)\n// Constraints:\n// 1. 1 <= len(arr) <= 100\n// 2. 1 <= k <=\
    \ len(arr)\nlong add_elements(std::vector<long> arr, long k) {\n    long ans =\
    \ 0;\n    for (int i = 0; i < k; ++i) {\n        long val = arr[i];\n        ans\
    \ += val % 10;\n        val /= 10;\n        ans += val % 10;\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add_elements;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)-2, (long)-3, (long)41, (long)57, (long)76, (long)87, (long)88, (long)99})),\
    \ (3)) == (-4));\n    assert(candidate((std::vector<long>({(long)111, (long)121,\
    \ (long)3, (long)4000, (long)5, (long)6})), (2)) == (0));\n    assert(candidate((std::vector<long>({(long)11,\
    \ (long)21, (long)3, (long)90, (long)5, (long)6, (long)7, (long)8, (long)9})),\
    \ (4)) == (125));\n    assert(candidate((std::vector<long>({(long)111, (long)21,\
    \ (long)3, (long)4000, (long)5, (long)6, (long)7, (long)8, (long)9})), (4)) ==\
    \ (24));\n    assert(candidate((std::vector<long>({(long)1})), (1)) == (1));\n\
    }\n"
  status: Exception
  stderr: 'tmp4jfw0hlx: /tmp/tmp4jfw0hlx.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)111,
    (long)121, (long)3, (long)4000, (long)5, (long)6})), (2)) == (0)'' failed.

    '
  stdout: ''
  timestamp: 1660101989
