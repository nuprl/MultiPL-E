name: HumanEval_44_change_base
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Change numerical base of\
  \ input number x to base.\n// return string representation after the conversion.\n\
  // base numbers are less than 10.\n// >>> change_base((8), (3))\n// (\"22\")\n//\
  \ >>> change_base((8), (2))\n// (\"1000\")\n// >>> change_base((7), (2))\n// (\"\
  111\")\nstd::string change_base(long x, long base) {\n"
tests: "}\nint main() {\n    auto candidate = change_base;\n    assert(candidate((8),\
  \ (3)) == (\"22\"));\n    assert(candidate((9), (3)) == (\"100\"));\n    assert(candidate((234),\
  \ (2)) == (\"11101010\"));\n    assert(candidate((16), (2)) == (\"10000\"));\n \
  \   assert(candidate((8), (2)) == (\"1000\"));\n    assert(candidate((7), (2)) ==\
  \ (\"111\"));\n    assert(candidate((2), (3)) == (\"2\"));\n    assert(candidate((3),\
  \ (4)) == (\"3\"));\n    assert(candidate((4), (5)) == (\"4\"));\n    assert(candidate((5),\
  \ (6)) == (\"5\"));\n    assert(candidate((6), (7)) == (\"6\"));\n    assert(candidate((7),\
  \ (8)) == (\"7\"));\n}\n"
completions: ["\tstring ans = \"0\";\n\tif (base == 0) return ans;\n\twhile (x >=\
    \ base) {\n\t\tans += \"1\";\n\t\tx -= base;\n\t}\n\tans += x;\n\treturn ans;",
  "    long res = (long)x;\n    long temp = res;\n    if (temp < 0) {\n        temp\
    \ *= -1;\n        res = (long)(temp / base);\n    }\n    int remainder = temp\
    \ % base;\n    while (res) {\n        res /= base;\n        res %= base;\n   \
    \ }\n    while (remainder) {\n        res *= base;\n        remainder--;\n   \
    \ }\n    return std::to_string(res);", "  std::ios_base::fmtflags old_flags =\
    \ std::cout.flags();\n  std::cout.flags(std::ios_base::showbase);\n  std::cout\
    \ << \"x=\" << std::setw(10) << x << \"\\n\";\n  std::cout.flags(old_flags);\n\
    \  long result = x;\n  while (base > 1) {\n    if (result % base == 0) {\n   \
    \   result /= base;\n    } else {\n      result *= base;\n    }\n    base *= 10;\n\
    \  }\n  return std::to_string(result);", "    long res = 1;\n    while (x > 0)\
    \ {\n        long mod = x % base;\n        if (mod != 0) {\n            x /= base;\n\
    \            res *= base;\n        }\n        else {\n            x /= base;\n\
    \            res *= base;\n        }\n    }\n    return std::to_string(res);",
  "    long temp = x;\n    std::string res;\n    while (temp != 0) {\n        int\
    \ mod = temp % base;\n        temp = temp / base;\n        res = res + char(mod\
    \ + 48);\n    }\n    return res;", "    int res = 0;\n    std::string result;\n\
    \    while (x != 0) {\n        res = res * base + x % base;\n        x /= base;\n\
    \    }\n    if (res > 9)\n        result += (res - 9) * '0';\n    else\n     \
    \   result += res * '0';\n    return result;", "    char ans = static_cast<char>(0);\n\
    \    for (long i = x; i > 0; i /= base)\n        ans = static_cast<char>(ans +\
    \ (i % base));\n    return ans;", "\tstd::string res;\n\tfor (long i = 0, j =\
    \ 0, carry = 0; i < base; i++, j++) {\n\t\tcarry = 0;\n\t\twhile (x % base ==\
    \ 0) {\n\t\t\tx = x / base;\n\t\t\tcarry = 1;\n\t\t}\n\t\tres += j;\n\t\tif (carry)\
    \ res += \"0\";\n\t}\n\treturn res;", "  long xdigits[] = {0};\n  for (int i =\
    \ 0; i < (int)strlen(std::to_string(x)).size(); i++) {\n    xdigits[i] = std::stoi(std::to_string(x)).at(i)\
    \ - '0';\n  }\n  while (xdigits[base] > 9)\n    base--;\n  std::string result\
    \ = \"\";\n  while (base > 0) {\n    long remainder = std::remainder(x, base);\n\
    \    xdigits[base] = remainder % base;\n    x /= base;\n    base = std::abs(base);\n\
    \    result = std::to_string(xdigits[base]) + result;\n  }\n  return result;",
  "  int res = 0;\n  std::string output = \"\";\n  for (int i = 0; i < base; i++)\
    \ {\n    res += x % base;\n    x /= base;\n  }\n  while (x != 0) {\n    res +=\
    \ x % base;\n    x /= base;\n  }\n  while (res) {\n    output += base[res];\n\
    \    res /= base;\n  }\n  return output;", "    assert(base < 10);\n    std::string\
    \ res;\n    while (x) {\n        long ans = x % base;\n        x = x >> base;\n\
    \        std::string sres = std::to_string(ans);\n        res.insert(res.length(),\
    \ sres.begin(), sres.end());\n    }\n    return res;", "\tif (x < 0)\n\t\treturn\
    \ \"Invalid Input\";\n\tstd::string result;\n\tchar c;\n\tfor (long i = x; i >=\
    \ 0; i /= base)\n\t{\n\t\tc = (char) (i%base);\n\t\tresult += c;\n\t}\n\treturn\
    \ result;", "  string res;\n  while (x > 0) {\n    int div = x % base;\n    res\
    \ = to_string(x/div) + res;\n    x = x / base;\n  }\n  while (x != 0) {\n    if\
    \ (x > 0)\n      res = to_string(x / base) + res;\n    x = x / base;\n  }\n  reverse(begin(res),\
    \ end(res));\n  return res;", "    std::string ans = \"\";\n    while (x) {\n\
    \        int temp = x;\n        x /= base;\n        if (temp) {\n            ans\
    \ += temp + '0';\n        }\n    }\n    return ans;", "    std::string out = \"\
    \";\n    while (x>base) {\n        x /= base;\n        out += std::string(1, base%10)\
    \ + std::string(1, x%base);\n    }\n    out += std::string(1, x%base);\n    return\
    \ out;", "    std::string res;\n    while (x != 0) {\n        res.push_back((x\
    \ % base) + '0');\n        x /= base;\n    }\n    return res;", "    std::string\
    \ s;\n    if (x == 0)\n        return \"0\";\n    while (x != 0) {\n        long\
    \ r = x % base;\n        x /= base;\n        s = std::to_string(r) + s;\n    }\n\
    \    return s;", "    long temp = 0;\n    while (x > 0) {\n        temp = x %\
    \ base;\n        x /= base;\n        std::ostringstream s;\n        s << temp;\n\
    \        s += \"0\";\n        if (x < base) {\n            s += \"1\";\n     \
    \   }\n        return s.str();\n    }\n    std::ostringstream s;\n    while (x\
    \ > 0) {\n        temp = x % base;\n        x /= base;\n        s += temp;\n \
    \       if (x < base) {\n            s += \"1\";\n        }\n    }\n    return\
    \ s.str();", "    assert(x > 0);\n    assert(x < base);\n    long tmp = x;\n \
    \   std::string res = \"\";\n    while (1) {\n        if (tmp % base == 0) {\n\
    \            if (res.length() != 0)\n                res += '0';\n           \
    \ res += tmp % base;\n            break;\n        }\n        tmp /= base;\n  \
    \  }\n    if (res.length() == 0 && tmp != 0)\n        res += tmp;\n    return\
    \ res;", "  if (base < 10)\n    base += 1;\n  std::ostringstream os;\n  os <<\
    \ std::setbase(base) << x;\n  return os.str();", "    if (base < 2 || base > 10)\
    \ {\n        throw std::invalid_argument(\n            \"Base must be in the range\
    \ [2,10], found \" + std::to_string(base));\n    }\n    if (x <= 0) {\n      \
    \  throw std::invalid_argument(\n            \"x must be positive and non-zero,\
    \ found \" + std::to_string(x));\n    }\n    long y = 1;\n    for (int i = base;\
    \ i > 0; --i) {\n        if (x >= y) {\n            y *= base;\n        }\n  \
    \      else {\n            y *= base;\n            x /= base;\n        }\n   \
    \ }\n    return std::to_string(x);", "    if (base > 10)\n        return \"Invalid\
    \ Base\";\n    std::string result;\n    int power = 1;\n    char ch;\n    while\
    \ ((x != 0) && (x <= base)) {\n        ch = x % base;\n        x = x / base;\n\
    \        power = power * base;\n        result = std::to_string(power) + ch;\n\
    \    }\n    return result;", "    // base numbers are less than 10.\n    if (base\
    \ < 10)\n        base += 1;\n    int res = 0;\n    while (x > 0) {\n        int\
    \ rem = x % base;\n        res += (rem > 9 ? 9 : rem);\n        x /= base;\n \
    \   }\n    return std::to_string(res % base);", "    std::string output;\n   \
    \ if (base < 2) {\n        output = to_string(base);\n        return output;\n\
    \    }\n    std::string s;\n    if (x == 0) {\n        s = \"\";\n    } else {\n\
    \        if (x > 0) {\n            std::string rep = to_string(x / base);\n  \
    \          for (int i = rep.length() - 1; i >= 0; i--) {\n                s =\
    \ s + \"0\"; // insert zero from right to left.\n            }\n            int\
    \ power = base;\n            while (rep.length() % power != 0) {\n           \
    \     power = power * 10;\n            }\n            std::string s2(power, rep);\n\
    \            s = s2;\n        }\n    }\n    if (base == 10 && s.length() == 1)\
    \ {\n        s = \"0\" + s;\n    }\n    return s;", "    std::string ans;\n  \
    \  ans.reserve((1 + base) * 3);\n    long rem = x % base;\n    long p = 0;\n \
    \   long q = x / base;\n    if (q > 0) {\n        ans.push_back('0');\n    }\n\
    \    if (rem > 0) {\n        if (rem == base) {\n            ans.push_back('1');\n\
    \        } else {\n            p = rem / base;\n            ans.push_back(static_cast<char>('0'\
    \ + p));\n            ans.push_back(static_cast<char>('1' + rem % base));\n  \
    \      }\n    }\n    while (p > 0) {\n        ans.push_back(static_cast<char>('0'\
    \ + p));\n        p /= base;\n    }\n    return ans;", "    string rep = \"\"\
    ;\n    while (x > 0){\n        rep.push_back((x % base) + 4); // Add 4 to make\
    \ it an exact base 10 number.\n        x /= base;\n    }\n    if (rep.back() !=\
    \ 4){\n        rep.push_back(4);\n    }\n    while (rep.size() % base != 0) {\n\
    \        rep.push_back(0);\n    }\n    return rep;", "  if (x < base)\n    x +=\
    \ (base - 1);\n  std::string s(1, (char)(x % base));\n  x /= base;\n  while (x\
    \ > 0) {\n    s += (char)(x % base);\n    x /= base;\n  }\n  return s;", "   \
    \ long tmp;\n    tmp = x;\n    while (base > 0 && (tmp % base) == 0)\n       \
    \ tmp = tmp / base;\n    tmp = tmp % base;\n    return std::to_string(tmp);",
  "  long tmp = x;\n  string res;\n  while (tmp != 0) {\n    res += (tmp % base);\n\
    \    tmp /= base;\n  }\n  return res;", "  std::string result;\n  while (x !=\
    \ 0) {\n    long rem = x % base;\n    if (rem < 10)\n      result.push_back(rem+48);\n\
    \    else\n      result.push_back('0'+rem);\n    x /= base;\n  }\n  if (base <\
    \ 10)\n    result.push_back('0'+base);\n  return result;", "    assert(base <\
    \ 10);\n    long tmp = x;\n    std::string ans = \"\";\n    while(base > 0) {\n\
    \        if (tmp % base == 0) {\n            tmp /= base;\n            ans +=\
    \ std::to_string(tmp);\n            base /= 10;\n        } else {\n          \
    \  ans += '0';\n            base /= 10;\n        }\n    }\n    ans += std::to_string(tmp);\n\
    \    return ans;", "  std::string result = \"\";\n  long rem = x % base;\n  while\
    \ (rem != 0) {\n    rem = rem / base;\n    result += static_cast<char>('0' + rem\
    \ % base);\n  }\n  return result;", "  string str;\n  int rem;\n  // convert x\
    \ to number system\n  long n = x;\n  // set base to 10\n  while (n != 0) {\n \
    \   rem = n % base;\n    n = n / base;\n    str = to_string(base) + to_string(static_cast<int>(rem))\
    \ + str;\n  }\n  reverse(begin(str), end(str));\n  return str;", "    if (base\
    \ == 0) {\n        return \"0\";\n    }\n    if (base == 1) {\n        return\
    \ std::to_string(x);\n    }\n\n    std::string num = \"\";\n\n    while (x > 0)\
    \ {\n        num =  (x % base) + num;\n        x /= base;\n    }\n    return num;",
  "    long a = x;\n    int b = 0;\n    while (a != 0) {\n        int x = a % base;\n\
    \        a = (a / base) - x;\n        b = (b * base) + x;\n    }\n    return std::to_string(b);",
  "\tstd::string result;\n\tlong t;\n\tlong temp;\n\tint i, digit = 0;\n\t\n\tfor(i\
    \ = 0; i <= base; i++) {\n\t\ttemp = t % base;\n\t\tdigit = temp % 10;\n\t\tt\
    \ = t / 10;\n\t\tresult.insert(result.begin() + i, digit);\n\t}\n\treturn result;",
  "    if (base < 21) return std::to_string(base);\n    long rem = x % base;\n   \
    \ std::string result = change_base(rem, base);\n    return (x /= base) + result;",
  "  string result = \"\";\n  while (x > 0) {\n    if (x % base == 0) {\n      result\
    \ += (x % base);\n    }\n    x /= base;\n  }\n  return result;", "  // your code\
    \ goes here\n  std::map<long, std::map<long, long>> m;\n  m[0] = { {10, 10}, {10,\
    \ 11}, {10, 12}, {10, 13}, {10, 14}, {10, 15}, {10, 16}, {10, 17} };\n  m[1] =\
    \ { {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1} };\n\
    \  m[2] = { {10, 0}, {11, 0}, {12, 0}, {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17,\
    \ 0} };\n  m[3] = { {1, 0}, {2, 0}, {3, 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}, {8,\
    \ 0}, {9, 0} };\n  m[4] = { {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7,\
    \ 1}, {8, 1}, {9, 1} };\n  m[5] = { {10, 0}, {11, 0}, {12, 0}, {13, 0}, {14, 0},\
    \ {15, 0}, {16, 0}, {17, 0} };\n  m[6] = { {10, 1}, {11, 1}, {12, 1}, {13, 1},\
    \ {14, 1}, {15, 1}, {16, 1}, {17, 1} };\n  m[7] = { {10, 0}, {11, 0}, {12, 0},\
    \ {13, 0}, {14, 0}, {15, 0}, {16, 0}, {17, 0} };\n  m[8] = { {1, 0}, {2, 0}, {3,\
    \ 0}, {4, 0}, {5, 0}, {6, 0}, {7, 0}, {8, 0}, {9, 0} };\n  m[9] = { {10, 1}, {11,\
    \ 1}, {12, 1}, {13, 1}, {14, 1}, {15, 1}, {16, 1}, {17, 1} };\n\n  std::string\
    \ result = \"\";\n  long i = 1;\n  while (base * i <= x) {\n    long res = 0;\n\
    \    while (base * i <= x && i <= 18) {\n      res = res * base + (x / m[base][i]\
    \ - 1);\n      i = i + 1;\n    }\n    result = std::to_string(res) + result;\n\
    \  }\n  return result;", "  assert(base < 10);\n  std::string result;\n  // If\
    \ the base is less than 10, we can simply print it as it is.\n  if (base < 10)\
    \ {\n    result = std::to_string(x);\n  } else {\n    // otherwise, we'll need\
    \ to convert it.\n    int remainder = x;\n    // We add an extra zero to every\
    \ number less than 10.\n    while (remainder < 10) {\n      result.append(1, '0');\n\
    \      remainder++;\n    }\n    // We subtract an extra zero from every number\
    \ greater than 10.\n    while (base > 1 && remainder >= base) {\n      result.append(1,\
    \ '0');\n      remainder -= base;\n    }\n    if (remainder > 0)\n      result.append(1,\
    \ remainder + '0');\n  }\n  return result;", "  long mod = pow(base, base);\n\
    \  long y = x / mod;\n  long result = x % mod;\n  std::string result = std::to_string(result)\
    \ + \"0\";\n  long i = 1;\n  while (i <= base) {\n    result = result + std::to_string(i)\
    \ + \"0\";\n    i = i * base;\n  }\n  return result;", "    long tmp = base;\n\
    \    std::string res;\n    while (tmp != 0) {\n        if (x % tmp == 0)\n   \
    \         res += (char)(x % tmp);\n        x /= tmp;\n        tmp--;\n    }\n\
    \    return res;", "  std::string result;\n  // Convert number to string representation\
    \ in base base\n  // We do this by first converting the integer to a string in\
    \ base base\n  // and then removing the last character.\n  // For example:\n \
    \ // base = 10\n  // x = 22\n  // str(10) = 22\n  // str(22) = \"22\"\n  // str(22)[1]\
    \ = \"2\"\n  // str(22)[2] = \"0\"\n  // str(22)[3] = \"0\"\n  std::string num\
    \ = std::to_string(static_cast<int>(x));\n  while (num.size() > 0) {\n    // Convert\
    \ the last digit in num to the desired base\n    // For example, if num = \"22\"\
    , then we convert it to base 10.\n    // The conversion is done as follows:\n\
    \    // \"22\" --> \"10\" --> \"1\"\n    //  --> \"2\" --> \"2\"\n    //   -->\
    \ \"0\" --> \"0\"\n    //    --> \"0\" --> \"0\"\n    // We add these numbers\
    \ together to get the result we want.\n    long r = std::stoul(num.substr(0, num.size()\
    \ - 1), nullptr, base);\n    num.erase(num.size() - 1);\n    // Add the base r\
    \ to the current result to get the final result.\n    result += std::to_string(r);\n\
    \  }\n  // Return the result containing the changed base.\n  return result;",
  "    string s;\n    while (x) {\n        long r = x % base;\n        x /= base;\n\
    \        s = to_string(base) + to_string(r);\n    }\n    while (s.size() < base)\n\
    \        s += '0';\n    return s;", "    long s = 1;\n    std::string answer;\n\
    \    while (x >= base) {\n        answer += (x/base);\n        x %= base;\n  \
    \      s += s*base;\n    }\n    answer += (x/s);\n    x %= s;\n    answer += x;\n\
    \    return answer;", "  long new_base = 10;\n  assert(base < 10);\n  while (new_base\
    \ < base) {\n    new_base *= base;\n  }\n  long mod = x;\n  while (mod) {\n  \
    \  long rem = mod % new_base;\n    mod = mod / new_base;\n    x = (x / new_base)\
    \ + rem;\n  }\n  return std::to_string(x);", "  assert(base < 10);\n  std::string\
    \ s = std::to_string(x);\n  char *p = nullptr;\n  long r = strtoul(s.c_str(),\
    \ &p, base);\n  if (p == s.c_str())\n    return \"0\";\n  else\n    return std::to_string(r);",
  "    std::string ans = \"\";\n    while (x) {\n        if ((x % base) == 0) {\n\
    \            ans += \"0\";\n        } else {\n            ans += \"1\";\n    \
    \    }\n        x /= base;\n    }\n    return ans;", "    long tmp = x;\n    int\
    \ res = 0;\n    while (1) {\n        res *= base;\n        if (res <= 0)\n   \
    \         tmp--;\n        res /= base;\n        if (tmp == 0)\n            break;\n\
    \    }\n    std::string rs = \"\";\n    while (x > 0) {\n        rs += (char)(x\
    \ % base);\n        x /= base;\n    }\n    return rs;", "    std::string s(to_string(x));\n\
    \    int pos = 0;\n    while (s[pos] == '0' && pos < s.size()) {\n        pos++;\n\
    \    }\n    s.erase(pos);\n    while (base) {\n        if (base % 2 == 1) {\n\
    \            s.insert(pos, \"1\");\n        }\n        if (base % 2 == 0) {\n\
    \            s.insert(pos, \"0\");\n        }\n        base /= 2;\n        pos++;\n\
    \    }\n    return s;", "    if (base < 10)\n        throw std::invalid_argument(\"\
    base<10\");\n    long x = std::abs(x);\n    long mod = 1;\n    std::string ans\
    \ = \"\";\n    while (x > 1) {\n        if (x == base) {\n            ans = std::to_string(mod);\n\
    \            break;\n        }\n        if (x%base == 0) {\n            ans +=\
    \ std::to_string(mod);\n            mod = 1;\n        } else {\n            mod\
    \ *= base;\n            ans += std::to_string(mod);\n        }\n        x /= base;\n\
    \    }\n    return ans;", "    long temp;\n    temp = x;\n    if (x != 0) {\n\
    \        temp = x % base;\n    }\n    std::string res = std::to_string(temp);\n\
    \    while (temp != 0) {\n        if (res.length() == 1) {\n            res =\
    \ \"0\" + res;\n        }\n        if (base == 10)\n            temp = temp /\
    \ 10;\n        else\n            temp = temp / base + 1;\n        temp = temp\
    \ % base;\n        res = std::to_string(temp) + res;\n    }\n    return res;",
  "    long a = 0, b = 0, m = 0;\n    long i = 1;\n    long s = 0, t = 1;\n    while\
    \ (x > 0) {\n        if (x % base == 0) {\n            s += t;\n            t\
    \ *= base;\n        }\n        x /= base;\n        a++;\n    }\n    if (a == 0)\
    \ {\n        return std::to_string(s);\n    }\n    m = a;\n    a--;\n    while\
    \ (a > 0) {\n        b++;\n        x /= base;\n        a--;\n    }\n    s = \"\
    0\";\n    t = 1;\n    while (a > 0) {\n        s += t;\n        t *= base;\n \
    \       a--;\n    }\n    if (m == 0 && s == 0) {\n        return \"\";\n    }\
    \ else {\n        return std::to_string(s);\n    }", "  if (base < 2) return \"\
    Invalid base number\";\n  long ans = 1;\n  while (x != 0) {\n    long r = x %\
    \ base;\n    x /= base;\n    ans *= base;\n    if (r == 0) break;\n    ans -=\
    \ r;\n  }\n  return to_string(ans);", "  // base is less than 10.\n  if (base\
    \ < 10)\n    base = base * 10;\n\n  long x_rem = x % base;\n  std::string s =\
    \ \"\";\n\n  while (x_rem > 0) {\n    s += (char)(x_rem % base);\n    x_rem /=\
    \ base;\n  }\n\n  if (x_rem != 0)\n    s += (char)(x_rem % base);\n\n  return\
    \ s;", "    std::string res;\n    bool flag = true;\n    while (x >= base) {\n\
    \        flag = flag;\n        x /= base;\n    }\n    if (flag) {\n        std::string\
    \ num;\n        long num = x;\n        while (num != 0) {\n            num *=\
    \ base;\n            int div = num % base;\n            if (div == 0)\n      \
    \          break;\n            num /= base;\n            if (num != 0)\n     \
    \           num += div;\n        }\n        res.append(num);\n        while (res.size()\
    \ > 1)\n            res.pop_back();\n    }\n    return res;", "    // base numbers\
    \ are less than 10\n    assert(base > 0);\n    std::string ans;\n    if (x ==\
    \ 0)\n        ans = \"0\";\n    else if (x < base)\n        ans = std::to_string(x\
    \ - base);\n    else\n        ans = std::to_string(base);\n    ans += std::to_string(x);\n\
    \    return ans;", "    if (base < 1 || base > 10) {\n        return \"Invalid\
    \ input\";\n    }\n    long tmp = (long long) x;\n    if (tmp < 0) {\n       \
    \ tmp = -tmp;\n    }\n    long tmp = tmp / base;\n    std::string s = std::to_string(tmp);\n\
    \    while (s.back() == '0') {\n        s.erase(s.size() - 1);\n    }\n    if\
    \ (s.rbegin() == '0') {\n        s = \"1\" + s;\n    }\n    return s;", "    std::string\
    \ rep_num = \"\";\n    while (x) {\n        long mod = x % base;\n        long\
    \ rem = x / base;\n        char char_mod = (char) mod;\n        rep_num += char_mod;\n\
    \        x = rem;\n    }\n    return rep_num;", "    std::string result;\n   \
    \ while (x != 0) {\n        int rem = x % base;\n        x /= base;\n        result.append(1,\
    \ rem + '0');\n    }\n    \n    return result;", "  string ans;\n  if (base >\
    \ 10) {\n    ans = \"\";\n  } else {\n    ans = to_string(x/base);\n    x %= base;\n\
    \  }\n  while (ans.size() > 3) {\n    ans.erase(ans.size() - 1);\n  }\n  while\
    \ (ans.size() < 3) {\n    ans += \"0\";\n  }\n  return ans;", "    std::string\
    \ s = \"\";\n    long tmp = x;\n    while (tmp != 0) {\n        int digit = (tmp\
    \ % base);\n        s = std::to_string(digit) + s;\n        tmp /= base;\n   \
    \ }\n    while (s.size() < base) s = \"0\" + s;\n    return s;", "    assert(x\
    \ > 0);\n    assert(base > 0);\n    long result = 1;\n    for (long i = x; i >\
    \ 1; i *= base)\n        result *= base;\n    result += x;\n    std::string s\
    \ = std::to_string(result);\n    if (base * 2 >= x)\n        s += \"b\";\n   \
    \ else if (base * 2 < x)\n        s += \"o\";\n    return s;", "  std::string\
    \ result;\n  int n = base;\n  while (x > 0) {\n    result += (x % n) + \"\";\n\
    \    x = x / n;\n  }\n  return result;", "    long res = 0;\n    long baseNum\
    \ = x;\n    while (baseNum > 0) {\n        res += baseNum % base;\n        baseNum\
    \ /= base;\n    }\n    return to_string(res);", "    std::string ans = std::to_string(x);\n\
    \    while (ans.size() >= base) {\n        ans.erase(ans.size() - 1);\n    }\n\
    \    while (ans.size() < base) {\n        ans = ans + \"0\";\n    }\n    return\
    \ ans;", "    long q = x/base;\n    long r = x%base;\n    if(q == 0)\n       \
    \ return std::string(1, r+1);\n    else\n        return change_base(q,base)+\"\
    1\";", "    std::string ans;\n    // base numbers are less than 10.\n    if (base\
    \ < 2) return \"Invalid Input\"; \n    // if the number is zero, return an empty\
    \ string.\n    if (x == 0) return \"\";\n    // if the number is less than base,\
    \ return empty string.\n    if (x < base) return \"\";\n    // convert the number\
    \ to a string.\n    ans = to_string(base);\n    // subtract and append the base\
    \ to the number.\n    while (x) {\n        int c = x % base;\n        ans = to_string(c)\
    \ + ans;\n        x = x / base;\n    }\n    // reverse the string\n    reverse(ans.begin(),\
    \ ans.end());\n    return ans;", "    int digits = 1;\n    long r = x;\n    std::string\
    \ res;\n    while (digits > 0 && r != 0) {\n        res.push_back(r % base);\n\
    \        r /= base;\n        digits--;\n    }\n    res.push_back(r);\n    return\
    \ res;", "    // Convert base to string (base > 10)\n    std::string s = std::to_string(base);\n\
    \    std::string sx = std::to_string(x);\n    if (base > 10) {\n        s = \"\
    0\" + s;\n        sx = \"0\" + sx;\n    }\n    // Add \"0\" if necessary at end\
    \ of string.\n    if (s.size() <= sx.size()) {\n        s += \"0\";\n        sx\
    \ += s;\n    }\n    // Reverse the string representation\n    std::string ret\
    \ = sx[s.size() - 1] + s;\n    // Reverse\n    for (long i = sx.size() - 1; i\
    \ > 0; i--) {\n        ret = ret[sx.size() - i - 1] + ret;\n    }\n    return\
    \ ret;", "    long x_mod = x % base;\n    std::string output;\n    while (x >\
    \ base) {\n        x /= base;\n        output += (char)(base - x_mod);\n     \
    \   x_mod += base;\n    }\n    output += (char)(x - x_mod);\n    return output;",
  "   std::string res = \"\";\n   while (x > 0) {\n      res += std::to_string(x%base);\n\
    \      x = x / base;\n   }\n   return res;", "  std::string s = std::to_string(x);\n\
    \  while (s.back() != '0') {\n    s.erase(s.end() - 1);\n  }\n  while (s.size()\
    \ < base) {\n    s = \"0\" + s;\n  }\n  s.insert(s.begin(), std::to_string(base));\n\
    \  return s;", "    long xl = x;\n    long xh = x;\n    long res = x;\n    while\
    \ (x != 0) {\n        res /= base;\n        xl %= base;\n        xh /= base;\n\
    \    }\n    // Convert string representation of integer 'res' to string representation\
    \ of base 'base'.\n    std::string base_res = std::to_string(res);\n    while\
    \ (base_res.length() < base) {\n        res++;\n        base_res = \"0\" + base_res;\n\
    \    }\n    return base_res;", "    long res = x;\n    while (base > 1 && res\
    \ > 0) {\n        res = res / base;\n        base = base * 10;\n    }\n    while\
    \ (base < 10) {\n        res = res * base;\n        base = base * 10;\n    }\n\
    \    std::string ans;\n    while (res) { ans = std::to_string(res%base) + ans;\
    \ }\n    return ans;", "    long n = x;\n    long r = 1;\n    while (n > 0) {\n\
    \        r = r * base;\n        n /= base;\n    }\n    long result = r;\n    while\
    \ (result < x) {\n        result++;\n    }\n    std::string str = \"\"; // This\
    \ can be improved.\n    while (result > 0) {\n        str += (char)(result % base);\n\
    \        result /= base;\n    }\n    return str;", "  std::string rep_str;\n \
    \ long rep = 0;\n  while (x) {\n    rep *= base;\n    rep += x % base;\n    x\
    \ /= base;\n  }\n  while (rep > 0) {\n    rep_str.push_back(rep % 10);\n    rep\
    \ /= 10;\n  }\n  return rep_str;", "    // Get the string representation of number\
    \ x.\n    std::string num = std::to_string(x);\n\n    // Check base value.\n \
    \   if (base < 1 || base > 10) {\n        std::cerr << \"Error: The base must\
    \ be a number between 1 and 10!\\n\";\n        exit(-1);\n    }\n\n    // Convert\
    \ string representation to base 10.\n    std::string res = \"\";\n    for (char\
    \ c : num) {\n        if (c >= '0' && c <= '9') {\n            // Convert ASCII\
    \ to its numerical value.\n            int num = c - '0';\n            \n    \
    \        // Calculate the new value of number in base 10.\n            long rem\
    \ = num % base;\n            num /= base;\n\n            // Update new converted\
    \ value.\n            res = std::to_string(num) + res;\n\n            // If the\
    \ new converted value is greater than 10, add '0'\n            // to the converted\
    \ value.\n            if (rem > 10)\n                res = std::to_string(num)\
    \ + res + std::string(\"0\");\n            else\n                res = std::to_string(num)\
    \ + res;\n        }\n    }\n\n    return res;", "    long tmp = x;\n    long res\
    \ = 0;\n    long power = 1;\n    long res = x;\n    while (x >= base) {\n    \
    \    tmp = x % base;\n        res *= base;\n        res += tmp;\n        power\
    \ *= base;\n        x = x / base;\n    }\n    return std::to_string(res) + std::to_string(power);",
  "    std::bitset<32> bs = std::bitset<32>(x);\n    bs.flip();\n    bs.set(32 - base);\n\
    \    return bs.to_string();", "    std::string s = std::to_string(x);\n    if\
    \ (base < 0 || base >= 10)\n        return \"Invalid base!\";\n    int n = s.size();\n\
    \    int new_base = 1, i = 1, remain = 0;\n    while (i < n) {\n        remain\
    \ = base - s[i];\n        if (remain <= 0)\n            break;\n        new_base\
    \ += remain;\n        i++;\n    }\n    std::string result = \"\";\n    while (new_base\
    \ > 0) {\n        result = std::to_string(new_base) + result;\n        new_base\
    \ /= base;\n    }\n    return result + s;", "    // assert(base <= 10);\n    if\
    \ (base < 2)\n        base = 10;\n    int rem = x;\n    int n = 0;\n    while\
    \ (n <= 10 - base) {\n        rem = rem / base;\n        n += 1;\n    }\n    return\
    \ std::to_string(x) + std::to_string(rem);", "    // write your code here\n  \
    \  std::string res = \"\";\n    while (x != 0)\n    {\n        res += (x % base)\
    \ + \"\";\n        x /= base;\n    }\n    std::reverse(std::begin(res), std::end(res));\n\
    \    std::reverse(res.begin(), res.end());\n    return res;", "    // Complete\
    \ the code\n    string ans = \"\";\n    if (base < 10) {\n        long m = x /\
    \ base;\n        ans = std::to_string(base) + std::to_string(m);\n        ans.erase(ans.size()\
    \ - 1);\n    } else {\n        long m = x % base;\n        while (m) {\n     \
    \       ans = std::to_string(base) + std::to_string(m);\n            ans.erase(ans.size()\
    \ - 1);\n            base = base * 10;\n            m = x / base;\n        }\n\
    \    }\n    return ans;", "    long temp = x;\n    long res = temp;\n    while\
    \ (temp > 0) {\n        temp = temp / base;\n        res = res * base + temp;\n\
    \    }\n    std::string resStr = std::to_string(res);\n    while (resStr.length()\
    \ < 5) {\n        resStr = \"0\" + resStr;\n    }\n    return resStr;", "    std::string\
    \ s = std::to_string(x);\n    if (base < 10)\n        s = \"0\" + s;\n    std::string\
    \ r = \"\";\n    for (long i = 0; i < (s.size() - 1) / 2; i++) {\n        char\
    \ c = s[i];\n        long d = atol(s.c_str() + i + 1);\n        long o = 0;\n\
    \        if (base > 1) {\n            o = d / base;\n            d = d % base;\n\
    \        }\n        if (d > 0) {\n            o = base;\n        }\n        d\
    \ += o;\n        d *= base;\n        r += c;\n        r += std::to_string(d);\n\
    \    }\n    return r;", "    std::string r;\n    long div = x;\n    while (div\
    \ > 0) {\n        div = div / base;\n        r += (div % base + base);\n    }\n\
    \    return r;", "\tassert(base < 10);\n\tstd::string ans = \"\";\n\tlong rem\
    \ = x;\n\tlong quotient = 0;\n\twhile (rem > 0) {\n\t\tquotient = rem / base;\n\
    \t\tans += std::to_string(quotient);\n\t\trem -= quotient * base;\n\t}\n\treturn\
    \ ans;", "    std::string s = std::to_string(x);\n    if (base < 2) s = std::to_string(base);\n\
    \    long sum = 0;\n    std::string result = \"\";\n    for (char &c : s) {\n\
    \        int value = c - '0';\n        if (value >= base) {\n            sum *=\
    \ base;\n            sum += value;\n        } else {\n            sum += value;\n\
    \        }\n        result += std::to_string(sum % base);\n    }\n    return result\
    \ + '0';", "    std::ostringstream ss;\n    ss << std::setbase(base) << (x);\n\
    \    return ss.str();", "    std::string res;\n    if (base < 10) {\n        res\
    \ = std::to_string(x);\n    } else {\n        while (x > 0) {\n            res.insert(0,\
    \ base % 10);\n            x /= 10;\n        }\n    }\n    return res;", "   \
    \ long tmp = x;\n    long rem, tenpow;\n    std::string result = \"\";\n    while\
    \ (x > 0) {\n        rem = tmp % base;\n        tenpow = tmp / base;\n       \
    \ if (tenpow > 0) {\n            result += to_string(rem);\n            tmp /=\
    \ base;\n        } else {\n            result += to_string(rem) + to_string(base);\n\
    \        }\n        tmp %= base;\n    }\n    return result;", "  long result =\
    \ 0;\n  while (x > 0) {\n    result += x % base;\n    x /= base;\n  }\n  return\
    \ std::to_string(result);", "    long x_mod = x % base;\n    std::string temp;\n\
    \    if (x_mod > 0) {\n        temp += change_base(x / base, base);\n    }\n \
    \   if (x_mod < base) {\n        temp += change_base(x / base, base);\n    }\n\
    \    temp += std::to_string(base);\n    return temp;", "    assert(base <= 10);\n\
    \    if (base == 10)\n        return x;\n    long mod = x % base;\n    std::string\
    \ s(1, static_cast<char>(base));\n    while (mod > 0) {\n        mod = mod % base;\n\
    \        s+=static_cast<char>(base);\n    }\n    return s;", "  std::ostringstream\
    \ ss;\n  ss << std::setw(sizeof(long) * 2) << std::setfill('0') << x;\n  long\
    \ res = 0;\n  for (int i = 0; i < ss.str().size(); i++) {\n    char c = ss.str()[i];\n\
    \    if (c >= '0' && c <= '9') res += (c - '0') * base;\n    else if (c >= 'A'\
    \ && c <= 'Z') res += (c - 'A' + 10) * base;\n    else if (c >= 'a' && c <= 'z')\
    \ res += (c - 'a' + 10) * base;\n  }\n  return std::to_string(res);", "    if\
    \ (base > 10) {\n        throw \"invalid base\";\n    }\n    long temp = x;\n\
    \    long mod = 1;\n    for (long i = 1; i < base; i++) {\n        temp *= base;\n\
    \        mod *= base;\n    }\n    while (temp > 0) {\n        if (temp % base\
    \ == 0) {\n            return std::to_string(mod);\n        }\n        temp /=\
    \ base;\n        mod /= base;\n    }\n    return std::to_string(mod);", "    std::stack<char>\
    \ s;\n    while (x > 0) {\n        s.push('0' + x % base);\n        x /= base;\n\
    \    }\n    if (s.empty()) s = \"0\";\n    return s.top();", "    std::string\
    \ res;\n    if (base > 9) {\n        long temp = 1;\n        while (temp <= base)\
    \ {\n            temp *= base;\n        }\n        temp = temp % 10;\n       \
    \ res += static_cast<char>(temp + 48);\n    } else {\n        while (base > 0)\
    \ {\n            if (x > 0) {\n                x /= base;\n            }\n   \
    \         x %= base;\n            base /= 10;\n            res += static_cast<char>(base\
    \ + 48);\n        }\n    }\n    return res;", "  std::bitset<32> bs(x);\n  if\
    \ (base == 10) {\n    return bs.to_string();\n  }\n  if (base < 10) {\n    throw\
    \ std::runtime_error(\"base must be less than 10\");\n  }\n  std::string sx =\
    \ \"\";\n  while (bs) {\n    sx += bs % base + '0';\n    bs /= base;\n  }\n  return\
    \ sx;", "  char s[100];\n  // Changing base from number to number.\n  while (x\
    \ > 0) {\n    long y = x / base;\n    char tmp = s[sizeof(s) - 1];\n    s[sizeof(s)\
    \ - 1] = bases[y % base];\n    base = base;\n    x = y;\n  }\n  // Reversing string\
    \ to number.\n  for (int i = 0; i < sizeof(s) - 2; i++) {\n    long k = s[i];\n\
    \    long temp;\n    if (k == '0') {\n      temp = k;\n    }\n    else {\n   \
    \   temp = temp * base + k - '0';\n    }\n    s[i] = temp % 10 + '0';\n  }\n \
    \ long temp = temp * base + s[i];\n  char tmp2 = s[sizeof(s) - 2];\n  s[sizeof(s)\
    \ - 2] = bases[temp % base];\n  return std::string(s);", "    assert(base > 1\
    \ && base < 10);\n    if (base == 10)\n        return \"10\";\n    std::string\
    \ res = std::to_string(x % base);\n    while (res.size() < base)\n        res\
    \ = \"0\" + res;\n    return res;", "    assert(base >= 1 && base <= 10);\n  \
    \  long ans = 1;\n    while (x > 0) {\n        int rem = x % base;\n        x\
    \ = x // base;\n        ans = ans * base + rem;\n    }\n    std::string str(ans);\n\
    \    return str;", "    string ans = \"0\";\n    while (x) {\n        long d =\
    \ x%base;\n        ans.insert(ans.begin(), static_cast<char>(d));\n        x =\
    \ x/base;\n    }\n    return ans;", "  std::string res;\n  while (x) {\n    if\
    \ (x % base == 0) {\n      res += '0' + x % base;\n      x = x / base;\n    }\
    \ else {\n      res += '0' + x % base;\n      x = 0;\n    }\n  }\n  return res;",
  "    std::string ans = \"\";\n    ans += std::to_string(x % base);\n    while (x\
    \ /= base)\n        ans += '0' + std::to_string(x % base);\n    return ans;",
  "    std::string ans;\n    long xn = x;\n    while (base != 0) {\n        long rem\
    \ = xn % base;\n        ans = to_string(rem) + ans;\n        xn /= base;\n   \
    \     base--;\n    }\n    if (xn == 0) {\n        ans = \"0\" + ans;\n    }\n\
    \    return ans;", "    if (base < 10) {\n        std::string res = std::to_string(x);\n\
    \        res.insert(res.begin(), (base - 1) * '0');\n        return res;\n   \
    \ } else {\n        std::string res = std::to_string(x);\n        res.insert(res.begin(),\
    \ base * '0');\n        res.insert(res.end() - 1, (base - 1) * '0');\n       \
    \ return res;\n    }", "  assert(x < base);\n  if (x < base)\n    x = base;\n\
    \  std::string result = std::to_string(x);\n  if (base % 2 == 0)\n    result =\
    \ result + \"0\";\n  long len = result.size();\n  while (len >= 1 && result[len\
    \ - 1] == '0')\n    len--;\n  result = result.substr(0, len);\n  std::string str\
    \ = \"\";\n  for (auto c : result)\n    str = str + std::to_string(static_cast<int>(c));\n\
    \  while (str.length() < 4)\n    str = \"0\" + str;\n  return str;", "\tint ans\
    \ = 0;\n\tint xx = x;\n\tint bn = base;\n\twhile (true) {\n\t\tif (xx >= b) {\n\
    \t\t\tans = bn + (ans * bn);\n\t\t\txx %= b;\n\t\t} else {\n\t\t\tans += bn;\n\
    \t\t\txx /= b;\n\t\t}\n\t\tbn *= base;\n\t}\n\treturn std::to_string(ans);", " \
    \   string result = \"\";\n    while (x != 0) {\n        if (x % base == 0)\n\
    \            result += x;\n        x /= base;\n    }\n    return result;", "\t\
    std::string res;\n\twhile (x > 0) {\n\t\tlong tmp = (x % base);\n\t\tres = to_string(tmp)\
    \ + res;\n\t\tx = x / base;\n\t}\n\treturn res;", "  long tmp = x;\n  std::string\
    \ ans = \"\";\n  while (tmp != 0) {\n    long rem = tmp % base;\n    ans.push_back(rem\
    \ + '0');\n    tmp = tmp / base;\n  }\n  return ans;", "    std::string s = std::to_string(x);\n\
    \    while (s.size() < base) {\n        s = \"0\" + s;\n    }\n    return s;",
  "    if (base < 2 || base > 36) {\n        return \"Error Base Value\";\n    }\n\
    \    long remainder = x;\n    long result = 1;\n    while (x != 0) {\n       \
    \ remainder *= base;\n        result += remainder;\n        remainder %= base;\n\
    \        x /= base;\n    }\n    return std::to_string(result) + std::to_string(x);",
  "    long s = 1;\n    long r = x;\n    while (x > 0) {\n        long p = r / base;\n\
    \        s = s * base;\n        r = p - r;\n    }\n    std::string res = std::to_string(r);\n\
    \    while (s > base) {\n        res = res + \"0\";\n        s -= base;\n    }\n\
    \    return res + std::to_string((long long)s);", "\tstd::string ans = \"\";\n\
    \tint b = 0;\n\twhile (x >= base)\n\t{\n\t\tb++;\n\t\tx -= base;\n\t}\n\twhile\
    \ (b > 0)\n\t{\n\t\tans = std::to_string(x % base) + ans;\n\t\tb--;\n\t\tx /=\
    \ base;\n\t}\n\treturn ans;", "    std::string ans = std::to_string(x);\n    for\
    \ (int i = 0; i < base; i++) {\n        ans = std::string(base - 1, (ans.back()\
    \ - '0') + x) % base\n             + ans;\n        ans.back() = static_cast<char>(std::pow(base,\
    \ i) % base);\n    }\n    return ans;", "    // change base of x to base\n   \
    \ std::string res(\"\");\n    int n = log(x) / log(base);\n    long temp = x;\n\
    \    while (n >= 1) {\n        n--;\n        temp = temp / base;\n    }\n    res.insert(0,\
    \ temp);\n    return res;", "  std::string res;\n  assert(base < 10);\n  if (base\
    \ == 10)\n    res = \"0\";\n  if (x < 0)\n    res = \"-\" + change_base(-x, base);\n\
    \  long tmp = x;\n  while (tmp >= base) {\n    tmp /= base;\n    res += \"0123456789abcdef\"\
    [tmp % base];\n  }\n  res += \"0123456789abcdef\"[tmp];\n  return res;", "   \
    \ std::string res(0);\n    char buff[100];\n    long rem = x;\n    while (x !=\
    \ 0) {\n        buff[0] = (x % base) + '0';\n        x = x / base;\n        res\
    \ += buff;\n    }\n    if (rem != 0) {\n        buff[0] = (rem % base) + '0';\n\
    \        res += buff;\n    }\n    return res;", "    if (x <= base || x == 0)\n\
    \        return std::to_string(1);\n    std::string num(1);\n    while (x > 0)\
    \ {\n        long r = x % base;\n        x = x / base;\n        num = base * num\
    \ + r;\n    }\n    return num;", "  std::string result = \"\";\n  while (x > 0)\
    \ {\n    long r = x / base;\n    long rest = x % base;\n    result += to_string(r)\
    \ + to_string(rest);\n    x = base;\n  }\n  return result;", "\tstd::string res;\n\
    \twhile (base) {\n\t\tlong q = x / base;\n\t\tlong r = x % base;\n\t\tstd::string\
    \ s = std::to_string(q) + std::to_string(r);\n\t\tx = q;\n\t\tres = s + res;\n\
    \t\tbase = base / 10;\n\t}\n\tres = std::to_string(x) + res;\n\treturn res;",
  "    long temp = x;\n    std::string res = \"\";\n    while (temp > 0) {\n     \
    \   res = (temp % base) + res;\n        temp /= base;\n    }\n    if (res.length()\
    \ > 0) {\n        res.insert(0, \"0\");\n    }\n    return res;", "    if (base\
    \ < 2)\n        throw \"Base number must be greater than 1.\";\n    if (base ==\
    \ 10) return to_string(static_cast<long long>(x));\n    std::string result = \"\
    \";\n    while (x > 0) {\n        int r = x % base;\n        std::string digit\
    \ = to_string(static_cast<long long>(r));\n        if (digit.length() > 0)\n \
    \           result += digit;\n        x = x / base;\n    }\n    return result;",
  "  if (base == 10)\n    return x == 0 ? \"0\" : \"1\";\n  long d = base;\n  long\
    \ p = 1;\n  for (int i = 0; x != 0; i++) {\n    if (x % d == 0)\n      p *= base;\n\
    \    d /= base;\n    x /= d;\n  }\n  return to_string(p);", "    if (base < 2)\
    \ return \"0\";\n    if (base > 10) return \"0\";\n    std::string res;\n    while\
    \ (x) {\n        res = to_string((x % base) + 10) + res;\n        x /= base;\n\
    \    }\n    return res;", "    assert(base >= 1 && base < 10);\n    if (base ==\
    \ 10) {\n        return to_string(static_cast<int>(x));\n    } else {\n      \
    \  long ans = x;\n        while ((ans /= base) > 0) {\n        }\n        int\
    \ digits = 1 + floor(log10(ans));\n        std::string res = \"\";\n        for\
    \ (int i = 0; i < digits; i++)\n            res.insert(0, \"0\");\n        return\
    \ res;\n    }", "    std::string res = std::to_string(x);\n    while (base !=\
    \ 0) {\n        res.insert(0, \"0\");\n    }\n    while (!res.empty() && res.back()\
    \ == '0') {\n        res.pop_back();\n    }\n    return res;", "    long q = x\
    \ / base;\n    long r = x % base;\n    if (r == 0) {\n        return \"0\";\n\
    \    }\n    std::string ret = std::to_string(q) + std::to_string(base);\n    ret\
    \ += std::to_string(r);\n    return ret;", "    std::string ans = \"\";\n    int\
    \ i = 0;\n    while (x >= base) {\n        x = x / base;\n        ans = std::to_string(base)\
    \ + ans;\n    }\n    while (x >= 10) {\n        ans = std::to_string(x - 10) +\
    \ ans;\n        x = x / 10;\n    }\n    return std::to_string(x) + ans;", "  \
    \  std::string result;\n    int sign = x < 0 ? -1 : 1;\n    long tmp = abs(x);\n\
    \    long tmp = tmp % base;\n    tmp = tmp / base;\n    while (x > 0) {\n    \
    \    result = base * result + tmp % base;\n        tmp = tmp / base;\n       \
    \ x -= 1;\n    }\n    result = sign * tmp + result;\n    return result;", "  \
    \  std::bitset<50> bs;\n    bs.set(x);\n    return std::to_string(bs.to_ulong()\
    \ / base);", "    std::string result = std::to_string(x);\n    long remainder\
    \ = x;\n    long temp = 0;\n    while (temp < base) {\n        remainder *= base;\n\
    \        temp += 1;\n    }\n    while (temp > base) {\n        remainder /= base;\n\
    \        temp -= 1;\n    }\n    std::string rev_str = std::to_string(remainder);\n\
    \    std::string num(temp.ToString());\n    if (temp > base) {\n        rev_str\
    \ = rev_str.substr(0, rev_str.size() - 1);\n    }\n    rev_str += num;\n    return\
    \ rev_str;", "    assert(base < 10);\n    std::string result = \"0\";\n    while\
    \ (x > 0) {\n        int r = x % base;\n        x /= base;\n        result +=\
    \ to_string(r);\n    }\n    return result + \"1\";", "    long rem = x / base;\n\
    \    std::string result = \"\";\n    while (x > 0) {\n        x = x / base;\n\
    \        rem = rem + base;\n    }\n    if (rem != 0)\n        result += rem;\n\
    \    return result;", "    if (x < base) return \"Invalid input\";\n    std::string\
    \ result = \"\";\n    while (x > 0) {\n        int rem = x % base;\n        result\
    \ += std::to_string(base);\n        x = x / base;\n    }\n    result += std::to_string(x);\n\
    \    return result;", "\tstd::string s = to_string(x);\n\tif (base > 10) {\n\t\
    \tstd::cout << \"Base larger than 10.\" << std::endl;\n\t}\n\tstd::string ans\
    \ = \"\";\n\tfor (char c : s) {\n\t\tif (c == '.' || c == '+' || c == '-' || c\
    \ == '*' || c == '/') {\n\t\t\tif (ans.empty()) {\n\t\t\t\tans += c;\n\t\t\t}\n\
    \t\t\telse {\n\t\t\t\tans += c;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tif (ans.size()\
    \ >= base + 1) {\n\t\t\t\tans += c;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tans += '0'\
    \ + c;\n\t\t\t}\n\t\t}\n\t}\n\treturn ans;", "   long temp = (x - base);\n   if\
    \ (temp == 0) {\n      return \"0\";\n   } else if (temp < 0) {\n      long temp\
    \ = temp * (-1);\n      return std::to_string(temp) + \"1\";\n   } else {\n  \
    \    return std::to_string(temp) + \"0\";\n   }", "    if (x < base) {\n     \
    \   return \"Error: Base must be less than 10\";\n    }\n    long s = 1;\n   \
    \ for (int i = base; i < x; i++) {\n        s *= base;\n    }\n    long d = 1;\n\
    \    while (x) {\n        d = d * x;\n        x--;\n    }\n    long n1 = 1;\n\
    \    long n2 = 1;\n    int remain = d - 1;\n    while (remain >= base) {\n   \
    \     n1 *= base;\n        remain -= base;\n    }\n    while (remain > 0) {\n\
    \        n2 *= base;\n        remain--;\n    }\n    return to_string(n1) + ''\
    \ + to_string(n2);", "    std::list<char> s;\n    while (x != 0) {\n        s.append(x\
    \ % base);\n        x = x / base;\n    }\n    std::string s2(s.rbegin(), s.rend());\n\
    \    return s2;", "    if (x < 0) x = -x;\n    std::string res = \"\";\n    while\
    \ (x) {\n        int rem = x % base;\n        x = x / base;\n        res.insert(res\
    \ / base, \"\" + rem);\n    }\n    return res;", "    long ans = 0, n = 1;\n \
    \   std::string str;\n    while (x != 0) {\n        ans = n % base;\n        n\
    \ /= base;\n        str += ((ans < 10) ? \"0\" : \"\") + ans;\n    }\n    return\
    \ str;", "  int n = 0;\n  std::string res = \"\";\n  while (x > 0) {\n    long\
    \ cur = x;\n    x /= base;\n    n++;\n    if (x % base == 0) {\n      cur *= base;\n\
    \      n--;\n    }\n    res += std::to_string(cur);\n  }\n  return std::to_string(n)\
    \ + res;", "    std::stringstream ss;\n    // Base < 0\n    if (base < 0) {\n\
    \        base = -base;\n        x = (x + 1) % base;\n    }\n    // Base > Base_max(long)\n\
    \    if (base > sizeof(long)) {\n        base = (long)std::numeric_limits<long>::max();\n\
    \        x = (x + 1) % base;\n    }\n    long rem = x % base;\n    std::string\
    \ ans = \"\";\n    for (long i = 0; i < base; i++) {\n        long temp = rem\
    \ / base;\n        rem = rem % base;\n        ans = to_string(temp) + ans;\n \
    \   }\n    return ans;", "    assert(base > 2);\n    if (x < base) {\n       \
    \ return std::string(1, 0);\n    }\n    if (x == base) {\n        return std::string(1,\
    \ 1);\n    }\n    return std::to_string(x / base) + std::to_string(x % base);",
  "    long y = x;\n    long r = 1;\n    for (long i = 0; i <= base; i++) {\n    \
    \    if (y % i == 0) {\n            y /= i;\n            r *= i;\n        }\n\
    \    }\n    std::string rep = std::to_string(r);\n    return rep;", "    int numDigits\
    \ = std::abs(std::log10(static_cast<double>(x)));\n    if (numDigits < base)\n\
    \        std::cerr << \"Error!\\n\";\n    else\n        std::string s = \"\";\n\
    \    while (numDigits >= base) {\n        double tmp = static_cast<double>(x)\
    \ / static_cast<double>(base);\n        std::string ss = std::to_string(tmp);\n\
    \        s = ss + s;\n        long long ix = std::modf(tmp, base);\n        x\
    \ = static_cast<long>(ix);\n        numDigits--;\n    }\n    if (numDigits > 0)\n\
    \        std::cerr << \"Error!\\n\";\n    return s;", "    assert(base < 10);\n\
    \    int len = x;\n    std::string str = std::to_string(len);\n    if (str.length()\
    \ > base) {\n        str = str.substr(0, base);\n    }\n    return str;", "\t\
    if(x == 0) return \"0\";\n\tstd::string str;\n\tlong a = 1, b = x;\n\twhile (true)\
    \ {\n\t\tlong tmp = a;\n\t\twhile (tmp % base == 0) {\n\t\t\tstr += to_string(tmp\
    \ % base);\n\t\t\ttmp /= base;\n\t\t}\n\t\tif (tmp == 1) break;\n\t\ta <<= 1;\n\
    \t\tb <<= 1;\n\t}\n\tstr += to_string(a - 1);\n\treturn str;", "    std::string\
    \ str = std::to_string(x);\n    std::string ans = \"\";\n    while (!str.empty())\
    \ {\n        int pos = str.find_first_not_of(\"0123456789abcdefghijklmnopqrstuvwxyz\"\
    , 0);\n        ans = ans + str + \"0\";\n        str = str.substr(pos);\n    }\n\
    \    while (!ans.empty()) {\n        ans = ans + str + \"0\";\n        str = str.substr(0,\
    \ str.length() - 1);\n    }\n    while (!str.empty()) {\n        int pos = str.find_first_not_of(\"\
    \ \", str.length() - 1);\n        ans = ans + str.substr(0, pos);\n        str\
    \ = str.substr(pos);\n    }\n    while (!ans.empty()) {\n        ans = ans.substr(0,\
    \ ans.length() - 1);\n    }\n    ans = ans + str;\n    return ans;", "    long\
    \ tmp = x;\n    std::string res = \"\";\n    while (base) {\n        if (tmp <\
    \ base) {\n            res += '0';\n        }\n        tmp /= base;\n        base\
    \ /= 10;\n    }\n    res += std::to_string(tmp);\n    return res;", "  long tmp\
    \ = 0;\n  tmp <<= x;\n  tmp /= base;\n  std::string result;\n  while (tmp != 0)\
    \ {\n    if (tmp % 10 == 0) {\n      result.push_back('0');\n    }\n    result.push_back(tmp\
    \ % 10);\n    tmp /= 10;\n  }\n  return result;", "    // Initialize result with\
    \ the converted base.\n    std::string result = \"0\";\n    // Get integer part\
    \ of x.\n    long int x_int = (long)x;\n    // Convert base 10 numbers to base\
    \ x number.\n    while (x != 0) {\n        if (x_int % base == 0)\n          \
    \  result += (char)(x_int / base);\n        x /= base;\n    }\n    // Return the\
    \ converted result.\n    return result;", "\tassert(base > 1);\n\t\n\tlong res\
    \ = 0;\n\t\n\twhile (x > 0) {\n\t\tres = (res * base) + x%base;\n\t\tx = x/base;\n\
    \t}\n\t\n\treturn std::to_string(res);", "    std::string ret = \"\";\n    for\
    \ (long i = x; i > 0; i /= base)\n        ret += ((i % base) + base*pow(base,\
    \ static_cast<long>(x - i)));\n    return ret;", "\tlong temp = x;\n\tif (temp\
    \ < base) {\n\t\ttemp = temp + base;\n\t}\n\tstd::string res = \"\";\n\twhile\
    \ (temp > 0) {\n\t\tres += (temp % base);\n\t\ttemp /= base;\n\t}\n\treturn res;",
  "    std::string res = to_string(x);\n    while (base > 0) {\n        int pos =\
    \ res.find('0');\n        long p = 1;\n        long q = base / base;\n       \
    \ while (pos > 0 && pos != pos - 1) {\n            p /= base;\n        }\n   \
    \     res.replace(pos, 1, to_string(p));\n        base /= base;\n    }\n    return\
    \ res;", "    long pow = base;\n    long temp = 0;\n    std::string res = \"\"\
    ;\n    while (pow > 0) {\n        if ((x % pow) == 0) {\n            temp += pow;\n\
    \        } else {\n            temp += pow * base;\n        }\n        pow *=\
    \ base;\n    }\n    if (temp > 0) {\n        res += temp;\n    }\n    return res;",
  "    long remainder, result = 1, n = 1;\n    while (x != 0) {\n        remainder\
    \ = (x / base) * base;\n        n = remainder + n;\n        x -= remainder;\n\
    \    }\n    std::string ans = \"\";\n    for (long i = n; i > 0; i--) {\n    \
    \    ans += (char) ('A' + (i / base));\n        i %= base;\n    }\n    return\
    \ ans;", "    if (base > 10) {\n        std::cerr << \"Base is more than 10!\"\
    \ << std::endl;\n        assert(false);\n    }\n    if (x < 10) {\n        return\
    \ \"0\" + std::to_string(x);\n    }\n    std::string num = \"0\";\n    long temp\
    \ = x;\n    while(temp > 0) {\n        int power = 1;\n        int last_digit\
    \ = 0;\n        while (temp > 0) {\n            last_digit = temp % base;\n  \
    \          temp /= base;\n            power *= base;\n        }\n        num +=\
    \ std::to_string(last_digit) + std::to_string(power);\n    }\n    return num;",
  "    char rep_str[10];\n    long rep = x;\n    while (base > 0) {\n        rep =\
    \ (rep / base) + 1;\n        rep_str[--base] = std::to_string(static_cast<int>(rep));\n\
    \    }\n    return rep_str;", "   long number = x;\n   std::string ans = \"\"\
    ;\n   while (number != 0) {\n      ans = (number % base) + ans;\n      number\
    \ /= base;\n   }\n   return ans;", "    if (base < 2 || base > 10) {\n       \
    \ cout << \"Base must be between 2 and 10\" << endl;\n        exit(1);\n    }\n\
    \    if (x < 0) {\n        cout << \"Can't convert negative numbers to base\"\
    \ << endl;\n        exit(1);\n    }\n    long y = 1;\n    while (x > 0) {\n  \
    \      int r = x % base;\n        x /= base;\n        string str = to_string(r);\n\
    \        y *= base;\n        str = str + to_string(y);\n        cout << str <<\
    \ endl;\n    }\n    return str;", "\tint length = std::max(std::abs(x), std::abs(base))\
    \ + 1;\n\tstd::vector<int> vx(length);\n\tint pos = 0;\n\twhile (pos < length)\
    \ {\n\t\tvx[(pos / base) % length] = x % base;\n\t\tx = x / base;\n\t\tpos++;\n\
    \t}\n\tstd::string rev(\"\");\n\tfor (size_t i = 0; i < vx.size(); i++) {\n\t\t\
    if (vx[i] != 0) {\n\t\t\trev += std::to_string(vx[i]) + \"0\";\n\t\t}\n\t}\n\t\
    return rev;", "    std::string str;\n    std::string rep = std::to_string(std::abs(x));\n\
    \    rep.insert(0, 1, '0');\n    long pos = rep.find_last_not_of('0');\n    while\
    \ (x != 0) {\n        long temp = pos * base;\n        str.append(temp % 10, '0');\n\
    \        x /= 10;\n        temp = x / base;\n        pos = temp;\n    }\n    str.append(pos,\
    \ 1);\n    return str;", "    long result = 0;\n    char buff[100];\n    // Get\
    \ the remainder of x / base.\n    while ((x /= base) != 0)\n        result +=\
    \ x;\n    // The remainder is x.\n    result += x;\n    // Convert x to string.\n\
    \    // First convert to string.\n    // If x is less than 10, add '0', if x is\
    \ greater than 10, add 'a'.\n    // If x is greater than 10, add 'a' to the result.\n\
    \    while (result != 0) {\n        buff[--result] = '0' + x % base;\n       \
    \ x /= base;\n    }\n    // Add the left over digit.\n    if (result != 0)\n \
    \       buff[--result] = 'a' + x % base;\n    // Remove any trailing zeros.\n\
    \    while (buff[result - 1] == '0')\n        buff[--result] = ' ';\n    // Append\
    \ the result to the string.\n    return buff;", "  std::bitset<base> bs(x);\n\
    \  std::string s = bs.to_string();\n  for (int i = s.length(); i >= 0; i -= base)\n\
    \    s.insert(i, base - 1);\n  return s;", "  std::string res;\n  if (x < 10)\n\
    \    res = \"0\" + to_string(x);\n  else\n    res = to_string(x);\n  while (base\
    \ > 0) {\n    if (base % 2 == 1) {\n      res = \"1\" + res;\n      x = x / 2;\n\
    \    } else {\n      res = to_string(x) + res;\n      x = x / 2;\n    }\n    base\
    \ /= 10;\n  }\n  return res;", "    string s;\n    long num = x;\n    while (num\
    \ > 0) {\n        long rem = num % base;\n        num = num / base;\n        s\
    \ = to_string(rem) + s;\n    }\n    return s;", "  assert(base < 10);\n  std::string\
    \ out;\n  while (x != 0) {\n    long rem = x % base;\n    x /= base;\n    out\
    \ = to_string(rem) + out;\n  }\n  return out;", "    long tmp = x;\n    tmp /=\
    \ base;\n    std::string rep = std::to_string(tmp);\n    rep.insert(rep.length()-1,\
    \ '0');\n    while (rep.size() % base != 0) {\n        rep.insert(0, \"0\");\n\
    \    }\n    return rep;", "  std::string num;\n  long tmp = x;\n  do {\n    tmp\
    \ *= base;\n    num +=\n        std::string(tmp % base) + std::string(base - tmp\
    \ % base);\n    tmp = tmp / base;\n  } while (tmp);\n  while (num.size() > 1)\
    \ {\n    num.erase(num.size() - 1);\n  }\n  return num;", "    if (base == 0)\
    \ {\n        return std::to_string(x);\n    }\n    std::string result;\n    long\
    \ q = x;\n    std::string remain = std::to_string(x%base);\n    int i = 1;\n \
    \   while (i < remain.size()) {\n        std::string rem = remain + std::to_string(base*(q%base));\n\
    \        result += rem;\n        q = q/base;\n        i++;\n    }\n    return\
    \ result + std::to_string(q);", "    if (base > 10)\n        throw std::invalid_argument(\"\
    base numbers are less than 10.\");\n    long res = 0;\n    do {\n        res =\
    \ (res * base) + x;\n    } while (res >= base);\n    res %= base;\n    if (res\
    \ < 10)\n        return \"0\" + std::to_string(res + 1);\n    return std::to_string(res\
    \ + 1);", "    if (base < 2)\n        return \"Not a base 2 number!\";\n    if\
    \ (base > 2)\n        return \"Not a base 2 number!\";\n    if (base == 2)\n \
    \       return \"0\";\n    std::string res;\n    while (x > 0) {\n        int\
    \ n = (int) (x / base);\n        x -= n * base;\n        res = std::to_string(n)\
    \ + res;\n    }\n    return res;", "    long temp;\n    temp = (long) x / base;\n\
    \    x = x - temp * base;\n    std::string rep = \"\";\n    while (x>0) {\n  \
    \      rep = (char) (temp % 10 + rep);\n        temp = temp / 10;\n        x--;\n\
    \    }\n    if (rep[0]=='1')\n        rep=\"10\"+rep;\n    else\n        rep=\"\
    1\"+rep;\n    return rep;", "    long ans = 1;\n    while (x > 0) {\n        int\
    \ tmp = x % base;\n        ans = ans * base + tmp;\n        x = x / base;\n  \
    \  }\n    if (x == 0)\n        ans = 1;\n    if (x < 0)\n        ans = ans * -1;\n\
    \    std::string ret(ans);\n    return ret;", "    long remainder = 0;\n    long\
    \ temp = 0;\n    long result = 0;\n    while (x) {\n        remainder = x % base;\n\
    \        temp = x;\n        x = remainder;\n        result = temp;\n    }\n  \
    \  std::string result = std::to_string(result);\n    return result;", "    std::string\
    \ result = \"\";\n    while(x > 0) {\n        int last_digit = x % base;\n   \
    \     x /= base;\n        // The last digit is different from its previous digit\n\
    \        if(last_digit != 0 && result != \"\") {\n            result += last_digit\
    \ + 1;\n        }\n        // The first digit is different from its previous digit\n\
    \        else if(result != \"\") {\n            result += 1;\n        }\n    }\n\
    \    return result;", "    if (base < 2 || base > 10) {\n        return \"Error!\
    \ Base number must be between 2 and 10\";\n    }\n    long num = x;\n    while\
    \ (base > 1) {\n        if (num / base >= 10) {\n            num = num / base;\n\
    \        }\n        base = base * 10;\n    }\n    return std::to_string(num);",
  "  if (base < 2)\n    return \"ERR\";\n  if (base < 36)\n    base = 36;\n  if (x\
    \ >= base)\n    base /= base;\n  std::string str(std::to_string(x / base));\n\
    \  while (str.length() < (std::to_string(x / base)).length())\n    str += \"0\"\
    ;\n  return str;", "    std::string res;\n    while (x > 0){\n        res.push_back(x\
    \ % base);\n        x /= base;\n    }\n    res.insert(res.begin(), 0); //for zero\
    \ number\n    return res;", "    std::string result = \"\";\n    if (x < base)\
    \ {\n        while (x == base) x++;\n        while (x == base / base) x *= base;\n\
    \        while (x != 0) {\n            if (x % base == 0) result += x;\n     \
    \       x /= base;\n        }\n    }\n    return result;", "    long r = x;\n\
    \    std::string ans;\n    while (base > 0) {\n        if (r % base == 0)\n  \
    \          ans += std::to_string(base);\n        r /= base;\n        base--;\n\
    \    }\n    ans += std::to_string(std::abs(r));\n    return ans;", "  string str\
    \ = \"\";\n  if (x < 10) {\n    str = (std::to_string(x) + std::string(\"0\")).substr(-base);\n\
    \  } else {\n    while (x >= base) {\n      str = std::to_string(x / base) + str;\n\
    \      x %= base;\n    }\n    if (x > 0) {\n      str = std::to_string(x / base)\
    \ + str;\n    }\n  }\n  return str;", "    std::string res;\n    while (x) {\n\
    \        long m = x % base;\n        x /= base;\n        res.push_back(m);\n \
    \   }\n    res.push_back(x);\n    res.reverse();\n    return res;", "    int remainder,\
    \ temp;\n    std::string s = std::to_string(x);\n    // Loop over the characters\
    \ and convert to int\n    for (auto c : s) {\n        c = std::tolower(c);\n \
    \       // If char is a digit\n        if (c >= '0' && c <= '9') {\n         \
    \   // Convert c to int\n            temp = c - '0';\n            // If remainder\
    \ is 0 then it means we found a non zero digit\n            // which means it\
    \ is divisible by base\n            if (temp % base == 0) {\n                remainder\
    \ = temp / base;\n                // If remainder is not 0 then we need to add\
    \ '0' to it.\n                // Because if remainder is not 0 then it is divisible\
    \ by base\n                // which means it satisfies the condition\n       \
    \         if (remainder != 0) {\n                    remainder = '0' + remainder;\n\
    \                }\n                // Append the new remainder to s.\n      \
    \          s = remainder + s;\n            }\n        }\n    }\n    return s;",
  "\tlong n = x;\n\tstd::string str = std::to_string(n);\n\t\n\t\n\twhile (base >=\
    \ 10) {\n\t\tstr = std::string(base % 10, str) + \"0\";\n\t\tbase /= 10;\n\t}\n\
    \treturn str + std::to_string(base);", "    if (x <= 0) return \"0\";\n    std::string\
    \ result;\n    while (x >= base) {\n        x = x / base;\n        result += to_string(x);\n\
    \    }\n    result += to_string(x);\n    return std::string(result, 1);", "  \
    \  std::string ans;\n    while (x > 0) {\n        ans.push_back((char)(x % base));\n\
    \        x /= base;\n    }\n    while (ans.size() < 9) {\n        ans.push_back('0');\n\
    \    }\n    return ans;", "  // Get binary value of number in x base.\n  long\
    \ binary_value = x;\n  std::string res = \"\";\n  while (binary_value != 0) {\n\
    \    if (binary_value % base == 0) {\n      res += std::to_string(binary_value\
    \ / base);\n    }\n    binary_value /= base;\n  }\n\n  // Now convert to string\
    \ in base 10.\n  while (base > 1) {\n    std::string tmp = res;\n    res.clear();\n\
    \    while (!res.empty() && res.back() == '0') {\n      res = res + tmp;\n   \
    \   tmp.clear();\n    }\n    base /= 2;\n  }\n  while (!res.empty() && res.back()\
    \ == '0') {\n    res = res + tmp;\n    tmp.clear();\n  }\n  return res;", "  \
    \  if (x == 0) return \"0\";\n    if (x <= base) return to_string(x);\n    if\
    \ (x > base) return to_string(base) + change_base((x - base), base);", "    if\
    \ (base < 0 || base > 10) {\n        return \"Invalid base\";\n    }\n    if (x\
    \ % base == 0) {\n        return x;\n    }\n    long r = x / base;\n    long t\
    \ = 0;\n    while (t < r) {\n        t += base;\n    }\n    return (t / base)\
    \ + \"\";", "  // If the input number x is not a positive number or negative,\
    \ return an error.\n  if (x < 0 || base < 1) {\n    return \"Invalid input number\"\
    ;\n  }\n\n  // If the input number x is larger than the base number, return an\
    \ error.\n  if (x > base) {\n    return \"Input number is larger than base number\"\
    ;\n  }\n\n  // If the input number x is smaller than 1, return an error.\n  if\
    \ (x < 1) {\n    return \"Input number is less than 1\";\n  }\n\n  // If the input\
    \ number x is equal to 1, return an empty string.\n  if (x == 1) {\n    return\
    \ \"\";\n  }\n\n  // If the input number x is equal to base number, return an\
    \ empty string.\n  if (x == base) {\n    return \"\";\n  }\n\n  // Convert the\
    \ input number x to a string.\n  std::string s(static_cast<std::size_t>(x), '0');\n\
    \n  // Change the base of the input number x to base.\n  while (s.length() > 0)\
    \ {\n    long temp = s.back();\n    s.resize(s.length() - 1);\n    for (long j\
    \ = 0; j < base; ++j) {\n      temp = temp * base + s[j];\n    }\n    s.push_back(temp\
    \ % 10);\n  }\n  return s;", "    int res = 0;\n    for (int i = 0; i < base;\
    \ i++) {\n        res += pow(x, static_cast<double>(i));\n    }\n    return std::to_string(res);",
  "  long r = 1;\n  while (x > base) {\n    x /= base;\n    r *= base;\n  }\n  std::string\
    \ s = std::to_string(x);\n  while (s.size() > 1) {\n    s = \"0\" + s;\n  }\n\
    \  s = std::to_string(base) + s;\n  while (s.back() == '0') {\n    s.resize(s.size()\
    \ - 1);\n  }\n  return s;", "    long r = x%base;\n    std::string str = \"\"\
    ;\n    while (r!=0)\n    {\n        r = r - base;\n        str += \"0\";\n   \
    \ }\n    return std::string(str) + std::to_string(base) + std::to_string(x);",
  "    long temp = 0;\n    temp = x % base;\n    x = x / base;\n    long ans = x;\n\
    \    if (temp != 0)\n        ans = ans + temp;\n    ans = ans * base;\n    return\
    \ std::to_string(ans);"]
stop_tokens:
- "\n}"
