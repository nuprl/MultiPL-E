name: HumanEval_117_select_words
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s and a natural\
  \ number n, you have been tasked to implement \n// a function that returns a vector\
  \ of all words from string s that contain exactly \n// n consonants, in order these\
  \ words appear in the string s.\n// If the string s is empty then the function should\
  \ return an empty vector.\n// Note: you may assume the input string contains only\
  \ letters and spaces.\n// Examples:\n// >>> select_words((\"Mary had a little lamb\"\
  ), (4))\n// (std::vector<std::string>({(std::string)\"little\"}))\n// >>> select_words((\"\
  Mary had a little lamb\"), (3))\n// (std::vector<std::string>({(std::string)\"Mary\"\
  , (std::string)\"lamb\"}))\n// >>> select_words((\"simple white space\"), (2))\n\
  // (std::vector<std::string>())\n// >>> select_words((\"Hello world\"), (4))\n//\
  \ (std::vector<std::string>({(std::string)\"world\"}))\n// >>> select_words((\"\
  Uncle sam\"), (3))\n// (std::vector<std::string>({(std::string)\"Uncle\"}))\nstd::vector<std::string>\
  \ select_words(std::string s, long n) {\n"
tests: "}\nint main() {\n    auto candidate = select_words;\n    assert(candidate((\"\
  Mary had a little lamb\"), (4)) == (std::vector<std::string>({(std::string)\"little\"\
  })));\n    assert(candidate((\"Mary had a little lamb\"), (3)) == (std::vector<std::string>({(std::string)\"\
  Mary\", (std::string)\"lamb\"})));\n    assert(candidate((\"simple white space\"\
  ), (2)) == (std::vector<std::string>()));\n    assert(candidate((\"Hello world\"\
  ), (4)) == (std::vector<std::string>({(std::string)\"world\"})));\n    assert(candidate((\"\
  Uncle sam\"), (3)) == (std::vector<std::string>({(std::string)\"Uncle\"})));\n \
  \   assert(candidate((\"\"), (4)) == (std::vector<std::string>()));\n    assert(candidate((\"\
  a b c d e f\"), (1)) == (std::vector<std::string>({(std::string)\"b\", (std::string)\"\
  c\", (std::string)\"d\", (std::string)\"f\"})));\n}\n"
completions: ["    std::vector<std::string> res;\n    if (s.empty())\n        return\
    \ res;\n    \n    auto first = s.begin();\n    auto last = s.end();\n    \n  \
    \  auto first_vowels = [&first] { auto it = first; while (it != last && !isalpha(*it))\
    \ { ++it; }; return it; };\n    auto vowels = [&first] { auto it = first; while\
    \ (it != last && !isspace(*it)) { ++it; }; return it; };\n    \n    auto first_consonants\
    \ = [&first] { auto it = first; while (it != last && !isalpha(*it)) { ++it; };\
    \ return it; };\n    auto consonants = [&first] { auto it = first; while (it !=\
    \ last && !isspace(*it)) { ++it; }; return it; };\n    \n    auto first_digits\
    \ = [&first] { auto it = first; while (it != last && !isdigit(*it)) { ++it; };\
    \ return it; };\n    auto digits = [&first] { auto it = first; while (it != last\
    \ && !isspace(*it)) { ++it; }; return it; };\n    \n    auto first_space = [&first]\
    \ { auto it = first; while (it != last && !isspace(*it)) { ++it; }; return it;\
    \ };\n    auto space = [&first] { auto it = first; while (it != last && !isspace(*it))\
    \ { ++it; }; return it; };\n    \n    auto first_punctuation = [&first] { auto\
    \ it = first; while (it != last && !ispunct(*it)) { ++it; }; return it; };\n \
    \   auto punctuation = [&first] { auto it = first; while (it != last && !ispunct(*it))\
    \ { ++it; }; return it; };\n    \n    auto first_letters = [&first] { auto it\
    \ = first; while (it != last && !isalpha(*it)) { ++it; }; return it; };\n    auto\
    \ letters = [&first] { auto it = first; while (it != last && !isspace(*it)) {\
    \ ++it; }; return it; };\n    \n    std::vector<char> v;\n    v.push_back(*first);\n\
    \    \n    for (auto it = first; it != last; ++it) {\n        if (!isalpha(*it)\
    \ && !isspace(*it) && !ispunct(*it)) {\n            v.push_back(*it);\n      \
    \  }\n    }\n    \n    std::string tmp;\n    \n    for (auto it = first; it !=\
    \ last; ++it) {\n        if (!isalpha(*it) && !", "  std::vector<std::string>\
    \ v;\n  if(s.size() == 0)\n    return v;\n  for(long i = 0; i < s.size(); i++)\
    \ {\n    if(s.at(i) == ' ')\n      continue;\n    for(long j = 0; j < n; j++)\
    \ {\n      if(s.at(i) == s.at(i + (j+1)))\n        v.emplace_back(s.substr(0,\
    \ i));\n    }\n  }\n  return v;", "  std::vector<std::string> result;\n  \n  \n\
    \  // Your code here\n  for (int i=0; i< s.length(); i++) {\n    std::string current\
    \ = s[i];\n    bool found = false;\n    \n    for (int j=0; j<current.length();\
    \ j++) {\n      if (current.at(j) != 'a' && current.at(j) != 'e' && current.at(j)\
    \ != 'i'\n        && current.at(j) != 'o' && current.at(j) != 'u' && current.at(j)\
    \ != 'y') {\n        found = true;\n        break;\n      }\n    }\n    \n   \
    \ if (!found) {\n      result.push_back(current);\n    }\n  }\n  \n  if (result.size()\
    \ == 0) return result;\n  \n  if (n<result.size()) return result;\n  else return\
    \ result;", "    std::vector<std::string> res;\n    // Write your code here\n\
    \    return res;", "    \n    std::vector<std::string> res;\n    // Write your\
    \ code here\n    // std::unordered_map<std::string,int> vowels;\n    \n    //\
    \ for(auto &it: s)\n    // {\n    //     if(isspace(it))\n    //     {\n    //\
    \         continue;\n    //     }\n    //     if(isalpha(it))\n    //     {\n\
    \    //         if(it.find_first_of('a') == 0 || it.find_first_of('e') == 0 ||\
    \ it.find_first_of('i') == 0 || it.find_first_of('o') == 0 || it.find_first_of('u')\
    \ == 0)\n    //         {\n    //             if(vowels.find(it) != vowels.end())\n\
    \    //             {\n    //                 continue;\n    //             }\n\
    \    //             else\n    //             {\n    //                 if(vowels.size()\
    \ == 0)\n    //                 {\n    //                     res.push_back(it);\n\
    \    //                 }\n    //                 else\n    //               \
    \  {\n    //                     res.push_back(it);\n    //                  \
    \   vowels.insert(it);\n    //                 }\n    //             }\n    //\
    \         }\n    //         else if(it.find_first_of('a') == 0 || it.find_first_of('e')\
    \ == 0 || it.find_first_of('i') == 0 || it.find_first_of('o') == 0 || it.find_first_of('u')\
    \ == 0)\n    //         {\n    //             if(vowels.find(it) != vowels.end())\n\
    \    //             {\n    //                 continue;\n    //             }\n\
    \    //             else\n    //             {\n    //                 if(vowels.size()\
    \ == 0)\n    //                 {\n    //                     res.push_back(it);\n\
    \    //                 }\n    //                 else\n    //               \
    \  {\n    //                     res.push_back(it);\n    //                 }\n\
    \    //             }\n    //         }\n    //         else\n    //         {\n\
    \    //             if(vowels.find(it) != vowels.end())\n    //             {\n\
    \    //                 continue;\n    //             }\n    //             else\n\
    \    //             {\n    //                 if(vowels.size() == 0)\n    // \
    \                {\n    //                     res.push_back(it);\n    //    \
    \             }\n    //                 else\n    //                 {\n    //\
    \                     res.push_back(it);\n    //                 }\n    //   \
    \          }\n    //         }\n    //     }\n    // }\n    \n    if(!s.empty())\n\
    \    {\n        \n        \n    }\n    \n    return res;", "    std::vector<std::string>\
    \ v;\n    for (size_t i = 0; i != s.length(); ++i) {\n        if (s.at(i) == '\
    \ ') continue;\n        if (s.at(i) == ' '){\n            v.emplace_back(s.substr(0,i+1));\n\
    \            if (i == s.length()-1) {\n                v.emplace_back(s.substr(0,i+1));\n\
    \            }\n            continue;\n        }\n        if (s.at(i) == '-')\
    \ {\n            v.emplace_back(s.substr(0,i+1));\n            if (i == s.length()-1)\
    \ {\n                v.emplace_back(s.substr(0,i+1));\n            }\n       \
    \     continue;\n        }\n        if (s.at(i) == '[') {\n            v.emplace_back(s.substr(0,i+1));\n\
    \            if (i == s.length()-1) {\n                v.emplace_back(s.substr(0,i+1));\n\
    \            }\n            continue;\n        }\n        if (s.at(i) == ']')\
    \ {\n            v.emplace_back(s.substr(0,i+1));\n            if (i == s.length()-1)\
    \ {\n                v.emplace_back(s.substr(0,i+1));\n            }\n       \
    \     continue;\n        }\n        if (s.at(i) == '.') {\n            v.emplace_back(s.substr(0,i+1));\n\
    \            if (i == s.length()-1) {\n                v.emplace_back(s.substr(0,i+1));\n\
    \            }\n            continue;\n        }\n        if (s.at(i) == '(')\
    \ {\n            v.emplace_back(s.substr(0,i+1));\n            if (i == s.length()-1)\
    \ {\n                v.emplace_back(s.substr(0,i+1));\n            }\n       \
    \     continue;\n        }\n        if (s.at(i) == ')') {\n            v.emplace_back(s.substr(0,i+1));\n\
    \            if (i == s.length()-1) {\n                v.emplace_back(s.substr(0,i+1));\n\
    \            }\n            continue;\n        }\n        v.emplace_back(s.substr(0,i+1));\n\
    \        if (i == s.length()-1) {\n            v.emplace_back(s.substr(0,i+1));\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> v;\n    if (s.size()\
    \ == 0)\n        return v;\n    unordered_set<std::string> u;\n    unordered_set<std::string>\
    \ v;\n    // insert all the characters and count the number of characters\n  \
    \  for (char c : s) {\n        u.insert(c);\n        v.insert(std::to_string(c));\n\
    \    }\n    // create all combinations of n characters\n    for (long i = 0; i\
    \ < n; i++) {\n        v.insert(u.begin(), u.end());\n    }\n    // create all\
    \ combinations of n characters\n    for (long i = 0; i < s.size(); i++) {\n  \
    \      for (long j = 0; j < n; j++) {\n            if (s[i] == v[j]) {\n     \
    \           u.erase(s[i]);\n                break;\n            }\n        }\n\
    \        if (u.empty())\n            break;\n    }\n    // sort and reverse to\
    \ make the words in order\n    v.insert(v.begin(), v.end());\n    sort(v.begin(),\
    \ v.end());\n    v.resize(v.size() - 1);\n    // convert to the string vector\n\
    \    for (auto it = v.begin(); it != v.end(); ++it)\n        v.push_back(*it);\n\
    \    return v;", "    if (s.empty()) {\n        return std::vector<std::string>();\n\
    \    }\n\n    // Your code here\n    std::vector<std::string> words;\n    long\
    \ size = (long) s.size();\n    long c = 0;\n    while (c < (size - n)) {\n   \
    \     std::string word = s.substr(c, n);\n        words.push_back(word);\n   \
    \     c++;\n    }\n    return words;", "    int count = 0;\n    std::vector<std::string>\
    \ res;\n    for (int i = 0; i <= s.length(); i++) {\n        if (s[i] == ' ')\
    \ {\n            if (count == n) {\n                res.push_back(s.substr(0,\
    \ i + 1));\n            }\n            count = 0;\n        } else {\n        \
    \    count++;\n        }\n    }\n    if (count != n) {\n        res.push_back(s.substr(0,\
    \ s.size() - 1));\n    }\n    return res;", "    if (n == 0)\n        return {};\n\
    \    std::vector<std::string> ans;\n    if (s.size() <= n) {\n        if (s.empty())\n\
    \            return ans;\n        else\n            return {s};\n    }\n\n   \
    \ // for each consonant of the string\n    std::vector<std::string> vowels = {\"\
    a\", \"e\", \"i\", \"o\", \"u\"};\n    for (auto c : s) {\n        if (c == \"\
    \ \") {\n            for (int i = 0; i < vowels.size(); i++)\n               \
    \ ans.push_back(vowels[i]);\n            return ans;\n        }\n        bool\
    \ match = false;\n        for (auto v : vowels) {\n            if (v == c) {\n\
    \                match = true;\n                break;\n            }\n      \
    \  }\n        if (!match)\n            continue;\n        ans.push_back(c);\n\
    \        ans.push_back(\" \");\n    }\n    return ans;", "    std::vector<std::string>\
    \ v;\n    vector<string> temp;\n    int i = 0;\n    while (i < s.size()) {\n \
    \       int j = i + 1;\n        while (j < s.size() && s[j] == s[i]) {\n     \
    \       j++;\n        }\n        if (j - i == n) {\n            temp.emplace_back(s.substr(i,\
    \ j - i));\n            i = j;\n        }\n        else {\n            i = j;\n\
    \        }\n    }\n    if (temp.empty()) return v;\n    v.emplace_back(temp);\n\
    \    return v;", "  // Write your code here\n  assert(!s.empty());\n  std::string\
    \ temp(s);\n  std::set<std::string> res;\n  while (temp.size() > 0) {\n    if\
    \ (temp.find_first_not_of(\"aeiou\") == std::string::npos) {\n      res.insert(temp);\n\
    \    }\n    temp.erase(0, temp.find_first_not_of(\"aeiou\") + 1);\n  }\n  std::vector<std::string>\
    \ ans;\n  std::set_intersection(res.begin(), res.end(), s.begin(), s.end(), std::back_inserter(ans));\n\
    \  return ans;", '    // TODO: Write your function here', "    std::vector<std::string>\
    \ res;\n    for(auto &w : s) {\n        if(w.length() == n) {\n            res.push_back(std::move(w));\n\
    \        }\n    }\n    return res;", "  std::vector<std::string> v;\n  for(auto\
    \ it = std::begin(s); *it != ' '; ++it){\n    for(auto it2 = std::begin(s); *it2\
    \ != ' '; ++it2){\n      if(*it == *it2){\n        v.push_back((std::string(it)\
    \ + std::string(it2)));\n      }\n    }\n  }\n  for(auto it = std::begin(s); *it\
    \ != ' '; ++it){\n    for(auto it2 = std::begin(s); *it2 != ' '; ++it2){\n   \
    \   if(n-- <= 0){\n        break;\n      }\n      if(*it == *it2){\n        v.push_back((std::string(it)\
    \ + std::string(it2)));\n      }\n    }\n  }\n  return v;", "  assert(n >= 0 &&\
    \ n <= s.size());\n  std::vector<std::string> v;\n  bool flag = false;\n  for\
    \ (int i = 0; i < s.size(); i++) {\n    char c = s[i];\n    if (flag) {\n    \
    \  if (c == 'h' || c == 'e' || c == 'l' || c == 'l' || c == 'o' || c == 's')\n\
    \        flag = false;\n      else\n        v.push_back(\"Hell\");\n    } else\
    \ if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      flag\
    \ = true;\n      v.push_back(\"\");\n    } else if (c == ' ') {\n      if (flag)\n\
    \        v.push_back(\"\");\n    } else if (c == '.' || c == '-' || c == '_' ||\
    \ c == '*' || c == '(' || c == ')' || c == '[' || c == ']' || c == ':' || c ==\
    \ ';' || c == '\"' || c == '\\\\') {\n      flag = false;\n      v.push_back(\"\
    Hell\");\n    } else if (n > 0) {\n      if (c == 'y' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"yes\");\n      else if (c == 't' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"ye\");\n      else if (c == 's' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"y\");\n      else if (c == 'n' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"no\");\n      else if (c == 'd' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"does\");\n      else if (c == 'w' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"will\");\n      else if (c == 'n' || c == 'e' || c == 'a')\n\
    \        v.push_back(\"can't\");\n      else\n        v.push_back(\"Hell\");\n\
    \    }\n  }\n  return v;", "    std::vector<std::string> v;\n    // Write your\
    \ code here\n    std::stack<std::string> s;\n    while(s.size()!=0){\n       \
    \ if(s.top()==s){\n            s.pop();\n        }else{\n            std::string\
    \ ss=s.top();\n            s.pop();\n            if(ss==s){\n                v.emplace_back(ss);\n\
    \            }else{\n                std::string temp=ss;\n                while(temp!=s){\n\
    \                    temp=temp+\" \"+s.top();\n                    s.pop();\n\
    \                }\n                v.emplace_back(temp);\n            }\n   \
    \     }\n    }\n    return v;", "  std::vector<std::string> word_list;\n  if(s.length()==0){\n\
    \    return word_list;\n  }\n  std::set<std::string> used_words;\n  for(std::string\
    \ word: word_list){\n    if(word.size()>n){\n      continue;\n    }\n    if(used_words.find(word)==used_words.end()){\n\
    \      word_list.push_back(word);\n      used_words.insert(word);\n    }\n  }\n\
    \  return word_list;", "    std::vector<std::string> words;\n    // Write your\
    \ code here\n    long l = 0;\n    int a = 0, b = 0;\n    while(a<s.size()){\n\
    \        b = 0;\n        while(b<s.size()-a && s[b]==s[b+a]){\n            b++;\n\
    \        }\n        l++;\n        if(n==l){\n            words.push_back((s.substr(a,b)));\n\
    \        }\n        a++;\n    }\n    return words;", "  std::vector<std::string>\
    \ results;\n  if (s.empty()) {\n    return results;\n  }\n\n  std::string substring;\n\
    \  long nConsonants;\n  long nSpaces = 0;\n  // find the first space in s\n  for\
    \ (std::string::iterator it = s.begin(); it != s.end(); ++it) {\n    if (*it ==\
    \ ' ') {\n      ++nSpaces;\n    }\n  }\n  if (nSpaces > n) {\n    return select_words(s.substr(0,\
    \ nSpaces), n);\n  }\n\n  // get the first word that has at least n consonants\
    \ and split it\n  auto it = s.begin();\n  while ((it != s.end()) && (nConsonants\
    \ < n)) {\n    if (*it == ' ') {\n      ++it;\n      continue;\n    }\n    if\
    \ (*it == 'a' || *it == 'e' || *it == 'i' || *it == 'o' || *it == 'u') {\n   \
    \   ++it;\n      continue;\n    }\n    substring = std::string(it, n);\n    results.push_back(substring);\n\
    \    ++nConsonants;\n    ++it;\n  }\n  return results;", "    // Do not write\
    \ main() function.\n    // Do not read input, instead use the arguments to the\
    \ function.\n    // Do not print the output, instead return values as specified\n\
    \    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/\
    \ for more details\n    std::vector<std::string> arr;\n    int cnt = 0;\n    std::string\
    \ x;\n    for(int i=0;i<s.size();i++){\n        x = s[i];\n        if(std::tolower(x)=='a'||std::tolower(x)=='e'||std::tolower(x)=='i'||std::tolower(x)=='o'||std::tolower(x)=='u'){\n\
    \            arr.push_back(x);\n            cnt ++;\n        }\n    }\n    std::vector<std::string>::iterator\
    \ it;\n    for(it = arr.begin(); it != arr.end(); it++){\n        if(cnt == n){\n\
    \            return arr;\n        }\n        cnt = 0;\n    }\n    return arr;",
  "    if (s.empty()) {\n        return {};\n    }\n    std::vector<std::string> words;\n\
    \    for (auto &p : s) {\n        auto i = find_char(p.c_str(), 'a');\n      \
    \  if (i == std::string::npos) {\n            i = find_char(p.c_str(), 'e');\n\
    \            if (i == std::string::npos) {\n                i = find_char(p.c_str(),\
    \ 'i');\n                if (i == std::string::npos) {\n                    i\
    \ = find_char(p.c_str(), 'o');\n                    if (i == std::string::npos)\
    \ {\n                        i = find_char(p.c_str(), 'u');\n                \
    \    }\n                }\n            }\n        }\n        if (i != std::string::npos)\
    \ {\n            words.push_back(std::string(p.begin(), i));\n        }\n    }\n\
    \    std::sort(words.begin(), words.end());\n    std::vector<std::string>::iterator\
    \ last = std::unique(words.begin(), words.end());\n    words.erase(last, words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n\
    \    words.erase(std::unique(words.begin(), words.end()) - words.begin(), words.end());\n",
  "  std::vector<std::string> ret;\n  ret.push_back(\"\");\n  if(s.empty())\n    return\
    \ ret;\n  while(s.size() >= 2) {\n    if(s.substr(0, 2) == \"c\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"ch\") {\n      ret.push_back(s.substr(0,\
    \ 4));\n    }\n    else if(s.substr(0, 2) == \"h\") {\n      ret.push_back(s.substr(0,\
    \ 2));\n    }\n    else if(s.substr(0, 2) == \"he\") {\n      ret.push_back(s.substr(0,\
    \ 5));\n    }\n    else if(s.substr(0, 2) == \"l\") {\n      ret.push_back(s.substr(0,\
    \ 4));\n    }\n    else if(s.substr(0, 2) == \"ll\") {\n      ret.push_back(s.substr(0,\
    \ 7));\n    }\n    else if(s.substr(0, 2) == \"n\") {\n      ret.push_back(s.substr(0,\
    \ 2));\n    }\n    else if(s.substr(0, 2) == \"ng\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"r\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"th\") {\n      ret.push_back(s.substr(0,\
    \ 4));\n    }\n    else if(s.substr(0, 2) == \"v\") {\n      ret.push_back(s.substr(0,\
    \ 2));\n    }\n    else if(s.substr(0, 2) == \"y\") {\n      ret.push_back(s.substr(0,\
    \ 2));\n    }\n    else if(s.substr(0, 2) == \"z\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"ch\") {\n      ret.push_back(s.substr(0,\
    \ 4));\n    }\n    else if(s.substr(0, 2) == \"s\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"sh\") {\n      ret.push_back(s.substr(0,\
    \ 4));\n    }\n    else if(s.substr(0, 2) == \"shh\") {\n      ret.push_back(s.substr(0,\
    \ 6));\n    }\n    else if(s.substr(0, 2) == \"ss\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"chs\") {\n      ret.push_back(s.substr(0,\
    \ 4));\n    }\n    else if(s.substr(0, 2) == \"x\") {\n      ret.push_back(s.substr(0,\
    \ 2));\n    }\n    else if(s.substr(0, 2) == \"y\") { \n      ret.push_back(s.substr(0,\
    \ 2));\n    }\n    else if(s.substr(0, 2) == \"zz\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"z\") {\n      ret.push_back(s.substr(0,\
    \ 3));\n    }\n    else if(s.substr(0, 2) == \"ch", "    // Write your code here\n\
    \    \n    std::vector<std::string> v;\n    int len = s.length();\n    int cnt\
    \ = 0;\n    \n    for (int i = 0; i < len; i++) {\n        if (isalpha(s[i]) &&\
    \ s[i] != '@') {\n            if (cnt <= n) {\n                v.push_back((std::string(s,\
    \ i, len)));\n                cnt++;\n            }\n        }\n    }\n    return\
    \ v;", "  std::vector<std::string> result;\n  if (s.empty()) return result;\n\
    \  std::vector<std::string> words;\n  if (n <= 0) return result;\n  \n  std::string\
    \ word = s;\n  // use \"c++'s range based for loop\" to iterate through s \n \
    \ // and add each word that has exactly n consonants \n  for (auto it = s.begin();\
    \ it != s.end(); ++it) {\n    // check if the current character is a consonant\n\
    \    if (!isalpha(*it)) continue;\n    // if current character is a consonant,\
    \ check if the preceding \n    // consonant is the same as current consonant\n\
    \    if (word == \"\") {\n      words.push_back(*it);\n      continue;\n    }\n\
    \    // if the current character is not same as the previous \n    // character,\
    \ push it to result vector\n    if (word[word.size()-1] != *it) words.push_back(*it);\n\
    \  }\n\n  result = words;\n  return result;", "  std::vector<std::string> result;\n\
    \  // Write your code here\n  return result;", "    std::vector<std::string> v;\n\
    \    int size = (int) s.size();\n    if (size == 0) {\n        return v;\n   \
    \ }\n    if (n >= s.size()) {\n        n = s.size() - 1;\n    }\n    \n    for\
    \ (int i = 0; i < size; i++) {\n        char ch = s[i];\n        if (ch == ' ')\
    \ {\n            continue;\n        }\n        \n        int count = 0;\n    \
    \    int start = 1;\n        for (int j = i; j < i + n; j++) {\n            if\
    \ (s[j] == ch) {\n                count++;\n                if (count == n) {\n\
    \                    v.push_back(s.substr(start, i - start));\n              \
    \      start = j + 1;\n                    count = 0;\n                }\n   \
    \         }\n        }\n        \n        if (count > n) {\n            v.push_back(s.substr(start,\
    \ i - start));\n        }\n    }\n    \n    return v;", "    std::set<std::string>\
    \ words;\n    if(s == \"\") return {};\n    long long count = 1;\n    for(auto\
    \ &c : s) {\n        if(!std::isalpha(c)) {\n            std::cout << \"Warning:\
    \ \" << c << \" is not a letter: \" << s.c_str() << std::endl;\n            continue;\n\
    \        }\n        std::string word = to_upper(c);\n        if(words.find(word)\
    \ == words.end()) words.insert(word);\n        ++count;\n    }\n    // Add all\
    \ the words that contains more than n consonants\n    for(auto &w : words) {\n\
    \        long long c = countConsonants(w);\n        if(c == n) words.push_back(w);\n\
    \    }\n    // If all words from input string contain more than n consonants,\
    \ add empty string.\n    if(words.size() == 0) words.push_back(\"empty\");\n \
    \   return words;", "    std::vector<std::string> result;\n    \n    for(std::size_t\
    \ i = 0; i < s.length(); i++)\n        if(s[i] != '\\0') result.push_back((std::string)s.substr(i,\
    \ i+n));\n    \n    return result;", "  assert(n > 0);\n  if (s.empty()) {\n \
    \   return {};\n  }\n  std::vector<std::string> res;\n  int cnt = 0;\n  for (char\
    \ c : s) {\n    if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u')\
    \ {\n      res.push_back((std::string)s.substr(cnt, (cnt + n) - cnt));\n     \
    \ cnt = cnt + n;\n    }\n  }\n  res.push_back((std::string)s.substr(cnt, s.length()\
    \ - cnt));\n  return res;", "  std::vector<std::string> v;\n  if(s.empty())\n\
    \    return v;\n  v.push_back(s);\n  for(int i = 0; i < n; i++) {\n    std::string\
    \ new_word = s.substr(0, i);\n    if(new_word.empty())\n      continue;\n    v.push_back(new_word);\n\
    \  }\n  return v;", "  std::vector<std::string> v;\n  if (s.size() == 0) {\n \
    \   return v;\n  }\n  \n  long m = s.size();\n  long n = std::min(m, n);\n  \n\
    \  if (n < 0 || n >= m) {\n    return v;\n  }\n  \n  // count vowel occurrences\
    \ \n  long nw = std::count_if(s.begin(), s.end(), [](char c){return (c >= 'a'\
    \ && c <= 'z') || (c >= 'A' && c <= 'Z') || (c >= '0' && c <= '9');});\n  \n \
    \ // get words\n  std::string word = s.substr(0, n);\n  \n  // check whether it\
    \ has m consonants in total\n  if (m == n + nw) {\n    v.push_back(word);\n  }\n\
    \  \n  // find first space\n  std::string::size_type end = s.find_first_of(\"\
    \ \", n);\n  if (end == std::string::npos) {\n    return v;\n  }\n  \n  // get\
    \ words\n  word = s.substr(n, end - n);\n  \n  // check whether it has m consonants\
    \ in total\n  if (m == n + nw) {\n    v.push_back(word);\n  }\n  \n  // find next\
    \ space\n  end = s.find_first_of(\" \", end + 1);\n  if (end == std::string::npos)\
    \ {\n    return v;\n  }\n  \n  // get words\n  word = s.substr(end + 1, m - end\
    \ - 1);\n  \n  // check whether it has m consonants in total\n  if (m == n + nw)\
    \ {\n    v.push_back(word);\n  }\n  \n  return v;", "    std::vector<std::string>\
    \ v;\n    for (auto &x: s) {\n        if (x.find('a') != std::string::npos ||\
    \ x.find('e') != std::string::npos || x.find('i') != std::string::npos || x.find('o')\
    \ != std::string::npos || x.find('u') != std::string::npos) {\n            v.push_back(x);\n\
    \        }\n    }\n    return v;", "    // Complete this function\n    // Feel\
    \ free to write your solution here\n    // You may assume that the input string\
    \ is non-empty and contains only letters and spaces.\n    if (s.empty()) return\
    \ {};\n    \n    std::vector<std::string> result;\n    // use two pointers to\
    \ check whether the string contains n letters, \n    // and find the start index\n\
    \    size_t start_idx = 0;\n    size_t end_idx = s.size();\n    // while start\
    \ < end\n    while (start_idx < end_idx) {\n        size_t count = 0;\n      \
    \  // increment start idx by one \n        start_idx++;\n        \n        //\
    \ if current char is not space\n        while (s[start_idx] != '\\0') {\n    \
    \        // if current char is consonant\n            if (s[start_idx] >= 'a'\
    \ && s[start_idx] <= 'z' \n                || s[start_idx] >= 'A' && s[start_idx]\
    \ <= 'Z') {\n                // check if current char has n consonants\n     \
    \           if (count + 1 ==n) {\n                    // if all consonants n are\
    \ found, add to result vector\n                    result.emplace_back(std::to_string(start_idx));\n\
    \                }\n                count++;\n            } else {\n         \
    \       // break\n                break;\n            }\n        }\n        \n\
    \        // check if there exist at least n more consecutive consonants, \n  \
    \      // if so, then increase end idx, otherwise reset start idx\n        if\
    \ (count + 1 < n) {\n            end_idx++;\n        } else {\n            start_idx\
    \ = 0;\n            end_idx = s.size();\n        }\n    }\n    return result;",
  "    std::vector<std::string> res;\n    std::vector<std::string>::iterator itr;\n\
    \    std::string::iterator it;\n    it = s.begin();\n    long count = 0;\n   \
    \ \n    while(it != s.end()) {\n        // Find the first space\n        while\
    \ (it != s.end() && std::isspace(*it))\n            ++it;\n        \n        //\
    \ Find the first letter of the word\n        while (it != s.end() && !std::isalpha(*it))\n\
    \            ++it;\n        \n        // Find the first consonant\n        while\
    \ (it != s.end() && std::islower(*it))\n            ++it;\n        \n        //\
    \ Find the last consonant\n        while (it != s.end() && std::isupper(*it))\n\
    \            ++it;\n        \n        // Find the first letter of the word\n \
    \       while (it != s.end() && !std::isalpha(*it))\n            ++it;\n     \
    \   \n        \n        // if there are enough letters to find the word length\n\
    \        if (count + n - 1 <= it - s.begin()) {\n            \n            //\
    \ find the word length\n            int len = it - s.begin();\n            \n\
    \            // if there are enough letters to find the word length\n        \
    \    if (len >= n) {\n                \n                // store it\n        \
    \        res.push_back((std::string(s, s.begin(), s.begin() + len)));\n      \
    \          \n                // move the it\n                it = s.begin() +\
    \ len;\n                \n                // increase the count\n            \
    \    count += len;\n            }\n        }\n        \n        // if there aren't\
    \ enough letters to find the word length\n        else {\n            \n     \
    \       // move the it\n            it = s.end();\n            \n            //\
    \ increase the count\n            count += it - s.end();\n        }\n    }\n \
    \   \n    return res;", "    std::vector<std::string> words;\n    std::vector<char>\
    \ v;\n    for(char c: s)\n        v.push_back(c);\n    for(size_t i = 0; i < v.size();\
    \ ++i)\n        v.at(i) = tolower(v.at(i));\n    for(size_t i = 0; i != v.size();\
    \ ++i)\n        if(v.at(i) == 'y')\n            v.erase(v.begin() + i);\n    for(size_t\
    \ i = 0; i != v.size(); ++i) {\n        if(v.at(i) == 'e')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == ' ')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == '.')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == 't')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == 'a')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == 'p')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == 'o')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == ' ')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == 'n')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == 'l')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == 'a')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == 'm')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == 'y')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at(i)\
    \ == 'a')\n            v.erase(v.begin() + i);\n    }\n    for(size_t i = 0; i\
    \ != v.size(); ++i) {\n        if(v.at(i) == ' ')\n            v.erase(v.begin()\
    \ + i);\n    }\n    for(size_t i = 0; i != v.size(); ++i) {\n        if(v.at",
  "    std::vector<std::string> result;\n    result.push_back(\"\");\n    // your\
    \ code here\n    std::cerr << s << std::endl;\n    if (s.empty())\n    {\n   \
    \     return result;\n    }\n    if (s.front() == ' ')\n    {\n        return\
    \ result;\n    }\n    for (int i = 0; i < s.length(); i++)\n    {\n        bool\
    \ found = false;\n        for (int j = i; j < s.length(); j++)\n        {\n  \
    \          if (s[j] == 'C' || s[j] == 'S' || s[j] == 'C' || s[j] == 'K' || s[j]\
    \ == 'P' || s[j] == 'H')\n            {\n                found = true;\n     \
    \           break;\n            }\n        }\n        if (!found)\n        {\n\
    \            std::cerr << s << std::endl;\n            return result;\n      \
    \  }\n    }\n    return result;", "  assert(!s.empty());\n  std::vector<std::string>\
    \ v;\n  if (n <= 0) {\n    return v;\n  }\n  auto it = s.cbegin(), e = s.cend();\
    \ \n  v.push_back(std::string(it));\n  for (++it; it != e; ++it) {\n    if (*it\
    \ != ' ' && n <= 1) {\n      break;\n    }\n    v.push_back(std::string(it));\n\
    \    n--;\n  }\n  return v;", "  std::vector<std::string> v;\n  int n = n;\n \
    \ int i = 0;\n  int count = 0;\n  while(i < s.length()) {\n    if (s[i] == ' ')\
    \ {\n      if (n == count) {\n        v.push_back((std::string)\" \");\n     \
    \ }\n      count++;\n      i++;\n    } else {\n      if (s[i] == ' ') {\n    \
    \    v.push_back((std::string)\" \");\n        count++;\n        i++;\n      }\
    \ else {\n        if (s[i] == s[0]) {\n          if (n == count) {\n         \
    \   v.push_back((std::string)\" \");\n          }\n          count++;\n      \
    \    i++;\n        } else {\n          if (s == \"\") {\n            return v;\n\
    \          } else {\n            if (n == count) {\n              v.push_back((std::string)\"\
    \ \");\n            }\n            count++;\n            i++;\n          }\n \
    \       }\n      }\n    }\n  }\n  return v;", "    std::vector<std::string> ans;\n\
    \    std::vector<std::string> v;\n    \n    if(n == 0 || s == \"\"){\n       \
    \ return ans;\n    }\n    \n    int count[26];\n    for (char ch : s){\n     \
    \   if(ch>='a'&& ch<='z'){\n            count[(int)ch-'a']++;\n        }\n   \
    \ }\n    \n    for (int i = 0; i < 26; i++){\n        if (count[i] >= n){\n  \
    \          v.push_back(std::to_string(i + 'a'));\n        }\n    }\n    ans =\
    \ v;\n    \n    return ans;", "    std::vector<std::string> retval;\n    if (s.empty())\
    \ retval.push_back(\"\");\n    else {\n        for (int i = 0; i < s.size(); i++)\
    \ {\n            for (int j = 0; j < i; j++) {\n                if (s[i] == s[j]\
    \ && i != j)\n                    retval.push_back((s.substr(i, j)));\n      \
    \      }\n        }\n    }\n    return retval;", "    std::vector<std::string>\
    \ words;\n    // Write your code here\n    return words;", "    std::vector<std::string>\
    \ v;\n    for (auto &i : s) {\n        if ((int)i == (int)' ') continue;\n   \
    \     int count = 0;\n        for (auto &j : i) {\n            if (j == (char)('a'))\
    \ count++;\n            if (j == (char)('e')) count++;\n            if (j == (char)('i'))\
    \ count++;\n            if (j == (char)('o')) count++;\n            if (j == (char)('u'))\
    \ count++;\n        }\n        if (n == count) v.push_back((std::string)i);\n\
    \    }\n    if (v.empty()) return {};\n    return v;", "  std::vector<std::string>\
    \ vs;\n  if (s.empty()) {\n    return vs;\n  }\n  // Write your code here\n  long\
    \ i = 0;\n  while (i < s.size()) {\n    if (s.at(i) != 'a') {\n      if (s.at(i)\
    \ != 'e') {\n        if (s.at(i) != 'i') {\n          if (s.at(i) != 'o') {\n\
    \            if (s.at(i) != 'u') {\n              vs.push_back(s.substr(i, i +\
    \ n));\n              i = i + n;\n            }\n          }\n        }\n    \
    \  }\n    }\n    i = i + 1;\n  }\n  return vs;", "    std::vector<std::string>\
    \ v;\n    v.push_back((std::string)s);\n    while(n != 0) {\n        std::vector<std::string>\
    \ v1;\n        for (std::string word: v) {\n            bool found = false;\n\
    \            for(int i=0; i < word.length(); i++) {\n                if(word[i]\
    \ != ' ') {\n                    if(word[i] == word[n]) {\n                  \
    \      v1.push_back(word);\n                        found = true;\n          \
    \              break;\n                    }\n                }\n            }\n\
    \            if(found == false) {\n                break;\n            }\n   \
    \     }\n        if (v1.size() > 0) {\n            v = v1;\n        }\n      \
    \  n--;\n    }\n    return v;", "    std::vector<std::string> v;\n    for(int\
    \ i = 0; i <= s.size(); i++) {\n        if(s[i] == ' ') {\n            v.push_back(s.substr(i,\
    \ s.size() - i));\n            v.push_back(s.substr(i, s.size() - i));\n     \
    \   }\n        if(i > s.size()) break;\n        if(isupper(s[i])) {\n        \
    \    v.push_back(s.substr(i, s.size() - i));\n            v.push_back(s.substr(i,\
    \ s.size() - i));\n        }\n        for(int j = 0; j <= s[i]; j++) {\n     \
    \       if(s[j] == ' ') {\n                v.push_back(s.substr(i, j - i));\n\
    \                v.push_back(s.substr(i, j - i));\n            }\n           \
    \ if(j > s[i]) break;\n            if(islower(s[j])) {\n                v.push_back(s.substr(i,\
    \ s.size() - i));\n                v.push_back(s.substr(i, s.size() - i));\n \
    \           }\n            v.push_back(s.substr(i, j - i));\n        }\n    }\n\
    \    for(int i = 0; i <= s.size(); i++) {\n        if(s[i] == ' ') {\n       \
    \     v.push_back(s.substr(i, s.size() - i));\n            v.push_back(s.substr(i,\
    \ s.size() - i));\n        }\n        if(i > s.size()) break;\n        if(isupper(s[i]))\
    \ {\n            v.push_back(s.substr(i, s.size() - i));\n            v.push_back(s.substr(i,\
    \ s.size() - i));\n        }\n        for(int j = 0; j <= s[i]; j++) {\n     \
    \       if(s[j] == ' ') {\n                v.push_back(s.substr(i, j - i));\n\
    \                v.push_back(s.substr(i, j - i));\n            }\n           \
    \ if(j > s[i]) break;\n            if(islower(s[j])) {\n                v.push_back(s.substr(i,\
    \ s.size() - i));\n                v.push_back(s.substr(i, s.size() - i));\n \
    \           }\n            v.push_back(s.substr(i, j - i));\n        }\n    }\n\
    \    return v;", "    int count = 0;\n    bool flag = true;\n    std::vector<std::string>\
    \ ans;\n    for (auto it = s.begin(); it != s.end(); ++it) {\n        if (*it\
    \ == ' ') {\n            flag = false;\n        } else {\n            if (flag)\
    \ {\n                ans.push_back(*it);\n                count++;\n         \
    \   } else {\n                if (count == n) {\n                    flag = true;\n\
    \                    count = 0;\n                    ans.push_back(*it);\n   \
    \             }\n            }\n        }\n    }\n    if (flag) {\n        return\
    \ ans;\n    }\n    return {};", "    std::vector<std::string> result;\n    if\
    \ (s.empty())\n        return result;\n    auto first_char = s.front();\n    if\
    \ (first_char == '.')\n        return result;\n    auto last_char = s.back();\n\
    \    char cur_char = 0;\n    bool first_char_found = false;\n    bool last_char_found\
    \ = false;\n    for (auto c : s) {\n        if (c == first_char) {\n         \
    \   if (last_char == '.' || (c == ' ' && cur_char == '.')) {\n               \
    \ first_char_found = true;\n                cur_char = c;\n            } else\
    \ {\n                if (!first_char_found)\n                    result.emplace_back(std::to_string(c));\n\
    \                first_char_found = false;\n            }\n        } else if (c\
    \ == last_char) {\n            if (cur_char == '.') {\n                last_char_found\
    \ = true;\n                cur_char = c;\n            } else {\n             \
    \   if (!last_char_found)\n                    result.emplace_back(std::to_string(c));\n\
    \                last_char_found = false;\n            }\n        }\n        cur_char\
    \ = c;\n    }\n    if (!first_char_found)\n        result.emplace_back(std::to_string(last_char));\n\
    \    if (!last_char_found)\n        result.emplace_back(std::to_string(first_char));\n\
    \    return result;", "    // Write your code here.\n    std::vector<std::vector<std::string>>\
    \ words;\n    std::vector<std::string> word;\n    std::vector<std::string> res;\n\
    \    res.push_back((std::string)\"\");\n    words.push_back(res);\n    auto ii\
    \ = s.begin();\n    while(ii != s.end()) {\n        if(ii+n <= s.end()) {\n  \
    \          word = s.substr(ii, n);\n            if(words.find(word) == words.end())\
    \ {\n                words.push_back(word);\n                res.push_back(word);\n\
    \            }\n        }\n        ++ii;\n    }\n    return words;", "    if (s.empty())\n\
    \        return std::vector<std::string>();\n    std::vector<std::string> ans;\n\
    \    std::string sub;\n    for (size_t i = 0; i < s.size(); ++i)\n        if (s[i]\
    \ == ' ') {\n            ans.push_back(sub);\n            sub = \"\";\n      \
    \  } else if (isalnum(s[i]) || s[i] == '_') {\n            sub += s[i];\n    \
    \    } else {\n            ans.push_back(sub);\n            sub = s[i];\n    \
    \    }\n    ans.push_back(sub);\n    if (n <= ans.size())\n        return ans;\n\
    \    return ans;", "    std::vector<std::string> res;\n    std::vector<std::string>\
    \ temp;\n    for(int i = 0; i < s.size(); i++) {\n        if(s[i] == 'a') {\n\
    \            temp.clear();\n            temp.push_back((std::string)s.substr(i,\
    \ (n - 1)));\n            res.push_back(temp);\n            break;\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> ret;\n    long i=0;\n\
    \    while(i < s.size()) {\n        long j=0;\n        while(j < n){\n       \
    \     if((s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122)){\n       \
    \         i++;\n            }\n            else {\n                j++;\n    \
    \        }\n        }\n        if(j == n) {\n            ret.push_back(std::string(s.substr(0,i)));\n\
    \            s.erase(0, i);\n        }\n    }\n    while(s.size()) {\n       \
    \ ret.push_back(std::string(s.substr(0,s.length())));\n        s.erase(0, s.length());\n\
    \    }\n    return ret;", "    std::vector<std::string> result;\n    // write\
    \ your code here\n    for(auto it = s.begin(); it != s.end(); it++) {\n      \
    \  for(auto j = n; j < s.size(); j++) {\n            if(*it == s[j] && std::isalpha(*it))\
    \ {\n                result.emplace_back(std::string{it});\n                break;\n\
    \            }\n        }\n        if(j == s.size()) {\n            result.emplace_back(std::string{it});\n\
    \        }\n    }\n    return result;", "\tstd::vector<std::string> words;\n\t\
    \n\t// Your code here\n\tfor (int i = 0; i < s.size(); i++)\n\t{\n\t\tif (s.at(i)\
    \ == 'a' || s.at(i) == 'e' || s.at(i) == 'i' || s.at(i) == 'o' || s.at(i) == 'u'\
    \ || s.at(i) == 'y')\n\t\t{\n\t\t\tif (s.at(i + 1) == 'a' || s.at(i + 1) == 'e'\
    \ || s.at(i + 1) == 'i' || s.at(i + 1) == 'o' || s.at(i + 1) == 'u' || s.at(i\
    \ + 1) == 'y')\n\t\t\t{\n\t\t\t\tif (s.at(i + 2) == 'a' || s.at(i + 2) == 'e'\
    \ || s.at(i + 2) == 'i' || s.at(i + 2) == 'o' || s.at(i + 2) == 'u' || s.at(i\
    \ + 2) == 'y')\n\t\t\t\t{\n\t\t\t\t\tif (s.at(i + 3) == 'a' || s.at(i + 3) ==\
    \ 'e' || s.at(i + 3) == 'i' || s.at(i + 3) == 'o' || s.at(i + 3) == 'u' || s.at(i\
    \ + 3) == 'y')\n\t\t\t\t\t{\n\t\t\t\t\t\tif (s.at(i + 4) == 'a' || s.at(i + 4)\
    \ == 'e' || s.at(i + 4) == 'i' || s.at(i + 4) == 'o' || s.at(i + 4) == 'u' ||\
    \ s.at(i + 4) == 'y')\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif (s.at(i + 5) == 'a' ||\
    \ s.at(i + 5) == 'e' || s.at(i + 5) == 'i' || s.at(i + 5) == 'o' || s.at(i + 5)\
    \ == 'u' || s.at(i + 5) == 'y')\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif (s.at(i +\
    \ 6) == 'a' || s.at(i + 6) == 'e' || s.at(i + 6) == 'i' || s.at(i + 6) == 'o'\
    \ || s.at(i + 6) == 'u' || s.at(i + 6) == 'y')\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\
    \t\t\tif (s.at(i + 7) == 'a' || s.at(i + 7) == 'e' || s.at(i + 7) == 'i' || s.at(i\
    \ + 7) == 'o' || s.at(i + 7) == 'u' || s.at(i + 7) == 'y')\n\t\t\t\t\t\t\t\t\t\
    {\n\t\t\t\t\t\t\t\t\t\tif (s.at(i + 8) == 'a' || s.at(i + 8) == 'e' || s.at(i\
    \ + 8) == 'i' || s.at(i + 8) == 'o' || s.at(i + 8) == 'u' || s.at(i + 8) == 'y')\n\
    \t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif (s.at(i + 9) == 'a' || s.at(i\
    \ + 9) == 'e' || s.at(i + 9) == 'i' || s.at(i + 9) == 'o' || s.at(i + 9) == '",
  "    std::vector < std::pair <std::string,int> > v;\n    for(size_t i = 0; i < s.length();\
    \ i++) {\n        for(int j = 0; j < s.length(); j++) {\n            if(s.at(i)\
    \ == s.at(j)) {\n                v.push_back({s.substr(0, i), 1});\n         \
    \   }\n        }\n    }\n    sort(v.begin(), v.end(), [] (std::pair <std::string,int>\
    \ p1, std::pair <std::string,int> p2) {\n        return p1.second < p2.second;\n\
    \    });\n    long count = 0;\n    for(size_t i = 0; i < v.size(); i++) {\n  \
    \      if(v[i].second == n) {\n            count++;\n        }\n    }\n    if(s.empty())\
    \ {\n        return {};\n    }\n    std::vector<std::string> ans;\n    for(int\
    \ i = 0; i < count; i++) {\n        std::string t;\n        for(size_t j = 0;\
    \ j < s.length(); j++) {\n            if(s.at(j) == v[i].first.at(0)) {\n    \
    \            t += s.substr(0, j);\n            }\n        }\n        if(!t.empty())\
    \ {\n            ans.push_back(t);\n        }\n    }\n    return ans;", "  std::vector<std::string>\
    \ v;\n  for(char c: s)\n    if(c=='a' || c=='e' || c=='i' || c=='o' || c=='u'\
    \ || c==' ')\n      v.push_back(std::to_string(c));\n  sort(v.begin(),v.end());\n\
    \  for(auto it=v.begin();it!=v.end();it++)\n    for(long i=0;i<n;i++)\n      if(std::find(*it,*it+i)!=std::find(*it,*it+i+1))\n\
    \        v.erase(it);\n  return v;", "  std::vector<std::string> v;\n  // Fill\
    \ this in.\n  return v;", "    // Fill this in.\n    std::vector<std::string>\
    \ ans;\n    std::map<long, std::set<std::string> > word_set;\n    for ( auto &c\
    \ : s ) {\n        word_set.emplace( std::hash<std::string>{}( c ), {} );\n  \
    \  }\n    for ( auto &kv : word_set ) {\n        if ( n-- > 0 ) {\n          \
    \  continue;\n        }\n        if ( kv.second.size() == 0 ) {\n            ans.emplace_back(\
    \ std::move(kv.first) );\n        }\n        for ( auto &c : kv.second ) {\n \
    \           kv.second.erase( c );\n        }\n    }\n    return ans;", "    std::sort(s.begin(),\
    \ s.end());\n    std::vector<std::string> v;\n    v.emplace_back(\"\");\n    for(long\
    \ i = std::min(s.length(), n); i > 0; i--){\n        if(s[i - 1] == ' ' || s[i\
    \ - 1] == '\\0' || s[i - 1] == '\\t' || s[i - 1] == '\\n' || s[i - 1] == '\\r')\
    \ {\n            v.emplace_back(s[i - 1]);\n        } else {\n            for(char\
    \ ch : s) {\n                if(ch != ' ' && ch != '\\t' && ch != '\\n' && ch\
    \ != '\\r') {\n                    if(ch == s[i - 1])\n                      \
    \  v.emplace_back(s[i - 1]);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return v;", "    if (s.empty()) {\n    \
    \    return {};\n    }\n    std::vector<std::string> res;\n    auto begin = s.begin();\n\
    \    auto end = s.end();\n    for (; begin != end && n != 0; n--) {\n        if\
    \ (std::isalpha(*begin)) {\n            auto pos = find(begin, end, ' ');\n  \
    \          if (pos != end) {\n                res.emplace_back(std::string(begin,\
    \ pos));\n                begin = pos + 1;\n            } else {\n           \
    \     res.emplace_back(std::string(begin, pos));\n                begin = pos\
    \ + 1;\n            }\n        }\n    }\n    return res;", "\t// Write your code\
    \ here\n\t// code here\n\t// code here\n\t// code here\n\treturn {};", "    std::vector<std::string>\
    \ v;\n    if (s.length() == 0) {\n        return v;\n    }\n    // Write your\
    \ code here.\n    return v;", "  std::vector<std::string> v;\n  // Your code here\n\
    \  \n  return v;", "    std::set<std::string> words;\n    std::string word = \"\
    \";\n    while(!s.empty()) {\n        word = s.substr(0, s.size() - 1);\n    \
    \    if(word.find_first_of(\"aeiou\") == std::string::npos) {\n            words.insert(word);\n\
    \        }\n        s = s.substr(0, s.size() - 1);\n    }\n    std::vector<std::string>\
    \ ans;\n    for(std::string word : words) {\n        if(word.size() == n) {\n\
    \            ans.push_back(word);\n        }\n    }\n    return ans;", "    std::vector<std::string>\
    \ ret;\n    assert(s.size() > 0);\n    // TODO : your code goes here\n    return\
    \ ret;", "    std::vector<std::string> v;\n    if (s.empty()) {\n        return\
    \ v;\n    }\n    std::string vowels = \"aeiou\";\n    std::string consonants =\
    \ \"bcdfghjklmnpqrstvwxyz\";\n    \n    // Iterate through all the characters\
    \ in s\n    for (char c: s) {\n        // Check if current char is a consonant\n\
    \        if (std::find(consonants.begin(), consonants.end(), c) == consonants.end())\
    \ {\n            // Check if current char is vowel\n            if (std::find(vowels.begin(),\
    \ vowels.end(), c) == vowels.end()) {\n                v.push_back((std::string)s);\n\
    \                break;\n            }\n        }\n    }\n    // Remove consonants\
    \ \n    while (v.size() > n) {\n        v.pop_back();\n    }\n    return v;",
  "  std::vector<std::string> ans;\n  assert(!s.empty());\n  // Initialize a boolean\
    \ array for each of characters in the string\n  // Initialize all values to false,\
    \ for initialization of arrays\n  bool b[26] = { false };\n  // Traverse the string\
    \ and populate the boolean array b accordingly\n  for (size_t i = 0; i != s.size();\
    \ ++i) {\n    int c = s[i];\n    // If b[s[i]] was false then it must have been\
    \ a vowel so increment i\n    if (!b[c]) {\n      i = i + 1;\n    }\n    // If\
    \ b[s[i]] was true, it must have been a consonant so decrement i\n    if (b[c])\
    \ {\n      i = i - 1;\n    }\n    // If we've reached the vowel count or we reached\
    \ the consonant count, \n    // increment the array at index c by 1\n    if (c\
    \ == 0 || c == 26 - 1) {\n      b[c] = true;\n    }\n  }\n  // Return only the\
    \ elements of the array that correspond to consonants\n  for (int i = 0; i !=\
    \ 26; ++i) {\n    if (b[i]) {\n      ans.push_back(std::to_string(i));\n    }\n\
    \  }\n  // Return an empty vector if nothing is found\n  return ans;", "\tassert(n\
    \ >= 0 && n <= s.size());\n\tstd::vector<std::string> res;\n\tstd::string temp;\n\
    \tlong index = -1;\n\twhile (s.size() > 0) {\n\t\ttemp = s.substr(0, 1);\n\t\t\
    if (temp == \"a\") {\n\t\t\tres.push_back(s.substr(1, n));\n\t\t\tbreak;\n\t\t\
    }\n\t\tif (temp == \" \")\n\t\t\tindex = -1;\n\t\ts = std::string(s.begin() +\
    \ index + 1, s.end());\n\t}\n\treturn res;", "  std::vector<std::string> words;\n\
    \  if (s == \"\") {\n    return words;\n  }\n\n  unordered_map<char, bool> char_count;\n\
    \  char_count.set_max_size(s.size());\n  char* buffer = s.c_str();\n  char* current\
    \ = buffer;\n  while (current < buffer + s.size()) {\n    current = strchr(current,\
    \ ' ');\n    if (current == nullptr) {\n      current = (char*)nullptr;\n    }\n\
    \    assert(current != nullptr);\n    (*char_count)[*(current)] = true;\n    ++current;\n\
    \  }\n  char* next_word = buffer;\n  std::string word;\n  while (next_word !=\
    \ buffer + s.size()) {\n    if (*char_count.find(*next_word) == char_count[*next_word])\
    \ {\n      word.assign(next_word, next_word + strlen(next_word));\n      words.push_back(word);\n\
    \    }\n    ++next_word;\n  }\n  if (n > 0) {\n    std::vector<std::string> sub_words;\n\
    \    for (auto iter = words.begin(); iter != words.end(); ++iter) {\n      if\
    \ (n--) {\n        sub_words.push_back(*iter);\n      }\n    }\n    return sub_words;\n\
    \  }\n  return words;", "    std::vector<std::string> v;\n    if(s.empty()) return\
    \ v;\n    \n    for(auto it = s.begin(); it != s.end(); it++) {\n        for(long\
    \ i = 0; i < n; i++) {\n            if((*it) == ' ') break;\n            else\
    \ (*it) = ' ';\n        }\n        v.push_back(*it);\n    }\n    \n    return\
    \ v;", "    std::vector<std::string> v;\n    for(auto i : s){\n        if( isalpha(i)\
    \ || isspace(i)){\n            v.push_back(i);\n        }\n    }\n    return v;",
  "  std::vector<std::string> v;\n  \n  // Write your code here\n  if(s.size() ==\
    \ 0) {\n    return v;\n  }\n  \n  std::vector<std::string>::iterator iter;\n \
    \ std::string word;\n  \n  for(iter = s.begin(); iter != s.end(); iter++) {\n\
    \    word = *iter;\n    if(n == 1) {\n      v.push_back((std::move(word)));\n\
    \    }\n    \n    bool found = false;\n    for(int i = word.size() - 1; i >= 0;\
    \ i--) {\n      char ch = word[i];\n      \n      if(isalpha(ch)) {\n        if(isupper(ch))\
    \ {\n          continue;\n        }\n      }\n      \n      if(ch == ' ') {\n\
    \        if(found == true) {\n          break;\n        }\n        else {\n  \
    \        found = true;\n        }\n      }\n      \n      else {\n        found\
    \ = true;\n        break;\n      }\n    }\n  }\n  \n  return v;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) {\n        return v;\n    }\n    string word;\n    for\
    \ (size_t i = 0; i < s.size(); i++) {\n        word = s.substr(i, 1);\n      \
    \  v.push_back(word);\n        if (word.size() == n) {\n            break;\n \
    \       }\n    }\n    return v;", '    // code goes here', "  std::vector<std::string>\
    \ result;\n  for(long i=0; i< s.size(); i++) {\n    if(s[i] != 'a' && s[i] !=\
    \ 'e' && s[i] != 'i' &&  s[i] != 'o' && s[i] != 'u' && s[i] != 'y' && s[i] !=\
    \ 'h')\n      continue;\n    result.push_back(s.substr(0, i+1));\n    result.push_back(s.substr(i+1));\n\
    \  }\n  for(long i=0; i< s.size(); i++) {\n    if(s[i] != 'a' && s[i] != 'e' &&\
    \ s[i] != 'i' &&  s[i] != 'o' && s[i] != 'u' && s[i] != 'y' && s[i] != 'h')\n\
    \      continue;\n    if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] ==\
    \ 'o' || s[i] == 'u' || s[i] == 'y' || s[i] == 'h')\n      continue;\n    if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || s[i] ==\
    \ 'y' || s[i] == 'h') {\n      continue;\n    }\n    if((n-1)==0) {\n      result.push_back(s.substr(0,\
    \ i+1));\n      result.push_back(s.substr(i+1));\n    }\n  }\n  if(s.size()==0)\
    \ {\n    result.push_back(s);\n  }\n  return result;", "    std::vector<std::string>\
    \ v;\n    // ++itr; \n    for (std::string::iterator itr = s.begin(); itr != s.end();\
    \ ++itr) {\n        // ++itr; \n        if ((*itr)[0] == (*itr)[1] && (*itr)[1]\
    \ == (*itr)[2] && (*itr)[2] == (*itr)[3]) {\n            v.push_back(std::string(s,\
    \ itr));\n        }\n    }\n    return v;", "    \n    std::vector<std::string>\
    \ ret;\n    if (s.size() == 0)\n    {\n        return ret;\n    }\n    \n    std::string::size_type\
    \ len = s.size();\n    std::vector<std::string> curr;\n    \n    for (std::string::size_type\
    \ i = 0; i < len; i++)\n    {\n        std::string::size_type found = -1;\n  \
    \      for (std::string::size_type j = 0; j < n; j++)\n        {\n           \
    \ found = s.find_first_of(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\", found);\n\
    \            if (found != std::string::npos)\n            {\n                curr.push_back((std::string(s.begin()\
    \ + found, s.end())));\n                break;\n            }\n        }\n   \
    \     if (found != std::string::npos)\n        {\n            ret.push_back(curr);\n\
    \            curr.resize(0);\n        }\n    }\n    \n    return ret;", "    std::vector<std::string>\
    \ vs;\n    std::string word = \"\";\n    for (char ch : s) {\n        if (ch ==\
    \ ' ') continue;\n        if ((ch.isupper() || ch.isdigit()) && n > 0) {\n   \
    \         word += ch;\n        } else {\n            if (word.length() == 0) {\n\
    \                v.push_back(word);\n                word = \"\";\n          \
    \  } else {\n                if (word.length() == n) {\n                    vs.push_back(word);\n\
    \                    word = \"\";\n                }\n            }\n        }\n\
    \    }\n    if (word.length() > 0) {\n        vs.push_back(word);\n    }\n   \
    \ return vs;", "    std::vector<std::string> words;\n    \n    if(s.length() ==\
    \ 0) {\n        words.emplace_back(\"\");\n    }\n    \n    for(int i = 0; i <\
    \ s.length(); ++i) {\n        if(s.at(i) == 'a' ||\n           s.at(i) == 'e'\
    \ ||\n           s.at(i) == 'i' ||\n           s.at(i) == 'o' ||\n           s.at(i)\
    \ == 'u') {\n            words.emplace_back(s.substr(i, 1));\n        }\n    }\n\
    \    \n    return words;", "  std::vector<std::string> word_set;\n  // Your code\
    \ goes here\n  if(s.empty())\n    return word_set;\n  for (size_t i = 0; i < s.size();\
    \ i++) {\n    if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i]\
    \ == 'u')\n    {\n      if(s[i] == ' ' || s[i] == '.')\n      {\n        word_set.push_back(\"\
    $\");\n      }\n      else if(n == 1)\n      {\n        word_set.push_back(s.substr(0,\
    \ i));\n      }\n      else\n      {\n        word_set.push_back(i);\n      }\n\
    \    }\n  }\n  return word_set;", "    std::vector<std::string> v;\n    if (s.size()\
    \ == 0) return v;\n    // Step 1: count the number of consonants in s\n    int\
    \ count[26];\n    for (char c : s) {\n        count[c -'a']++;\n    }\n    //\
    \ Step 2: copy string s with n consonants removed\n    for (int i=0;i<s.size();i++)\
    \ {\n        if (count[s[i] - 'a'] == n) v.push_back(s.substr(i, i - 1));\n  \
    \  }\n    return v;", "    if (s.empty())\n        return std::vector<std::string>();\n\
    \    // your code goes here\n    std::vector<std::string> s;\n    \n    for (std::size_t\
    \ i = 0; i != s.size() - n; i++) {\n        std::size_t count = 0;\n        for\
    \ (std::size_t j = 0; j != s.size(); j++) {\n            if (s[j] == s[i + n])\
    \ {\n                count++;\n                if (count == n) {\n           \
    \         s.push_back(s.substr(i, j + 1 - i));\n                }\n          \
    \  }\n        }\n    }\n    return s;", "// Define an auxiliary function that\
    \ is true if a letter is a consonant, otherwise false.\nbool isConsonant(char\
    \ c){\nreturn ((c>='A' && c<='Z') || (c>='a' && c<='z') || (c>='0' && c<='9')\
    \ || c==' ');", "    // Write your code here\n    std::vector<std::string> word_to_select;\n\
    \    for(size_t i = 0; i < s.length(); i++) {\n        for(int k = 0; k < s.size();\
    \ k++) {\n            if(s[i] ==s[k] && s[i] !=' ' && !isprint(s[i]) && !isspace(s[i]))\
    \ {\n                if(s.size() - i > n) {\n                    word_to_select.push_back(s.substr(i,\
    \ s.size() - i));\n                }\n                \n            }\n      \
    \  }\n    }\n    return word_to_select;", "  assert(!s.empty());\n  std::vector<std::string>\
    \ v;\n  int n = s.size();\n  char c;\n  for(int i=0; i<n; i++) {\n    c = s[i];\n\
    \    // Check if the current letter is in consonants\n    if(isalpha(c)) {\n \
    \     if(isupper(c)) {\n        // If current letter is upper case, then the letter\
    \ is not a consonant\n        continue;\n      }\n      // The current letter\
    \ is consonant, check if it is the last letter of the word\n      if(i == n-1)\
    \ {\n        // If the letter is the last letter, then it is a consonant word\n\
    \        v.push_back((std::string)s.substr(i, i+1));\n      } else {\n       \
    \ // Else, the letter is not a consonant word\n        v.push_back((std::string)s.substr(i,\
    \ i+1));\n      }\n    } else {\n      // If current letter is not a consonant,\
    \ then it is a vowel\n      continue;\n    }\n  }\n  return v;", "    std::vector<std::string>\
    \ results;\n    std::string::size_type start = 0;\n    std::string::size_type\
    \ end = 0;\n    std::string word = \"\";\n    while (n-- != 0) {\n        end\
    \ = s.find(\" \", start);\n        if (end == std::string::npos) {\n         \
    \   end = s.size();\n        }\n        word = s.substr(start, end - start);\n\
    \        results.push_back(word);\n        start = end + 1;\n    }\n    return\
    \ results;", "    if (s.empty())\n        return std::vector< std::string >();\n\
    \    \n    std::vector<std::string> v;\n    \n    for (int i = 0; i < s.size()\
    \ && n > 0; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            if\
    \ (s[i] - 'a' == n)\n                v.push_back(s.substr(i, i - n));\n      \
    \      if (s[i] - 'a' > n)\n                n = s[i] - 'a';\n        }\n    }\n\
    \    \n    return v;", "  long count = 0;\n  vector<string> ans;\n  long temp;\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == ' ')\n      continue;\n\
    \    for (int j = 0; j < n; j++) {\n      temp++;\n      if (s[i] == s[j]) {\n\
    \        count++;\n        ans.push_back(string(1, s[i]));\n      }\n    }\n \
    \ }\n  if (count == 0)\n    return ans;\n  else\n    return ans;", "    // Write\
    \ your code here\n    std::vector<std::string> v;\n    for(size_t i = 0;i<s.size();++i)\n\
    \    {\n        for(size_t j = 0;j<s.size();++j)\n        {\n            if((s[i]==s[j])&&!(s[i]==\"\
    \ \"))\n            {\n                if(s[j-1]==' ')\n                {\n  \
    \                  v.push_back(s.substr(i,n));\n                }\n          \
    \      else if(s[j]==' ')\n                {\n                    v.push_back(s.substr(i,n));\n\
    \                }\n            }\n        }\n    }\n    return v;", "  std::vector<std::string>\
    \ v;\n  v.push_back(s);\n  \n  for(long i = 0; i < s.size(); i++) {\n    v.push_back(\
    \ s[i].begin(), s[i].end() );\n  }\n  return v;", "    std::vector<std::string>\
    \ v;\n    if(s.empty())\n        return v;\n    \n    int i = 0;\n    \n    while(i\
    \ != s.size()) {\n        // count how many times consonant i occurs \n      \
    \  int c = count(s.begin(), s.end(), s[i]);\n        // add all words that contains\
    \ exactly n consonants\n        if(c >= n)\n            v.push_back(s.substr(i,\
    \ c - i));\n        \n        i += 1;\n    }\n    \n    return v;", "    std::vector<std::string>\
    \ v;\n    if (s.empty()) \n        return v;\n    long pos = 0;\n    while (pos\
    \ < s.length()) {\n        if ( s[pos] != \"a\" && s[pos] != \"e\" && s[pos] !=\
    \ \"i\" && s[pos] != \"o\" && \n            s[pos] != \"u\" && s[pos] != \"y\"\
    \ && s[pos] !=\"y\" && s[pos] != \"s\" && \n            s[pos] != \"a\" && s[pos]\
    \ != \"e\" && s[pos] != \"i\" && s[pos] != \"o\" && \n            s[pos] != \"\
    u\" && s[pos] != \"y\" && s[pos] !=\"y\" && s[pos] != \"s\" && \n            s[pos]\
    \ != \"a\" && s[pos] != \"e\" && s[pos] != \"i\" && s[pos] != \"o\" && \n    \
    \        s[pos] != \"u\" && s[pos] != \"y\" && s[pos] !=\"y\" && s[pos] != \"\
    s\" ) {\n            v.push_back((std::string)s.substr(pos, 1));\n           \
    \ pos += 1;\n            while (pos < s.length() && s[pos] != \"a\" && s[pos]\
    \ != \"e\" && \n                s[pos] != \"i\" && s[pos] != \"o\" && s[pos] !=\
    \ \"u\" && s[pos] != \"y\" && \n                s[pos] !=\"y\" && s[pos] != \"\
    s\" && s[pos] != \"a\" && s[pos] != \"e\" && \n                s[pos] != \"i\"\
    \ && s[pos] != \"o\" && s[pos] != \"u\" && s[pos] != \"y\" && \n             \
    \   s[pos] !=\"y\" && s[pos] != \"s\" && s[pos] != \"a\" && s[pos] != \"e\" &&\
    \ \n                s[pos] != \"i\" && s[pos] != \"o\" && s[pos] != \"u\" && s[pos]\
    \ != \"y\" && \n                s[pos] !=\"y\" && s[pos] != \"s\" ) {\n      \
    \          pos += 1;\n            }\n            if (pos == s.length() && n ==\
    \ 1) \n                v.push_back((std::string)s.substr(pos, 1));\n        }\
    \ else {\n            pos += 1;\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    if (s.size() == 0) return v;\n    v.push_back(s);\n    size_t count\
    \ = s.size();\n    std::vector<std::string> results;\n    for (size_t i = 0; i\
    \ < count; i++) {\n        std::string word = s.substr(0, i);\n        int letterCount\
    \ = 0;\n        for (const char& letter : word) {\n            if (letter == '\
    \ ' || letter == '.') continue;\n            if (letter == 'a' || letter == 'e'\
    \ || letter == 'i' || \n                letter == 'o' || letter == 'u' || letter\
    \ == 'A' || \n                letter == 'E' || letter == 'I' || letter == 'O'\
    \ || \n                letter == 'U') {\n                if (letterCount > n)\
    \ break;\n                v.push_back(word + letter);\n                letterCount++;\n\
    \            }\n        }\n        if (v.size() == n) {\n            results.push_back(v);\n\
    \            v.clear();\n        }\n    }\n    return results;", "  std::vector<std::string>\
    \ res;\n  std::string word;\n  for (size_t i = 0; i < s.size(); i++) {\n    if\
    \ (s[i] == ' ') {\n      if (word != \"\" && res.size() >= n) {\n        res.push_back(word);\n\
    \      }\n      word = s[i] == ' ' ? \" \" : \"\";\n    } else {\n      word +=\
    \ s[i];\n    }\n  }\n  if (word != \"\" && res.size() >= n) {\n    res.push_back(word);\n\
    \  }\n  if (res.size() == 0) {\n    return std::vector<std::string>();\n  }\n\
    \  return res;", "  std::vector<std::string> v;\n  if (n == 0) {\n    v.push_back(\"\
    \");\n  } else if (s[0] == ' ') {\n    v.push_back(s.substr(0, s.size() - 1));\n\
    \  } else if (s[0] == '\\0') {\n    v.push_back(\"\");\n  } else {\n    for (auto\
    \ i = s.size(); i != 0; --i) {\n      auto c = s[i - 1];\n      if (c == ' ' ||\
    \ c == '\\0') {\n        v.push_back(s.substr(0, i));\n        break;\n      }\n\
    \      if (c == 'a') {\n        if (i == s.size() - 1) {\n          v.push_back(\"\
    \");\n          break;\n        }\n        auto j = i + 1;\n        while ((j\
    \ < s.size()) && (s[j] != 'a'))\n          ++j;\n        if (j == s.size() - 1)\
    \ {\n          v.push_back(s.substr(0, i));\n          break;\n        }\n   \
    \     if (s[i] != s[j])\n          break;\n        v.push_back(s.substr(i, j));\n\
    \        i += j - i + 1;\n        break;\n      }\n      if (c == 'b' || c ==\
    \ 'c' || c == 'd' || c == 'e' || c == 'f' || \n          c == 'g' || c == 'h'\
    \ || c == 'i' || c == 'j' || c == 'k' || \n          c == 'l' || c == 'm' || c\
    \ == 'n' || c == 'o' || c == 'p' || \n          c == 'q' || c == 'r' || c == 's'\
    \ || c == 't' || c == 'u' || \n          c == 'v' || c == 'w' || c == 'x' || c\
    \ == 'y' || c == 'z')\n        v.push_back(s.substr(0, i));\n    }\n  }\n  return\
    \ v;", "    if (s.empty()) {\n        return {};\n    }\n    std::vector<std::string>\
    \ v;\n    std::string word = \"\";\n    for (auto &c : s) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            if (word\
    \ == \"\") {\n                v.push_back({word});\n                word = c;\n\
    \            } else {\n                word += c;\n            }\n        } else\
    \ {\n            word += c;\n        }\n        if (word.size() == n) {\n    \
    \        v.push_back({word});\n            word = \"\";\n        }\n    }\n  \
    \  return v;", "    std::vector<std::string> vs;\n    for (size_t i = 0; i < s.length();\
    \ ++i) {\n        if (!is_consonant(s.at(i))) {\n            if (n == 0 || s.at(i)\
    \ != s.at(i-1)) {\n                vs.emplace_back(s.substr(i, 1));\n        \
    \    }\n        }\n    }\n    return vs;", "    std::vector<std::string> res;\n\
    \    // Your code here\n    res.push_back(s);\n    return res;", "    std::vector<std::string>\
    \ v;\n    // write your code here\n    v.emplace_back(s);\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]=='a' || s[i]=='e' || s[i]=='i' || s[i]=='o' || s[i]=='u'){\n\
    \            for(int j=i+1;j<s.length();j++){\n                if(s[j] == 'a'\
    \ || s[j] == 'e' || s[j] == 'i' || s[j] == 'o' || s[j] == 'u'){\n            \
    \        v.emplace_back(s.substr(i,j-i+1));\n                }\n            }\n\
    \        }\n    }\n    return v;", "    std::vector<std::string> res;\n    //\
    \ your code here\n    for (auto &e : s) {\n        if (e == 'a' || e == 'e' ||\
    \ e == 'i' || e == 'o' || e == 'u') {\n            for (int i = 0; i < (n - 1);\
    \ i++) {\n                res.push_back(s.substr(i, n));\n            }\n    \
    \    }\n    }\n    return res;", "    std::sort(s.begin(), s.end()); //sorting\
    \ alphabetically\n    if (s.empty()) return {}; //returning empty vector if string\
    \ is empty\n    \n    std::vector<std::string> ans;\n    \n    for (auto i = s.cbegin(),\
    \ j = s.cend(); i <= j; ++i)\n    {\n        for (auto k = i; k <= j; ++k)\n \
    \       {\n            if (k - i != n)\n            {\n                ans.emplace_back(s.substr(k,\
    \ i-k));\n                \n                break;\n            }\n        }\n\
    \    }\n    \n    return ans;", "  assert(s.length() > 0);\n  std::vector<std::string>\
    \ result;\n  std::string word = \"\";\n  \n  for (int i = 0; i < s.length(); ++i)\
    \ {\n    if (s[i] == 'a') {\n      if (!word.empty()) {\n        result.push_back(word);\n\
    \        word = \"\";\n      }\n    }\n    else if (s[i] == 'u' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      if (!word.empty()) result.push_back(word);\n\
    \      word = s[i];\n    }\n    else {\n      if (!word.empty()) result.push_back(word);\n\
    \      word += s[i];\n    }\n  }\n  \n  if (!word.empty()) result.push_back(word);\n\
    \  return result;", "  if (s.empty())\n    return {};\n  // your implementation\
    \ here\n  return std::vector<std::string>{};", "    if(s.length() == 0 || n ==\
    \ 0)\n        return {};\n    std::string ans;\n    for(std::string word: split(s))\n\
    \        if(count(word, {'a', 'e', 'i', 'o', 'u', 'y'}) == n)\n            ans.push_back(word);\n\
    \    return ans;", "    std::vector<std::string> words;\n    if (s.empty()) {\n\
    \        return words;\n    }\n    \n    for (char c : s) {\n        if (c ==\
    \ ' ' || c == '\\t' || c == '\\n') {\n            continue;\n        }\n     \
    \   if (count_consonants(c) == n) {\n            words.push_back((std::string)c);\n\
    \        }\n    }\n    return words;", "  std::vector<std::string> v;\n  v.reserve(s.size());\n\
    \  std::string word = \"\";\n  if(s.size() > 0){\n    word = s.substr(0,n);\n\
    \    // Find words that contain n consonants\n    int n = s.size() - word.length();\n\
    \    int i = 0;\n    for(std::size_t i = 0; i < (int)word.length(); i++)\n   \
    \   if(word[i] != 'a'){\n        if(word[i] == 'u' || word[i] == 'U'){\n     \
    \     if(word[i + 1] == 'l' || word[i + 1] == 'L'){\n            if(word[i + 2]\
    \ == 'a' || word[i + 2] == 'A'){\n              if(word[i + 3] == 't' || word[i\
    \ + 3] == 'T'){\n                if(word[i + 4] == 'e' || word[i + 4] == 'E'){\n\
    \                  if(word[i + 5] == 'r' || word[i + 5] == 'R'){\n           \
    \         if(word[i + 6] == 's' || word[i + 6] == 'S'){\n                    \
    \  if(word[i + 7] == 'm' || word[i + 7] == 'M'){\n                        if(word[i\
    \ + 8] == 'a' || word[i + 8] == 'A'){\n                          if(word[i + 9]\
    \ == 't' || word[i + 9] == 'T'){\n                            if(word[i + 10]\
    \ == 'h' || word[i + 10] == 'H'){\n                              if(word[i + 11]\
    \ == 'w' || word[i + 11] == 'W'){\n                                if(word[i +\
    \ 12] == 'd' || word[i + 12] == 'D'){\n                                  if(word[i\
    \ + 13] == 'l' || word[i + 13] == 'L'){\n                                    if(word[i\
    \ + 14] == 'e' || word[i + 14] == 'E'){\n                                    \
    \  if(word[i + 15] == 'r' || word[i + 15] == 'R'){\n                         \
    \               if(word[i + 16] == 'e' || word[i + 16] == 'E'){\n            \
    \                              if(word[i + 17] == 's' || word[i + 17] == 'S'){\n\
    \                                            if(word[i + 18] == 'a' || word[i\
    \ + 18] == 'A'){\n                                              if(word[i + 19]\
    \ == 'l' || word[i + 19] == 'L'){\n                                          \
    \      if(word[i + 20] == 'c' || word[i + 20] == 'C'){\n                     \
    \                             if(word[i + 21] == 'h' || word[i + 21] == 'H'){\n\
    \                                                    if(word[i + 22] == 'w' ||\
    \ word[i + 22] == 'W'){\n                                                    \
    \  if(word[i + 23] == 'o' || word[i + 23] == 'O'){\n                         \
    \                               if(word[i + 24] == 'd' || word[i + 24] == 'D'){\n\
    \                                                          if(word[i + 25] ==\
    \ 'n' || word[i + 25] == 'N'){\n                                             \
    \               if(word[i + 26] == 'e' || word[i + 26] == 'E'){\n            \
    \                                                  if(word[i + 27] == 'r' || word[i\
    \ + 27", "    std::vector<std::string> res;\n    if(s == \"\") return res;\n \
    \   \n    std::vector<bool> ans(s.size(), 0);\n    for(size_t i = 0; i < s.size();\
    \ ++i){\n        for(size_t j = 0; j < s.size(); ++j){\n            if(ans[j]\
    \ && s.at(i) == s.at(j)){\n                ans[j] = !ans[j];\n            }\n\
    \        }\n    }\n    \n    if(ans.at(n) == false){\n        return res;\n  \
    \  }\n    \n    for(size_t i = 0; i < s.size(); ++i){\n        if(ans.at(i) ==\
    \ true && s.at(i) == s.at(n)){\n            res.push_back(s.substr(0, i));\n \
    \       }\n    }\n    return res;", "    std::vector<std::string> result;\n  \
    \  for(int i = 0; i < s.size(); i++) {\n        if(s.at(i) == '_') {\n       \
    \     if(!result.empty()) {\n                result.clear();\n            }\n\
    \            continue;\n        }\n        for(int j = 0; j < n; j++) {\n    \
    \        if(s.at(i) == s[j]) {\n                result.push_back((std::string)s.substr(0,\
    \ i+1));\n                break;\n            }\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> v;\n    // write your code here\n  \
    \  return v;", "    std::vector<std::string> v;\n    // insert your code here\n\
    \    return 0;", "    std::vector<std::string> words;\n    // write your code\
    \ here\n    return words;", "    if (s.length() == 0)\n        return std::vector<std::string>();\n\
    \    long count = 0;\n    for (auto const &c: s)\n        if (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u')\n            count++;\n    std::vector<std::string>\
    \ res;\n    long last_index = -1;\n    for (auto const &c: s) {\n        if (last_index\
    \ < 0 && c == 'a')\n            last_index = count;\n        if (last_index >\
    \ 0 && last_index == count + 1) {\n            if (n == count)\n             \
    \   res.push_back(c);\n        } else {\n            if (n-- > 0)\n          \
    \      res.push_back(c);\n        }\n    }\n    return res;", '    //code here',
  "  std::vector<std::string> result;\n  if (s.empty()) {\n    return result;\n  }\n\
    \  std::vector<std::string> result1(s.begin(), s.end());\n  result1.erase(std::remove(result1.begin(),\
    \ result1.end(), ' '), result1.end()); // remove space\n  std::string newstr;\n\
    \  bool flag = true;\n  while (result1.size() > n) {\n    newstr.clear();\n  \
    \  flag = true;\n    for (std::string temp : result1) {\n      newstr += temp;\n\
    \      if (std::count(newstr.begin(), newstr.end(), ' ')) flag = false;\n    }\n\
    \    if (flag == true) {\n      result.push_back(newstr);\n    }\n    result1.erase(std::remove(result1.begin(),\
    \ result1.end(), ' '), result1.end()); // remove space\n  }\n  return result;",
  "    assert(n >= 0 && n < s.size());\n    // Your code here", "    std::vector<std::string>\
    \ v;\n    \n    if (s.empty()) return v;\n    \n    std::string w;\n    std::stack<std::string>\
    \ st;\n    st.push(s);\n    \n    while (!st.empty()) {\n        w = st.top();\n\
    \        if (w.size() == n) v.push_back(w);\n        if (w.size() > n) st.pop();\n\
    \        else std::cout << w << \" \";\n        \n        while (w.size() != n)\
    \ {\n            if (w.size() > n) st.pop();\n            else std::cout << w\
    \ << \" \";\n            if (w.size() == n) v.push_back(w);\n            w = st.top();\n\
    \            if (w.size() == n) st.push(w);\n            std::cout << w << \"\
    \ \";\n        }\n    }\n    \n    return v;", "  std::vector<std::string> v;\n\
    \  std::string word = \"\";\n  for (int i = 0; i < n; ++i) {\n    word = word\
    \ + s[i];\n  }\n  v.push_back(word);\n  if (s.size() > 0) {\n    for (int j =\
    \ 0; j < n; ++j) {\n      v.push_back(\"(\" + word + \")\");\n    }\n  }\n  return\
    \ v;", "  assert(s.size() > 0);\n  assert(n >= 0 && n <= s.size());\n  if(s.size()\
    \ == 0) {\n    return std::vector<std::string>();\n  }\n  \n  if(n <= 1) {\n \
    \   std::vector<std::string> res;\n    res.push_back(s);\n    return res;\n  }\n\
    \  std::vector<std::string> res;\n  \n  // Step 1: Create a hash map and store\
    \ all the words in string s.\n  std::unordered_map<std::string,int> map;\n  for(char\
    \ c : s) {\n    map[c]++;\n  }\n  \n  // Step 2: Iterate over all the words in\
    \ map and compare the value with the required n.\n  for(auto &kv : map) {\n  \
    \  if(kv.second == n) {\n      res.push_back(kv.first);\n    }\n  }\n  \n  return\
    \ res;", "    if (s.empty()) {\n        return std::vector<std::string>();\n \
    \   }\n    std::vector<std::string> result;\n    for (auto &c: s) {\n        if\
    \ (n-- == 0) {\n            c.swap(s.back());\n            s.pop_back();\n   \
    \         result.emplace_back(std::move(c));\n            break;\n        }\n\
    \        if (c.at(0) == '\\'') {\n            n--;\n        }\n    }\n    return\
    \ result;", "    std::vector<std::string> words;\n    for (auto &word : s) {\n\
    \        if (std::count_if(word.begin(), word.end(), std::isspace) == n)\n   \
    \         words.push_back(std::move(word));\n    }\n    return words;", '    //
    write your code here', "    std::vector<std::string> v;\n    // Write your code\
    \ here\n    for (auto &i: s)\n        for (auto &j: i)\n            if (j != '\
    \ ')\n                v.push_back(i+j);\n        if (v.size() < n)\n         \
    \   return v;\n    \n    return v;", "    \n    std::vector<std::string> v;\n\
    \    if (s.empty()) {\n        return v;\n    }\n    for (auto &it : s) {\n  \
    \      if (std::count(it.begin(), it.end(), \n                       n) == n)\
    \ v.push_back({it});\n    }\n    return v;", "    std::vector<std::string> ans;\n\
    \    if(s.empty())\n        return ans;\n    std::string word = s.substr(0, n);\n\
    \    long index = 1;\n    for(char c : word){\n        ans.push_back((std::string)word);\n\
    \        index = index * c + 1;\n    }\n    return ans;", "    // Write your code\
    \ here\n    return {};", "    std::vector<std::string> res;\n    // write your\
    \ logic here\n    int i = 0;\n    for (char ch: s) {\n        if (ch == 'a' ||\
    \ ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'y') {\n         \
    \   ++i;\n        }\n    }\n    std::vector<std::string> v;\n    if (i > 0) {\n\
    \        for (i; i< s.length(); i++) {\n            v.push_back(s.substr(0, i));\n\
    \        }\n        v.push_back(s);\n    }\n    if (v.empty())\n        return\
    \ res;\n    if (v[0].size() == n) {\n        res.push_back(v[0]);\n    }\n   \
    \ for (int i = 0; i < v.size(); i++) {\n        std::vector<std::string> v2 =\
    \ select_words(v[i], n);\n        for (auto &it: v2)\n            res.push_back(it);\n\
    \    }\n    return res;", "  std::vector<std::string> v;\n  if (s.empty())\n \
    \   return v;\n  for (char c: s) {\n    if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u' || c == 'y') {\n      v.push_back((std::string)c);\n  \
    \  } else if (c == 'A' || c == 'E' || c == 'I' || c == 'O' || c == 'U' || c ==\
    \ 'Y') {\n      v.push_back((std::string)c);\n    } else if (c == 'm' || c ==\
    \ 'n' || c == 'h' || c == 'l' || c == 's' || c == 'w') {\n      v.push_back((std::string)c);\n\
    \    } else if (c == 'M' || c == 'N' || c == 'H' || c == 'L' || c == 'S' || c\
    \ == 'W') {\n      v.push_back((std::string)c);\n    } else if (c == ' ') {\n\
    \      v.push_back((std::string)c);\n    }\n  }\n  return v;", "    // Write your\
    \ code here\n    std::vector<std::string> v;\n    if(s.length() == 0){\n     \
    \   return v;\n    }\n    std::string vowels = \"aeiou\";\n    for(int i = 0;\
    \ i<s.length(); i++){\n        for(int j = 0; j < vowels.length(); j++){\n   \
    \         if(s[i] == vowels[j]){\n                break;\n            }\n    \
    \    }\n        if(j < vowels.length()){\n            v.push_back((std::string)s[i]);\n\
    \        }\n    }\n    for(int i = 0; i<s.length(); i++){\n        for(int j =\
    \ 0; j < n; j++){\n            if(s[i] == vowels[j]){\n                break;\n\
    \            }\n        }\n        if(j < n){\n            v.push_back((std::string)s[i]);\n\
    \        }\n    }\n    return v;", "    // Your code here\n    std::vector<std::string>\
    \ v;\n    for(int i=0;i<s.size();i++){\n        for(int j=0;j<s.at(i);j++){\n\
    \            if(s.at(i)==s.at(j)){\n                v.push_back(s.substr(i,j));\n\
    \            }\n        }\n    }\n    return v;", "    std::vector<std::string>\
    \ v;\n    auto it = s.begin();\n    while (it != s.end() && n > 0) {\n       \
    \ if (*it == 'a' || *it == 'e' || *it == 'i' || *it == 'o' || *it == 'u') {\n\
    \            v.push_back(std::string(it++));\n            n--;\n        }\n  \
    \      else if (*it == 'y' || *it == 'h' || *it == 'o' || *it == 'r') {\n    \
    \        v.push_back(std::string(it++));\n            n--;\n        }\n      \
    \  else if (*it == 'w') {\n            v.push_back(std::string(it++));\n     \
    \       n--;\n        }\n        else if (*it == ' ') {\n            v.push_back(std::string(it++));\n\
    \            n--;\n        }\n        else {\n            ++it;\n        }\n \
    \   }\n    return v;", "    std::vector<std::string> result;\n    long counter\
    \ = 0;\n    for (auto &char : s)\n        if (char == '#')\n            counter++;\n\
    \    if (counter > n)\n        return result;\n    result.emplace_back(s);\n \
    \   for (auto &char : s)\n        if (char == '#')\n            counter--;\n \
    \   if (counter < n)\n        return result;\n    result.emplace_back(s);\n  \
    \  return result;", "    std::vector<std::string> ans;\n    // Write your code\
    \ here\n    for(auto &word: words){\n        if(count(word.begin(), word.end(),\
    \ n) == n)\n        {\n            ans.push_back(word);\n        }\n    }\n  \
    \  return ans;", "    std::vector<std::string> res;\n    if(s.empty())\n     \
    \   return res;\n    \n    for(int i=0; i<s.size(); i++) {\n        char c = s[i];\n\
    \        if((i+1)==s.size()) {\n            if(std::count_if(c == ' ', c) == n)\
    \ {\n                res.push_back((std::string)s);\n            }\n        }\n\
    \        else {\n            char c2 = s[i+1];\n            if(c == c2) {\n  \
    \              if(std::count_if(c == ' ', c) == n) {\n                    res.push_back((std::string)s);\n\
    \                }\n            }\n        }\n    }\n    return res;", "    if\
    \ (s == \"\") {\n        return std::vector<std::string>();\n    }\n    std::vector<std::string>\
    \ v;\n    auto i = s.begin(), j = s.end();\n    while (*i != ' ' && *j != ' ')\n\
    \        i++, j--;\n    bool first_word = true;\n    while (j < s.end()) {\n \
    \       // skip space\n        while (*j == ' ' || *j == '\\t' || *j == '\\n')\n\
    \            j++;\n        // search consonants\n        for (int k = 0; k < n;\
    \ k++) {\n            while (k < n && *i == *j++)\n                k++;\n    \
    \        if (k == n)\n                break;\n        }\n        // push word\n\
    \        if (first_word) {\n            v.push_back({(std::string)s.substr(i,\
    \ j)});\n            first_word = false;\n        }\n        i = s.find(\" \"\
    , j);\n        if (i == s.end())\n            break;\n    }\n    return v;", " \
    \   std::vector<std::string> ans;\n    std::string::size_type pos = 0;\n    while(pos\
    \ < s.size()) {\n        // find consonant\n        char c = s[pos];\n       \
    \ int index = n - 1;\n        if(c >= 'a' && c <= 'z') {\n            index -=\
    \ (c - 'a') + 2; // convert 'a' to 'z', then 'a'-'a'\n        } else if(c >= 'A'\
    \ && c <= 'Z') {\n            index -= (c - 'A') + 2; // convert 'A' to 'Z', then\
    \ 'A'-'A'\n        }\n        if(index < 0) {\n            index = n + index;\n\
    \        }\n        while(index >= 0) {\n            ans.push_back(s.substr(pos,\
    \ index));\n            pos += index;\n            index -= 1;\n        }\n  \
    \  }\n    return ans;", "    if (s.empty()) {\n        return {};\n    }\n   \
    \ if (n <= 0) {\n        return {};\n    }\n    std::vector<std::string> res;\n\
    \    auto start = std::find(s.begin(), s.end(), 'a');\n    auto end = std::find(s.begin(),\
    \ s.end(), 'z');\n    if (end != s.end()) {\n        if (start != s.begin() &&\
    \ end != s.end()) {\n            auto firstWord = s.substr(0, (end - start));\n\
    \            if (firstWord.size() > n) {\n                res = select_words(firstWord,\
    \ n);\n            } else {\n                res.push_back(firstWord);\n     \
    \       }\n        }\n    }\n    auto start = std::find(s.begin(), s.end(), 'A');\n\
    \    auto end = std::find(s.begin(), s.end(), 'Z');\n    if (end != s.end()) {\n\
    \        if (start != s.begin() && end != s.end()) {\n            auto firstWord\
    \ = s.substr(0, (end - start));\n            if (firstWord.size() > n) {\n   \
    \             res = select_words(firstWord, n);\n            } else {\n      \
    \          res.push_back(firstWord);\n            }\n        }\n    }\n    auto\
    \ start = std::find(s.begin(), s.end(), '1');\n    auto end = std::find(s.begin(),\
    \ s.end(), '9');\n    if (end != s.end()) {\n        if (start != s.begin() &&\
    \ end != s.end()) {\n            auto firstWord = s.substr(0, (end - start));\n\
    \            if (firstWord.size() > n) {\n                res = select_words(firstWord,\
    \ n);\n            } else {\n                res.push_back(firstWord);\n     \
    \       }\n        }\n    }\n    auto start = std::find(s.begin(), s.end(), '\
    \ ');\n    auto end = std::find(s.begin(), s.end(), '\\t');\n    if (end != s.end())\
    \ {\n        if (start != s.begin() && end != s.end()) {\n            auto firstWord\
    \ = s.substr(0, (end - start));\n            if (firstWord.size() > n) {\n   \
    \             res = select_words(firstWord, n);\n            } else {\n      \
    \          res.push_back(firstWord);\n            }\n        }\n    }\n    return\
    \ res;", "  std::vector<std::string> v;\n  for(std::string s: s)\n  for(int i=0;\
    \ i<s.length(); i++)\n  if(s[i]!='a')\n  if(s[i]!='e')\n  if(s[i]!='i')\n  if(s[i]!='o')\n\
    \  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='a')\n  if(s[i]!='u')\n  if(s[i]!='o')\n\
    \  if(s[i]!='e')\n  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='i')\n  if(s[i]!='o')\n\
    \  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='a')\n  if(s[i]!='u')\n  if(s[i]!='e')\n\
    \  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='u')\n\
    \  if(s[i]!='e')\n  if(s[i]!='a')\n  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='i')\n\
    \  if(s[i]!='o')\n  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='u')\n  if(s[i]!='e')\n\
    \  if(s[i]!='a')\n  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='i')\n  if(s[i]!='o')\n\
    \  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='a')\n\
    \  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='i')\n\
    \  if(s[i]!='o')\n  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='a')\n  if(s[i]!='u')\n\
    \  if(s[i]!='e')\n  if(s[i]!='i')\n  if(s[i]!='o')\n  if(s[i]!='i')\n  if(s[i]!='o')\n\
    \  if(s[i]!='u')\n  if(s[i]!='e')\n  if(s[i]!='a')\n  if(s[i]!='u", "    // Your\
    \ code here\n    std::vector<std::string> v;\n    for(std::string::const_iterator\
    \ i = s.begin(); i != s.end(); ++i){\n        if((*i).length() == n)\n       \
    \     v.push_back((*i));\n    }\n    return v;", "    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    // Write your code here\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n            word =\
    \ word + \"a\";\n        } else if (s[i] == 'e') {\n            word = word +\
    \ \"e\";\n        } else if (s[i] == 'i') {\n            word = word + \"i\";\n\
    \        } else if (s[i] == 'o') {\n            word = word + \"o\";\n       \
    \ } else if (s[i] == 'u') {\n            word = word + \"u\";\n        } else\
    \ if (s[i] == 'y') {\n            word = word + \"y\";\n        } else {\n   \
    \         words.push_back(word);\n            word = s[i];\n        }\n    }\n\
    \    if (word.size() > 0) {\n        words.push_back(word);\n    }\n    return\
    \ words;", "  assert(!s.empty());\n  std::vector<std::string> words;\n  std::set<char>\
    \ letters;\n  for (int i=0; i<s.size(); i++) {\n    if (std::isalpha(s[i])) letters.insert(s[i]);\n\
    \  }\n  for (char c : letters) {\n    if (n==1) {\n      words.push_back((std::string)s.substr(0,\
    \ i));\n      return words;\n    }\n    else if (n>1) {\n      long count = 0;\n\
    \      std::string curWord;\n      for (int j=0; j<s.size(); j++) {\n        if\
    \ (letters.find(s[j])!=letters.end()) count++;\n        else if ((s[j]==c)&&(count==n))\
    \ {\n          curWord = s.substr(0, j);\n          words.push_back((std::string)curWord);\n\
    \        }\n      }\n    }\n  }\n  return words;", "    std::vector<std::string>\
    \ result;\n    long count = 0;\n    for (char c : s) {\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n    \
    \    }\n    }\n    if (count == n) {\n        result.push_back((std::string)(s));\n\
    \    }\n    return result;", "  // Write your code here\n  return s;", "\t// Write\
    \ your code here\n\treturn s;", "    std::vector<std::string> v;\n    if (s.empty())\n\
    \        return v;\n\n    v.push_back((std::string)s);\n    \n    for (auto i\
    \ = s.rbegin(); i != s.rend(); ++i)\n    {\n        if (n-- == 0)\n          \
    \  break;\n        \n        // if the current char is a consonant, add it to\
    \ the current vector \n        if (*i == 'a')\n            v.push_back((std::string)s.substr(0,\
    \ i+1));\n    }\n\n    return v;", "    std::sort(s.begin(), s.end());\n    std::vector<std::string>\
    \ res;\n    std::string::size_type begin = 0, end;\n    long count = 0;\n    for\
    \ (auto it = s.cbegin(); it != s.cend(); ++it) {\n        if (*it == '\\'') {\n\
    \            begin = s.find_first_of(it, s.end());\n        } else if (begin !=\
    \ s.end() && *it == s[begin]) {\n            begin = s.find_first_not_of(it, s.end());\n\
    \        } else if (begin != s.end() && *it != s[begin]) {\n            count++;\n\
    \        }\n        end = s.find_first_of(begin + 2, s.end());\n        if (end\
    \ != s.end()) {\n            if (count >= n) {\n                res.push_back({s.substr(begin\
    \ + 1, end - begin - 1)});\n                count = 0;\n            }\n      \
    \  }\n        begin = end;\n    }\n    return res;", "  std::vector<std::string>\
    \ v;\n  if(!s.empty()) {\n    for(int i = 0; i < s.length(); i++) {\n      if(s[i]\
    \ != 'a' && s[i] != 'e' && s[i] != 'i' && s[i] != 'o' && s[i] != 'u' && s[i] !=\
    \ 'y' && s[i] != '\\0') {\n        v.push_back((s + \" \" + std::to_string(i)));\n\
    \      }\n    }\n  }\n  return v;", "    std::vector<std::string> v;\n    if (n\
    \ == 1) {\n        return v;\n    }\n    char c = s[0][0];\n    for (size_t i\
    \ = 1; i < s.size(); i++) {\n        if (s[i] != c) {\n            break;\n  \
    \      }\n    }\n    for (size_t i = 0; i < i; i += n) {\n        v.push_back(s.substr(i,\
    \ n));\n    }\n    return v;", "  assert(s.size() > 0);\n  std::vector<std::string>\
    \ v;\n  long start = 0, end = 0;\n  // Count how many words in string s contains\
    \ n consonants\n  for (int i = 0; i < s.size(); ++i) {\n    if (s[i] == 'a') {\n\
    \      start++;\n    }\n    if (s[i] == 'e') {\n      end++;\n    }\n  }\n  //\
    \ Iterate through all consonants in s until we find an consonant \n  // that matches\
    \ with start\n  end = s.size()-1;\n  for (int i = 0; i < s.size(); ++i) {\n  \
    \  if (s[i] == 'a' || s[i] == 'e') {\n      if (start == end) {\n        v = (end\
    \ - start > n) ? v : v + {s.substr(start, end - start)};\n        start = i -\
    \ 1;\n      }\n    }\n  }\n  return v;", '    // write your code in C++14 or C++17',
  "    std::vector<std::string> ans;\n    // your code here\n    if (s.size() == 0)\
    \ {\n        ans.clear();\n        return ans;\n    }\n    std::vector<std::pair<long,\
    \ int>> counts;\n    for (char c : s) {\n        if (c == 'a' || c == 'e' || c\
    \ == 'i' || c == 'o' || c == 'u') {\n            counts[c - 'a']++;\n        }\n\
    \    }\n    for (long i = 0; i < 26; i++) {\n        if (counts[i].second == n)\
    \ {\n            ans.push_back(std::to_string(i));\n        }\n    }\n    return\
    \ ans;", "  std::vector<std::string> result;\n  if (s.empty()) {\n    return result;\n\
    \  }\n  std::stack<char> st;\n  st.push(s[0]);\n  for (char c : s) {\n    if (st.empty())\
    \ {\n      st.push(c);\n      continue;\n    }\n    if (c == st.top()) {\n   \
    \   st.pop();\n    } else {\n      if (st.size() == n) {\n        result.push_back(st.top());\n\
    \        st.pop();\n      } else {\n        st.push(c);\n      }\n    }\n  }\n\
    \  return result;", "    std::vector<std::vector<std::string> > ret;\n    if (s.empty())\
    \ {\n        return ret;\n    }\n    std::string curr = s[0];\n    std::vector<std::string>\
    \ words;\n    for (auto it = s.begin() + 1; it < s.end(); it++) {\n        if\
    \ (it[0] == curr) {\n            if (s.size() - it == n) {\n                words.push_back(s);\n\
    \                words.push_back(s.substr(it, 1));\n                ret.push_back(words);\n\
    \            }\n        }\n        else if (s.find(curr) == s.end()) {\n     \
    \       words.push_back(s);\n            words.push_back(curr);\n            ret.push_back(words);\n\
    \        }\n        curr = *it;\n    }\n    return ret;", "  // Pre-condition:\
    \ 0 < n <= s.size()\n  assert(n <= s.size());\n  // If the string s is empty then\
    \ return an empty vector\n  if (s.empty()) {\n    return std::vector<std::string>();\n\
    \  }\n  // If the string s is already a vector of strings, return it\n  if (std::all_of(s.begin(),\
    \ s.end(), [](const std::string& s) {\n                  return std::all_of(s.begin(),\
    \ s.end(), \n                                    [](const char c) {\n        \
    \                              return std::isalpha(c);\n                     \
    \               });\n                })) {\n    return s;\n  }\n  // We will store\
    \ the vector here\n  std::vector<std::string> words;\n  // We will store the index\
    \ of the first letter here\n  size_t first = 0;\n  // We will store the number\
    \ of consonants found here \n  size_t count = 0;\n  // We will loop through s\
    \ and find all consonants \n  for (int i = 0; i < s.size(); i++) {\n    // We\
    \ need to skip spaces and letters so add them to the word only if\n    // they\
    \ are a space or letter\n    if (std::isalpha(s[i]) || std::isspace(s[i])) {\n\
    \      if (count == n) {\n        // We have enough consonants so store the word\n\
    \        words.push_back(s.substr(first, i - first));\n        // Move the index\
    \ forward\n        first = i + 1;\n        // Increment the number of consonants\
    \ found\n        count = 1;\n      } else {\n        // We have not enough consonants\
    \ so we just increment the index\n        first = i + 1;\n        count = 1;\n\
    \      }\n    }\n  }\n  // Return the words we found\n  return words;", "    int\
    \ start = 0;\n    std::vector<std::string> result;\n    while (start < s.size())\
    \ {\n        if (s[start] == 'a' && s[start+1] == 'l' && s[start+2] == 'm' &&\
    \ s[start+3] == 'a' && s[start+4] == 'l' && s[start+5] == 'a' && s[start+6] ==\
    \ 'l') {\n            result.emplace_back(s.substr(start, (start+7)));\n     \
    \       start += 8;\n        }\n        else if (s[start] == 'p' && s[start+1]\
    \ == 'a' && s[start+2] == 'l' && s[start+3] == 'e') {\n            result.emplace_back(s.substr(start,\
    \ (start+4)));\n            start += 5;\n        }\n        else if (s[start]\
    \ == 's' && s[start+1] == 'p' && s[start+2] == 'i' && s[start+3] == 't') {\n \
    \           result.emplace_back(s.substr(start, (start+4)));\n            start\
    \ += 4;\n        }\n        else if (s[start] == 't' && s[start+1] == 'h' && s[start+2]\
    \ == 'i' && s[start+3] == 's') {\n            result.emplace_back(s.substr(start,\
    \ (start+4)));\n            start += 4;\n        }\n        else if (s[start]\
    \ == 'w' && s[start+1] == 'o' && s[start+2] == 'd' && s[start+3] == 'a') {\n \
    \           result.emplace_back(s.substr(start, (start+4)));\n            start\
    \ += 5;\n        }\n        else if (s[start] == 'w' && s[start+1] == 'o' && s[start+2]\
    \ == 'd' && s[start+3] == 'a' && s[start+4] == 'l' && s[start+5] == 'l' && s[start+6]\
    \ == 'e') {\n            result.emplace_back(s.substr(start, (start+7)));\n  \
    \          start += 8;\n        }\n        else if (s[start] == 'c' && s[start+1]\
    \ == 'o' && s[start+2] == 's' && s[start+3] == 'e') {\n            result.emplace_back(s.substr(start,\
    \ (start+4)));\n            start += 5;\n        }\n        else if (s[start]\
    \ == 'c' && s[start+1] == 'o' && s[start+2] == 's' && s[start+3] == 'e' && s[start+4]\
    \ == 'd') {\n            result.emplace_back(s.substr(start, (start+5)));\n  \
    \          start += 6;\n        }\n        else if (s[start] == 't' && s[start+1]\
    \ == 'e' && s[start+2] == 'c' && s[start+3] == 'h' && s[start+4] == 'e') {\n \
    \           result.emplace_back(s.substr(start, (start+5)));\n            start\
    \ += 6;\n        }\n", "    std::vector<std::string> v; \n    if (s.empty()) {\n\
    \        return v;\n    }\n    \n    // Implement your algorithm here", "    if\
    \ (s.empty()) return {std::string(\"\")};\n    std::vector<std::tuple<std::string,\
    \ std::string, std::string>> res;\n    std::string word;\n    for (size_t i =\
    \ 0, n = s.length(); i < n; i++) {\n        word = s.substr(i, 1);\n        if\
    \ (std::count_if(s.begin(), s.end(), [&](char c) { return c == 'a'; }) >= n ||\n\
    \            std::count_if(s.begin(), s.end(), [&](char c) { return c == 'e';\
    \ }) >= n ||\n            std::count_if(s.begin(), s.end(), [&](char c) { return\
    \ c == 'i'; }) >= n ||\n            std::count_if(s.begin(), s.end(), [&](char\
    \ c) { return c == 'o'; }) >= n ||\n            std::count_if(s.begin(), s.end(),\
    \ [&](char c) { return c == 'u'; }) >= n) {\n            res.push_back({std::string(word)});\n\
    \        }\n    }\n    return res;", "    // write your code here\n    std::vector<std::string>\
    \ vs;\n    if (s.empty()) return vs;\n    stack<char> s;\n    for (size_t i =\
    \ 0; s[i]; ++i){\n        s.push( s[i] );\n    }\n    while(s.size() >= n) {\n\
    \        s.push(s.pop());\n    }\n    if (s.size() == n) return vs;\n    \n  \
    \  for (size_t i = 0; i < s.size(); i++){\n        if (s.top() == s[i]) s.pop();\n\
    \        else vs.push_back((std::string)(s.top()));\n        s.push( s[i] );\n\
    \    }\n    return vs;", "    // Write your code here\n    std::vector<std::string>\
    \ v;\n    \n    long count = 1;\n    for (auto c : s){\n        if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'A' || c == 'E' || c ==\
    \ 'I' || c == 'O' || c == 'U')\n            count += 1;\n        else if (c ==\
    \ 'b' || c == 'c' || c == 'd' || c == 'f' || c == 'g' || c == 'B' || c == 'C'\
    \ || c == 'D' || c == 'F' || c == 'G')\n            count += 2;\n        else\
    \ if (c == 'h' || c == 'j' || c == 'k' || c == 'l' || c == 'm' || c == 'H' ||\
    \ c == 'J' || c == 'K' || c == 'L' || c == 'M')\n            count += 3;\n   \
    \     else if (c == 'n' || c == 'p' || c == 'q' || c == 'r' || c == 's' || c ==\
    \ 'N' || c == 'P' || c == 'Q' || c == 'R' || c == 'S')\n            count += 4;\n\
    \        else if (c == 't' || c == 'v' || c == 'x' || c == 'z')\n            count\
    \ += 5;\n        else if (c == '1')\n            count += 6;\n        else if\
    \ (c == '2')\n            count += 7;\n        else if (c == '3')\n          \
    \  count += 8;\n        else if (c == '4')\n            count += 9;\n        else\
    \ if (c == '5')\n            count += 10;\n        else if (c == '6')\n      \
    \      count += 11;\n        else if (c == '7')\n            count += 12;\n  \
    \      else if (c == '8')\n            count += 13;\n        else if (c == '9')\n\
    \            count += 14;\n        else if (c == '0')\n            count += 15;\n\
    \        else if (c == ' ')\n            count += 16;\n        else\n        {\n\
    \            v.push_back(s);\n            count = 1;\n        }\n        if (count\
    \ == n)\n            break;\n    }\n    return v;", "    // Your code here\n \
    \   std::vector<std::string> result;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            if (n == 1) {\n                result.emplace_back(s);\n    \
    \        } else {\n                result.emplace_back(c);\n            }\n  \
    \      } else if (std::isspace(c)) {\n            if (result.size() == 0) {\n\
    \                result.emplace_back(s);\n            } else {\n             \
    \   if (result.size() >= n - 1) {\n                    result.emplace_back(s);\n\
    \                }\n            }\n        } else {\n            if (result.size()\
    \ == 0) {\n                result.emplace_back(s);\n            } else {\n   \
    \             if (result.size() >= n - 1) {\n                    result.emplace_back(s);\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  std::vector<std::string> ans;\n    while(true) {\n        std::unordered_set<char>\
    \ words;\n        int word_len = 0;\n        for(int i=0;i<s.size();i++) {\n \
    \           if(isalpha(s[i]) || s[i]==' ') \n                words.insert(s[i]);\n\
    \        }\n        std::vector<std::string> word_vector;\n        for(int i=0;i<s.size();i++)\
    \ {\n            if(words.size() <= word_len && isalpha(s[i])) \n            \
    \    word_vector.push_back(s[i]);\n            if(s[i]==' ' || s[i]=='\\n' ||\
    \ s[i]=='\\t' || s[i]=='.' || s[i]=='!') \n                word_len++;\n     \
    \   }\n        if(n==word_len || word_vector.size()==n) \n            ans.push_back(word_vector);\n\
    \    }\n    return ans;", "  std::vector<std::string> result;\n  for(long i =\
    \ 0; i < s.length(); ++i) {\n    if(s[i] == ' ') {\n      result.emplace_back(s.substr(0,\
    \ i + 1));\n    }\n    else if((s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u')\n        && (s[i + 1] == ' ' || s[i + 1] == 'a' || s[i\
    \ + 1] == 'e' || s[i + 1] == 'i' || s[i + 1] == 'o' || s[i + 1] == 'u') &&\n \
    \       (i + 2 < s.length() && (s[i + 2] == 'a' || s[i + 2] == 'e' || s[i + 2]\
    \ == 'i' || s[i + 2] == 'o' || s[i + 2] == 'u'))) {\n      result.emplace_back(s.substr(0,\
    \ i));\n      result.emplace_back(s.substr(i + 1));\n      result.emplace_back(s.substr(i\
    \ + 2));\n    }\n    else if(i + 1 == s.length() && s[i] == ' ') {\n      result.emplace_back(s.substr(0,\
    \ i + 1));\n    }\n    else if(s[i] == ' ' && s[i + 1] == 'a' && s[i + 2] == '\
    \ ') {\n      result.emplace_back(s.substr(0, i));\n    }\n  }\n  return result;",
  "  std::vector<std::string> v;\n  for (int i = 0; i < s.length(); i++) {\n    int\
    \ count = 0;\n    for (int j = i; j < s.length(); j++) {\n      if (s[i] == s[j])\
    \ {\n        count++;\n      }\n    }\n    if (count == n) {\n      v.push_back(s.substr(i,\
    \ i - n));\n    }\n  }\n  return v;", "    std::vector<std::string> res;\n   \
    \ if(!s || n <= 0){\n        return res;\n    }\n    // Write your code here\n\
    \    res.reserve(s.size());\n    auto it = s.begin();\n    auto itr = find(s.begin(),\
    \ s.end(), ' ');\n    while(itr != s.end()){\n        if(n == 1){\n          \
    \  res.emplace_back(std::string(it, itr));\n            return res;\n        }\n\
    \        it = std::search(itr, s.end(), 'a', std::cend(), \n            [&](char\
    \ c){return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') && \n \
    \               --n > 0;});\n        if(it != s.end()){\n            res.emplace_back(std::string(it,\
    \ s.end()));\n        }\n        itr = std::search(itr, s.end(), ' ', std::cend(),\
    \ \n            [&](char c){return (c == ' ' || c == ',') && --n > 0;});\n   \
    \ }\n    return res;", "   std::vector<std::string> res;\n   if (s.size() == 0)\
    \ {\n      return res;\n   }\n   vector<string> words;\n   string word = \"\"\
    ;\n   for (string::iterator it = s.begin(); it != s.end(); ++it) {\n      if (*it\
    \ != ' ') {\n         word += *it;\n      }\n   }\n   for (string::iterator it\
    \ = word.begin(); it != word.end(); ++it) {\n      vector<string> candidates;\n\
    \      for (string::iterator it2 = s.begin(); it2 != s.end(); ++it2) {\n     \
    \    if (*it2 == *it) {\n            candidates.push_back(word + it2);\n     \
    \    }\n      }\n      if (candidates.size() == n) {\n         res.push_back(candidates);\n\
    \      }\n   }\n   return res;", "\tstd::vector<std::string> word_list;\n\tstd::map<std::string,\
    \ int> counts;\n\tint word_size = 0;\n\tstd::string word = \"\";\n\tbool first_word\
    \ = true;\n\tfor (auto c : s) {\n\t\tif (c == ' ' || c == '\\t' || c == '\\n')\
    \ continue;\n\t\tcounts[c]++;\n\t\tword_size += std::to_string(c).length();\n\t\
    }\n\t// count words that need n\n\tfor (auto c : counts) {\n\t\tif (c->second\
    \ >= n) {\n\t\t\tif (first_word) {\n\t\t\t\tword_list.push_back(word);\n\t\t\t\
    \tfirst_word = false;\n\t\t\t\tcounts[c]--;\n\t\t\t\tword_size -= word.length();\n\
    \t\t\t} else {\n\t\t\t\tword_list.push_back(word);\n\t\t\t\tcounts[c]--;\n\t\t\
    \t}\n\t\t}\n\t}\n\t// add the last word if needed\n\tif (first_word) {\n\t\tword_list.push_back(word);\n\
    \t}\n\treturn word_list;", "  if (s.empty())\n    return std::vector<std::string>();\n\
    \  std::vector<std::string> res;\n  std::vector<std::string>::iterator it;\n \
    \ \n  for (it = std::sregex_iterator(s.begin(), s.end(), std::regex(\"[^aeiouAEIOU]\"\
    ), \n      std::regex_constants::match_flag_s::match_not_dot_newline);\n     \
    \ it != std::sregex_iterator(); ++it) {\n    if (*it == \"a\" || \n        *it\
    \ == \"e\" || \n        *it == \"i\" || \n        *it == \"o\" || \n        *it\
    \ == \"u\" || \n        *it == \"A\" || \n        *it == \"E\" || \n        *it\
    \ == \"I\" || \n        *it == \"O\" || \n        *it == \"U\")\n    {\n     \
    \ res.push_back(std::string((*it).str(), (*it).length()));\n      std::cout <<\
    \ res.back() << std::endl; // uncomment to see all words found\n    }\n    else\
    \ if (res.back().size() + it->length() == n)\n    {\n      res.push_back(std::string((*it).str(),\
    \ (*it).length()));\n      std::cout << res.back() << std::endl; // uncomment\
    \ to see all words found\n    }\n  }\n\n  return res;", "    std::vector<std::string>\
    \ res;\n    stack<bool> st;\n    st.push(true);\n    st.push(true);\n    st.push(false);\n\
    \    \n    for (char c : s) {\n        if (c == ' ' || c == '\\t' || c == ','\
    \ || c == '.') {\n            st.push(true);\n        } else if (c != ' ') {\n\
    \            st.push(false);\n        }\n    }\n    \n    while (st.top()) {\n\
    \        if (st.top()) {\n            st.top() = false;\n            res.emplace_back(s.substr(0,\
    \ s.size() - 1));\n        }\n        \n        int nn = s.size() - 1;\n     \
    \   while (!st.empty() && nn == s.size() - 1) {\n            char c = s.back();\n\
    \            if (c == ' ' || c == '\\t' || c == ',' || c == '.') {\n         \
    \       st.top() = false;\n                s.pop_back();\n                \n \
    \               if (st.top()) {\n                    st.top() = false;\n     \
    \               res.emplace_back(s.substr(0, s.size() - 1));\n               \
    \ }\n            } else {\n                st.top() = false;\n               \
    \ s.pop_back();\n            }\n            \n            nn--;\n        }\n \
    \   }\n    \n    for (size_t i = 0; i < s.size(); i++) {\n        if (!st.empty()\
    \ && s.at(i) == ' ') {\n            st.top() = false;\n            s.pop_back();\n\
    \        }\n    }\n    \n    st.push(true);\n    \n    for (char c : s) {\n  \
    \      if (c == ' ' || c == '\\t' || c == ',' || c == '.') {\n            st.push(true);\n\
    \        } else if (c != ' ') {\n            st.push(false);\n        }\n    }\n\
    \    \n    while (st.top()) {\n        if (st.top()) {\n            st.top() =\
    \ false;\n            res.emplace_back(s.substr(0, s.size() - 1));\n        }\n\
    \        \n        int nn = s.size() - 1;\n        while (!st.empty() && nn ==\
    \ s.size() - 1) {\n            char c = s.back();\n            if (c == ' ' ||\
    \ c == '\\t' || c == ',' || c == '.') {\n                st.top() = false;\n \
    \               s.pop_back();\n                \n                if (st.top())\
    \ {\n                    st.top() = false;\n                    res.emplace_back(s.substr(0,\
    \ s.size() - 1));\n                }\n            } else {\n                st.top()\
    \ = false;\n                s.pop_back();\n            }\n            \n     \
    \       nn--;\n        }\n    }\n    \n    \n    \n    \n    while (s.size() !=\
    \ 0) {\n        if (s.back() == ' ' || s.back() == '\\t' || s.back() == ',' ||\
    \ s.back() == '.') {\n            s.pop_back();\n        }\n    }\n    \n    return\
    \ res;", "    std::vector<std::string> result;\n    // Write your code here\n\
    \    assert(n <= s.size());\n    for(int i = 0; i < s.size(); i++){\n        if(s[i]\
    \ != \" \"){\n            for(int j = 0; j<s.size(); j++){\n                if(j\
    \ == i){\n                    if(n == (s[i] - 'a')){\n                       \
    \ result.push_back(\"a\");\n                    }\n                    else{\n\
    \                        result.push_back(s[j]);\n                    }\n    \
    \            }\n            }\n        }\n    }\n    if(s.empty()){\n        return\
    \ result;\n    }\n    return result;", "    std::stack<std::string> s; \n    for(int\
    \ i=0;i<s.length();i++) {\n        if(s[i] == 'A'||s[i] == 'U'||s[i] == 'L'||s[i]\
    \ == 'S') {\n            s.push(s.top());\n        }\n        if(s[i] == 'B'||s[i]\
    \ == 'I'||s[i] == 'K'||s[i] == 'N'||s[i] == 'M'||s[i] == 'R') {\n            s.push(s.top());\n\
    \        }\n        if(s[i] == 'C'||s[i] == 'O'||s[i] == 'P'||s[i] == 'T'||s[i]\
    \ == 'V'||s[i] == 'W') {\n            s.push(s.top());\n        }\n        if(s[i]\
    \ == 'D'||s[i] == 'E'||s[i] == 'F'||s[i] == 'H'||s[i] == 'P'||s[i] == 'Y') {\n\
    \            s.push(s.top());\n        }\n        if(s[i] == 'G'||s[i] == 'J'||s[i]\
    \ == 'L'||s[i] == 'Q'||s[i] == 'S'||s[i] == 'X') {\n            s.push(s.top());\n\
    \        }\n        if(s[i] == 'H'||s[i] == 'J'||s[i] == 'K'||s[i] == 'N'||s[i]\
    \ == 'U'||s[i] == 'X') {\n            s.push(s.top());\n        }\n        if(s[i]\
    \ == 'I'||s[i] == 'O'||s[i] == 'P'||s[i] == 'T'||s[i] == 'Y'||s[i] == 'W') {\n\
    \            s.push(s.top());\n        }\n        if(s[i] == 'K'||s[i] == 'Q'||s[i]\
    \ == 'R'||s[i] == 'S'||s[i] == 'U'||s[i] == 'Y') {\n            s.push(s.top());\n\
    \        }\n        if(s[i] == 'L'||s[i] == 'Q'||s[i] == 'S'||s[i] == 'T'||s[i]\
    \ == 'Y'||s[i] == 'W') {\n            s.push(s.top());\n        }\n        if(s[i]\
    \ == 'M'||s[i] == 'O'||s[i] == 'R'||s[i] == 'U'||s[i] == 'Y'||s[i] == 'W') {\n\
    \            s.push(s.top());\n        }\n        if(s[i] == 'N'||s[i] == 'O'||s[i]\
    \ == 'U'||s[i] == 'Y'||s[i] == 'W') {\n            s.push(s.top());\n        }\n\
    \        if(s[i] == 'P'||s[i] == 'R'||s[i] == 'S'||s[i] == 'T'||s[i] == 'Y'||s[i]\
    \ == 'W') {\n            s.push(s.top());\n        }\n        if(s[i] == 'Q'||s[i]\
    \ == 'S'||s[i] == 'T'||s[i] == 'Y'||s[i] == 'W') {\n            s.push(s.top());\n\
    \        }\n        if(s[i] == 'R'||s[i] == 'S'||", '    // your implementation
    here', "    std::unordered_set<char> vowel{'a', 'e', 'i', 'o', 'u'};\n    std::vector<std::string>\
    \ words;\n    std::string word = \"\";\n    long i = 0;\n    for (i; i < s.length()\
    \ && i < n; i++) {\n        word = words + s[i];\n        if (vowel.count(word[0]))\
    \ {\n            words.push_back(word);\n        }\n    }\n    return words;",
  "    assert(n >= 0 && n <= s.size());\n    std::vector<std::string> v;\n    for\
    \ (size_t i = 0; i < s.size(); i++) {\n        bool has = false;\n        std::string\
    \ t = s.substr(i, n);\n        for (char c : t) {\n            if (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n                has = true;\n\
    \                break;\n            }\n        }\n        if (has) v.push_back(t);\n\
    \    }\n    return v;", "    std::vector<std::string> words;\n    // Your code\
    \ here\n    \n    return words;", "  std::vector<std::string> v;\n  assert(!s.empty());\
    \ // Only work for empty strings\n  v.push_back(s);\n  for(long i = 1; i < s.size()\
    \ && i < n; ++i){\n    v.push_back(v[i - 1] + s[i]);\n  }\n  return v;", "   \
    \ std::vector<std::string> res;\n    if (s.length() == 0) {\n        res.emplace_back(std::string());\n\
    \        return res;\n    }\n    std::vector<char> v;\n    // Insert first character\n\
    \    v.push_back(s[0]);\n    for (auto c : s) {\n        // Insert next characters\n\
    \        v.push_back(c);\n        if (v.size() == n) {\n            res.emplace_back(std::string(v.begin(),\
    \ v.end()));\n            v.resize(0);\n        }\n    }\n    if (v.size() > 0)\
    \ {\n        res.emplace_back(std::string(v.begin(), v.end()));\n    }\n    return\
    \ res;", "    std::unordered_map<char, int> m;\n    std::set<std::string> word_set;\n\
    \    for (char c : s) {\n        m[c]++;\n    }\n    auto insert_word_to_set =\
    \ [&](const std::string& word) {\n        word_set.insert(word);\n    };\n   \
    \ for (char c : s) {\n        if (c == ' ') continue;\n        if (m[c] == n)\
    \ insert_word_to_set(word + c);\n    }\n    std::vector<std::string> res;\n  \
    \  for (auto word : word_set) {\n        res.push_back(word);\n    }\n    return\
    \ res;", "    // Do not write main() function.\n    // Do not read input, instead\
    \ use the arguments to the function.\n    // Do not print the output, instead\
    \ return values that you compute.\n    // You can only return the result of the\
    \ function.\n\n    std::vector<std::string> ans;\n    if (s.empty()) {\n     \
    \   return ans;\n    }\n    \n    std::string word;\n    \n    for (int i = 0;\
    \ i < s.size(); i++) {\n        \n        word = s.substr(i, 1);\n        \n \
    \       bool found = false;\n        \n        for (int j = 0; j < n; j++) {\n\
    \            if (word.at(0) == vowels[j]) {\n                found = true;\n \
    \               break;\n            }\n        }\n        \n        if (found)\
    \ {\n            ans.push_back(word);\n        }\n        \n    }\n    \n    return\
    \ ans;", "  std::vector<std::string> res;\n  \n  std::string word = \"\";\n  std::stack<std::string>\
    \ stk;\n  std::stack<std::string> temp;\n  stk.push(word);\n  temp.push(word);\n\
    \  \n  while (!stk.empty()) {\n    word = stk.top();\n    stk.pop();\n    \n \
    \   if (word.length() == 0) {\n      continue;\n    }\n    \n    \n    for (auto\
    \ const &c: word) {\n      \n      if (c == ' ' || c == '\\t' || c == '\\n') {\n\
    \        temp.push(word);\n        temp.pop();\n      } else if (c != ' ') {\n\
    \        \n        if (n <= 0) {\n          temp.push(word);\n          temp.pop();\n\
    \          break;\n        }\n        \n        stk.push(c);\n        n--;\n \
    \     }\n    }\n    \n    if (temp.empty()) {\n      res.emplace_back(word);\n\
    \    }\n  }\n  \n  if (res.empty()) {\n    return {};\n  }\n  \n  return res;",
  "  std::vector<std::string> v;\n  if (s.empty()) return v;\n  std::vector<std::string>\
    \ subs;\n  for (auto &i : s) {\n    v.clear();\n    for (auto &j : subs) {\n \
    \     if (i + j == s) {\n        v.push_back(j);\n      }\n    }\n    if (v.size()\
    \ == n) subs.push_back(i);\n  }\n  return v;", "    // your code goes here\n \
    \   std::vector<std::string> v;\n    vector<string>::iterator it;\n    string\
    \ str;\n    int n;\n    // str is string that contain n consonants\n    for(int\
    \ i = 0; i<s.size(); i++)\n    {\n        if((s.at(i) == n) && (n!=0)) \n    \
    \    {\n            n--;\n            continue;\n        }\n        if(n==0)\n\
    \        {\n            v.push_back(str);\n            n = s[i];\n           \
    \ str = s.substr(i,1);\n        }\n        else\n            str += s.at(i);\n\
    \    }\n    return v;", "    if (s.empty()) {\n        return {};\n    }\n   \
    \ std::vector<std::string> v;\n    long ncons = 0, slen = s.length();\n    long\
    \ cnt = 0;\n    for (long i = 0; i < slen; ++i)\n    {\n        cnt += s[i] ==\
    \ 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' ? 1 : 0;\n \
    \       if (cnt > n) {\n            v.push_back(s.substr(i, i - ncons));\n   \
    \         cnt = ncons;\n        }\n        ncons += (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' ? 1 : 0);\n    }\n    return v;",
  "  if (s.empty())\n    return std::vector<std::string>();\n  std::vector<std::string>\
    \ words;\n  std::string vowels = \"aeiouy\";\n  for (size_t i = 0, j = s.size();\
    \ i < j; i++) {\n    if (std::count(s.begin(), s.end(), vowels[i]) >= n) {\n \
    \     words.push_back((std::string(s.begin() + i, s.end())));\n    }\n  }\n  return\
    \ words;", "    assert(n >= 0);\n    std::vector<std::string> ret;\n    for (auto\
    \ &i : s)\n        if (i.size() == n) {\n            ret.push_back(i);\n     \
    \   }\n    return ret;", "    // TODO: Implement me\n    return {};", "    //\
    \ Your code here\n    std::vector<std::string> retv;\n    for(auto it = s.begin();\
    \ it!=s.end(); ++it){\n        if(*it == ' '){\n            while(n != 0 && !isspace(*it)){\n\
    \                ++it;\n                --n;\n            }\n        }\n     \
    \   if(*it == '\\0' || n == 0){\n            break;\n        }\n        if(isspace(*it)\
    \ && n > 0){\n            --n;\n            continue;\n        }\n        if(*it\
    \ == '\\0' || n == 0){\n            break;\n        }\n        for(auto p = it+1;\
    \ p != s.end(); ++p){\n            if((*it == *p) && n != 0){\n              \
    \  --n;\n                break;\n            }\n        }\n        if(n != 0){\n\
    \            break;\n        }\n        retv.push_back(std::string(it+1, s.end()));\n\
    \    }\n    return retv;", "    int count = 0;\n    std::vector<std::string> word_vec;\n\
    \    for (char c : s) {\n        std::string str = \"\";\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u' || c == 'y') {\n           \
    \ str = (str + c);\n            count++;\n        } else if (c >= 'a' && c <=\
    \ 'z') {\n            str = (str + c);\n        } else if (c >= 'A' && c <= 'Z')\
    \ {\n            str = (str + c);\n        } else if (c == ' ') {\n          \
    \  str = str;\n        } else if (c >= '0' && c <= '9') {\n            str = (str\
    \ + c);\n        } else {\n            assert(false && \"Not a letter\");\n  \
    \      }\n        if (count==n) {\n            word_vec.push_back(str);\n    \
    \    }\n    }\n    return word_vec;", "    std::vector<std::string> v;\n    for(long\
    \ i = 0; i < s.length(); i++) {\n        if(s.at(i) == ' ') {\n            v.push_back((std::string)s.substr(0,\
    \ i));\n            s = s.substr(i + 1);\n        }\n    }\n    if(s.length()\
    \ >= n) {\n        for(long i = 0; i < s.length(); i++) {\n            if(s.at(i)\
    \ == ' ') {\n                v.push_back((std::string)s.substr(0, i));\n     \
    \           s = s.substr(i + 1);\n                break;\n            }\n    \
    \    }\n    }\n    for(long i = 0; i < s.length(); i++) {\n        if(!isalpha(s.at(i))\
    \ && s.at(i) != ' ') {\n            v.push_back((std::string)s.substr(0, i));\n\
    \            s = s.substr(i + 1);\n            break;\n        }\n    }\n    return\
    \ v;", "  std::vector<std::string> ans;\n  ans.reserve(s.size());\n  std::unordered_set<char>\
    \ s;\n  for (char c : s) {\n    s.insert(c);\n  }\n  long k = 0;\n  while (n >\
    \ 0) {\n    long cur = k;\n    for (char c : s) {\n      if (s.count(c) == n)\
    \ {\n        ans.push_back((std::string)s.begin() + cur);\n        s.erase(c);\n\
    \        break;\n      }\n      cur += n;\n    }\n    k++;\n  }\n  return ans;",
  "    std::vector<std::string> res;\n    // ++n; \n    res.push_back((std::string)\"\
    \");\n    std::stack<std::pair<std::string,long>> s;\n    if(s.size() < 1) {\n\
    \        return res;\n    }\n    auto itr = s.top(); \n    itr.first = (std::string)\"\
    \";\n    auto itr2 = s.top();\n    itr2.first = (std::string)\"\";\n    for(unsigned\
    \ int i=0;i<s.length();i++) {\n        if(i == s.length()-1) {\n            s.top().first\
    \ = s.top().first+\" \"+s.top().second;\n        }\n        else if(s.top().first\
    \ != s.top().second) {\n            s.top().first = s.top().first+\" \"+s.top().second;\n\
    \        }\n        else if(s.top().first==\" \") {\n            s.top().first\
    \ = (std::string)\"\";\n        }\n        else {\n            auto itr3 = s.top();\n\
    \            itr3.first = (std::string)\"\";\n            if(itr3.second < n)\
    \ { \n                s.top().first = s.top().first+\" \"+s.top().second;\n  \
    \          }\n            itr2.first = s.top().first;\n            itr2.second\
    \ = itr2.first + itr2.second;\n            s.top().first = itr2.first;\n     \
    \       itr2.first = itr2.first;\n            itr2.second = itr2.second + itr2.second;\n\
    \            itr.first = itr2.first;\n            itr.second = itr2.second;\n\
    \        }\n    }\n    if(s.empty()) {\n        res.push_back(s.top().first);\n\
    \    }\n    return res;", "    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    while(n>0){\n        v.push_back(v.back());\n    }\n    return v;", "   \
    \ // Complete this function\n    std::vector<std::string> v;\n    v.push_back(s);\n\
    \    return v;", "\tstd::vector<std::string> v;\n\t// code here\n\treturn v;",
  "  std::sort(s.begin(), s.end());\n  std::vector<std::string> ans;\n  std::string\
    \ w = \"\";\n  long cn = 0;\n  for (auto i : s) {\n    if (i == 'a') {\n     \
    \ w = \"a\";\n    } else if (i == 'u') {\n      w = \"u\";\n    } else if (i ==\
    \ 'l') {\n      w = \"l\";\n    } else if (i == 'l') {\n      w = \"ll\";\n  \
    \  } else if (i == 'h') {\n      w = \"h\";\n    } else if (i == 'e') {\n    \
    \  w = \"e\";\n    } else if (i == 'd') {\n      w = \"d\";\n    } else if (i\
    \ == 's') {\n      w = \"s\";\n    } else if (i == 'p') {\n      w = \"p\";\n\
    \    } else if (i == 's') {\n      w = \"ss\";\n    } else if (i == 'y') {\n \
    \     w = \"y\";\n    } else if (i == 'r') {\n      w = \"r\";\n    } else if\
    \ (i == 'e') {\n      w = \"ee\";\n    } else if (i == 'm') {\n      w = \"m\"\
    ;\n    } else if (i == 'a') {\n      w = \"a\";\n    } else if (i == 'a') {\n\
    \      w = \"aa\";\n    }\n    cn += 1;\n    std::string rep = w;\n    while (cn\
    \ > n) {\n      rep += \"x\";\n      cn -= 1;\n    }\n    ans.push_back(rep);\n\
    \  }\n  if (w == \"\") {\n    ans.push_back(\"\");\n  }\n  return ans;", "   \
    \ if (s.empty()) {\n        return {};\n    }\n    std::vector<std::string> v;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s.at(i) == '_') {\n \
    \           v.emplace_back(\"\");\n        } else if (s.at(i) == ' ') {\n    \
    \        v.emplace_back(\"\");\n        } else if (s.at(i) == 'n') {\n       \
    \     v.emplace_back(s.substr(0, i) + s.substr(i+1));\n        } else {\n    \
    \        for (long j = 1; j <= n; j++) {\n                v.emplace_back(s.substr(0,\
    \ i) + s.substr(i + j));\n            }\n        }\n    }\n    return v;", " \
    \   // code here\n    std::vector<std::string> results;\n    std::sort(s.begin(),\
    \ s.end());\n    std::vector<std::string> vec;\n    vec.reserve(s.size());\n \
    \   for (auto el : s)\n    {\n        if (el.find('a') == 0 || el.find('e') ==\
    \ 0 || el.find('i') == 0 || el.find('o') == 0 || el.find('u') == 0 || el.find('A')\
    \ == 0 || el.find('E') == 0 || el.find('I') == 0 || el.find('O') == 0 || el.find('U')\
    \ == 0)\n        {\n            vec.push_back(el);\n        }\n    }\n    int\
    \ i = 0;\n    while (i < vec.size())\n    {\n        std::string word = vec[i];\n\
    \        for (auto el : word)\n        {\n            if (el == 'a' || el == 'e'\
    \ || el == 'i' || el == 'o' || el == 'u' || el == 'A' || el == 'E' || el == 'I'\
    \ || el == 'O' || el == 'U')\n            {\n                if (n-- == 0)\n \
    \               {\n                    results.push_back(word);\n            \
    \    }\n            }\n        }\n        i++;\n    }\n    return results;", " \
    \ std::vector<std::string> res;\n  if (s.empty()) return res;\n  std::vector<int>\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"};\n  std::vector<int> consonants\
    \ = {1, 2, 3, 4};\n  int i = 0;\n  for (; i < s.size(); i++) {\n    if (vowels.find(s[i])\
    \ != -1) {\n      int j = 1;\n      for (; j < n && consonants.find(s[j]) == -1;\
    \ j++) {\n        ;\n      }\n      res.push_back(s.substr(i, (j - i)));\n   \
    \   i = j;\n    }\n  }\n  return res;", "    std::vector<std::string> ans;\n \
    \   // Write your code here\n    if(s.empty())\n    {\n        return ans;\n \
    \   }\n    std::string word = \"\";\n    for(char c:s)\n    {\n        if((c ==\
    \ 'a')||(c == 'e')||(c == 'i')||(c == 'o')||(c == 'u')||(c == 'y'))\n        {\n\
    \            ans.push_back(word);\n            word = \"\";\n        }\n     \
    \   word += c;\n    }\n    return ans;", "    std::vector<std::string> result;\n\
    \    if (s.empty()) {\n        return result;\n    }\n    string word = \"\";\n\
    \    int cnt = 0;\n    for (char c : s) {\n        if (c == 'y' || c == 'e' ||\
    \ c == 'a' || c == 'i' || c == 'o' || c == 'u') {\n            cnt += 1;\n   \
    \     }\n        word += c;\n    }\n    if (cnt == n) {\n        result.emplace_back(word);\n\
    \    }\n    for (int i = 0; i < (int) s.size(); i++) {\n        word = s.substr(i,\
    \ 1);\n        cnt += 1;\n        if (word == 'y' || word == 'e' || word == 'a'\
    \ || word == 'i' || word == 'o' || word == 'u') {\n            cnt += 1;\n   \
    \     }\n        if (cnt != n) {\n            result.emplace_back(word);\n   \
    \     }\n    }\n    return result;", "    std::vector<std::string> v;\n    assert(n\
    \ >= 1 && n <= s.length());\n    \n    // 1. split on space\n    std::string ss[2];\n\
    \    \n    ss[0] = s;\n    ss[1] = \"\";\n    \n    size_t start = 0;\n    \n\
    \    while (start < s.length()) {\n        ss[1] += s[start];\n        \n    \
    \    if (s[start] == \" \")\n            ++start;\n        else\n            break;\n\
    \    }\n    \n    ss[1] = ss[1].substr(0, ss[1].length() - 1);\n    \n    // 2.\
    \ Count number of consonants\n    long num_cons = 0, count = 1;\n    \n    for\
    \ (auto c : ss[1]) {\n        if (c != \" \" && c != '\\0' && c != '-' && c !=\
    \ '!') {\n            ++num_cons;\n            count += 1;\n        }\n    }\n\
    \    \n    if (n == count) {\n        v.push_back(ss[0]);\n    }\n    \n    //\
    \ 3. Find all words that have the right number of consonants\n    // This can\
    \ be done in 3 ways:\n    //   1. Loop through the whole string\n    //   2. Loop\
    \ through the string until you find a space\n    //   3. Loop through the string\
    \ once and keep track of consonants seen\n    \n    // 1. Loop through the whole\
    \ string\n    while (start < s.length()) {\n        if (s[start] == \" \") {\n\
    \            break;\n        }\n        \n        // 2. Loop through the string\
    \ until you find a space\n        while (s[start] == \" \") {\n            ++start;\n\
    \        }\n        \n        // 3. Loop through the string once and keep track\
    \ of consonants seen\n        long num_cons_seen = 0;\n        \n        for (auto\
    \ c : ss[1]) {\n            if (c != \" \" && c != '\\0' && c != '-' && c != '!')\
    \ {\n                ++num_cons_seen;\n                if (num_cons_seen == n)\
    \ {\n                    v.push_back(ss[0]);\n                }\n            }\n\
    \        }\n    }\n    \n    return v;", "    // your code goes here\n    std::vector<std::string>\
    \ words;\n    if (s.empty()) {\n        return words;\n    }\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] != 'a' && s[i] != 'e' && s[i]\
    \ != 'i' && s[i] != 'o' && s[i] != 'u') {\n            words.push_back(s.substr(i,\
    \ n));\n        }\n    }\n    \n    return words;"]
stop_tokens:
- "\n}"
