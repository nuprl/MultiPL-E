language: cpp
name: HumanEval_161_solve
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code here\n    bool flag = false;\n    for(int i = 0; i < s.length();\
    \ i++){\n        char c = s[i];\n        if(c>='a' && c<='z')\n        {\n   \
    \         if(flag==false){\n                flag = true;\n                s[i]\
    \ -= 32;\n            }\n        }\n        else if(c>='A' && c<='Z')\n      \
    \  {\n            if(flag==false){\n                flag = true;\n           \
    \     s[i] -= 32;\n            }\n        }\n        else{\n            s[i] =\
    \ c;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmprodtdugo: /tmp/tmprodtdugo.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    bool flag = false;\n    // First reverse the string and make every\
    \ letter to lower case\n    for (int i = 0; i < s.length(); i++){\n        \n\
    \        if( flag){\n            s[i] = tolower(s[i]);\n        }\n        \n\
    \        if( s[i] == '@' || s[i] == '#' || s[i] == '$' || s[i] == '.' || s[i]\
    \ == '!' || s[i] == '^' || s[i] == '&' || s[i] == '*' || s[i] == '(' || s[i] ==\
    \ ')' || s[i] == '[' || s[i] == ']' || s[i] == '<' || s[i] == '>' || s[i] == '?'\
    \ || s[i] == ':' || s[i] == ';' || s[i] == ',' || s[i] == ':' || s[i] == '.' ||\
    \ s[i] == '!' || s[i] == '@' || s[i] == '#' || s[i] == '$' || s[i] == '.' || s[i]\
    \ == '^' || s[i] == '&' || s[i] == '*' || s[i] == '(' || s[i] == ')' || s[i] ==\
    \ '[' || s[i] == ']' || s[i] == '<' || s[i] == '>' || s[i] == '?' || s[i] == ':'\
    \ || s[i] == ';' || s[i] == ',' || s[i] == ':' || s[i] == '!' || s[i] == '@' ||\
    \ s[i] == '#' || s[i] == '$' || s[i] == '&' || s[i] == '*' || s[i] == '(' || s[i]\
    \ == ')' || s[i] == '[' || s[i] == ']' || s[i] == '<' || s[i] == '>' || s[i] ==\
    \ '?' || s[i] == ':' || s[i] == ';' || s[i] == ',' || s[i] == ':'){\n        \
    \    flag = true;\n            s[i] = toupper(s[i]);\n        }\n        \n  \
    \  }\n    // Then reverse the string and make every letter to upper case\n   \
    \ for (int i = 0; i < s.length(); i++){\n        if( flag){\n            s[i]\
    \ = toupper(s[i]);\n        }\n    }\n    \n    std::string newS = \"\";\n   \
    \ // For every character in newS\n    for (int i = 0; i < s.length(); i++){\n\
    \        newS += s[i];\n    }\n    \n    return newS;\n    \n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpolfi331r: /tmp/tmpolfi331r.cpp:49: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.length();\n    int *ptr = new int[n];\n    for (int i = 0; i <\
    \ n; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            s[i] = s[i]\
    \ - 32;\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            s[i] = s[i] - 48;\n\
    \    }\n    int res = 0;\n    for (int i = 0; i < n; i++) {\n        res += ptr[i];\n\
    \    }\n    std::string ans = \"\";\n    while (ans.length() < n)\n        ans\
    \ += s[res];\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp1hzqgzun: /tmp/tmp1hzqgzun.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    if(s.length() == 0)\n    {\n        return s;\n    }\n\
    \    for(char &c: s)\n    {\n        if(isupper(c))\n        {\n            c\
    \ = tolower(c);\n        }\n        else if(islower(c))\n        {\n         \
    \   c = toupper(c);\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpl6wiej2k: /tmp/tmpl6wiej2k.cpp:37: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int l=s.length(), i=0, j=0;\n    if( l<=1 ) return s;\n    \n    while (i\
    \ < l) {\n        if( s[i] >= 'A' && s[i] <= 'Z' ) s[i] = s[i] - 'A' + 'a';\n\
    \        else if( s[i] >= 'a' && s[i] <= 'z' ) s[i] = s[i] - 'a' + 'A';\n    \
    \    else if( s[i] >= '0' && s[i] <= '9' ) s[i] = s[i] - '0' + '0';\n        else\
    \ if( s[i] >= '!' && s[i] <= '~' ) s[i] = s[i] - '!' + '~';\n        else if(\
    \ s[i] >= '@' && s[i] <= 'Z' ) s[i] = s[i] - '@' + 'a';\n        else if( s[i]\
    \ >= 'a' && s[i] <= 'z' ) s[i] = s[i] - 'a' + '@';\n        else if( s[i] >= '0'\
    \ && s[i] <= '9' ) s[i] = s[i] - '0' + '@';\n        else if( s[i] >= '!' && s[i]\
    \ <= '~' ) s[i] = s[i] - '!' + '@';\n        else if( s[i] >= '@' && s[i] <= 'Z'\
    \ ) s[i] = s[i] - '@' + 'a';\n        else if( s[i] >= 'a' && s[i] <= 'z' ) s[i]\
    \ = s[i] - 'a' + '@';\n        else if( s[i] >= '0' && s[i] <= '9' ) s[i] = s[i]\
    \ - '0' + '@';\n        else if( s[i] >= '!' && s[i] <= '~' ) s[i] = s[i] - '!'\
    \ + '@';\n        else if( s[i] >= '@' && s[i] <= 'Z' ) s[i] = s[i] - '@' + 'a';\n\
    \        else if( s[i] >= 'a' && s[i] <= 'z' ) s[i] = s[i] - 'a' + '@';\n    \
    \    else if( s[i] >= '0' && s[i] <= '9' ) s[i] = s[i] - '0' + '@';\n        else\
    \ if( s[i] >= '!' && s[i] <= '~' ) s[i] = s[i] - '!' + '@';\n        else if(\
    \ s[i] >= '@' && s[i] <= 'Z' ) s[i] = s[i] - '@' + 'a';\n        else if( s[i]\
    \ >= 'a' && s[i] <= 'z' ) s[i] = s[i] - 'a' + '@';\n        else if( s[i] >= '0'\
    \ && s[i] <= '9' ) s[i] = s[i] - '0' + '@';\n        else if( s[i] >= '!' && s[i]\
    \ <= '~' ) s[i] = s[i] - '!' + '@';\n        else if( s[i] >= '@' && s[i] <= 'Z'\
    \ ) s[i] = s[i] - '@' + 'a';\n        else if( s[i] >= 'a' && s[i] <= 'z' ) s[i]\
    \ = s[i] - 'a' + '@';\n        else if( s[i] >= \n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkt1y94dm.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpkt1y94dm.cpp:43:1: error: expected primary-expression before \u2018\
    }\u2019 token\n   43 | }\n      | ^\n/tmp/tmpkt1y94dm.cpp:42:25: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   42 |         else if( s[i] >=\n\
    \      |                ~        ^\n      |                         )\n   43 |\
    \ }\n      | ~                        \n/tmp/tmpkt1y94dm.cpp:43:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   43 | }\n      | ^\n/tmp/tmpkt1y94dm.cpp:44:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   44 | int main() {\n      |            ^\n/tmp/tmpkt1y94dm.cpp:54:1: error:\
    \ expected \u2018}\u2019 at end of input\n   54 | }\n      | ^\n/tmp/tmpkt1y94dm.cpp:15:34:\
    \ note: to match this \u2018{\u2019\n   15 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmpkt1y94dm.cpp:54:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n   54 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  char ch = s[0];\n  std::string ret = \"0\";\n  for(int i=1;i<s.size();i++)\
    \ {\n    ch = s[i];\n    if(islower(ch)) {\n      ret += toupper(ch);\n    } else\
    \ {\n      ret += ch;\n    }\n  }\n  return ret;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpysbslb4k: /tmp/tmpysbslb4k.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            if(s[i]>='a' && s[i]<='z'){\n                res+=toupper(s[i]);\n\
    \            }else if(s[i]>='A' && s[i]<='Z'){\n                res+=tolower(s[i]);\n\
    \            }else{\n                res+=s[i];\n            }\n        }\n  \
    \      else{\n            res+=s[i];\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpgwa3xvmm: /tmp/tmpgwa3xvmm.cpp:36: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Write your code here.\n    std::string revStr;\n    int i, len = s.size();\n\
    \    for (i = 0; i < len; i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n\
    \            revStr += s[i];\n        }\n        else if (s[i] == 'b' || s[i]\
    \ == 'B') {\n            revStr += s[i];\n        }\n        else if (s[i] ==\
    \ 'c' || s[i] == 'C') {\n            revStr += s[i];\n        }\n        else\
    \ if (s[i] == 'd' || s[i] == 'D') {\n            revStr += s[i];\n        }\n\
    \        else if (s[i] == 'e' || s[i] == 'E') {\n            revStr += s[i];\n\
    \        }\n        else if (s[i] == 'f' || s[i] == 'F') {\n            revStr\
    \ += s[i];\n        }\n        else if (s[i] == 'g' || s[i] == 'G') {\n      \
    \      revStr += s[i];\n        }\n        else if (s[i] == 'h' || s[i] == 'H')\
    \ {\n            revStr += s[i];\n        }\n        else if (s[i] == 'i' || s[i]\
    \ == 'I') {\n            revStr += s[i];\n        }\n        else if (s[i] ==\
    \ 'j' || s[i] == 'J') {\n            revStr += s[i];\n        }\n        else\
    \ if (s[i] == 'k' || s[i] == 'K') {\n            revStr += s[i];\n        }\n\
    \        else if (s[i] == 'l' || s[i] == 'L') {\n            revStr += s[i];\n\
    \        }\n        else if (s[i] == 'm' || s[i] == 'M') {\n            revStr\
    \ += s[i];\n        }\n        else if (s[i] == 'n' || s[i] == 'N') {\n      \
    \      revStr += s[i];\n        }\n        else if (s[i] == 'o' || s[i] == 'O')\
    \ {\n            revStr += s[i];\n        }\n        else if (s[i] == 'p' || s[i]\
    \ == 'P') {\n            revStr += s[i];\n        }\n        else if (s[i] ==\
    \ 'q' || s[i] == 'Q') {\n            revStr += s[i];\n        }\n        else\
    \ if (s[i] == 'r' || s[i] == 'R') {\n            revStr += s[i];\n        }\n\
    \        else if (s[i] == 's' || s[i] == 'S') {\n            revStr += s[i];\n\
    \        }\n        else if (s[i] == 't' || s[i] == 'T') {\n            revStr\
    \ += s[i];\n        }\n        else if (s[i] == 'u' || s[i] == 'U') {\n      \
    \      revStr += s[i];\n        }\n        else if (s[i] == 'v' || s[i] == 'V')\
    \ {\n            revStr += s[i];\n        }\n        else if (s[i] == 'w' || s[i]\
    \ == 'W') {\n            revStr += s[i];\n        }\n        else if (s[i] ==\
    \ 'x' || s[i] == 'X') {\n            revStr += s[i];\n        }\n        else\
    \ if (s[i] == 'y' || s[i] == 'Y') {\n            revStr += s[i];\n        }\n\
    \        else if (s[i] == 'z' || s[i] == 'Z') {\n            revStr += s[i];\n\
    \        }\n        else {\n            revStr += s[i];\n        }\n    }\n  \
    \  return revStr;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd0fxulwj: /tmp/tmpd0fxulwj.cpp:106: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Do not write main() function.\n    // Do not read input, instead use the\
    \ arguments to the function.\n    // Do not print the output, instead return values\
    \ as specified\n    // Still have a doubt. Checkout www.geeksforgeeks.org/?p=594\n\
    \n    std::vector<std::string> v;\n    std::string result;\n    for(auto i : s)\n\
    \    {\n        if(std::isalpha(i))\n        {\n            v.push_back(std::to_string(i));\n\
    \        }\n        else\n        {\n            v.push_back(std::to_string(i).swapcase());\n\
    \        }\n    }\n    \n    std::sort(std::begin(v), std::end(v));\n    \n  \
    \  int len = v.size();\n    for(int i = len-1; i>=0; i--)\n    {\n        result.append(v[i]);\n\
    \    }\n    \n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyeiesi2g.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpyeiesi2g.cpp:31:43: error: \u2018std::string\u2019 {aka \u2018class\
    \ std::__cxx11::basic_string<char>\u2019} has no member named \u2018swapcase\u2019\
    \n   31 |             v.push_back(std::to_string(i).swapcase());\n      |    \
    \                                       ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse( s.begin(), s.end() );\n    return s;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjzkygit9: /tmp/tmpjzkygit9.cpp:21: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    for(int i=0;i<s.length();i++){\n        if(s[i]>= 'A' &&\
    \ s[i] <= 'Z'){\n            s[i] = ((s[i]-'A')+122)%26+'A';\n        }\n    \
    \    else if( s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = ((s[i]-'a')+122)%26+'a';\n\
    \        }\n        else\n        {\n            s[i] = s[i];\n        }\n   \
    \ }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpfn8msfz0: /tmp/tmpfn8msfz0.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() ==0)\n    {\n        return \"#a@C\";\n    }\n    std::string\
    \ result;\n    for(int i = 0;i < s.size();i++)\n    {\n        char c = s[i];\n\
    \        if(c>=65 && c<=90)\n        {\n            c = toupper(c);\n        }\n\
    \        else if(c>=97 && c<=122)\n        {\n            c = tolower(c);\n  \
    \      }\n        else if(c!=' ' && c!='@' && c!='#')\n        {\n           \
    \ result = result+c;\n        }\n    }\n    if(result==\"\")\n    {\n        return\
    \ \"#a@C\";\n    }\n    return result;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp8gpa7cr7: /tmp/tmp8gpa7cr7.cpp:45: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string s1;\n    bool flag = true;\n    int cnt = 0;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n            cnt += 1;\n\
    \            if (cnt == 2) {\n                s1 += 'A';\n                flag\
    \ = true;\n            }\n            else if (cnt == 1) {\n                s1\
    \ += 'a';\n                flag = false;\n            }\n        }\n        else\
    \ if (s[i] == 'A') {\n            cnt += 1;\n            if (cnt == 2) {\n   \
    \             s1 += 'a';\n                flag = true;\n            }\n      \
    \      else if (cnt == 1) {\n                s1 += 'A';\n                flag\
    \ = false;\n            }\n        }\n        else {\n            s1 += s[i];\n\
    \        }\n    }\n    return s1;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp9ygen611: /tmp/tmp9ygen611.cpp:50: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    assert(s.size() > 0);\n\tstd::string t = s;\n\tfor (auto &i : t.begin())\n\t{\n\
    \t\tif(i == 'a' || i == 'A' || i == 'b' || i == 'B' || i == 'c' || i == 'C' ||\
    \ i == 'd' || i == 'D' || i == 'e' || i == 'E' || i == 'f' || i == 'F' || i ==\
    \ 'g' || i == 'G' || i == 'h' || i == 'H' || i == 'i' || i == 'I' || i == 'j'\
    \ || i == 'J' || i == 'k' || i == 'K' || i == 'l' || i == 'L' || i == 'm' || i\
    \ == 'M' || i == 'n' || i == 'N' || i == 'o' || i == 'O' || i == 'p' || i == 'P'\
    \ || i == 'q' || i == 'Q' || i == 'r' || i == 'R' || i == 's' || i == 'S' || i\
    \ == 't' || i == 'T' || i == 'u' || i == 'U' || i == 'v' || i == 'V' || i == 'w'\
    \ || i == 'W' || i == 'x' || i == 'X' || i == 'y' || i == 'Y' || i == 'z' || i\
    \ == 'Z')\n\t\t{\n\t\t\tif(i == 'a')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'A');\n\t\t\t}\n\t\t\tif(i == 'A')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'a');\n\t\t\t}\n\t\t\tif(i == 'b')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'B');\n\t\t\t}\n\t\t\tif(i == 'B')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'b');\n\t\t\t}\n\t\t\tif(i == 'c')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'C');\n\t\t\t}\n\t\t\tif(i == 'C')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'c');\n\t\t\t}\n\t\t\tif(i == 'd')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'D');\n\t\t\t}\n\t\t\tif(i == 'D')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'd');\n\t\t\t}\n\t\t\tif(i == 'e')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'E');\n\t\t\t}\n\t\t\tif(i == 'E')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'e');\n\t\t\t}\n\t\t\tif(i == 'f')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'F');\n\t\t\t}\n\t\t\tif(i == 'F')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'f');\n\t\t\t}\n\t\t\tif(i == 'g')\n\t\t\t{\n\t\t\t\tt.insert(i, t->rbegin(),\
    \ 'G');\n\t\t\t}\n\t\t\tif(i == 'G')\n\t\t\t{\n\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qj_mk9w.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp3qj_mk9w.cpp:18:25: error: no matching function for call to \u2018\
    begin(__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >&)\u2019\
    \n   18 |  for (auto &i : t.begin())\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/bits/range_access.h:36,\n                 from\
    \ /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3qj_mk9w.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp3qj_mk9w.cpp:18:25: note:   \u2018__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >\u2019 is not derived from \u2018std::initializer_list<_Tp>\u2019\
    \n   18 |  for (auto &i : t.begin())\n      |                         ^\nIn file\
    \ included from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp3qj_mk9w.cpp:2:\n/usr/inc"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for (char c : s) {\n        // if c is a digit, convert to int\n        if\
    \ (c>='a' && c<='z')\n            c = c - 'a' + 'A';\n        // if c is a letter,\
    \ convert to upper or lower case\n        else if (c>='A' && c<='Z')\n       \
    \     c = c + (c - 'A') % 2 + 'a';\n        else\n            // if c is not a\
    \ letter, keep it as it is\n            c = c;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpvpsixm41: /tmp/tmpvpsixm41.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.empty()) return s;\n    if(s.at(0) == ' ') {\n        std::reverse(s.begin(),\
    \ s.end()); \n        std::transform(s.begin(), s.end(), s.begin(), ::toupper);\
    \ \n        return s;\n    }\n    std::string result = \"\";\n    for(int i =\
    \ 0; i < s.length(); i++) {\n        char c = s[i];\n        if(c == ' ' || c\
    \ == '\\t' || c == '\\n' || c == '\\r' || c == '\\v' || c == '\\f' || c == '\\\
    r') {\n            result += ' ';\n        } else {\n            result += std::toupper(c);\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpeao8q4ne: /tmp/tmpeao8q4ne.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::vector<std::string> v;\n    for (int i = 0; i < s.size(); i++)\n   \
    \     if (s.at(i) == 'A') {\n            std::string a = s.substr(0, i);\n   \
    \         std::string b = s.substr(i, s.size());\n            v.push_back(a);\n\
    \            v.push_back(b);\n        }\n        else\n            v.push_back(s.substr(0,\
    \ i));\n    return v[0] + \" \" + v[1];\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpmed2t569: /tmp/tmpmed2t569.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::stack<char> st;\n    std::stack<char> st2;\n    \n    // initialize\
    \ stack\n    for(int i = 0; i < s.length(); i++){\n        if(s[i]>='A' && s[i]<='Z')\n\
    \            st.push(s[i]);\n    }\n    \n    \n    while(st.empty() == false){\n\
    \        if(st.top()=='Z'){\n            st.pop();\n            st2.push('Z');\n\
    \        }\n        else{\n            st2.push(st.top());\n            st.pop();\n\
    \        }\n    }\n    \n    return st2.top();\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpakh_y5yf.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpakh_y5yf.cpp:38:19: error: could not convert \u2018st2.std::stack<char>::top()\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   38 |     return st2.top();\n      |            ~~~~~~~^~\n      |      \
    \             |\n      |                   __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.length() <= 0){\n        return s;\n    }\n    int index = 0;\n    for(int\
    \ i = s.length() - 1; i >= 0; i--){\n        if(isalpha(s[i])){\n            s[index]\
    \ = toupper(s[i]);\n            index++;\n        }else{\n            s[index]\
    \ = s[i];\n        }\n    }\n    s[index] = '\\0';\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp2wfujdkr: /tmp/tmp2wfujdkr.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string rev_str;\n    for (auto c : s) {\n        if (std::isalpha(c))\
    \ {\n            std::swap(rev_str, c);\n        } else {\n            rev_str\
    \ = c;\n        }\n    }\n    return rev_str;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpicff7ll7.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpicff7ll7.cpp:19:33: error: no matching function for call to \u2018\
    swap(std::string&, char&)\u2019\n   19 |             std::swap(rev_str, c);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpicff7ll7.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpicff7ll7.cpp:19:33: note:   deduced conflicting types for parameter\
    \ \u2018_Tp\u2019 (\u2018std::__cxx11::basic_string<char>\u2019 and \u2018char\u2019\
    )\n   19 |             std::swap(rev_str, c);\n      |                       \
    \          ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n \
    \                from /usr/include/c++/9/bits/stl_algobase.h:64,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpicff7ll7.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:205:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpicff7ll7.cpp:19:33:\
    \ note:   mismatched types \u2018_Tp [_Nm]"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  assert(!s.empty()); // check string is non-empty\n  for (int i=0; i<s.size();\
    \ i++) {\n    char ch = s[i]; // ch is current char inside string s\n    if (islower(ch))\n\
    \      s[i] = toupper(s[i]);\n    else if (isupper(ch))\n      s[i] = tolower(s[i]);\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpmn4i17s8: /tmp/tmpmn4i17s8.cpp:29: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::stack<std::string> st;\n    st.push(s);\n    std::string ans = \"\"\
    ;\n    while(!st.empty()) {\n        std::string curr = st.top();\n        if(isalpha(curr[0]))\n\
    \            curr[0] = toupper(curr[0]);\n        else if(curr[0] == '#')\n  \
    \          curr[0] = tolower(curr[0]);\n        ans += curr;\n        st.pop();\n\
    \    }\n    if(ans.empty()) ans = \"#\";\n    ans.erase(ans.length()-1, 1);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpu89ya01a: /tmp/tmpu89ya01a.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    auto it = s.cbegin(), end = s.cend(), it2 = s.cbegin(), end2 = s.cend();\n\
    \    auto i = 0;\n    \n    while (it != end && it2 != end2) {\n        if (*it\
    \ >= 'a' && *it <= 'z') {\n            it2 += std::tolower(*it);\n           \
    \ i++;\n        } else if (*it >= 'A' && *it <= 'Z') {\n            it2 += std::toupper(*it);\n\
    \            i++;\n        } else {\n            it2 += *it;\n            i++;\n\
    \        }\n        it = it2;\n        it2 = end2;\n        end2 = end;\n    }\n\
    \    \n    if (i == s.size()) {\n        std::reverse(s.begin(), s.end());\n \
    \   }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp20t27snx: /tmp/tmp20t27snx.cpp:43: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0)\n    {\n        return s;\n    }\n    std::string str=\"\
    \";\n    std::string temp=\"\";\n    for(char c : s)\n    {\n        \n      \
    \  if(c<97||c>122)\n        {\n            temp = temp + c;\n        }\n     \
    \   else\n        {\n            temp = temp + c+32;\n        }\n    }\n    str.push_back(temp);\n\
    \    for(auto i : str)\n    {\n        if(i.size() == 1)\n        {\n        \
    \    std::string res=\"\";\n            for(int j=0;j<i.size()-1;j++)\n      \
    \      {\n                char ch=i[j];\n                char ch1=i[j+1];\n  \
    \              if(ch<97||ch>122)\n                {\n                    res =\
    \ res + (ch-32) + ch1;\n                }\n                else\n            \
    \    {\n                    res = res + (ch-97) + ch1;\n                }\n  \
    \          }\n            str.push_back(res);\n        }\n    }\n    \n    return\
    \ str;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzrxgkcp6.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpzrxgkcp6.cpp:31:28: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019)\n\
    \   31 |             temp = temp + c+32;\n      |                    ~~~~~~~~^~~\n\
    \      |                         |   |\n      |                         |   int\n\
    \      |                         std::__cxx11::basic_string<char>\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzrxgkcp6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpzrxgkcp6.cpp:31:29:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   31 |             temp = temp + c+32;\n      |      \
    \                       ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzrxgkcp6.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_IteratorL>&)\u2019\n 1216 |     operator+(typename move_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res = \"\";\n    for (auto c : s) {\n        switch (c) {\n \
    \           case('a') :\n            case 'A' :\n                res.push_back(toupper(c));\n\
    \                break;\n            case('c') :\n            case 'C' :\n   \
    \             res.push_back(tolower(c));\n                break;\n           \
    \ default :\n                res.push_back(c);\n        }\n    }\n    res.swap(s);\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_go0yhf5: /tmp/tmp_go0yhf5.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    // Your code here\n\t\n\tfor(int i=0;i<s.size();i++){\n\t\tif(s[i]=='a' || s[i]=='A'){\n\
    \t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='b' || s[i]=='B'){\n\t\t\t\
    s[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='c' || s[i]=='C'){\n\t\t\ts[i]=toupper(s[i]);\n\
    \t\t}\n\t\telse if(s[i]=='d' || s[i]=='D'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\
    \t\telse if(s[i]=='e' || s[i]=='E'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse\
    \ if(s[i]=='f' || s[i]=='F'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='g'\
    \ || s[i]=='G'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='h' || s[i]=='H'){\n\
    \t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='i' || s[i]=='I'){\n\t\t\t\
    s[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='j' || s[i]=='J'){\n\t\t\ts[i]=toupper(s[i]);\n\
    \t\t}\n\t\telse if(s[i]=='k' || s[i]=='K'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\
    \t\telse if(s[i]=='l' || s[i]=='L'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse\
    \ if(s[i]=='m' || s[i]=='M'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='n'\
    \ || s[i]=='N'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='o' || s[i]=='O'){\n\
    \t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='p' || s[i]=='P'){\n\t\t\t\
    s[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='q' || s[i]=='Q'){\n\t\t\ts[i]=toupper(s[i]);\n\
    \t\t}\n\t\telse if(s[i]=='r' || s[i]=='R'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\
    \t\telse if(s[i]=='s' || s[i]=='S'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse\
    \ if(s[i]=='t' || s[i]=='T'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='u'\
    \ || s[i]=='U'){\n\t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='v' || s[i]=='V'){\n\
    \t\t\ts[i]=toupper(s[i]);\n\t\t}\n\t\telse if(s[i]=='w' || s[i]=='W'){\n\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp749jfmfz.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp749jfmfz.cpp:88:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n   88 | int main() {\n      |            ^\n/tmp/tmp749jfmfz.cpp:98:1:\
    \ error: expected \u2018}\u2019 at end of input\n   98 | }\n      | ^\n/tmp/tmp749jfmfz.cpp:18:29:\
    \ note: to match this \u2018{\u2019\n   18 |  for(int i=0;i<s.size();i++){\n \
    \     |                             ^\n/tmp/tmp749jfmfz.cpp:98:1: error: expected\
    \ \u2018}\u2019 at end of input\n   98 | }\n      | ^\n/tmp/tmp749jfmfz.cpp:15:34:\
    \ note: to match this \u2018{\u2019\n   15 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmp749jfmfz.cpp:98:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n   98 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    if(!n)\n        return s;\n    \n    std::string out(s,0,n);\n\
    \    \n    for(int i = 0; i<n; i++) {\n        char c = s[i]; \n        if(c>='a'\
    \ && c<='z')\n            c = c - 32;\n        out[i] = c;\n    }\n    return\
    \ out;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpu160fwiz: /tmp/tmpu160fwiz.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Write your code here\n    char temp;\n    int count = s.size();\n    std::string\
    \ res;\n    for(int i = 0; i < count; i++){\n        if(s[i] == 'a'){\n      \
    \      temp = s[i];\n            s[i] = 'b';\n            s[temp] = 'a';\n   \
    \         \n        }\n        else if(s[i] == 'B'){\n            temp = s[i];\n\
    \            s[i] = 'a';\n            s[temp] = 'B';\n            \n        }\n\
    \        else if(s[i] == 'C'){\n            temp = s[i];\n            s[i] = 'd';\n\
    \            s[temp] = 'c';\n            \n        }\n        else if(s[i] ==\
    \ 'D'){\n            temp = s[i];\n            s[i] = 'c';\n            s[temp]\
    \ = 'D';\n            \n        }\n        else if(s[i] == 'E'){\n           \
    \ temp = s[i];\n            s[i] = 'd';\n            s[temp] = 'e';\n        \
    \    \n        }\n        else if(s[i] == 'F'){\n            temp = s[i];\n  \
    \          s[i] = 'e';\n            s[temp] = 'F';\n            \n        }\n\
    \        else if(s[i] == 'G'){\n            temp = s[i];\n            s[i] = 'f';\n\
    \            s[temp] = 'g';\n            \n        }\n        else if(s[i] ==\
    \ 'H'){\n            temp = s[i];\n            s[i] = 'g';\n            s[temp]\
    \ = 'h';\n            \n        }\n        else if(s[i] == 'I'){\n           \
    \ temp = s[i];\n            s[i] = 'h';\n            s[temp] = 'i';\n        \
    \    \n        }\n        else if(s[i] == 'J'){\n            temp = s[i];\n  \
    \          s[i] = 'i';\n            s[temp] = 'j';\n            \n        }\n\
    \        else if(s[i] == 'K'){\n            temp = s[i];\n            s[i] = 'j';\n\
    \            s[temp] = 'k';\n            \n        }\n        else if(s[i] ==\
    \ 'L'){\n            temp = s[i];\n            s[i] = 'k';\n            s[temp]\
    \ = 'l';\n            \n        }\n        else if(s[i] == 'M'){\n           \
    \ temp = s[i];\n            s[i] = 'l';\n            s[temp] = 'm';\n        \
    \    \n        }\n        else if(s[i] == 'N'){\n            temp = s[i];\n  \
    \          s[i] = 'm';\n            s[temp] = 'n';\n            \n        }\n\
    \        else if(s[i] == 'O'){\n            temp = s[i];\n            s[i] = 'n';\n\
    \            s[temp] = 'o';\n            \n        }\n        else if(s[i] ==\
    \ 'P'){\n            temp = s[i];\n            s[i] = 'o';\n            s[temp]\
    \ = 'p';\n            \n        }\n        else if(s[i] == 'Q'){\n           \
    \ temp = s[i];\n            s[i] = 'p';\n            s[temp] = 'q';\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_30ca7gj.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp_30ca7gj.cpp:122:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  122 | int main() {\n      |            ^\n/tmp/tmp_30ca7gj.cpp:132:1:\
    \ error: expected \u2018}\u2019 at end of input\n  132 | }\n      | ^\n/tmp/tmp_30ca7gj.cpp:20:35:\
    \ note: to match this \u2018{\u2019\n   20 |     for(int i = 0; i < count; i++){\n\
    \      |                                   ^\n/tmp/tmp_30ca7gj.cpp:132:1: error:\
    \ expected \u2018}\u2019 at end of input\n  132 | }\n      | ^\n/tmp/tmp_30ca7gj.cpp:15:34:\
    \ note: to match this \u2018{\u2019\n   15 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmp_30ca7gj.cpp:132:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  132 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (islower(s[i])) {\n            res = toupper(s[i]);\n            res = res.substr(0,\
    \ res.size()-1) + res.substr(1);\n        } else if (isupper(s[i])) {\n      \
    \      res = tolower(s[i]);\n            res = res.substr(0, res.size()-1) + res.substr(1);\n\
    \        } else {\n            res = s;\n            break;\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpzg_exvp1: /tmp/tmpzg_exvp1.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  \n    // code here\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    if(s.size()==0){\n        return s;\n    }\n    \n    std::stack<char>\
    \ st;\n    bool flag=false;\n    for(int i=0; i<s.size(); i++){\n        if(s[i]=='\
    \ '){\n            st.push(s[i]);\n        }\n        else if(s[i]=='>'){\n  \
    \          flag=true;\n        }\n        else if(s[i]=='<'){\n            while(st.top()==s[i]){\n\
    \                st.pop();\n            }\n            if(!flag){\n          \
    \      st.push(s[i]);\n            }\n            else {\n                flag=false;\n\
    \            }\n        }\n        else{\n            if(!flag){\n           \
    \     st.push(s[i]);\n            }\n            else {\n                flag=false;\n\
    \            }\n        }\n    }\n    \n    std::string ret=\"\";\n    for(int\
    \ i=0; i<s.size(); i++){\n        if(st.empty()==false){\n            st.top();\n\
    \        }\n        ret+=s[i];\n    }\n    return ret;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpjwk_m9_h: /tmp/tmpjwk_m9_h.cpp:62: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string s1 = s;\n    int len = s.size();\n    for(int i=0 ; i<len ; i++){\n\
    \        if(s[i] >= 'a' && s[i] <= 'z'){\n            s[i] = s[i]-'a'+10;\n  \
    \      }\n        else if(s[i] >= 'A' && s[i] <= 'Z'){\n            s[i] = s[i]-'A'+10;\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpxw3mkx7h: /tmp/tmpxw3mkx7h.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool flag=false;\n    int i,j;\n    char temp;\n    std::string s1=s.substr(1);\n\
    \    for(auto itr=s1.begin();itr!=s1.end();++itr){\n        temp = *itr;\n   \
    \     j = s1.find(temp,itr);\n        if(itr!=j){\n            flag = true;\n\
    \            itr++;\n        }\n        else if(itr == j){\n            temp =\
    \ temp + 'a' - 'A';\n            if(temp > 'z'){\n                temp = temp\
    \ - 26 + 'A';\n            }\n            itr++;\n        }\n    }\n    if(flag)\n\
    \        return s1;\n    else\n        return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp26524emh.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp26524emh.cpp:22:29: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::find(char&, __gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> >&)\u2019\n   22 |         j = s1.find(temp,itr);\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp26524emh.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const _CharT*, std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type = long unsigned\
    \ int]\u2019\n 2351 |       find(const _CharT* __s, size_type __pos, size_type\
    \ __n) const\n      |       ^~~~\n/usr/include/c++/9/bits/basic_string.h:2351:7:\
    \ note:   candidate expects 3 arguments, 2 provided\n/usr/include/c++/9/bits/basic_string.h:2365:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::find(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type)\
    \ const [with _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>;\
    \ std::__cxx11::basic_string<_CharT, _"
  stdout: ''
  timestamp: 1660098250
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for (auto &c : s) {\n        if (isalpha(c)) {\n            std::swap(tolower(c),\
    \ toupper(c));\n        }\n    }\n    std::string ans = \"\";\n    for (auto &c\
    \ : s) {\n        if (!isalpha(c))\n            ans += c;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6sumvuo4.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp6sumvuo4.cpp:18:45: error: no matching function for call to \u2018\
    swap(int, int)\u2019\n   18 |             std::swap(tolower(c), toupper(c));\n\
    \      |                                             ^\nIn file included from\
    \ /usr/include/c++/9/bits/stl_pair.h:59,\n                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6sumvuo4.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&) [with _Tp = int; typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ = void]\u2019 <near match>\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |  \
    \   ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   conversion of argument\
    \ 2 would be ill-formed:\n/tmp/tmp6sumvuo4.cpp:18:42: error: cannot bind non-const\
    \ lvalue reference of type \u2018int&\u2019 to an rvalue of type \u2018int\u2019\
    \n   18 |             std::swap(tolower(c), toupper(c));\n      |            \
    \                       ~~~~~~~^~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6sumvuo4.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (int i = 0; i < s.size(); ++i) {\n        if\
    \ (std::isalpha(s[i])) {\n            ans.assign(ans.begin(), ans.end());\n  \
    \          std::transform(ans.begin(), ans.end(), ans.begin(), ::toupper);\n \
    \       } else {\n            ans.assign(ans.begin(), ans.end());\n          \
    \  std::transform(ans.begin(), ans.end(), ans.begin(), ::tolower);\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpu030d7xz: /tmp/tmpu030d7xz.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // Write your code here\n  \n   if(s[0] == 'A' || s[0] == 'a'){\n       return\
    \ std::string(s[0]+('a' - 'A'), s.size() - 1);\n   }\n   \n   if(s[0] == 'B' ||\
    \ s[0] == 'b'){\n       return std::string(s[0]+('B' - 'A'), s.size() - 1);\n\
    \   }\n   \n   if(s[0] == 'C' || s[0] == 'c'){\n       return std::string(s[0]+('C'\
    \ - 'A'), s.size() - 1);\n   }\n   \n   if(s[0] == 'D' || s[0] == 'd'){\n    \
    \   return std::string(s[0]+('D' - 'A'), s.size() - 1);\n   }\n   \n   if(s[0]\
    \ == 'E' || s[0] == 'e'){\n       return std::string(s[0]+('E' - 'A'), s.size()\
    \ - 1);\n   }\n   \n   if(s[0] == 'F' || s[0] == 'f'){\n       return std::string(s[0]+('F'\
    \ - 'A'), s.size() - 1);\n   }\n   \n   if(s[0] == 'G' || s[0] == 'g'){\n    \
    \   return std::string(s[0]+('G' - 'A'), s.size() - 1);\n   }\n   \n   if(s[0]\
    \ == 'H' || s[0] == 'h'){\n       return std::string(s[0]+('H' - 'A'), s.size()\
    \ - 1);\n   }\n   \n   if(s[0] == 'I' || s[0] == 'i'){\n       return std::string(s[0]+('I'\
    \ - 'A'), s.size() - 1);\n   }\n   \n   if(s[0] == 'J' || s[0] == 'j'){\n    \
    \   return std::string(s[0]+('J' - 'A'), s.size() - 1);\n   }\n   \n   if(s[0]\
    \ == 'K' || s[0] == 'k'){\n       return std::string(s[0]+('K' - 'A'), s.size()\
    \ - 1);\n   }\n   \n   if(s[0] == 'L' || s[0] == 'l'){\n       return std::string(s[0]+('L'\
    \ - 'A'), s.size() - 1);\n   }\n   \n   if(s[0] == 'M' || s[0] == 'm'){\n    \
    \   return std::string(s[0]+('M' - 'A'), s.size() - 1);\n   }\n   \n   if(s[0]\
    \ == 'N' || s[0] == 'n'){\n       return std::string(s[0]+('N' - 'A'), s.size()\
    \ - 1);\n   }\n   \n   if(s[0] == 'O' || s[0] == 'o'){\n       return std::string(s[0]+('O'\
    \ - 'A'), s.size() - 1);\n   }\n   \n   if(s[0] == 'P' || s[0] == 'p'){\n    \
    \   return std::string(s[0]+('P' - 'A'), s.size() - 1);\n   }\n   \n\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpwwf5z78t: /tmp/tmpwwf5z78t.cpp:86: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    for(int i = 0; i < n; ++i) {\n        if(s[i] >= 'a'\
    \ && s[i] <= 'z') \n            s[i] = s[i] - 32;\n        if(s[i] >= 'A' && s[i]\
    \ <= 'Z')\n            s[i] = s[i] + 32;\n    }\n    std::string ans = \"\";\n\
    \    for(int i = 0; i < n; ++i) \n        ans += s[i];\n    ans = std::string(ans.rbegin(),\
    \ ans.rend());\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpm3a0dfq7: /tmp/tmpm3a0dfq7.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code goes here\n    \n    \n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp093dhkld: /tmp/tmp093dhkld.cpp:23: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse(s.begin(), s.end());\n    if(s.size() == 0) return s;\n    std::string\
    \ t = s;\n    for(int i = 0; i < s.size(); i++){\n        if(s[i] == 0) continue;\n\
    \        if(!isalpha(s[i]))\n            std::reverse(&s[i], &s[i + 1]);\n   \
    \ }\n    std::reverse(t.begin(), t.end());\n    return t;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp2sij8ewc: /tmp/tmp2sij8ewc.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code in C++14(std=c++14) or C++11(std=c++11)\n    std::for_each(s.begin(),\
    \ s.end(), [](char c) { if(c<'a' || c>'z') c=toupper(c); });\n    if(s.size()\
    \ == 0) return s;\n    if(s[0] < 'a' || s[0] > 'z') return s;\n    return solve(s.substr(1))\
    \ + s[0] + solve(s.substr(0));\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpwmmyyeyu: /tmp/tmpwmmyyeyu.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  if(s.size()==0)\n  {\n    return s;\n  }\n  char c = s[0];\n  for(int i=0;i<s.size();i++)\n\
    \  {\n    if(s[i]==c)\n    {\n      s[i] = toupper(s[i]);\n      c = s[i];\n \
    \   }\n    else\n    {\n      s[i] = tolower(s[i]);\n    }\n  }\n  return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp9thyxc2m: /tmp/tmp9thyxc2m.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.length()==0){\n        cout<<\"\\n\";\n        return s;\n    }\n  \
    \  string s1(s);\n    for(int i=0;i<s1.length();i++){\n        for(int j=0;j<s1.length();j++){\n\
    \            if(s1[j]==s1[i]){\n                if(s1[j]<97){\n              \
    \      s1[j]=s1[j]-32;\n                }\n                else{\n           \
    \         s1[j]=s1[j]-64;\n                }\n            }\n        }\n    }\n\
    \    cout<<s1;\n    return s1;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjt69p6yj.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpjt69p6yj.cpp:17:9: error: \u2018cout\u2019 was not declared in this\
    \ scope; did you mean \u2018std::cout\u2019?\n   17 |         cout<<\"\\n\";\n\
    \      |         ^~~~\n      |         std::cout\nIn file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpjt69p6yj.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpjt69p6yj.cpp:20:5:\
    \ error: \u2018string\u2019 was not declared in this scope\n   20 |     string\
    \ s1(s);\n      |     ^~~~~~\n/tmp/tmpjt69p6yj.cpp:20:5: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjt69p6yj.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjt69p6yj.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpjt69p6yj.cpp:21:19: error: \u2018s1\u2019 was not declared in this scope;\
    \ di"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool done = false;\n    std::string result = \"\";\n    if(s.size() == 0)\
    \ {\n        return result;\n    }\n\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(s[i] == toupper(s[i])){\n            if(done){\n                result\
    \ += s[i];\n            } else {\n                done = true;\n             \
    \   result += s[i];\n            }\n        } else if(s[i] == tolower(s[i])) {\n\
    \            result += s[i];\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpu22y2t6a: /tmp/tmpu22y2t6a.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result=\"\";\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='A'\
    \ && s[i]<='Z'){\n            result += toupper(s[i]);\n        }\n        else\
    \ if(s[i]>='a' && s[i]<='z'){\n            result += tolower(s[i]);\n        }\n\
    \        else{\n            result += s[i];\n        }\n    }\n    return std::move(result);\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmplogp9u93: /tmp/tmplogp9u93.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098251
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0) return s;\n    int size = s.size();\n    std::string res\
    \ = s;\n    for (int i = 0; i < size; i++) {\n        if (isalpha(res[i])) {\n\
    \            res.replace(i, 1, toupper(res[i]));\n            res.replace(i, 2,\
    \ tolower(res[i]));\n        } else if (res[i] != 0) {\n            res = tolower(res);\n\
    \        } else {\n            res = toupper(res);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps0k1tqmb.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmps0k1tqmb.cpp:21:46: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(int&, int, int)\u2019\n   21 |     \
    \        res.replace(i, 1, toupper(res[i]));\n      |                        \
    \                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmps0k1tqmb.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmps0k1tqmb.cpp:21:38:\
    \ error: invalid conversion from \u2018int\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   21 |             res.replace(i, 1, toupper(res[i]));\n      |            \
    \                   ~~~~~~~^~~~~~~~\n      |                                 \
    \     |\n      |                                      int\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/inclu"
  stdout: ''
  timestamp: 1660098250
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    char c = s[0];\n    s = s.substr(1);\n    std::string result = \"\";\n  \
    \  for (char ch : s) {\n        if (isalpha(c)){\n            result += toupper(c);\n\
    \            result += ch;\n            result += tolower(ch);\n        }\n  \
    \      else{\n            result += ch;\n        }\n        c = ch;\n    }\n \
    \   return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpggjh12zn: /tmp/tmpggjh12zn.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098250
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0) return s;\n    std::string s1 = s;\n    std::transform(s1.begin(),\
    \ s1.end(), s1.begin(), [](char c){\n        if ('A' <= c && c <= 'Z') return\
    \ c - 'A' + 'a';\n        if ('a' <= c && c <= 'z') return c - 'a' + 'A';\n  \
    \      return c;\n    });\n    return s1;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw6pmzvr.cpp: In lambda function:\n/tmp/tmpuw6pmzvr.cpp:21:16:\
    \ error: inconsistent types \u2018int\u2019 and \u2018char\u2019 deduced for lambda\
    \ return type\n   21 |         return c;\n      |                ^\n"
  stdout: ''
  timestamp: 1660098252
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    assert(s.size() != 0);\n    // Write your code here.\n    return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpzkqb5d78: /tmp/tmpzkqb5d78.cpp:22: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse(s.begin(), s.end());\n    int i = s.length() - 1;\n    while\
    \ (i >= 0 && s.at(i) != '@') {\n        std::reverse(&s.at(i), &s.at(i + 1));\n\
    \        i--;\n    }\n    std::string newStr = \"\";\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if (s.at(i) != '@') {\n            newStr += s.at(i);\n    \
    \    }\n    }\n    return newStr;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 4) >= this->size() (which is 4)\n"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = \"ABC\";\n    for(int i = 0; i < s.length(); i++){\n  \
    \      if(s.at(i) >= 'a' && s.at(i) <= 'z'){\n            ans[s.at(i)-'a'] = ans.at(s.at(i)-'a')\
    \ + s.at(i);\n        }\n        else if(s.at(i) >= 'A' && s.at(i) <= 'Z'){\n\
    \            ans[s.at(i)-'A'] = ans.at(s.at(i)-'A') + s.at(i);\n        }\n  \
    \      else{\n            ans[i] = s.at(i);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18) >= this->size() (which is 3)\n"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    // Your code goes here\n    \n    if(s.size() == 0){\n        return\
    \ s;\n    }\n    \n    std::string res = \"\";\n    for(int i = 0; i < s.size()\
    \ ; i++){\n        char c = s[i];\n        if(c>=65 && c<=90){\n            c=c-32;\n\
    \        }\n        if(c>=97 && c<=122){\n            c = c+32;\n        }\n \
    \       res += c;\n    }\n    \n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpuw45z8zd: /tmp/tmpuw45z8zd.cpp:39: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::string out = \"\";\n    for (auto &i : s) {\n        if ((i >=\
    \ 'a' && i <= 'z') || (i >= 'A' && i <= 'Z')) {\n            out += tolower(i);\n\
    \        } else {\n            out += i;\n        }\n    }\n    \n    // You do\
    \ not need to return the string s; it is the responsibility of the caller to return\
    \ it.\n    \n    std::reverse(out.begin(), out.end());\n    return out;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_qw5a8v6: /tmp/tmp_qw5a8v6.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string newString = s;\n    bool flag = false;\n    int size = s.size();\n\
    \    for (int i = 0; i < size; i++) {\n        flag = false;\n        if (isalpha(s[i]))\
    \ {\n            flag = true;\n            for (int j = 0; j < i; j++){\n    \
    \            newString[j] = toupper(newString[j]);\n            }\n          \
    \  newString[i] = tolower(newString[i]);\n        }\n        else {\n        \
    \    newString[i] = s[i];\n        }\n    }\n    if (flag) {\n        newString\
    \ = newString.substr(0, size);\n        newString = newString.substr(newString.size()\
    \ - 1, 1);\n    }\n    return newString;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpxrclcn4t: /tmp/tmpxrclcn4t.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    for(size_t i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n   \
    \         if(i<s.size()-1) {\n                if(s[i]==toupper(s[i+1])) {\n  \
    \                  i++;\n                    \n                }\n           \
    \ }\n            if(i<s.size()-1) {\n                if(s[i]==tolower(s[i+1]))\
    \ {\n                    i++;\n                    \n                }\n     \
    \       }\n        }\n    }\n    std::string res = s;\n    std::reverse(s.begin(),\
    \ s.end());\n    return res;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp7bla6fx7: /tmp/tmp7bla6fx7.cpp:39: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    assert(s.size() > 1);\n\tstd::stack<char> stk;\n\tstd::string res;\n\tint len\
    \ = s.size();\n\t\n\tfor (int i = 0; i < len; i++) {\n\t\tif (s[i] == std::toupper(s[i]))\n\
    \t\t\tstk.push(std::toupper(s[i]));\n\t\telse\n\t\t\tstk.push(s[i]);\n\t}\n\t\n\
    \twhile (!stk.empty()) {\n\t\tres = res + stk.top();\n\t\tstk.pop();\n\t}\n\t\n\
    \tif (len == res.size())\n\t\treturn res;\n\telse\n\t\treturn s + \"@\" + res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpd3dqu3_e: /tmp/tmpd3dqu3_e.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::string result = s;\n    if (s[0] >= 'A' && s[0] <= 'Z') {\n  \
    \      s[0] += 32;\n    }\n    \n    for (int i = 0; i < s.size(); i++) {\n  \
    \      if (s[i] == '@') {\n            result[i] = '@';\n        }\n    }\n  \
    \  \n    for (int i = s.size() - 1; i >= 0; i--) {\n        if (result[i] >= 'A'\
    \ && result[i] <= 'Z') {\n            result[i] = result[i] - 32;\n        }\n\
    \    }\n    \n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp5hbgyclq: /tmp/tmp5hbgyclq.cpp:38: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res = \"\";\n    for (int i = 0; i < s.length(); i++) {\n   \
    \     if (isalpha(s[i])) {\n            std::string tmp = s[i];\n            s[i]\
    \ = toupper(s[i]);\n            res = res + tmp;\n            s[i] = tolower(s[i]);\n\
    \        } else {\n            res = res + s[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2iz6yjsn.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp2iz6yjsn.cpp:19:34: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   19 |      \
    \       std::string tmp = s[i];\n      |                                  ^\n"
  stdout: ''
  timestamp: 1660098253
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::vector<std::string> v;\n    std::string ans = \"NOTHING\";\n    for\
    \ (std::string::size_type i = 0; i < s.size(); ++i) {\n        // check if the\
    \ char is letter\n        if (std::isalpha(s[i])) {\n            // if letter\n\
    \            if (i > 0 && std::isalpha(v[i - 1])) {\n                // if previous\
    \ char is letter\n                v.push_back(v[i - 1] + s[i] - 'a' + 10);\n \
    \           } else {\n                // if previous char is not letter\n    \
    \            v.push_back(v[i - 1] + s[i] - 'a' + 10);\n            }\n       \
    \ } else {\n            // if not a letter\n            // if previous char is\
    \ letter\n            if (i > 0 && std::isalpha(v[i - 1])) {\n               \
    \ // if previous char is letter\n                ans += v[i - 1] + s[i] - 'a'\
    \ + 10;\n            } else {\n                // if previous char is not letter\n\
    \                ans += v[i - 1] + s[i] - 'a' + 10;\n            }\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpakevgvhv.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpakevgvhv.cpp:22:47: error: no matching function for call to \u2018\
    isalpha(__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type&)\u2019\n   22 |         \
    \    if (i > 0 && std::isalpha(v[i - 1])) {\n      |                         \
    \                      ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpakevgvhv.cpp:2:\n/usr/include/ctype.h:109:1: note:\
    \ candidate: \u2018int isalpha(int)\u2019\n  109 | __exctype (isalpha);\n    \
    \  | ^~~~~~~~~\n/usr/include/ctype.h:109:1: note:   no known conversion for argument\
    \ 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<std::__cxx11::basic_string<char>\
    \ >, std::__cxx11::basic_string<char> >::value_type\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  109 | __exctype (isalpha);\n      | ^~~~~~~~~\nIn file\
    \ included from /usr/include/c++/9/bits/basic_ios.h:37,\n                 from\
    \ /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpakevgvhv.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2599:5: note:\
    \ candidate: \u2018template<class _CharT> bool std::isalpha(_CharT, const std::locale&)\u2019\
    \n 2599 |     isalpha(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2599:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpakevgvhv.cpp:22:47: note:   candidate expects 2 arguments,\
    \ 1 provided\n   22 |             if (i > 0 && std::isalpha(v[i - 1])) {\n   \
    \   |                                               ^\n/tmp/tmpakevgvhv.cpp:24:45:\
    \ error: no match for \u2018operator-\u2019 (operand types are \u2018std::__cxx"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(unsigned int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            s[i] = toupper(s[i]);\n        } else {\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpv4_e5bqw: /tmp/tmpv4_e5bqw.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::string ans=\"\";\n    int len=s.length();\n    \n    for(int i=0;i<len;i++){\n\
    \        if(isalpha(s[i])){\n            ans+=(char)toupper(s[i]);\n        }\n\
    \        else{\n            ans+=(char)s[i];\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpyaj46fdg: /tmp/tmpyaj46fdg.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    char ss[256] = {0};\n    for (unsigned int i = 0; i < s.size(); i++) {\n\
    \        ss[i] = s[i];\n    }\n    for (int i = 0; i < s.size(); i++) {\n    \
    \    if (s[i] == ('A' || 'a' || 'B' || 'b' || 'C' || 'c' || 'D' || 'd' || 'E'\
    \ || 'e' || 'F' || 'f' || 'G' || 'g' || 'H' || 'h' || 'I' || 'i' || 'J' || 'j'\
    \ || 'K' || 'k' || 'L' || 'l' || 'M' || 'm' || 'N' || 'n' || 'O' || 'o' || 'P'\
    \ || 'p' || 'R' || 'r' || 'S' || 's' || 'T' || 't' || 'U' || 'u' || 'V' || 'v'\
    \ || 'W' || 'w' || 'X' || 'x' || 'Y' || 'y' || 'Z' || 'z' || 'a' || 'b' || 'c'\
    \ || 'd' || 'e' || 'f' || 'g' || 'h' || 'i' || 'j' || 'k' || 'l' || 'm' || 'n'\
    \ || 'o' || 'p' || 'q' || 'r' || 's' || 't' || 't' || 'u' || 'v' || 'w' || 'x'\
    \ || 'y' || 'z' || 'A' || 'B' || 'C' || 'D' || 'E' || 'F' || 'G' || 'H' || 'I'\
    \ || 'J' || 'K' || 'L' || 'M' || 'N' || 'O' || 'P' || 'R' || 'S' || 'T' || 'U'\
    \ || 'V' || 'W' || 'X' || 'Y' || 'Z' || 'a' || 'b' || 'c' || 'd' || 'e' || 'f'\
    \ || 'g' || 'h' || 'i' || 'j' || 'k' || 'l' || 'm' || 'n' || 'o' || 'p' || 'q'\
    \ || 'r' || 's' || 't' || 't' || 'u' || 'v' || 'w' || 'x' || 'y' || 'z')) {\n\
    \            if (i > 0 && ss[i - 1] == '#') {\n                ss[i] = ss[i +\
    \ 1];\n                ss[i - 1] = '#';\n                ss[i - 2] = '@';\n  \
    \              ss[i - 3] = ss[i + 1];\n            }\n            else if (i >\
    \ 0 && ss[i - 1] == '@') {\n                ss[i] = ss[i + 1];\n             \
    \   ss[i - 1] = '@';\n                ss[i - 2] = '#';\n                ss[i -\
    \ 3] = ss[i + 1];\n            }\n            else if (i > 0 && ss[i - 1]\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkq2wflju.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpkq2wflju.cpp:34:40: error: expected \u2018)\u2019 before \u2018}\u2019\
    \ token\n   34 |             else if (i > 0 && ss[i - 1]\n      |            \
    \         ~                  ^\n      |                                      \
    \  )\n   35 | }\n      | ~                                       \n/tmp/tmpkq2wflju.cpp:35:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   35 | }\n \
    \     | ^\n/tmp/tmpkq2wflju.cpp:36:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n   36 | int main() {\n      |            ^\n\
    /tmp/tmpkq2wflju.cpp:46:1: error: expected \u2018}\u2019 at end of input\n   46\
    \ | }\n      | ^\n/tmp/tmpkq2wflju.cpp:20:40: note: to match this \u2018{\u2019\
    \n   20 |     for (int i = 0; i < s.size(); i++) {\n      |                  \
    \                      ^\n/tmp/tmpkq2wflju.cpp:46:1: error: expected \u2018}\u2019\
    \ at end of input\n   46 | }\n      | ^\n/tmp/tmpkq2wflju.cpp:15:34: note: to\
    \ match this \u2018{\u2019\n   15 | std::string solve(std::string s) {\n     \
    \ |                                  ^\n/tmp/tmpkq2wflju.cpp:46:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   46 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    assert(s.length()>0);\n\tchar res[s.length()+1];\n\tstd::fill(res, res+s.length(),\
    \ 0);\n\tstd::reverse(s.begin(), s.end());\n\tfor (int i=0; i<s.length(); i++)\
    \ {\n\t\tif (s[i]>='a' && s[i]<='z' || s[i]>='A' && s[i]<='Z') {\n\t\t\tres[i]=s[i]-'a';\n\
    \t\t} else {\n\t\t\tres[i]=s[i];\n\t\t}\n\t}\n\tstd::string ret(res);\n\tstd::reverse(ret.begin(),\
    \ ret.end());\n\treturn ret;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpc5dvthsi: /tmp/tmpc5dvthsi.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int n = (int) s.size();\n  \n  // Your code goes here\n    \n  return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp5a7ibmpt: /tmp/tmp5a7ibmpt.cpp:24: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.length() == 0) {\n        return s;\n    }\n    if(isalpha(s[0])) {\n\
    \        for(int i = 1; i < s.length(); i++) {\n            if(isalpha(s[i]))\
    \ {\n                std::swap(s[i-1], s[i]);\n            } else {\n        \
    \        s[i] = s[i-1];\n            }\n        }\n    } else {\n        for(int\
    \ i = 1; i < s.length(); i++) {\n            s[i] = s[i-1];\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpp5_2x6om: /tmp/tmpp5_2x6om.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len = s.length();\n    if(len == 0)\n        return s;\n    bool flag\
    \ = true;\n    for(int i = 0; i < (len/2); i++)\n        if(s[i] == s[i+1])\n\
    \            flag = false;\n    std::string ans = \"\";\n    if(flag)\n      \
    \  for(int i = 0; i < len; i++)\n        {\n            if(s[i] == 'A' || s[i]\
    \ == 'a')\n            {\n                if(ans.length() > 0)\n             \
    \       ans = ans + \"a\";\n            }\n            else\n            {\n \
    \               if(ans.length() > 0)\n                    ans = ans + \"A\";\n\
    \            }\n        }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpnas9syw3: /tmp/tmpnas9syw3.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Do not write main() function.\n    // Do not read input, instead use the\
    \ arguments to the function.\n    // Do not print the output, instead return values\
    \ as specified\n    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/\
    \ for more details\n    \n    if(s.empty()) \n        return s;\n    int n = s.size();\n\
    \    for(int i = 0; i < n; i++)\n    {\n        if(isupper(s[i])) \n        {\n\
    \            if((i == 0) && (s.at(i) == toupper(s.at(n-1)))) \n            {\n\
    \                s.at(n - 1) = tolower(s.at(n-1));\n                s.at(i) =\
    \ toupper(s.at(i));\n                n--;\n            }\n            else\n \
    \           {\n                s.at(i - 1) = toupper(s.at(i - 1));\n         \
    \       s.at(i) = tolower(s.at(i));\n                i -= 1;\n               \
    \ n -= 1;\n            }\n        }\n    }\n    if(n > 0) \n    {\n        if((n\
    \ == 1) && (s.at(0) == toupper(s.at(1)))) \n        {\n            s.at(0) = tolower(s.at(0));\n\
    \            n--;\n        }\n        else\n        {\n            s.at(n) = toupper(s.at(n));\n\
    \            n--;\n        }\n    }\n    return s;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 18446744073709551615) >= this->size() (which\
    \ is 4)\n"
  stdout: ''
  timestamp: 1660098254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.length();\n    std::string str = \"\";\n    for(int i = 0; i <\
    \ n; ++i) {\n        if(s[i] == 'a' || s[i] == 'A') {\n            str = str.rbegin()\
    \ + 1;\n            if(i + 1 < n && s[i + 1] == 'b' || s[i + 1] == 'B')\n    \
    \            str = str.rbegin() + 1;\n            if(i + 2 < n && s[i + 2] ==\
    \ 'c' || s[i + 2] == 'C')\n                str = str.rbegin() + 1;\n        }\n\
    \        else\n            str += s[i];\n    }\n    return str;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvhj33cra.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpvhj33cra.cpp:20:34: error: no match for \u2018operator=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ > >\u2019)\n   20 |             str = str.rbegin() + 1;\n      |           \
    \                       ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpvhj33cra.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:669:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::operator=(const std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>]\u2019\n  669 |       operator=(const basic_string& __str)\n\
    \      |       ^~~~~~~~\n/usr/include/c++/9/bits/basic_string.h:669:37: note:\
    \   no known conversion for argument 1 from \u2018std::reverse_iterator<__gnu_cxx::__normal_iterator<char*,\
    \ std::__cxx11::basic_string<char> > >\u2019 to \u2018const std::__cxx11::basic_string<char>&\u2019\
    \n  669 |       operator=(const basic_string& __str)\n      |                \
    \ ~~~~~~~~~~~~~~~~~~~~^~~~~\n/usr/include/c++/9/bits/basic_string.h:708:7: note:\
    \ candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>& std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::operator=(const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>]\u2019\n  708 |       operator=(const _CharT"
  stdout: ''
  timestamp: 1660098253
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0) {\n        return \"0\";\n    }\n    string ans;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n    \
    \        if(ans.size() > 0) {\n                ans += 'a' - 'A';\n           \
    \ } else {\n                ans += 'A' - 'a';\n            }\n        } else {\n\
    \            ans += s[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmgcvsj0g.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpmgcvsj0g.cpp:19:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   19 |     string ans;\n      |     ^~~~~~\n/tmp/tmpmgcvsj0g.cpp:19:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmgcvsj0g.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpmgcvsj0g.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpmgcvsj0g.cpp:22:16: error: \u2018ans\u2019 was not declared in this scope;\
    \ did you mean \u2018abs\u2019?\n   22 |             if(ans.size() > 0) {\n  \
    \    |                ^~~\n      |                abs\n/tmp/tmpmgcvsj0g.cpp:28:13:\
    \ error: \u2018ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019\
    ?\n   28 |             ans += s[i];\n      |             ^~~\n      |        \
    \     abs\n/tmp/tmpmgcvsj0g.cpp:31:12: error: \u2018ans\u2019 was not declared\
    \ in this scope; did you mean \u2018abs\u2019?\n   31 |     return ans;\n    \
    \  |            ^~~\n      |            ab"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    bool is_lower = true, is_upper = true;\n    for(int i = 0; i<s.size(); i++){\n\
    \        if(s[i]<='a' && s[i]>='z'){\n            is_lower = false;\n        }\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            is_upper = false;\n        }\n\
    \    }\n    \n    if(is_lower){\n        for(int i = 0; i<s.size(); i++){\n  \
    \          if(s[i]>='a' && s[i]<='z'){\n                s[i] = s[i]-'a' + 'A';\n\
    \            }\n        }\n    }\n    if(is_upper){\n        for(int i = 0; i<s.size();\
    \ i++){\n            if(s[i]>='a' && s[i]<='z'){\n                s[i] = s[i]-'A'\
    \ + 'a';\n            }\n        }\n    }\n    \n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmplb2_93l9: /tmp/tmplb2_93l9.cpp:45: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::stack<char> st;\n    std::reverse(s.begin(), s.end());\n    for(char\
    \ c : s) {\n        if(c>=97 && c<=122)\n        {\n            int i = c-65;\n\
    \            if(st.top()>='a' && st.top()<='z')\n            {\n             \
    \   st.push(st.top() - i);\n            }\n            else\n            {\n \
    \               st.push(st.top() + i);\n            }\n        }\n        else\
    \ if(c>=65 && c<=90)\n        {\n            int i = c-32;\n            if(st.top()>='A'\
    \ && st.top()<='Z')\n            {\n                st.push(st.top() - i);\n \
    \           }\n            else\n            {\n                st.push(st.top()\
    \ + i);\n            }\n        }\n        else if(c>122 && c<97)\n        {\n\
    \            int i = c-97;\n            if(st.top()>='a' && st.top()<='z')\n \
    \           {\n                st.push(st.top() - i);\n            }\n       \
    \     else\n            {\n                st.push(st.top() + i);\n          \
    \  }\n        }\n        else\n        {\n            st.push(c);\n        }\n\
    \    }\n    return std::string(st.top(), st.top());\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    assert(s.size() != 0);\n    for(int i=0;i<s.size();i++){\n        if(s[i]\
    \ == 'a'){\n            if(s[i] =='b'){\n                s[i]='A';\n         \
    \   }else if(s[i] =='C'){\n                s[i]='C';\n            }\n        }else\
    \ if(s[i] == 'A'){\n            if(s[i] =='b'){\n                s[i]='a';\n \
    \           }else if(s[i] =='C'){\n                s[i]='C';\n            }\n\
    \        }else if(s[i] == 'c'){\n            if(s[i] =='b'){\n               \
    \ s[i]='a';\n            }else if(s[i] =='C'){\n                s[i]='b';\n  \
    \          }\n        }else if(s[i] == 'B'){\n            if(s[i] =='B'){\n  \
    \              s[i]='B';\n            }\n        }else if(s[i] == 'C'){\n    \
    \        if(s[i] =='C'){\n                s[i]='C';\n            }\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp433lm9zl: /tmp/tmp433lm9zl.cpp:50: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string answer = s;\n    // Write your code here\n    for (int i = 0;\
    \ i < answer.size(); i++) {\n        if (answer[i] == ' ') {\n            answer.erase(i,\
    \ 1);\n            i = answer.size() - 1;\n        }\n    }\n    for (int i =\
    \ 0; i < answer.size(); i++) {\n        if (answer[i] == ' ') {\n            answer.erase(i,\
    \ 1);\n            i = answer.size() - 1;\n        }\n    }\n    int i = 0;\n\
    \    while (i < answer.size()) {\n        switch (answer[i]) {\n        case 'a':\n\
    \            answer.at(i) = 'A';\n            break;\n        case 'b':\n    \
    \        answer.at(i) = 'B';\n            break;\n        case 'c':\n        \
    \    answer.at(i) = 'C';\n            break;\n        case 'd':\n            answer.at(i)\
    \ = 'D';\n            break;\n        case 'e':\n            answer.at(i) = 'E';\n\
    \            break;\n        case 'f':\n            answer.at(i) = 'F';\n    \
    \        break;\n        case 'g':\n            answer.at(i) = 'G';\n        \
    \    break;\n        case 'h':\n            answer.at(i) = 'H';\n            break;\n\
    \        case 'i':\n            answer.at(i) = 'I';\n            break;\n    \
    \    case 'j':\n            answer.at(i) = 'J';\n            break;\n        case\
    \ 'k':\n            answer.at(i) = 'K';\n            break;\n        case 'l':\n\
    \            answer.at(i) = 'L';\n            break;\n        case 'm':\n    \
    \        answer.at(i) = 'M';\n            break;\n        case 'n':\n        \
    \    answer.at(i) = 'N';\n            break;\n        case 'o':\n            answer.at(i)\
    \ = 'O';\n            break;\n        case 'p':\n            answer.at(i) = 'P';\n\
    \            break;\n        case 'q':\n            answer.at(i) = 'Q';\n    \
    \        break;\n        case 'r':\n            answer.at(i) = 'R';\n        \
    \    break;\n        case 's':\n            answer.at(i) = 'S';\n            break;\n\
    \        case 't':\n            answer.at(i) = 'T';\n            break;\n    \
    \    case 'u':\n            answer.at(i) = 'U';\n            break;\n        case\
    \ 'v':\n            answer.at(i) = 'V';\n            break;\n        case 'w':\n\
    \            answer.at(i) = 'W';\n            break;\n        case 'x':\n    \
    \        answer.at(i) = 'X';\n            break;\n        case 'y':\n        \
    \    answer.at(i) = 'Y';\n            break;\n        case 'z':\n            answer.at(i)\
    \ = 'Z';\n            break;\n        case 'A':\n            answer.at(i) = 'a';\n\
    \            break;\n        case 'B':\n            answer.at(i) = 'b';\n    \
    \        break;\n        case 'C':\n            answer.at(i) = 'c';\n        \
    \    break;\n        case 'D':\n            answer.at(i) = 'd';\n            break;\n\
    \        case 'E':\n            answer.at(i) = 'e';\n\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplsu9semf.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmplsu9semf.cpp:127:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  127 | int main() {\n      |            ^\n/tmp/tmplsu9semf.cpp:137:1:\
    \ error: expected \u2018}\u2019 at end of input\n  137 | }\n      | ^\n/tmp/tmplsu9semf.cpp:31:31:\
    \ note: to match this \u2018{\u2019\n   31 |     while (i < answer.size()) {\n\
    \      |                               ^\n/tmp/tmplsu9semf.cpp:137:1: error: expected\
    \ \u2018}\u2019 at end of input\n  137 | }\n      | ^\n/tmp/tmplsu9semf.cpp:15:34:\
    \ note: to match this \u2018{\u2019\n   15 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmplsu9semf.cpp:137:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n  137 |\
    \ }\n      | ^\n"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.length();\n    if (n<0){\n        assert(0);\n        return \"\
    fail\";\n    }\n    std::string ans = \"\";\n    for(int i = 0; i < n; i++){\n\
    \        char c = s[i];\n        if (c<'a' || c>'z'){\n            ans += c;\n\
    \        } else if (c>'Z'){\n            ans += c-'A';\n        } else {\n   \
    \         ans += c-'a';\n        }\n    }\n    if (ans.empty()){\n        ans\
    \ = \"fail\";\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpkwc5bgyi: /tmp/tmpkwc5bgyi.cpp:39: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  int n = s.size();\n  int mid = n/2;\n  std::string leftStr = s.substr(0, mid);\n\
    \  std::string rightStr = s.substr(mid, s.size());\n\n  std::string resStr = leftStr;\n\
    \  std::string tempStr;\n  bool flag = false;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s.at(i) == leftStr.at(i)) {\n      tempStr = leftStr;\n    \
    \  leftStr = rightStr;\n      rightStr = tempStr;\n      flag = true;\n    }\n\
    \  }\n\n  if (!flag)\n    resStr = rightStr;\n  else\n    resStr = leftStr;\n\n\
    \  return resStr;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  basic_string::at: __n (which is 2) >= this->size() (which is 2)\n"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.length();\n    if(n==0) return s;\n    \n    for(int i=0;i<n;i++)\
    \ {\n        if(s[i]>=97 && s[i]<=122) {\n            char c = s[i]-32;\n    \
    \        char t = s[i]+32;\n            s[i] = t;\n            s[i] = c;\n   \
    \     }\n    }\n    \n    for(int i=0;i<n-1;i++) {\n        char c = s[i];\n \
    \       s[i] = s[i+1];\n        s[i+1] = c;\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpooya92y1: /tmp/tmpooya92y1.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = \"#a@c\";\n    for (size_t i = 0; i < s.size(); i++) {\n\
    \        if (s[i] == '@') {\n            ans = ans + s[i];\n        } else if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n            ans = ans + s[i];\n        } else\
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            ans = ans + s[i];\n        }\
    \ else {\n            ans = ans + s[i];\n        }\n    }\n    ans = ans.substr(0,\
    \ ans.length()-1);\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp9t09dcjk: /tmp/tmp9t09dcjk.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i=0;i<s.size();i++) {\n        if(s[i]>=65\
    \ && s[i]<=90) {\n            res+=std::string(s[i]-65,s[i]+64);\n        } else\
    \ if(s[i]>=97 && s[i]<=122){\n            res+=std::string(s[i]-90,s[i]+96);\n\
    \        } else {\n            res+=s[i];\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpaa51vitn: /tmp/tmpaa51vitn.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i=0;i<s.size();++i) {\n        if(isalpha(s[i])) {\n            if(isupper(s[i]))\
    \ s[i] = toupper(s[i]);\n            else s[i] = tolower(s[i]);\n        }\n \
    \   }\n    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmph7vyujx8: /tmp/tmph7vyujx8.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    for(int i=0;i<s.length();i++){\n        if(s[i]>=65&&s[i]<=90){\n\
    \            s[i] = s[i]+32;\n        }\n        else if(s[i]>=97&&s[i]<=122){\n\
    \            s[i] = s[i]-32;\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpaqco28sn: /tmp/tmpaqco28sn.cpp:30: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.empty()) {\n        return s;\n    }\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (toupper(s[i]) != s[i]) {\n            return s.substr(0,\
    \ i) + toupper(s[i]) + s.substr(i);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprooa05qz.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmprooa05qz.cpp:21:35: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::__cxx11::basic_string<char>\u2019 and \u2018int\u2019)\n\
    \   21 |             return s.substr(0, i) + toupper(s[i]) + s.substr(i);\n  \
    \    |                    ~~~~~~~~~~~~~~ ^ ~~~~~~~~~~~~~\n      |            \
    \                |               |\n      |                            |     \
    \          int\n      |                            std::__cxx11::basic_string<char>\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprooa05qz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmprooa05qz.cpp:21:49:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   21 |             return s.substr(0, i) + toupper(s[i])\
    \ + s.substr(i);\n      |                                                 ^\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprooa05qz.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterato"
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len = s.length();\n    for (int i = 0; i < len; i++)\n    {\n       \
    \ if (std::isalpha(s[i]))\n        {\n            s[i] = ((s[i] == ('a' || 'A'))\
    \ ? ('b' || 'B') : ('c' || 'C'));\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmptv9c_1_0: /tmp/tmptv9c_1_0.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098253
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    size_t n = s.size();\n    for (size_t i = 0; i\
    \ < n; i++) {\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            ans.replace(i,\
    \ 1, s[i] - 'a' + 'A');\n        }\n        else if(s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            ans.replace(i, 1, s[i] - 'A' + 'a');\n        }\n        else\
    \ ans.replace(i, 1, s[i]);\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjk6wzf3s.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpjk6wzf3s.cpp:20:47: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::replace(size_t&, int, int)\u2019\n   20 |  \
    \           ans.replace(i, 1, s[i] - 'a' + 'A');\n      |                    \
    \                           ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpjk6wzf3s.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::replace(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019 <near match>\n 1965 |       replace(size_type __pos,\
    \ size_type __n1, const _CharT* __s)\n      |       ^~~~~~~\n/usr/include/c++/9/bits/basic_string.h:1965:7:\
    \ note:   conversion of argument 3 would be ill-formed:\n/tmp/tmpjk6wzf3s.cpp:20:42:\
    \ error: invalid conversion from \u2018int\u2019 to \u2018const char*\u2019 [-fpermissive]\n\
    \   20 |             ans.replace(i, 1, s[i] - 'a' + 'A');\nIn file included from\
    \ /usr/include/c++/9/string:55,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \             "
  stdout: ''
  timestamp: 1660098253
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.length() == 0){\n        return \"No letter found\";\n    }\n    int\
    \ lower = 0, upper = s.length() - 1;\n    while(lower < upper){\n        if(s[lower]\
    \ >= 'a' && s[lower] <= 'z'){\n            s[lower] = s[lower] ^ 32;\n       \
    \ }\n        if(s[upper] >= 'a' && s[upper] <= 'z'){\n            s[upper] = s[upper]\
    \ ^ 32;\n        }\n        if(s[upper] >= 'A' && s[upper] <= 'Z'){\n        \
    \    s[upper] = s[upper] ^ 32;\n        }\n        if(s[lower] >= 'a' && s[lower]\
    \ <= 'z'){\n            s[lower] = s[lower] ^ 32;\n        }\n        lower++;\n\
    \        upper--;\n    }\n    return s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpkssamt2g: /tmp/tmpkssamt2g.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    if (n == 0) {\n        return s;\n    }\n    std::string\
    \ result;\n    if (s.front() >= 'a' && s.front() <= 'z') {\n        for (int i\
    \ = 1; i < n; i++) {\n            char temp = s[i];\n            s[i] = s[n -\
    \ i - 1];\n            s[n - i - 1] = temp;\n        }\n    } else if (s.front()\
    \ >= 'A' && s.front() <= 'Z') {\n        for (int i = 1; i < n; i++) {\n     \
    \       char temp = s[i];\n            s[i] = s[n - i - 1];\n            s[n -\
    \ i - 1] = temp;\n        }\n    }\n    else {\n        for (int i = 1; i < n;\
    \ i++) {\n            char temp = s[i];\n            s[i] = s[n - i - 1];\n  \
    \          s[n - i - 1] = temp;\n        }\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_78zqoi5: /tmp/tmp_78zqoi5.cpp:45: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0)\n        return s;\n    \n    for(auto i : s)\n    {\n\
    \        if(i == '@')\n            s = \"@\";\n        else if(isalpha(i))\n \
    \           i = toupper(i);\n        else if(isupper(i))\n            i = tolower(i);\n\
    \        \n        s = s + i;\n    }\n    \n    return s;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpg9a29aak: /tmp/tmpg9a29aak.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    int m = s.size();\n    int start = 0;\n    std::string\
    \ ans;\n    for(int i = 0; i < n; i++) {\n        if(s[i] == ' ') {\n        \
    \    int j = i;\n            while(j > 0 && s[j-1] == ' ') {\n               \
    \ j--;\n            }\n            start = j;\n        }\n        else if(s[i]\
    \ == '@' || s[i] == '#') {\n            int j = i;\n            while(j < n &&\
    \ s[j] == ' ') {\n                j++;\n            }\n            if(j == n)\
    \ {\n                ans.push_back(s[i]);\n            }\n            else {\n\
    \                ans.push_back((char)(s[0] + 32));\n            }\n          \
    \  for(int k = j+1; k < n; k++) {\n                if(s[k] == ' ') {\n       \
    \             int l = k;\n                    while(l > 0 && s[l-1] == ' ') {\n\
    \                        l--;\n                    }\n                    ans.push_back((char)(s[k]\
    \ + 32));\n                }\n                else {\n                    ans.push_back(s[k]);\n\
    \                }\n            }\n            break;\n        }\n    }\n    for(int\
    \ k = start; k < m; k++) {\n        if(s[k] == ' ') {\n            int l = k;\n\
    \            while(l > 0 && s[l-1] == ' ') {\n                l--;\n         \
    \   }\n            ans.push_back((char)(s[k] + 32));\n        }\n        else\
    \ {\n            ans.push_back(s[k]);\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjy6q8b0u: /tmp/tmpjy6q8b0u.cpp:70: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Write your code here\n    // return s;\n    for(int i=0;i<s.length();i++){\n\
    \        if(s[i]>='A'&&s[i]<='Z'){\n            s[i] = s[i]+1;\n            s[i]\
    \ = s[i]>='A'?s[i]-'A'+1:s[i];\n        }\n        if(s[i]>='a'&&s[i]<='z'){\n\
    \            s[i] = s[i]-1;\n            s[i] = s[i]>='a'?s[i]+'A':s[i];\n   \
    \     }\n        if(s[i]=='@'){\n            s[i] = s[i]-1;\n            s[i]\
    \ = s[i]>='a'?s[i]+'A':s[i];\n        }\n        if(s[i]=='#'){\n            s[i]\
    \ = s[i]+1;\n            s[i] = s[i]>='a'?s[i]-'A'+1:s[i];\n        }\n    }\n\
    \    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnpc6fcgr: /tmp/tmpnpc6fcgr.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    // Write your code here\n    s.clear();\n    s.reserve(s.size());\n\
    \    for (unsigned int i = 0; i < s.size(); i++) {\n        if (isprint(s[i])\
    \ || (s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122))\n            s\
    \ += s[i];\n        else\n            s += 'A';\n    }\n    res.assign( s);\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpku2egc8r: /tmp/tmpku2egc8r.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    if (s.size() == 0) return s;\n    \n    bool flag = true;\n    for(int\
    \ i=0;i<s.size();i++) {\n        flag = false;\n        for(int j=0;j<s.size();j++)\
    \ {\n            if (s[i] == s[j]){\n                flag = true;\n          \
    \  }\n        }\n        if(flag) {\n            s[i] = toupper(s[i]);\n     \
    \   }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpoi07cvj2: /tmp/tmpoi07cvj2.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  \n    std::stack<char> st;\n    st.push('\\0');\n    // std::stack<char> st;\n\
    \    int i = 0;\n    for (; i < s.size(); i++) {\n        \n        if(s[i] >=\
    \ 'a' && s[i] <= 'z'){\n            st.push(s[i]);\n        }\n        else if(s[i]\
    \ >= 'A' && s[i] <= 'Z'){\n            st.push(s[i]);\n        }\n        else{\n\
    \            if(st.empty()){\n                st.push('\\0');\n            }\n\
    \            else{\n                st.push(std::toupper(st.top()));\n       \
    \         st.pop();\n                st.push(std::tolower(st.top()));\n      \
    \          st.pop();\n                st.push('\\0');\n            }\n       \
    \ }\n    }\n    return st.top();\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmiif1p4v.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpmiif1p4v.cpp:42:18: error: could not convert \u2018st.std::stack<char>::top()\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} to \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    }\n   42 |     return st.top();\n      |            ~~~~~~^~\n      |        \
    \          |\n      |                  __gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}\n"
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  assert(s.size() >= 1 && s.size() <= 4);\n  std::string result = \"NOTHING\"\
    ;\n  for (int i = 0; i < s.size(); i++) {\n    if (islower(s[i])) {\n      result\
    \ += toupper(s[i]);\n    } else if (isupper(s[i])) {\n      result += tolower(s[i]);\n\
    \    } else {\n      result += s[i];\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpjteu718l: /tmp/tmpjteu718l.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    int n = s.size();\n    int counter = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        if (s[i] == '#') {\n            counter++;\n \
    \       }\n    }\n    if (counter == 2) {\n        std::cout << s << std::endl;\n\
    \    }\n    else {\n        std::reverse(s.begin(), s.end());\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpv2jz9t_0: /tmp/tmpv2jz9t_0.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098254
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int l = s.length();\n    if(l > 0)\n    {\n        for(int i=0; i<l; i++)\n\
    \        {\n            if(s[i] >= 'a' && s[i] <= 'z')\n            {\n      \
    \          char temp = s[i];\n                s[i] = s[l-1];\n               \
    \ s[l-1] = temp;\n            }\n            else if(s[i] >= 'A' && s[i] <= 'Z')\n\
    \            {\n                char temp = s[i];\n                s[i] = s[l-i-1];\n\
    \                s[l-i-1] = temp;\n            }\n            else\n         \
    \   {\n                s[i] = s[i];\n            }\n        }\n    }\n    std::string\
    \ ret = s;\n    return ret;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpfzkppn1e: /tmp/tmpfzkppn1e.cpp:44: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i] >= 65 && s[i] <= 90){\n   \
    \         s[i] = std::toupper(s[i]);\n        }\n        else if(s[i] >= 97 &&\
    \ s[i] <= 122){\n            s[i] = std::tolower(s[i]);\n        }\n        else{\n\
    \            s[i] = s[i];\n        }\n    }\n    return s;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpegr_r4df: /tmp/tmpegr_r4df.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len = s.length();\n    int i,j;\n    bool flag;\n    std::string res;\n\
    \    for(i=0;i<len;i++){\n        if(s[i]<='z' && s[i]>='a'){\n            flag=true;\n\
    \            for(j=i+1;j<len;j++){\n                if(s[j]>='z' && s[j]<='a'){\n\
    \                    flag=false;\n                    res+=s[j];\n           \
    \     }\n            }\n            if(flag){\n                res+=s[i];\n  \
    \          }\n        }else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp9vbe_o06: /tmp/tmp9vbe_o06.cpp:40: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  \n  assert(s.size() > 0);\n  \n  std::stack<char> st;\n  std::string res;\n\
    \  \n  for(int i = 0; i <= s.size(); i++) {\n    if(s[i] == '\\0') {\n      \n\
    \      while(!st.empty()) {\n        res += st.top();\n        st.pop();\n   \
    \   }\n      return res;\n    }\n    if(isalpha(s[i])) {\n      char temp = s[i];\n\
    \      s[i] = toupper(s[i]);\n      st.pop();\n      st.push(temp);\n    }\n \
    \ }\n  \n  while(!st.empty()) {\n    res += st.top();\n    st.pop();\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    for(std::string::iterator it = s.begin(); it != s.end();\
    \ ++it) {\n        if((*it) >= 'a' && (*it) <= 'z' ||\n           (*it) >= 'A'\
    \ && (*it) <= 'Z') {\n            std::swap(*it,(*it+32));\n        }\n    }\n\
    \    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc3m6_wlf.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpc3m6_wlf.cpp:20:35: error: no matching function for call to \u2018\
    swap(char&, int)\u2019\n   20 |             std::swap(*it,(*it+32));\n      |\
    \                                   ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc3m6_wlf.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpc3m6_wlf.cpp:20:35: note:   deduced conflicting types for parameter\
    \ \u2018_Tp\u2019 (\u2018char\u2019 and \u2018int\u2019)\n   20 |            \
    \ std::swap(*it,(*it+32));\n      |                                   ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_pair.h:59,\n                 from\
    \ /usr/include/c++/9/bits/stl_algobase.h:64,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc3m6_wlf.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:205:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpc3m6_wlf.cpp:20:35:\
    \ note:   mismatched types \u2018_Tp [_Nm]\u2019 and \u2018char\u2019\n   20 |\
    \      "
  stdout: ''
  timestamp: 1660098255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    std::string s1(s);\n    for(int i = 0; i<s1.size(); i++){\n\
    \        if(isalpha(s1[i])){\n            int k = i;\n            while(k >=0){\n\
    \                if(isupper(s1[k])){\n                    s1[k] = toupper(s1[k]);\n\
    \                }\n                else if(islower(s1[k])){\n               \
    \     s1[k] = tolower(s1[k]);\n                }\n                k--;\n     \
    \       }\n        }\n    }\n    return s1;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp3xtfxqe7: /tmp/tmp3xtfxqe7.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    string t = \"\";\n    int count = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            t += s[i] - 'a'\
    \ + 'A';\n            count++;\n        } else if (s[i] >= 'A' && s[i] <= 'Z')\
    \ {\n            t += s[i] - 'A' + 'a';\n            count++;\n        } else\
    \ {\n            t += s[i];\n            count++;\n        }\n    }\n    \n  \
    \  if (count == 0) {\n        return t;\n    } else {\n        return t;\n   \
    \ }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn87lqph5.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpn87lqph5.cpp:17:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   17 |     string t = \"\";\n      |     ^~~~~~\n/tmp/tmpn87lqph5.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpn87lqph5.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpn87lqph5.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpn87lqph5.cpp:21:13: error: \u2018t\u2019 was not declared in this scope\n\
    \   21 |             t += s[i] - 'a' + 'A';\n      |             ^\n/tmp/tmpn87lqph5.cpp:24:13:\
    \ error: \u2018t\u2019 was not declared in this scope\n   24 |             t +=\
    \ s[i] - 'A' + 'a';\n      |             ^\n/tmp/tmpn87lqph5.cpp:27:13: error:\
    \ \u2018t\u2019 was not declared in this scope\n   27 |             t += s[i];\n\
    \      |             ^\n/tmp/tmpn87lqph5.cpp:33:16: error: \u2018t\u2019 was not\
    \ declared in this scope\n   33 |         return t;\n      |                ^\n\
    /tmp/tmpn87lqp"
  stdout: ''
  timestamp: 1660098255
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    if(s.size() == 0 || s.empty()) return s;\n    auto\
    \ begin = s.begin(), end = s.end(), it;\n    for(it = begin; it != end && isalpha(*it);\
    \ it++) {\n        if(islower(*it)) std::swap(*it, *--end);\n        if(isupper(*it))\
    \ std::swap(*it, *++begin);\n    }\n    return std::string(begin, end);\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0oludsx7.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp0oludsx7.cpp:18:5: error: declaration of \u2018auto it\u2019 has no\
    \ initializer\n   18 |     auto begin = s.begin(), end = s.end(), it;\n      |\
    \     ^~~~\n"
  stdout: ''
  timestamp: 1660098255
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    string ans = \"\";\n    for (auto &c: s) {\n        if\
    \ (std::isalpha(c)) {\n            ans += std::toupper(c);\n        } else {\n\
    \            ans += c;\n        }\n    }\n    return ans;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2pgfracc.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp2pgfracc.cpp:17:5: error: \u2018string\u2019 was not declared in this\
    \ scope\n   17 |     string ans = \"\";\n      |     ^~~~~~\n/tmp/tmp2pgfracc.cpp:17:5:\
    \ note: suggested alternatives:\nIn file included from /usr/include/c++/9/iosfwd:39,\n\
    \                 from /usr/include/c++/9/ios:38,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2pgfracc.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33: note:  \
    \ \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n \
    \     |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmp2pgfracc.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmp2pgfracc.cpp:20:13: error: \u2018ans\u2019 was not declared in this scope;\
    \ did you mean \u2018abs\u2019?\n   20 |             ans += std::toupper(c);\n\
    \      |             ^~~\n      |             abs\n/tmp/tmp2pgfracc.cpp:22:13:\
    \ error: \u2018ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019\
    ?\n   22 |             ans += c;\n      |             ^~~\n      |           \
    \  abs\n/tmp/tmp2pgfracc.cpp:25:12: error: \u2018ans\u2019 was not declared in\
    \ this scope; did you mean \u2018abs\u2019?\n   25 |     return ans;\n      |\
    \            ^~~\n      |            abs"
  stdout: ''
  timestamp: 1660098255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    assert(s.length() > 0);\n\tstd::string res;\n\t\n\tfor (int i = 0; i < s.length();\
    \ i++) {\n\t\tchar c = s[i];\n\t\tif (isalpha(c)) {\n\t\t\tstd::string temp;\n\
    \t\t\tfor (int j = 0; j < i; j++) {\n\t\t\t\tif (j == i || (isalpha(s[j] && islower(s[j])))\
    \ || (isalpha(s[j] && !islower(s[j]))) ) {\n\t\t\t\t\ttemp.push_back(c);\n\t\t\
    \t\t\ti = j;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tres = temp + res;\n\t\
    \t} else {\n\t\t\tres = c + res;\n\t\t}\n\t}\n\t\n\tfor (int i = 0; i < res.length();\
    \ i++) {\n\t\tif (isalpha(res[i])) {\n\t\t\tfor (int j = 0; j < i; j++) {\n\t\t\
    \t\tif (j == i || (isalpha(res[j]) && isupper(res[j]))\n\t\t\t\t\t\t|| (isalpha(res[j])\
    \ && !isupper(res[j]))) {\n\t\t\t\t\tres[i] = res[j];\n\t\t\t\t\ti = j;\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpkfmom65g: /tmp/tmpkfmom65g.cpp:53: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code here\n    int n = s.size();\n    for(int i = 0;i < n;i++)\
    \ {\n        char c = s[i];\n        if((c >= 'a' && c <= 'z') || (c >= 'A' &&\
    \ c <= 'Z'))\n            s[i] = c - 'a' + 'A' ;\n        else \n            s[i]\
    \ = c;\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n \
    \   assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp5hb4n73x: /tmp/tmp5hb4n73x.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::stack<char> st;\n    for (char c: s) {\n        switch (c) {\n     \
    \   case 'a':\n        case 'A':\n            st.push('a');\n            break;\n\
    \        case 'b':\n        case 'B':\n            st.push('B');\n           \
    \ break;\n        case 'c':\n        case 'C':\n            st.push('C');\n  \
    \          break;\n        case 'd':\n        case 'D':\n            st.push('D');\n\
    \            break;\n        case 'e':\n        case 'E':\n            st.push('E');\n\
    \            break;\n        case 'f':\n        case 'F':\n            st.push('F');\n\
    \            break;\n        case 'g':\n        case 'G':\n            st.push('G');\n\
    \            break;\n        case 'h':\n        case 'H':\n            st.push('H');\n\
    \            break;\n        case 'i':\n        case 'I':\n            st.push('I');\n\
    \            break;\n        case 'j':\n        case 'J':\n            st.push('J');\n\
    \            break;\n        case 'k':\n        case 'K':\n            st.push('K');\n\
    \            break;\n        case 'l':\n        case 'L':\n            st.push('L');\n\
    \            break;\n        case 'm':\n        case 'M':\n            st.push('m');\n\
    \            break;\n        case 'n':\n        case 'N':\n            st.push('N');\n\
    \            break;\n        case 'o':\n        case 'O':\n            st.push('O');\n\
    \            break;\n        case 'p':\n        case 'P':\n            st.push('P');\n\
    \            break;\n        case 'q':\n        case 'Q':\n            st.push('Q');\n\
    \            break;\n        case 'r':\n        case 'R':\n            st.push('R');\n\
    \            break;\n        case 's':\n        case 'S':\n            st.push('S');\n\
    \            break;\n        case 't':\n        case 'T':\n            st.push('T');\n\
    \            break;\n        case 'u':\n        case 'U':\n            st.push('U');\n\
    \            break;\n        case 'v':\n        case 'V':\n            st.push('V');\n\
    \            break;\n        case 'w':\n        case 'W':\n            st.push('W');\n\
    \            break;\n        case 'x':\n        case 'X':\n            st.push('X');\n\
    \            break;\n        case 'y':\n        case 'Y':\n            st.push('Y');\n\
    \            break;\n        case 'z':\n        case 'Z':\n            st.push('Z');\n\
    \            break;\n        default:\n            st.push(c);\n            break;\n\
    \        }\n    }\n    if (st.size() == 0) {\n        return s;\n    }\n    for\
    \ (char c: st) {\n        switch (c) {\n        case 'a':\n        case 'A':\n\
    \            std::swap(s.at(0), s.at(s.size()-1));\n            break;\n     \
    \   case 'b':\n        case 'B':\n            std::swap(s.at(0), s.at(s.size()-1));\n\
    \            break;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqc7as19k.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpqc7as19k.cpp:131:18: error: no matching function for call to \u2018\
    begin(std::stack<char>&)\u2019\n  131 |     for (char c: st) {\n      |      \
    \            ^~\nIn file included from /usr/include/c++/9/bits/range_access.h:36,\n\
    \                 from /usr/include/c++/9/string:54,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpqc7as19k.cpp:2:\n/usr/include/c++/9/initializer_list:89:5: note: candidate:\
    \ \u2018template<class _Tp> constexpr const _Tp* std::begin(std::initializer_list<_Tp>)\u2019\
    \n   89 |     begin(initializer_list<_Tp> __ils) noexcept\n      |     ^~~~~\n\
    /usr/include/c++/9/initializer_list:89:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpqc7as19k.cpp:131:18: note:   \u2018std::stack<char>\u2019 is\
    \ not derived from \u2018std::initializer_list<_Tp>\u2019\n  131 |     for (char\
    \ c: st) {\n      |                  ^~\nIn file included from /usr/include/c++/9/string:54,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpqc7as19k.cpp:2:\n/usr/include/c++/9/bits/range_access.h:48:5:\
    \ note: candidate: \u2018template<class _Container> constexpr decltype (__cont.begin())\
    \ std::b"
  stdout: ''
  timestamp: 1660098255
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    \n    for(int i = 0; i < n; i++){\n        char c\
    \ = s[i];\n        if(isalpha(c)){\n            \n            if(isupper(c)){\n\
    \                s[i] = toupper(s[i]);\n            }else{\n                s[i]\
    \ = tolower(s[i]);\n            }\n            \n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnq7ocwwv: /tmp/tmpnq7ocwwv.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])){\n     \
    \       if(isupper(s[i])){\n                s[i] = tolower(s[i]);\n          \
    \  }\n            else{\n                s[i] = toupper(s[i]);\n            }\n\
    \        }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpd5nebeya: /tmp/tmpd5nebeya.cpp:31: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i=0;i<s.size();i++) {\n        if (s[i]>='a' && s[i]<='z') {\n  \
    \          s[i] = s[i]-'a'+('A'-'a');\n        }\n        else if (s[i]>='A' &&\
    \ s[i]<='Z') {\n            s[i] = s[i]-'A'+('A'-'A');\n        }\n        else\
    \ if (s[i]>='0' && s[i]<='9') {\n            s[i] = s[i]-'0'+('9'-'0');\n    \
    \    }\n    }\n    \n    std::string res;\n    for (int i=0;i<s.size();i++) {\n\
    \        if(res==\"\") {\n            res = s[i];\n        }\n        else if(s[i]>='a'\
    \ && s[i]<='z') {\n            res = res + s[i];\n        }\n        else if (s[i]>='A'\
    \ && s[i]<='Z') {\n            res = res + s[i];\n        }\n        else if (s[i]>='0'\
    \ && s[i]<='9') {\n            res = res + s[i];\n        }\n    }\n    \n   \
    \ return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpv8crb59c: /tmp/tmpv8crb59c.cpp:48: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    std::string ans = \"\";\n    for(int i = 0; i < n;\
    \ i++){\n        if(isalpha(s[i]) || isdigit(s[i]) || s[i] == '_'){\n        \
    \    for(int j = i-1; j >= 0; j--){\n                char c = s[j];\n        \
    \        ans += c;\n            }\n            i = i + 1;\n        }else{\n  \
    \          ans += s[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmph7in87y0: /tmp/tmph7in87y0.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0)\n        return s;\n    \n    std::string news = s;\n \
    \   for(std::string::iterator it = news.begin(); it != news.end(); it++) {\n \
    \       if(isalpha(*it)) {\n            std::string new_s = s;\n            for(std::string::iterator\
    \ it2 = new_s.begin(); it2 != new_s.end(); it2++) {\n                if(isalpha(*it2))\
    \ {\n                    *it2 = toupper(*it2);\n                }\n          \
    \  }\n            news = news + new_s;\n        }\n    }\n    news = news + s;\n\
    \    return news;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    assert(!s.empty());\n    \n    std::string t;\n    for(int i = 0; i < (int)s.length();\
    \ i++){\n        if(isalpha(s[i])){\n            t += toupper(s[i]);\n       \
    \ } else {\n            t += s[i];\n        }\n    }\n    \n    return t;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpbu_z2oyv: /tmp/tmpbu_z2oyv.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len=s.length();\n    std::string ret=s;\n    if(len==0){\n        return\
    \ s;\n    }\n    for(auto &c:ret){\n        if(isalpha(c)){\n            c=toupper(c);\n\
    \            c=tolower(c);\n        }\n    }\n    return ret;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpy7yrr21a: /tmp/tmpy7yrr21a.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == tolower(s[i])) {\n\
    \      s[i] = toupper(s[i]);\n    } else if (s[i] == toupper(s[i])) {\n      s[i]\
    \ = tolower(s[i]);\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp5x2gicg5: /tmp/tmp5x2gicg5.cpp:28: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string newString=\"\";\n    int counter=0;\n    for (int i=0; i<s.length();\
    \ i++){\n        if (s[i]>=65 && s[i]<=90){\n            counter ++;\n       \
    \     int newNum = s[i]-65;\n            char newChar = (char)newNum;\n      \
    \      newString += newChar;\n        }\n        else{\n            newString\
    \ += s[i];\n        }\n    }\n    if (counter==0){\n        newString += s[0];\n\
    \    }\n    return newString;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp0if251or: /tmp/tmp0if251or.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code in C# here\n    std::string newS = \"\";\n    for(int\
    \ i = 0; i < s.length(); i++){\n        if(std::isalpha(s[i])){\n            if(std::toupper(s[i])\
    \ >= 'A' && std::toupper(s[i]) <= 'Z'){\n                s[i] = std::toupper(s[i]);\n\
    \            }else{\n                s[i] = std::tolower(s[i]);\n            }\n\
    \        }else{\n            newS += s[i];\n        }\n    }\n    return newS;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7jv2sff_: /tmp/tmp7jv2sff_.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  for(auto &x : s)\n    {\n      if(islower(x))\n      {\n        if(!isupper(x))\n\
    \        {\n          x=toupper(x);\n        }\n        else\n        {\n    \
    \      x=tolower(x);\n        }\n      }\n      else\n      {\n        if(isupper(x))\n\
    \        {\n          if(!islower(x))\n          {\n            x=tolower(x);\n\
    \          }\n          else\n          {\n            x=toupper(x);\n       \
    \   }\n        }\n        else\n        {\n          x=x;\n        }\n      }\n\
    \    }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpds54aeyq: /tmp/tmpds54aeyq.cpp:53: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    stack<char> st;\n    int n = s.size();\n    for(int i = 0; i < n; i++) {\n\
    \        if(s[i] >= 'A' && s[i] <= 'Z') {\n            st.push(s[i]);\n      \
    \  }\n        if(s[i] >= 'a' && s[i] <= 'z') {\n            st.push(s[i]);\n \
    \       }\n    }\n    st.push('\\0');\n    std::string res = \"\";\n    while(!st.empty())\
    \ {\n        char a = st.top();\n        st.pop();\n        if(a<='Z' && a >='a'){\n\
    \            res.insert(res.end(), a);\n        }\n        else if(a>='z' && a<='A'){\n\
    \            res.insert(res.end(), a+'A'-'a');\n        }\n        else{\n   \
    \         res.insert(res.end(), a);\n        }\n    }\n    return res;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp95fks50a.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp95fks50a.cpp:16:5: error: \u2018stack\u2019 was not declared in this\
    \ scope; did you mean \u2018std::stack\u2019?\n   16 |     stack<char> st;\n \
    \     |     ^~~~~\n      |     std::stack\nIn file included from /usr/include/c++/9/stack:61,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:89,\n\
    \                 from /tmp/tmp95fks50a.cpp:2:\n/usr/include/c++/9/bits/stl_stack.h:99:11:\
    \ note: \u2018std::stack\u2019 declared here\n   99 |     class stack\n      |\
    \           ^~~~~\n/tmp/tmp95fks50a.cpp:16:11: error: expected primary-expression\
    \ before \u2018char\u2019\n   16 |     stack<char> st;\n      |           ^~~~\n\
    /tmp/tmp95fks50a.cpp:20:13: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018s\u2019?\n   20 |             st.push(s[i]);\n      |   \
    \          ^~\n      |             s\n/tmp/tmp95fks50a.cpp:23:13: error: \u2018\
    st\u2019 was not declared in this scope; did you mean \u2018s\u2019?\n   23 |\
    \             st.push(s[i]);\n      |             ^~\n      |             s\n\
    /tmp/tmp95fks50a.cpp:26:5: error: \u2018st\u2019 was not declared in this scope;\
    \ did you mean \u2018s\u2019?\n   26 |     st.push('\\0');\n      |     ^~\n \
    \     |     s\n"
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    assert(!s.empty());\n    std::stack<char> st;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            st.push(s[i]);\n\
    \        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            st.push(s[i]);\n\
    \        } else {\n            s[i] = toupper(s[i]);\n            st.push(s[i]);\n\
    \        }\n    }\n    return std::string(st.top(), st.pop());\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpapfz1dq2.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpapfz1dq2.cpp:28:42: error: invalid use of void expression\n   28 |\
    \     return std::string(st.top(), st.pop());\n      |                       \
    \                   ^\n"
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::string ans(s);\n    \n    for (int i = 0; i < s.size(); ++i) {\n\
    \        if (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n        }\
    \ else {\n            ans[i] = s[i];\n        }\n    }\n    \n    for (int i =\
    \ 0; i < s.size(); ++i) {\n        if (isalpha(s[i])) {\n            ans[i] =\
    \ tolower(ans[i]);\n        }\n    }\n\n    return ans;\n}\nint main() {\n   \
    \ auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmphjeznefj: /tmp/tmphjeznefj.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(size_t i = 0; i < (s.size() - 1); ++i){\n        if(!isalpha(s[i])){\n\
    \            for(size_t j = i; j < s.size(); ++j){ \n                std::swap(s[j],\
    \ s[j]);\n            }\n        }\n        else if(i + 1 == s.size()){\n    \
    \        for(size_t j = i; j < s.size(); ++j){ \n                std::swap(s[j],\
    \ s[j]);\n            }\n        }\n    }\n    return s;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpnp5nq0su: /tmp/tmpnp5nq0su.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  assert(s.size() > 0 && \"The input string is empty!\");\n  \n  if (s.size()\
    \ == 0) {\n    return s;\n  }\n\n  std::stack<bool> isReverse;\n  \n  for (auto\
    \ i : s) {\n    if (isReverse.empty()) {\n      isReverse.push(false);\n    }\n\
    \    if (isReverse.top() && std::isalpha(i)) {\n      isReverse.push(true);\n\
    \    }\n    if (isReverse.top() && !std::isalpha(i)) {\n      isReverse.push(true);\n\
    \    }\n    if (isReverse.top() && std::isalpha(i)) {\n      isReverse.pop();\n\
    \    }\n  }\n\n  if (isReverse.empty()) {\n    return s;\n  }\n\n  auto reversed\
    \ = s;\n  while (isReverse.top()) {\n    reversed.push_back(reversed.back());\n\
    \    isReverse.pop();\n  }\n\n  return reversed;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp6iff5ryv: /tmp/tmp6iff5ryv.cpp:53: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // your code goes here\n    if(!s || s.empty()) return \"\";\n    std::stack<char>\
    \ st;\n    for(auto c : s) {\n        if(isalpha(c)) st.push(c);\n        else\
    \ st.push(std::toupper(c));\n    }\n    std::string res = \"\";\n    while(!st.empty())\
    \ {\n        res += st.top();\n        st.pop();\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbtxzgzda.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpbtxzgzda.cpp:17:8: error: no match for \u2018operator!\u2019 (operand\
    \ type is \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    })\n   17 |     if(!s || s.empty()) return \"\";\n      |        ^~\n/tmp/tmpbtxzgzda.cpp:17:8:\
    \ note: candidate: \u2018operator!(bool)\u2019 <built-in>\n/tmp/tmpbtxzgzda.cpp:17:8:\
    \ note:   no known conversion for argument 1 from \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018bool\u2019\n"
  stdout: ''
  timestamp: 1660098256
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    size_t len = s.size();\n    std::string ans = \"\";\n    // You have to loop\
    \ over all possible cases and \n    // append the correct character to the answer\n\
    \    for (size_t i = 0; i < len; ++i) {\n        char c = s[i];\n        char\
    \ c = toupper(c);\n        c = tolower(c);\n        if (c != s[i] && c != tolower(s[i])\
    \ && c != toupper(s[i])) {\n            ans += c;\n        }\n        ans += s[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphdpk6_r0.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmphdpk6_r0.cpp:22:14: error: redeclaration of \u2018char c\u2019\n  \
    \ 22 |         char c = toupper(c);\n      |              ^\n/tmp/tmphdpk6_r0.cpp:21:14:\
    \ note: \u2018char c\u2019 previously declared here\n   21 |         char c =\
    \ s[i];\n      |              ^\n"
  stdout: ''
  timestamp: 1660098256
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    std::string ans;\n    for(size_t i=0; i<n; i++)\n\
    \    {\n        char c = s[i];\n        if(c>=97&&c<=122)\n        {\n       \
    \     int tmp = c-32;\n            ans += (tmp<10?('0'+tmp):('a'+tmp-10));\n \
    \       }\n        else\n            ans += s[i];\n    }\n    \n    if(ans.size()==0)\n\
    \        ans=ans.substr(1);\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp68u561gz: /tmp/tmp68u561gz.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for (size_t i = 0; i < s.size(); i++) {\n        if\
    \ (std::isalpha(s[i]) && (s[i] != ' ')) {\n            std::swap(s[i], s[i + 1]);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp3ti7j3cc: /tmp/tmp3ti7j3cc.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.empty()) {\n        return \"\";\n    }\n    int count = 0;\n    for\
    \ (int i = 0; i < s.size(); i++) {\n        if (s[i] == s[0]) {\n            count\
    \ = count + 1;\n        }\n        if (s[i] == s[1]) {\n            count = count\
    \ + 1;\n        }\n        if (s[i] == s[2]) {\n            count = count + 1;\n\
    \        }\n        if (s[i] == s[3]) {\n            count = count + 1;\n    \
    \    }\n        if (s[i] == s[4]) {\n            count = count + 1;\n        }\n\
    \    }\n    std::string res = \"\";\n    if (count % 2 != 0) {\n        res =\
    \ s[0] + s[1] + s[2] + s[3] + s[4];\n    } else {\n        res = s[0] + s[1] +\
    \ s[2] + s[3] + s[4];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp2z1rt2id: /tmp/tmp2z1rt2id.cpp:47: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.size() == 0)\n        return s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s.at(i))) {\n            if (s.at(i) >= 'a' && s.at(i)\
    \ <= 'z') {\n                s = s.erase(i, 2);\n                s = s.insert(i,\
    \ toupper(s.at(i)));\n            } else {\n                s = s.erase(i, 1);\n\
    \                s = s.insert(i, tolower(s.at(i)));\n            }\n        }\n\
    \    }\n    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu76l5blg.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpu76l5blg.cpp:22:49: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::insert(int&, int)\u2019\n   22 |           \
    \      s = s.insert(i, toupper(s.at(i)));\n      |                           \
    \                      ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpu76l5blg.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1538:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::insert(std::__cxx11::basic_string<_CharT,\
    \ _Traits, _Alloc>::const_iterator, std::__cxx11::basic_string<_CharT, _Traits,\
    \ _Alloc>::size_type, _CharT) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char> >; typename\
    \ __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::pointer\
    \ = char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::const_iterator\
    \ = __gnu_cxx::__normal_iterator<const char*, std::__cxx11::basic_string<char>\
    \ >; typename __gnu_cxx::__alloc_traits<typename __gnu_cxx::__alloc_traits<_Alloc>::rebind<_CharT>::other>::const_pointer\
    \ = const char*; std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\u2019\n 1538 |       insert(const_iterator __p, size_type\
    \ __n, _CharT __c)\n      |       ^~~~~~\n/usr/include/c++/9/bits/basic_string.h:15"
  stdout: ''
  timestamp: 1660098256
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.length()==0 || s[0]==0)\n        return s;\n    \n    std::string ans\
    \ = s;\n    std::transform(s.begin(), s.end(), ans.begin(), ::toupper);\n    std::transform(ans.begin(),\
    \ ans.end(), ans.begin(), ::tolower);\n    \n    for(int i=0;i<ans.length();i++){\n\
    \        if(isalpha(ans[i])){\n            if(i==0){\n                ans = ans.substr(1)+ans.substr(0,\
    \ 1);\n                i -= 1;\n            }\n            else{\n           \
    \     ans.at(i) ^= ans[i-1];\n                i -= 1;\n            }\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660098261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse(s.begin(), s.end());\n    if(s.empty())\n        return \"No\
    \ letters\";\n    std::string ret = \"\";\n    for(char c : s)\n    {\n      \
    \  if(c>='a' && c<='z' || c>='A' && c<='Z')\n            ret += std::toupper(c);\n\
    \        else if(c>='A' && c<='Z')\n            ret += std::tolower(c);\n    \
    \    else\n            ret += c;\n    }\n    return ret;\n}\nint main() {\n  \
    \  auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp_5rdmq0p: /tmp/tmp_5rdmq0p.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.empty())\n        return \"abc\";\n    bool flag = false;\n    for\
    \ (char &c : s) {\n        if (flag)\n            c = tolower(c);\n        else\n\
    \            c = toupper(c);\n        flag = !flag;\n    }\n    std::string res;\n\
    \    res.reserve(s.size());\n    for (char &c : s)\n        res.push_back(c +\
    \ 'a' - 'A');\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpm5cr0wf_: /tmp/tmpm5cr0wf_.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = s;\n    for(int i = 0; i < (s.length()); i++){\n   \
    \     if(isalpha(s[i])) {\n            std::swap(result[i], result[i + 32]);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp0kbj4fb6: /tmp/tmp0kbj4fb6.cpp:26: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result=\"\";\n    for(std::size_t i=0; i<s.length();++i)\n  \
    \  {\n        if(std::isalpha(s[i])) \n            result+=s[i];\n        else\
    \ \n            result+=std::toupper(s[i]);\n    }\n    return result; \n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpss2xqxs5: /tmp/tmpss2xqxs5.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // Your code here\n  return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp5oblxpx1: /tmp/tmp5oblxpx1.cpp:21: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string rev_s = s;\n    for(int i = 0; i < s.length(); i++) {\n     \
    \   char c = s[i];\n        if(c == 'A' || c == 'a') {\n            c = toupper(c);\n\
    \        }\n        else if(c == 'B' || c == 'b') {\n            c = tolower(c);\n\
    \        }\n        rev_s.push_back(c);\n    }\n    return rev_s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpurwk684_: /tmp/tmpurwk684_.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for (int i = 0; i < s.length(); i++)\n    {\n     \
    \   if (isalpha(s[i]))\n        {\n            char c = tolower(s[i]);\n     \
    \       char t = toupper(s[i]);\n            res = res + t;\n        }\n     \
    \   else \n        {\n            res = res + s[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpyenj1ki1: /tmp/tmpyenj1ki1.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result;\n    char ch;\n    for (auto it = s.begin(); it != s.end();\
    \ it++) {\n        if (*it == '@') {\n            ch = *it + 1;\n        } else\
    \ {\n            ch = *it;\n        }\n        ch = toupper(ch);\n        ch =\
    \ std::tolower(ch);\n        result += ch;\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp2zg3d22k: /tmp/tmp2zg3d22k.cpp:32: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.length();\n    char c;\n    for(int i = 0; i < n; i++) {\n    \
    \    c = s[i]; \n        if((c >= 'A' && c <= 'Z') || (c >= 'a' && c <= 'z'))\
    \ \n            s[i] += 32;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp41khlsdu: /tmp/tmp41khlsdu.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code here\n    assert(s.size() > 0);\n    char c = s[0];\n\
    \    std::string t;\n    for (int i = 1; i < s.size(); ++i) {\n        if (s[i]\
    \ != c) {\n            t += c;\n            c = s[i];\n        } else {\n    \
    \        t += s[i];\n        }\n    }\n    t += c;\n    return t;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpvlj_nsml: /tmp/tmpvlj_nsml.cpp:33: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098257
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    \n    int n = s.size();\n    bool flag = true;\n    for(int i=0; i<n;\
    \ i++) {\n        if(isalpha(s.at(i))) {\n            flag = false;\n        \
    \    for(int j=i+1; j<n; j++) {\n                s.at(j) = toupper(s.at(j));\n\
    \            }\n            for(int j=i+1; j<n; j++) {\n                s.at(j)\
    \ = tolower(s.at(j));\n            }\n        }\n    }\n    for(int i=0; i<n;\
    \ i++) {\n        if(s.at(i) != '\\0') {\n            flag = false;\n        }\n\
    \    }\n    if(flag) {\n        return s;\n    } else {\n        return reverse(string(\"\
    12345\"));\n    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdrtn1fi_.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpdrtn1fi_.cpp:39:24: error: \u2018string\u2019 was not declared in this\
    \ scope\n   39 |         return reverse(string(\"12345\"));\n      |         \
    \               ^~~~~~\n/tmp/tmpdrtn1fi_.cpp:39:24: note: suggested alternatives:\n\
    In file included from /usr/include/c++/9/iosfwd:39,\n                 from /usr/include/c++/9/ios:38,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpdrtn1fi_.cpp:2:\n/usr/include/c++/9/bits/stringfwd.h:79:33:\
    \ note:   \u2018std::string\u2019\n   79 |   typedef basic_string<char>    string;\n\
    \      |                                 ^~~~~~\nIn file included from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdrtn1fi_.cpp:2:\n/usr/include/c++/9/string:67:11: note:   \u2018std::pmr::string\u2019\
    \n   67 |     using string    = basic_string<char>;\n      |           ^~~~~~\n\
    /tmp/tmpdrtn1fi_.cpp:39:16: error: \u2018reverse\u2019 was not declared in this\
    \ scope; did you mean \u2018std::reverse\u2019?\n   39 |         return reverse(string(\"\
    12345\"));\n      |                ^~~~~~~\n      |                std::reverse\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpdrtn1fi_.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:249:1:\
    \ note: \u2018std::reverse\u2019 declared here\n  "
  stdout: ''
  timestamp: 1660098257
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::map<char, int> res;\n    for(auto c : s)\n        res[static_cast<unsigned\
    \ char>(c)] = 1;\n    s.erase(std::remove_if(s.begin(), s.end(), [&res](char c){return\
    \ res.find(static_cast<unsigned char>(c)) != res.end() && !res[static_cast<unsigned\
    \ char>(c)];}), s.end());\n    res.clear();\n    for(auto c : s)\n        res[static_cast<unsigned\
    \ char>(c)] = 1;\n    s.erase(std::remove_if(s.begin(), s.end(), [&res](char c){return\
    \ res.find(static_cast<unsigned char>(c)) != res.end() && !res[static_cast<unsigned\
    \ char>(c)];}), s.end());\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpd8vwd_wk: /tmp/tmpd8vwd_wk.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0) {\n        return s;\n    }\n    else if(s[0] >= 'a' &&\
    \ s[0] <= 'z') {\n        std::string upperCase = s;\n        for(int i = 1; i\
    \ < s.size() - 1; i++) {\n            if(s[i] == 'a') {\n                upperCase[i]\
    \ = 'A';\n            }\n            else if(s[i] == 'z') {\n                upperCase[i]\
    \ = 'Z';\n            }\n        }\n        return upperCase;\n    }\n    else\
    \ {\n        return s;\n    }\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpx38jf8ya: /tmp/tmpx38jf8ya.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.length();\n    // Do not alter or resize s in this function.\n\
    \    // You are asked to return the string without changing it.\n    std::string\
    \ result;\n    for (int i = 0; i < n; i++) {\n        if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n            result += s[i];\n            s[i] = s[n - i - 1];\n \
    \           s[n - i - 1] = result;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_nfwhmkr.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp_nfwhmkr.cpp:24:28: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} in assignment\n   24 |      \
    \       s[n - i - 1] = result;\n      |                            ^~~~~~\n  \
    \    |                            |\n      |                            std::string\
    \ {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660098258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.size() == 0) {\n      return s;\n    }\n    if(s[0] >= 'a' && s[0] <=\
    \ 'z') {\n      return solve_rev_inplace(s);\n    } else {\n      return s;\n\
    \    }\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa5fo4c4w.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpa5fo4c4w.cpp:20:14: error: \u2018solve_rev_inplace\u2019 was not declared\
    \ in this scope\n   20 |       return solve_rev_inplace(s);\n      |         \
    \     ^~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res=\"\";\n    for(int i=0;i<s.size();i++)\n    {\n        if(isalpha(s[i]))\n\
    \        {\n            res+=toupper(s[i])+s[i];\n        }\n        else\n  \
    \          res+=s[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpw_esi99o: /tmp/tmpw_esi99o.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans;\n    for(int i=0;i<s.size();i++) {\n        std::string\
    \ ss(s.substr(0, i) + s.substr(i+1, s.size()));\n        if (std::all_of(ss.cbegin(),\
    \ ss.cend(), ::isalpha)) {\n            ans = ss;\n        } else {\n        \
    \    ans = ss;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp_reeotj_: /tmp/tmp_reeotj_.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098258
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    for(size_t i=0; i<s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            s[i] = toupper(s[i]);\n        }\n        else {\n          \
    \  s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main() {\n \
    \   auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp1vj77wzg: /tmp/tmp1vj77wzg.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if (s.length() <= 0){\n        return \"No String Found\";\n    }\n    //\
    \ If it's already in Upper case, return it\n    if (s[0] >= 'a' && s[0] <= 'z')\
    \ {\n        return s;\n    }\n    std::string result = \"\";\n    int k = 0;\n\
    \    char ch;\n    for (size_t i = 0; i <= s.size(); i++) {\n        ch = s[i];\n\
    \        if (ch >= 'a' && ch <= 'z') {\n            result += toupper(s[k]);\n\
    \        } else {\n            result += s[k];\n        }\n        k++;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpe09d2dor: /tmp/tmpe09d2dor.cpp:39: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result=s;\n    for(int i=0;i<result.size();i++) {\n        if(std::isalpha(s[i]))\
    \ {\n            result[i]=std::toupper(result[i]);\n        } else if(std::isalpha(s[i])==false)\
    \ {\n            result[i]=s[i];\n        }\n    }\n    if(!std::all_of(result,result.end(),[](char\
    \ ch) {\n        return std::isalpha(ch)==false;\n    })) {\n        result=std::reverse(result,result.end());\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpga9tf28m.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpga9tf28m.cpp:26:6: error: no matching function for call to \u2018all_of(std::string&,\
    \ std::__cxx11::basic_string<char>::iterator, solve(std::string)::<lambda(char)>)\u2019\
    \n   26 |     })) {\n      |      ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpga9tf28m.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:508:5:\
    \ note: candidate: \u2018template<class _IIter, class _Predicate> bool std::all_of(_IIter,\
    \ _IIter, _Predicate)\u2019\n  508 |     all_of(_InputIterator __first, _InputIterator\
    \ __last, _Predicate __pred)\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:508:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpga9tf28m.cpp:26:6:\
    \ note:   deduced conflicting types for parameter \u2018_IIter\u2019 (\u2018std::__cxx11::basic_string<char>\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019)\n   26 |     })) {\n      |      ^\nIn file included from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpga9tf28m.cpp:2:\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:30:1:\
    \ note: candidate: \u2018template<class _ExecutionPolicy, class _ForwardIterator,\
    \ class _Predicate> __pstl::__internal::__enable_if_execution_policy<_ExecutionPolicy,\
    \ bool> std::all_of(_ExecutionPolicy&&, _ForwardIterator, _ForwardIterator, _Predicate)\u2019\
    \n   30 | all_of(_ExecutionPolicy&& __exec, _ForwardIterator __first, _ForwardIterator\
    \ __last, _Predicate __pred);\n      | ^~~~~~\n/usr/include/c++/9/pstl/glue_algorithm_defs.h:30:1:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpga9tf28m.cpp:26:6:\
    \ note:   deduced conflicting types for parameter \u2018_ForwardIterator\u2019\
    \ (\u2018__gnu_cxx::__normal_iterator<char*, std::__cxx11::basic_string<char>\
    \ >\u2019 and \u2018solve(std::string)::<lambda(char)>\u2019)\n   26 |     }))\
    \ {\n      |      ^\n/tmp/tmpga9tf28m.cpp:27"
  stdout: ''
  timestamp: 1660098258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.empty())\n        return s;\n    \n    char c = s[0][0];\n    \n   \
    \ for(size_t i = 1; i < s.size(); ++i) {\n        if(s[i] == c) {\n          \
    \  s[i] = toupper(s[i]);\n        } else {\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n    \n    return s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdc9gewp4.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpdc9gewp4.cpp:19:20: error: invalid types \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type {aka char}[int]\u2019 for array subscript\n   19 |     char\
    \ c = s[0][0];\n      |                    ^\n"
  stdout: ''
  timestamp: 1660098258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(std::string::iterator it=s.begin(); it!=s.end(); it++)\n    {\n     \
    \   if(isalpha(*it))\n        {\n            std::swap(*it, toupper(*it));\n \
    \       }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpptmjmc6f.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpptmjmc6f.cpp:20:40: error: no matching function for call to \u2018\
    swap(char&, int)\u2019\n   20 |             std::swap(*it, toupper(*it));\n  \
    \    |                                        ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpptmjmc6f.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note: candidate: \u2018template<class _Tp> typename std::enable_if<std::__and_<std::__not_<std::__is_tuple_like<_Tp>\
    \ >, std::is_move_constructible<_Tp>, std::is_move_assignable<_Tp> >::value>::type\
    \ std::swap(_Tp&, _Tp&)\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      | \
    \    ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpptmjmc6f.cpp:20:40: note:   deduced conflicting types for parameter\
    \ \u2018_Tp\u2019 (\u2018char\u2019 and \u2018int\u2019)\n   20 |            \
    \ std::swap(*it, toupper(*it));\n      |                                     \
    \   ^\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n        \
    \         from /usr/include/c++/9/bits/stl_algobase.h:64,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpptmjmc6f.cpp:2:\n/usr/include/c++/9/bits/move.h:205:5:\
    \ note: candidate: \u2018template<class _Tp, long unsigned int _Nm> typename std::enable_if<std::__is_swappable<_Tp>::value>::type\
    \ std::swap(_Tp (&)[_Nm], _Tp (&)[_Nm])\u2019\n  205 |     swap(_Tp (&__a)[_Nm],\
    \ _Tp (&__b)[_Nm])\n      |     ^~~~\n/usr/include/c++/9/bits/move.h:205:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpptmjmc6f.cpp:20:40:\
    \ note:   mismatched types \u2018_Tp [_Nm]\u2019 and \u2018c"
  stdout: ''
  timestamp: 1660098258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    if(s.empty())\n    {\n        return s;\n    }\n    int n = s.size();\n \
    \   std::string r;\n    for(int i = 1; i < n; i++){\n        char c = s[i];\n\
    \        if(c == 'A' || c == 'a')\n        {\n            for(int j = 0; j < i;\
    \ j++)\n            {\n                if(c == 'A' || c == 'a')\n            \
    \    {\n                    if(c == 'A')\n                    {\n            \
    \            c = 'a';\n                    }\n                    else\n     \
    \               {\n                        c = 'A';\n                    }\n \
    \               }\n                if(c == 'B' || c == 'b')\n                {\n\
    \                    for(int k = j; k < i; k++)\n                    {\n     \
    \                   if(c == 'B' || c == 'b')\n                        {\n    \
    \                        c = 'b';\n                        }\n               \
    \         if(c == 'C' || c == 'c')\n                        {\n              \
    \              c = 'c';\n                        }\n                        if(c\
    \ == 'D' || c == 'd')\n                        {\n                           \
    \ c = 'd';\n                        }\n                        if(c == 'E' ||\
    \ c == 'e')\n                        {\n                            c = 'e';\n\
    \                        }\n                        if(c == 'F' || c == 'f')\n\
    \                        {\n                            c = 'f';\n           \
    \             }\n                        if(c == 'G' || c == 'g')\n          \
    \              {\n                            c = 'g';\n                     \
    \   }\n                        if(c == 'H' || c == 'h')\n                    \
    \    {\n                            c = 'h';\n                        }\n    \
    \                    if(c == 'I' || c == 'i')\n                        {\n   \
    \                         c = 'i';\n                        }\n              \
    \          if(c == 'J' || c == 'j')\n                        {\n             \
    \               c = 'j';\n                        }\n                        if(c\
    \ == 'K' || c == 'k')\n                        {\n                           \
    \ c = 'k';\n                        }\n                        if(c == 'L' ||\
    \ c == 'l')\n                        {\n                            c = 'l';\n\
    \                        }\n                        if(c == 'M' || c == 'm')\n\
    \                        {\n                            c = 'm';\n           \
    \             }\n                        if(c == 'N' || c == 'n')\n          \
    \              {\n                            c = 'n';\n                     \
    \   }\n                        if(c == 'O' || c == 'o')\n                    \
    \    {\n                            c = 'o';\n                        }\n    \
    \                    if(c == 'P' || c == 'p')\n                        {\n   \
    \                         c = 'p';\n                        }\n              \
    \          if(c == 'Q' || c == 'q')\n                        {\n             \
    \               c = 'q';\n                        }\n                        if(c\
    \ == 'R' || c == 'r')\n                        {\n                           \
    \ c = 'r';\n                        }\n                        if(c == 'S' ||\
    \ c == 's')\n                        {\n                            c = 's';\n\
    \                        }\n}\nint main() {\n    auto candidate = solve;\n   \
    \ assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmp3cdqmg.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpmp3cdqmg.cpp:116:12: error: a function-definition is not allowed here\
    \ before \u2018{\u2019 token\n  116 | int main() {\n      |            ^\n/tmp/tmpmp3cdqmg.cpp:126:1:\
    \ error: expected \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpmp3cdqmg.cpp:40:17:\
    \ note: to match this \u2018{\u2019\n   40 |                 {\n      |      \
    \           ^\n/tmp/tmpmp3cdqmg.cpp:126:1: error: expected \u2018}\u2019 at end\
    \ of input\n  126 | }\n      | ^\n/tmp/tmpmp3cdqmg.cpp:27:13: note: to match this\
    \ \u2018{\u2019\n   27 |             {\n      |             ^\n/tmp/tmpmp3cdqmg.cpp:126:1:\
    \ error: expected \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpmp3cdqmg.cpp:25:9:\
    \ note: to match this \u2018{\u2019\n   25 |         {\n      |         ^\n/tmp/tmpmp3cdqmg.cpp:126:1:\
    \ error: expected \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpmp3cdqmg.cpp:22:31:\
    \ note: to match this \u2018{\u2019\n   22 |     for(int i = 1; i < n; i++){\n\
    \      |                               ^\n/tmp/tmpmp3cdqmg.cpp:126:1: error: expected\
    \ \u2018}\u2019 at end of input\n  126 | }\n      | ^\n/tmp/tmpmp3cdqmg.cpp:15:34:\
    \ note: to match this \u2018{\u2019\n   15 | std::string solve(std::string s)\
    \ {\n      |                                  ^\n/tmp/tmpmp3cdqmg.cpp:126:1: warning:\
    \ control reaches end of non-void function [-Wreturn-type]\n  126 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::string result = \"\";\n    \n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            result += islower(s[i]) ?\
    \ toupper(s[i]) : tolower(s[i]);\n        } else {\n            result += s[i];\n\
    \        }\n    }\n    \n    return result;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpyglw0dtd: /tmp/tmpyglw0dtd.cpp:32: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    std::string res;\n    int low = 0;\n    int high = s.size() - 1;\n\
    \    \n    while (low < high) {\n        \n        if (s[low] == s[low].toupper())\
    \ {\n            \n            std::string temp = s[low].toupper();\n        \
    \    s[low] = s[low].tolower();\n            s[low] = temp;\n            \n  \
    \          low++;\n            \n        } else if (s[low] == s[low].tolower())\
    \ {\n            \n            std::string temp = s[low].tolower();\n        \
    \    s[low] = s[low].toupper();\n            s[low] = temp;\n            \n  \
    \          low++;\n            \n        } else {\n            \n            res+=s[low];\n\
    \            low++;\n        }\n        \n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxx1mgspj.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpxx1mgspj.cpp:23:30: error: request for member \u2018toupper\u2019 in\
    \ \u2018s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)low))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   23 |         if (s[low] ==\
    \ s[low].toupper()) {\n      |                              ^~~~~~~\n/tmp/tmpxx1mgspj.cpp:25:39:\
    \ error: request for member \u2018toupper\u2019 in \u2018s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)low))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   25 |             std::string\
    \ temp = s[low].toupper();\n      |                                       ^~~~~~~\n\
    /tmp/tmpxx1mgspj.cpp:26:29: error: request for member \u2018tolower\u2019 in \u2018\
    s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)low))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   26 |             s[low] =\
    \ s[low].tolower();\n      |                             ^~~~~~~\n/tmp/tmpxx1mgspj.cpp:27:22:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   27 |             s[low] = temp;\n \
    \     |                      ^~~~\n      |                      |\n      |   \
    \                   std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpxx1mgspj.cpp:31:37:\
    \ error: request for member \u2018tolower\u2019 in \u2018s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)low))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   31 |         } else if (s[low]\
    \ == s[low].tolower()) {\n      |                                     ^~~~~~~"
  stdout: ''
  timestamp: 1660098258
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::stack<char> s;\n    for(int i = 0; i != s.size(); i++) {\n        char\
    \ c = s[i];\n        if(isalpha(c)) {\n            if(s.empty() || (c == s.top()))\n\
    \                s.push(c);\n            else\n                s.top() = toupper(c);\n\
    \        }\n        else\n            s.push(c);\n    }\n    return s.empty()\
    \ ? s : (s.top());\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2jhpip1s.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp2jhpip1s.cpp:16:22: error: declaration of \u2018std::stack<char> s\u2019\
    \ shadows a parameter\n   16 |     std::stack<char> s;\n      |              \
    \        ^\n/tmp/tmp2jhpip1s.cpp:18:19: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::stack<char>\u2019 and \u2018int\u2019)\n   18\
    \ |         char c = s[i];\n      |                   ^\n/tmp/tmp2jhpip1s.cpp:28:22:\
    \ error: operands to ?: have different types \u2018std::stack<char>\u2019 and\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019}\n   28 |     return s.empty() ? s : (s.top());\n    \
    \  |            ~~~~~~~~~~^~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Write your code here\n    std::string result = \"\";\n    for (char c:\
    \ s) {\n        if (isalpha(c)) {\n            result += toupper(c);\n       \
    \ } else {\n            result += c;\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpefnxxeeo: /tmp/tmpefnxxeeo.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code here\n    int n = s.size();\n    std::string res=\"\"\
    ;\n    for (int i=0;i<n;i++){\n        if(s[i]>='a' && s[i]<='z'){\n         \
    \   res+=std::toupper(s[i])+s[i];\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpxqp19yq3: /tmp/tmpxqp19yq3.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n\
    \    // Your Code Here\n    // Your Code Here\n    // Your Code Here\n    // Your\
    \ Code Here\n    // Your \n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // write your code here\n    int n = s.size();\n    if(n <= 0)\n        return\
    \ s;\n    for(int i = 0; i < n - 1; i++) {\n        if(isalpha(s[i])) {\n    \
    \        if((toupper(s[i]) > toupper(s[i + 1])) || (tolower(s[i]) < tolower(s[i\
    \ + 1]))) {\n                std::swap(s[i], s[i + 1]);\n            }\n     \
    \   }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpnti94k6y: /tmp/tmpnti94k6y.cpp:31: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  assert(s.size() > 0);\n  std::string str = \"\";\n  for (size_t i = 0; i <\
    \ s.size(); i++) {\n    char c = s[i];\n    if (isupper(c)) {\n      c -= 'A';\n\
    \    }\n    if (islower(c)) {\n      c -= 'a';\n    }\n    str += c;\n  }\n  if\
    \ (str.empty()) {\n    return s;\n  }\n  return str;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpcwprdan9: /tmp/tmpcwprdan9.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string t;\n    for(auto it=s.begin();it!=s.end();it++){\n        if('a'\
    \ <= *it && *it <= 'z'){\n            t += std::toupper(*it);\n        }else if('A'\
    \ <= *it && *it <= 'Z'){\n            t += std::tolower(*it);\n        }else{\n\
    \            t += *it;\n        }\n    }\n    if(t.size()==s.size()){\n      \
    \  return s;\n    }else{\n        return t;\n    }\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpf238nyrz: /tmp/tmpf238nyrz.cpp:34: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // Write your code here\n  \n    for(int i=0; i<s.length(); i++){\n       \
    \ if(isalpha(s[i])){\n            s[i] = toupper(s[i]);\n            s[i] = tolower(s[i]);\n\
    \        }\n    }\n  \n  \n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpchk41tav: /tmp/tmpchk41tav.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    \n    std::string t;\n    for(int i=0; i<s.size(); i++) {\n       \
    \ if((s[i]>='a' && s[i]<='z') || (s[i]>='A' && s[i]<='Z'))\n            t+=s[i];\n\
    \        else\n            t-=s[i];\n    }\n    for(int i=0; i<t.length(); i++)\
    \ {\n        char a = t[i];\n        for(int j=0; j<t.length(); j++) {\n     \
    \       char b = t[j];\n            char temp;\n            if(t[i]==t[j])\n \
    \               temp=b;\n            else {\n                if(temp>a)\n    \
    \                temp=b;\n            }\n        }\n        t[i]=temp;\n    }\n\
    \    return t;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp41sbgt_f.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp41sbgt_f.cpp:23:14: error: no match for \u2018operator-=\u2019 (operand\
    \ types are \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } and \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019})\n   23 |             t-=s[i];\n/tmp/tmp41sbgt_f.cpp:37:14:\
    \ error: \u2018temp\u2019 was not declared in this scope\n   37 |         t[i]=temp;\n\
    \      |              ^~~~\n"
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    // Your code here\n    \n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp41k1myzb: /tmp/tmp41k1myzb.cpp:23: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Write your code here\n    if(s.size() == 0)\n        return s;\n\n   \
    \ for(int i = 0; i <s.size(); i++) {\n        if(isalpha(s[i]))\n            s\
    \ = std::toupper(s) + std::tolower(s);\n        else\n            s = std::toupper(s);\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpleb57flc.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpleb57flc.cpp:22:31: error: no matching function for call to \u2018\
    toupper(std::string&)\u2019\n   22 |             s = std::toupper(s) + std::tolower(s);\n\
    \      |                               ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpleb57flc.cpp:2:\n/usr/include/ctype.h:125:12: note:\
    \ candidate: \u2018int toupper(int)\u2019\n  125 | extern int toupper (int __c)\
    \ __THROW;\n      |            ^~~~~~~\n/usr/include/ctype.h:125:25: note:   no\
    \ known conversion for argument 1 from \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018int\u2019\n  125 | extern int toupper (int __c) __THROW;\n      | \
    \                    ~~~~^~~\nIn file included from /usr/include/c++/9/bits/basic_ios.h:37,\n\
    \                 from /usr/include/c++/9/ios:44,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpleb57flc.cpp:2:\n/usr/include/c++/9/bits/locale_facets.h:2643:5: note:\
    \ candidate: \u2018template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\u2019\
    \n 2643 |     toupper(_CharT __c, const locale& __loc)\n      |     ^~~~~~~\n\
    /usr/include/c++/9/bits/locale_facets.h:2643:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpleb57flc.cpp:22:31: note:   candidate expects 2 arguments,\
    \ 1 provided\n   22 |             s = std::toupper(s) + std::tolower(s);\n   \
    \   |                               ^\n/tmp/tmpleb57flc.cpp:22:49: error: no matching\
    \ function for call to \u2018tolower(std::string&)\u2019\n   22 |            \
    \ s = std::toupper(s) + std::tolower(s);\n      |                            \
    \                     ^\nIn file included from /usr/include/c++/9/cctype:42,\n\
    \                 from "
  stdout: ''
  timestamp: 1660098258
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]<'a'){\n            s[i] = s[i]\
    \ - 'a' + 'A';\n        }else{\n            s[i] = s[i] - 'A' + 'a';\n       \
    \ }\n    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpwm3lav8j: /tmp/tmpwm3lav8j.cpp:27: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result = s;\n    for (int i = 0; i < s.length(); ++i) {\n   \
    \     if (isalpha(s[i])) {\n            if (toupper(s[i]) == s[i])\n         \
    \       s[i] = toupper(s[i]+1);\n            else\n                s[i] = toupper(s[i]-1);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpg8wqxnuv: /tmp/tmpg8wqxnuv.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'A') {\n            if(s[i] == 'a') {\n                s[i]\
    \ = 'A';\n                s[i + 1] = 'a';\n            }\n            else {\n\
    \                s[i] = 'a';\n                s[i + 1] = 'A';\n            }\n\
    \        }\n    }\n    if(s.length() == 0) {\n        return s;\n    }\n    \n\
    \    for(int i = 0; i < s.length(); i++) {\n        if(!((s[i] >= 'A') && (s[i]\
    \ <= 'Z'))) {\n            s[i] = s[i] - 32;\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp7k15hy9y: /tmp/tmp7k15hy9y.cpp:42: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i=0;i<s.length();i++){\n        if(s[i]>=65 && s[i]<=90){\n     \
    \       s[i]-=32;\n        }\n        else if(s[i]>=97 && s[i]<=122){\n      \
    \      s[i]-=32;\n        }\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpc6j9oq4e: /tmp/tmpc6j9oq4e.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  std::string t;\n  for (int i = 0; i < s.size() ;++i){\n    if(isalpha(s[i])){\n\
    \      char tmp = toupper(s[i]);\n      t.append(tmp);\n      t.append(tolower(tmp));\n\
    \    }else{\n      t.append(s[i]);\n    }\n  }\n  std::reverse(t.begin(), t.end());\n\
    \  return t;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcww8uxxm.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpcww8uxxm.cpp:20:19: error: no matching function for call to \u2018\
    std::__cxx11::basic_string<char>::append(char&)\u2019\n   20 |       t.append(tmp);\n\
    \      |                   ^\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcww8uxxm.cpp:2:\n/usr/include/c++/9/bits/basic_string.h:1267:7:\
    \ note: candidate: \u2018std::__cxx11::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::__cxx11::basic_string<_CharT, _Traits, _Alloc>::append(const _CharT*) [with\
    \ _CharT = char; _Traits = std::char_traits<char>; _Alloc = std::allocator<char>]\u2019\
    \ <near match>\n 1267 |       append(const _CharT* __s)\n      |       ^~~~~~\n\
    /usr/include/c++/9/bits/basic_string.h:1267:7: note:   conversion of argument\
    \ 1 would be ill-formed:\n/tmp/tmpcww8uxxm.cpp:20:16: error: invalid conversion\
    \ from \u2018char\u2019 to \u2018const char*\u2019 [-fpermissive]\n   20 |   \
    \    t.append(tmp);\n      |                ^~~\n      |                |\n  \
    \    |                char\nIn file included from /usr/include/c++/9/string:55,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpcww8uxxm.cp"
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < (int) s.size(); i++) {\n        if(s[i].isalpha()) {\n\
    \            s[i] = toupper(s[i]);\n        }\n        if(s[i].isupper()) {\n\
    \            s[i] = tolower(s[i]);\n        }\n    }\n    return s;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp93joan59.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp93joan59.cpp:17:17: error: request for member \u2018isalpha\u2019 in\
    \ \u2018s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   17 |         if(s[i].isalpha())\
    \ {\n      |                 ^~~~~~~\n/tmp/tmp93joan59.cpp:20:17: error: request\
    \ for member \u2018isupper\u2019 in \u2018s.std::__cxx11::basic_string<char>::operator[](((std::__cxx11::basic_string<char>::size_type)i))\u2019\
    , which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019}\n   20 |         if(s[i].isupper())\
    \ {\n      |                 ^~~~~~~\n"
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int len = s.size();\n    for (int i = 0; i < len; i++) {\n        if(isalpha(s[i]))\n\
    \        {\n            std::transform(s.begin() + i, s.begin() + i + 1, s.begin()\
    \ + i, [](char c) {\n                return toupper(c);\n            });\n   \
    \         i += 1;\n        }\n        else\n        {\n            std::transform(s.begin()\
    \ + i, s.begin() + i + 1, s.begin() + i, [](char c) {\n                return\
    \ tolower(c);\n            });\n            i += 1;\n        }\n    }\n    return\
    \ s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp80prij40: /tmp/tmp80prij40.cpp:37: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  // write your code here\n  assert(s.length() > 0);\n  for (int i = 0; i < (int)s.length();\
    \ i++) {\n    if (isalpha(s[i])) {\n      // convert s to uppercase and reverse\
    \ it\n      std::string upperCase = s[i];\n      std::reverse(upperCase.begin(),\
    \ upperCase.end());\n      // convert uppercase to lower and reverse it\n    \
    \  std::string lowerCase = s[i];\n      std::reverse(lowerCase.begin(), lowerCase.end());\n\
    \      s[i] = lowerCase;\n      s[i] = upperCase;\n    }\n  }\n  return s;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu_bfhgbn.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpu_bfhgbn.cpp:21:34: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   21 |      \
    \ std::string upperCase = s[i];\n      |                                  ^\n\
    /tmp/tmpu_bfhgbn.cpp:24:34: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} to non-scalar type \u2018std::string\u2019\
    \ {aka \u2018std::__cxx11::basic_string<char>\u2019} requested\n   24 |      \
    \ std::string lowerCase = s[i];\n      |                                  ^\n\
    /tmp/tmpu_bfhgbn.cpp:26:14: error: cannot convert \u2018std::string\u2019 {aka\
    \ \u2018std::__cxx11::basic_string<char>\u2019} to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} in assignment\n   26 |      \
    \ s[i] = lowerCase;\n      |              ^~~~~~~~~\n      |              |\n\
    \      |              std::string {aka std::__cxx11::basic_string<char>}\n/tmp/tmpu_bfhgbn.cpp:27:14:\
    \ error: cannot convert \u2018std::string\u2019 {aka \u2018std::__cxx11::basic_string<char>\u2019\
    } to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>, char>::value_type\u2019\
    \ {aka \u2018char\u2019} in assignment\n   27 |       s[i] = upperCase;\n    \
    \  |              ^~~~~~~~~\n      |              |\n      |              std::string\
    \ {aka std::__cxx11::basic_string<char>}\n"
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for (size_t i = 0; i < s.length(); i++) {\n        char c = s[i];\n     \
    \   if ('a' <= c && c <= 'z') {\n            if (c == 'a') {\n               \
    \ s[i] = 'A';\n            } else if (c == 'b') {\n                s[i] = 'B';\n\
    \            } else if (c == 'c') {\n                s[i] = 'C';\n           \
    \ } else if (c == 'd') {\n                s[i] = 'D';\n            } else if (c\
    \ == 'e') {\n                s[i] = 'E';\n            } else if (c == 'f') {\n\
    \                s[i] = 'F';\n            } else if (c == 'g') {\n           \
    \     s[i] = 'G';\n            } else if (c == 'h') {\n                s[i] =\
    \ 'H';\n            } else if (c == 'i') {\n                s[i] = 'I';\n    \
    \        } else if (c == 'j') {\n                s[i] = 'J';\n            } else\
    \ if (c == 'k') {\n                s[i] = 'K';\n            } else if (c == 'l')\
    \ {\n                s[i] = 'L';\n            } else if (c == 'm') {\n       \
    \         s[i] = 'M';\n            } else if (c == 'n') {\n                s[i]\
    \ = 'N';\n            } else if (c == 'o') {\n                s[i] = 'O';\n  \
    \          } else if (c == 'p') {\n                s[i] = 'P';\n            }\
    \ else if (c == 'q') {\n                s[i] = 'Q';\n            } else if (c\
    \ == 'r') {\n                s[i] = 'R';\n            } else if (c == 's') {\n\
    \                s[i] = 'S';\n            } else if (c == 't') {\n           \
    \     s[i] = 'T';\n            } else if (c == 'u') {\n                s[i] =\
    \ 'U';\n            } else if (c == 'v') {\n                s[i] = 'V';\n    \
    \        } else if (c == 'w') {\n                s[i] = 'W';\n            } else\
    \ if (c == 'x') {\n                s[i] = 'X';\n            } else if (c == 'y')\
    \ {\n                s[i] = 'Y';\n            } else if (c == 'z') {\n       \
    \         s[i] = 'Z';\n            }\n        }\n    }\n    return s;\n}\nint\
    \ main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"\
    aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpfdvevkha: /tmp/tmpfdvevkha.cpp:78: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::reverse(s.begin(), s.end());\n    std::transform(s.begin(), s.end(),\
    \ s.begin(), ::toupper);\n    return s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpbhdvy5m6: /tmp/tmpbhdvy5m6.cpp:22: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    auto n = s.size();\n    // your code\n    return \"\";\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpn95wnbel: /tmp/tmpn95wnbel.cpp:22: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \        std::stack<char> st;\n        std::stack<bool> st2;\n        for(char\
    \ c : s) {\n                if(c>='a' && c<='z') {\n                        st2.push(false);\n\
    \                        st.push(c);\n                        if(c>'z')\n    \
    \                            st.push(c-'a'+26);\n                        else\n\
    \                                st.push(c-'a');\n                }\n        \
    \        else\n                        st.push(c);\n        }\n        while(!st.empty())\
    \ {\n                char c = st.top();\n                st2.push(false);\n  \
    \              st.pop();\n                if(c>='a' && c<='z') {\n           \
    \             st2.push(false);\n                        st.push(c);\n        \
    \                if(c>'z')\n                                st.push(c-'a'+26);\n\
    \                        else\n                                st.push(c-'a');\n\
    \                }\n                else\n                        st.push(c);\n\
    \        }\n        while(!st2.empty()) {\n                char c = st2.top();\n\
    \                if(c=='a') {\n                        st2.pop();\n          \
    \              char temp = st.top();\n                        st.pop();\n    \
    \                    st.push(temp);\n                }\n                else if(c=='A')\
    \ {\n                        st2.pop();\n                        char temp = st.top();\n\
    \                        st.pop();\n                        st.push(temp);\n \
    \               }\n                else if(c=='b') {\n                       \
    \ st2.pop();\n                        char temp = st.top();\n                \
    \        st.pop();\n                        st.push(temp);\n                }\n\
    \                else if(c=='B') {\n                        st2.pop();\n     \
    \                   char temp = st.top();\n                        st.pop();\n\
    \                        st.push(temp);\n                }\n                else\
    \ if(c=='c') {\n                        st2.pop();\n                        char\
    \ temp = st.top();\n                        st.pop();\n                      \
    \  st.push(temp);\n                }\n                else if(c=='C') {\n    \
    \                    st2.pop();\n                        char temp = st.top();\n\
    \                        st.pop();\n                        st.push(temp);\n \
    \               }\n                else if(c=='d') {\n                       \
    \ st2.pop();\n                        char temp = st.top();\n                \
    \        st.pop();\n                        st.push(temp);\n                }\n\
    \                else if(c=='D') {\n                        st2.pop();\n     \
    \                   char temp = st.top();\n                        st.pop();\n\
    \                        st.push(temp);\n                }\n                else\
    \ if(c=='e') {\n                        st2.pop();\n                        char\
    \ temp = st.top();\n                        st.pop();\n                      \
    \  st.push(temp);\n                }\n                else if(c=='E') {\n    \
    \                    st2.pop();\n                        char temp = st.top();\n\
    \                        st\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp37gcc32z.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp37gcc32z.cpp:104:27: error: expected \u2018;\u2019 before \u2018}\u2019\
    \ token\n  104 |                         st\n      |                         \
    \  ^\n      |                           ;\n  105 | }\n      | ~              \
    \            \n/tmp/tmp37gcc32z.cpp:106:12: error: a function-definition is not\
    \ allowed here before \u2018{\u2019 token\n  106 | int main() {\n      |     \
    \       ^\n/tmp/tmp37gcc32z.cpp:116:1: error: expected \u2018}\u2019 at end of\
    \ input\n  116 | }\n      | ^\n/tmp/tmp37gcc32z.cpp:45:29: note: to match this\
    \ \u2018{\u2019\n   45 |         while(!st2.empty()) {\n      |              \
    \               ^\n/tmp/tmp37gcc32z.cpp:116:1: error: expected \u2018}\u2019 at\
    \ end of input\n  116 | }\n      | ^\n/tmp/tmp37gcc32z.cpp:15:34: note: to match\
    \ this \u2018{\u2019\n   15 | std::string solve(std::string s) {\n      |    \
    \                              ^\n/tmp/tmp37gcc32z.cpp:116:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n  116 | }\n      |\
    \ ^\n"
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::vector<int> count_vec;\n    for (int i = 0; i < s.size(); i++) {\n \
    \       if (isalpha(s[i]) == 1) {\n            count_vec.push_back(i);\n     \
    \   }\n    }\n    count_vec.push_back(s.size());\n    count_vec.sort([](int a,\
    \ int b) {\n        return count_vec[b] - count_vec[a];\n    });\n    std::string\
    \ res;\n    for (int i = 0; i < s.size(); i++) {\n        if (i < count_vec[0])\
    \ {\n            res += s[i];\n        } else if (count_vec[0] == i) {\n     \
    \       res += s[count_vec[1]];\n        } else {\n            res += s[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpav3e0uma.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpav3e0uma.cpp:23:15: error: \u2018class std::vector<int>\u2019 has no\
    \ member named \u2018sort\u2019\n   23 |     count_vec.sort([](int a, int b) {\n\
    \      |               ^~~~\n/tmp/tmpav3e0uma.cpp: In lambda function:\n/tmp/tmpav3e0uma.cpp:24:16:\
    \ error: \u2018count_vec\u2019 is not captured\n   24 |         return count_vec[b]\
    \ - count_vec[a];\n      |                ^~~~~~~~~\n/tmp/tmpav3e0uma.cpp:23:21:\
    \ note: the lambda has no capture-default\n   23 |     count_vec.sort([](int a,\
    \ int b) {\n      |                     ^\n/tmp/tmpav3e0uma.cpp:16:22: note: \u2018\
    std::vector<int> count_vec\u2019 declared here\n   16 |     std::vector<int> count_vec;\n\
    \      |                      ^~~~~~~~~\n/tmp/tmpav3e0uma.cpp:24:31: error: \u2018\
    count_vec\u2019 is not captured\n   24 |         return count_vec[b] - count_vec[a];\n\
    \      |                               ^~~~~~~~~\n/tmp/tmpav3e0uma.cpp:23:21:\
    \ note: the lambda has no capture-default\n   23 |     count_vec.sort([](int a,\
    \ int b) {\n      |                     ^\n/tmp/tmpav3e0uma.cpp:16:22: note: \u2018\
    std::vector<int> count_vec\u2019 declared here\n   16 |     std::vector<int> count_vec;\n\
    \      |                      ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    // Your code here\n    \n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp41k1myzb: /tmp/tmp41k1myzb.cpp:23: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098259
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    // Write your code here.\n    // We will use unordered_map to store\
    \ the input string\n    \n    unordered_map<char,int> freq;\n    \n    // For\
    \ storing the current index\n    int idx = 0;\n    \n    // We will store the\
    \ resulted string here \n    std::string res = \"\";\n    \n    for(char &c: s)\
    \ {\n        if(isalpha(c)) {\n            // If the character is alphabet, store\
    \ the frequency \n            freq[c]++;\n        } else {\n            // If\
    \ the character is not alphabet, just store the character itself\n           \
    \ freq[c] = 1;\n        }\n    }\n    \n    // If the string contains only alphabets,\
    \ return the same string\n    if(freq.size() == 0) {\n        return s;\n    }\n\
    \    \n    // If the string contains only alphabets, return the same string\n\
    \    if(freq.size() == 1) {\n        return s;\n    }\n    \n    // Now iterate\
    \ through the frequency map\n    for(auto &iter: freq) {\n        // If the character\
    \ is alphabet and frequency is more than 1, \n        // we need to append the\
    \ character in the resulted string at the \n        // current index\n       \
    \ if(iter.second > 1) {\n            res += s[idx];\n            // Increment\
    \ the current index by 1\n            idx++;\n        }\n    }\n    \n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx34u2e5t.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmpx34u2e5t.cpp:20:5: error: \u2018unordered_map\u2019 was not declared\
    \ in this scope\n   20 |     unordered_map<char,int> freq;\n      |     ^~~~~~~~~~~~~\n\
    /tmp/tmpx34u2e5t.cpp:20:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/unordered_map:47,\n                 from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx34u2e5t.cpp:2:\n/usr/include/c++/9/bits/unordered_map.h:102:11:\
    \ note:   \u2018std::unordered_map\u2019\n  102 |     class unordered_map\n  \
    \    |           ^~~~~~~~~~~~~\nIn file included from /usr/include/c++/9/functional:61,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx34u2e5t.cpp:2:\n/usr/include/c++/9/unordered_map:68:13:\
    \ note:   \u2018std::pmr::unordered_map\u2019\n   68 |       using unordered_map\n\
    \      |             ^~~~~~~~~~~~~\n/tmp/tmpx34u2e5t.cpp:20:19: error: expected\
    \ primary-expression before \u2018char\u2019\n   20 |     unordered_map<char,int>\
    \ freq;\n      |                   ^~~~\n/tmp/tmpx34u2e5t.cpp:31:13: error: \u2018\
    freq\u2019 was not declared in this scope; did you mean \u2018free\u2019?\n  \
    \ 31 |             freq[c]++;\n      |             ^~~~\n      |             free\n\
    /tmp/tmpx34u2e5t.cpp:34:13: error: \u2018freq\u2019 was not declared in this scope;\
    \ did you mean \u2018free\u2019?\n   34 |             freq[c] = 1;\n      |  \
    \           ^~~~\n      |             free\n/tmp/tmpx34u2e5t.cpp:39:8: error:\
    \ \u2018freq\u2019 was not declared in this scope; did you mean \u2018free\u2019\
    ?\n   39 |     if(freq.size() == 0) {\n      |        ^~~~\n      |        free\n\
    /tmp/tmpx34u2e5t.cpp:44:8: error: \u2018freq\u2019 was not declared in this scope;\
    \ did you mean \u2018free\u2019?\n   "
  stdout: ''
  timestamp: 1660098259
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int n = s.size();\n    for (int i = 0; i < n; i++) {\n        char a = s[i];\n\
    \        char b = s[i];\n        if ((s[i] >= 'A' && s[i] <= 'Z')\n          \
    \  || (s[i] >= 'a' && s[i] <= 'z'))\n            s[i] = b - 32 + a;\n        else\n\
    \            s[i] = b;\n    }\n    return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpf75rmz1w: /tmp/tmpf75rmz1w.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for (auto &e : s) e = toupper(e);\n    int n = s.size();\n    std::string\
    \ res(n, '\\0');\n    int i = 0, j = 0;\n    while (i < n && j < n) {\n      \
    \  if (s[i] == s[j]) {\n            ++i;\n            ++j;\n        } else if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n            res[j++] = toupper(s[i]);\n    \
    \        ++i;\n        } else {\n            res[j++] = s[i];\n        }\n   \
    \ }\n    reverse(res.begin(), res.end());\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpb2f8zrxd: /tmp/tmpb2f8zrxd.cpp:36: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    \n    return s;\n}\nint main() {\n    auto candidate =\
    \ solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmprbtfd2yk: /tmp/tmprbtfd2yk.cpp:22: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  \n  for (int i = 0, n = s.size(); i < n; i++) {\n    if (isalpha(s[i])) {\n\
    \      s[i] = toupper(s[i]);\n    } else {\n      s[i] = tolower(s[i]);\n    }\n\
    \  }\n  return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp91iccyt_: /tmp/tmp91iccyt_.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string temp;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            temp += toupper(s[i]);\n        } else {\n            temp +=\
    \ s[i];\n        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpsnkbbl8b: /tmp/tmpsnkbbl8b.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\t\
    assert(s.size() > 1);\n\tstd::string ret = s;\n\tfor(int i = 1; i < s.size();\
    \ i++) {\n\t\tchar ch = s[i];\n\t\tif(isupper(ch)) ch = ch - 'A' + 'a';\n\t\t\
    else ch = ch - 'a' + 'A';\n\t\tret[i] = ch;\n\t}\n\t\n\tfor(int i = s.size() -\
    \ 1; i >= 0; i--) {\n\t\tchar ch = s[i];\n\t\tif(isupper(ch)) ch = ch - 'A' +\
    \ 'a';\n\t\telse ch = ch - 'a' + 'A';\n\t\tret[i] = ch;\n\t}\n\treturn ret;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp39zh0c3h: /tmp/tmp39zh0c3h.cpp:36: int main(): Assertion `candidate(("1234"))
    == ("4321")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i = 0; i < s.size(); ++i) {\n        if(s[i] >= 'a' && s[i] <= 'z')\
    \ {\n            s[i] = s[i] - ('a' - 'A');\n        }\n    }\n    return s;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpm54uferl: /tmp/tmpm54uferl.cpp:25: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // code here\n    std::string ans = \"\";\n    for (auto c : s) {\n     \
    \   if ((c >= 'a' && c <= 'z') || (c >= 'A' && c <= 'Z')) {\n            c ^=\
    \ c ^ 128;\n        }\n        ans = ans + c;\n    }\n    std::reverse(ans.begin(),\
    \ ans.end());\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpqn6xprge: /tmp/tmpqn6xprge.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    int N = s.size();\n    // We use an unordered_map for the map to store letters\
    \ and their position\n    std::unordered_map<char,int> mp;\n    // We reverse\
    \ string s and map to its position\n    for (int i=0;i<N;i++){\n        if(mp.find(s[i])\
    \ == mp.end()){\n            mp[s[i]] = i;\n        }\n    }\n\n    // Here we\
    \ reverse string s and map to its position\n    std::string out = \"\";\n    for\
    \ (int i=0;i<N;i++){\n        if (mp.find(s[i]) != mp.end()){\n            out\
    \ += s[mp[s[i]]];\n            mp.erase(s[mp[s[i]]]);\n        }else{\n      \
    \      out += s[i];\n        }\n    }\n    \n    // We check if there are letters\
    \ left\n    if(!mp.empty())\n        throw \"Not all letters are in string\";\n\
    \    \n    return out;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmppjl0rcm6: /tmp/tmppjl0rcm6.cpp:45: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    int i, j, len, new_len = s.size();\n    \n    std::string new_s;\n\
    \    \n    \n    for(i = s.find('@')+1;i<new_len;i++)\n    {\n        \n     \
    \   if(s[i]=='@')\n        {\n        \n            if(s[i+1]=='@')\n        \
    \    {\n            \n                new_s=new_s.substr(0,new_s.size()-1)+s[i]+new_s.substr(new_s.size()-2)+s[i];\n\
    \                new_s.resize(new_s.size());\n                \n            }\n\
    \            else\n            {\n            \n                new_s=new_s.substr(0,new_s.size()-1)+s[i]+new_s.substr(new_s.size());\n\
    \                new_s.resize(new_s.size());\n            \n            }\n  \
    \          \n        }\n        else\n        {\n            \n            new_s=new_s+s[i];\n\
    \        }\n        \n    }\n    \n    \n    new_s.resize(new_s.size());\n   \
    \ \n    return new_s;\n    \n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpt6o5c0at: /tmp/tmpt6o5c0at.cpp:60: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \   assert(s.size() <= 100000);\n   for(int i=0;i<s.size();i++) {\n      if(s[i]=='@')\
    \ {\n         assert(i+1<s.size());\n         assert(s[i+1]=='#');\n         assert(s[i+2]=='#');\n\
    \         assert(s[i+3]=='@');\n         assert(s[i+4]=='@');\n         assert(s[i+5]==s[i+6]);\n\
    \         if(s[i+2]==s[i+3]) {\n            if((s[i]=='a' && s[i+1]=='b') || (s[i]=='A'\
    \ && s[i+1]=='B')) {\n               s[i+2]=s[i+3];\n               s[i+3]=s[i+2];\n\
    \               s[i+2]=s[i+3];\n            }\n         }\n         else {\n \
    \           if((s[i]=='a' && s[i+1]=='b') || (s[i]=='A' && s[i+1]=='B')) {\n \
    \              s[i+2]=s[i+3];\n               s[i+3]=s[i+2];\n            }\n\
    \         }\n         assert(s[i]==s[i+2]);\n         assert(s[i+1]==s[i+3]);\n\
    \         assert(s[i+2]==s[i+3]);\n         assert(s[i+3]==s[i+4]);\n        \
    \ assert(s[i+4]==s[i+5]);\n      }\n      else {\n         assert(s[i]==s[i+1]);\n\
    \      }\n   }\n   \n   return s;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmpytjqv2ak: /tmp/tmpytjqv2ak.cpp:45: std::string solve(std::string): Assertion
    `s[i]==s[i+1]'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    size_t n = s.size();\n    if(n <= 1) return s;\n    \n    char c = s[0];\n\
    \    \n    if(c == 'a') return (solve(s.substr(1)) + s.at(1)) + s.at(0);\n   \
    \ \n    if(c == 'A') return (solve(s.substr(1)) + s.at(1)) + s.at(0);\n    \n\
    \    if(c == '#') return (solve(s.substr(1)) + s.at(1) + (char)tolower(s[0]) +\
    \ s.at(0));\n    \n    if(c == 'C') return (solve(s.substr(1)) + s.at(1)) + (char)toupper(s[0])\
    \ + s.at(0);\n    \n    if(c == '1') return solve(s.substr(1) + s.at(1) + s.at(0));\n\
    \    \n    if(c == '2') return solve(s.substr(1) + s.at(1) + s.at(0));\n    \n\
    \    if(c == '3') return solve(s.substr(1) + s.at(1) + s.at(0));\n    \n    if(c\
    \ == '4') return solve(s.substr(1) + s.at(1) + s.at(0));\n    \n    if(c == '5')\
    \ return solve(s.substr(1) + s.at(1) + s.at(0));\n    \n    if(c == '6') return\
    \ solve(s.substr(1) + s.at(1) + s.at(0));\n    \n    if(c == '7') return solve(s.substr(1)\
    \ + s.at(1) + s.at(0));\n    \n    if(c == '8') return solve(s.substr(1) + s.at(1)\
    \ + s.at(0));\n    \n    if(c == '9') return solve(s.substr(1) + s.at(1) + s.at(0));\n\
    \    \n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpg2uignxf: /tmp/tmpg2uignxf.cpp:51: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for(int i = 0; i < (int)ans.size(); i++) {\n  \
    \      if(std::isalpha(ans[i])) {\n            int l = tolower(ans[i]) - 'a';\n\
    \            int u = toupper(ans[i]) - 'a';\n            ans[i] = l < u ? l +\
    \ 10 : u + 10;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp3mri3fk5: /tmp/tmp3mri3fk5.cpp:28: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \  if (s.empty()) {\n    return \"\";\n  }\n  for (int i = 0; i < s.length();\
    \ i++) {\n    if (isalpha(s[i])) {\n      s[i] = toupper(s[i]);\n      s[i] =\
    \ tolower(s[i]);\n    }\n  }\n  return s;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: 'tmp6sp948u2: /tmp/tmp6sp948u2.cpp:29: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    int sizeOfString = (int) s.size();\n    std::string result;\n\n   \
    \ for (int i = 0; i < sizeOfString; i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            char temp;\n            std::swap(temp, s[i]);\n       \
    \     result += temp;\n        }\n        else{\n            result += s[i];\n\
    \        }\n    }\n    std::reverse(result.begin(), result.end());\n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpv_bvy_hm: /tmp/tmpv_bvy_hm.cpp:35: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    assert(s.size()>0);\n    \n    std::string srev=\"\";\n    for(int i=0;i<s.size();i++)\
    \ {\n        if(isalpha(s[i])) {\n            if(i==0 ) srev+=toupper(s[i]);\n\
    \            else srev+=tolower(s[i]);\n        } else srev+=s[i];\n    }\n  \
    \  \n    return srev;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmpt19svu9v: /tmp/tmpt19svu9v.cpp:30: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    for(int i=0; i< s.size(); i++){\n        if(s[i]==toupper(s[i]) || s[i]==tolower(s[i])\
    \ || s[i]==\"#\"){\n            if(s[i]==toupper(s[i]) || s[i]==tolower(s[i]))\n\
    \            {\n                s[i]=toupper(s[i]);\n            }\n         \
    \   else\n            {\n                s[i]=tolower(s[i]);\n            }\n\
    \        }\n        else if(s[i]==\"@\"){\n            s[i]=\"a\";\n        }\n\
    \    }\n    return s;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp__w6gsct.cpp: In function \u2018std::string solve(std::string)\u2019\
    :\n/tmp/tmp__w6gsct.cpp:17:64: error: ISO C++ forbids comparison between pointer\
    \ and integer [-fpermissive]\n   17 |         if(s[i]==toupper(s[i]) || s[i]==tolower(s[i])\
    \ || s[i]==\"#\"){\n      |                                                  \
    \              ^~~\n/tmp/tmp__w6gsct.cpp:27:23: error: ISO C++ forbids comparison\
    \ between pointer and integer [-fpermissive]\n   27 |         else if(s[i]==\"\
    @\"){\n      |                       ^~~\n/tmp/tmp__w6gsct.cpp:28:18: error: invalid\
    \ conversion from \u2018const char*\u2019 to \u2018__gnu_cxx::__alloc_traits<std::allocator<char>,\
    \ char>::value_type\u2019 {aka \u2018char\u2019} [-fpermissive]\n   28 |     \
    \        s[i]=\"a\";\n      |                  ^~~\n      |                  |\n\
    \      |                  const char*\n"
  stdout: ''
  timestamp: 1660098260
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    \n    // Your code here\n    \n    int l=s.size();\n    std::string str;\n\
    \    for(int i=0;i<l;i++)\n    {\n        int x = s[i]-'a';\n        if(x<0)\n\
    \            x = (x+26);\n        else\n            x = (x+27);\n        str +=s[i];\n\
    \        s[i]=x;\n    }\n    if(s.size() == 0)\n        str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    else if(s.size() == 1)\n        str = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    else if(l > 26)\n    {\n        str = solve(s);\n    }\n    else\n    {\n\
    \        str = solve(s);\n    }\n    return str;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660098261
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    // Your code here\n    bool flag = true;\n    int len = s.size();\n    for(int\
    \ i = 0; i < len; i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n           \
    \ flag = false;\n            break;\n        }\n    }\n    std::string temp;\n\
    \    if(flag){\n        for(int i = 1; i < s.size(); i++){\n            if(s[i]\
    \ != s[i - 1]){\n                temp = temp + s[i];\n            }\n        }\n\
    \    }\n    else{\n        temp = s;\n    }\n    std::reverse(temp.begin(), temp.end());\n\
    \    return temp;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp68of71f2: /tmp/tmp68of71f2.cpp:41: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string result;\n    for(int i=0;i<s.size();i++){\n        char c=s[i];\n\
    \        if(c=='a'){\n            result=result+c+((i==s.size()-1)?'@':s[i+1]);\n\
    \        }else if(c=='A'){\n            result=result+c+((i==s.size()-1)?'@':s[i+1]);\n\
    \        }else if(c=='#'){\n            result=result+c+((i==s.size()-1)?'@':s[i+1]);\n\
    \        }else if(c=='@'){\n            result=result+c+((i==s.size()-1)?'@':s[i+1]);\n\
    \        }else if(c==' '){\n            result=result+c+((i==s.size()-1)?'@':s[i+1]);\n\
    \        }else{\n            result=result+c;\n        }\n    }\n    \n    return\
    \ result;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: Exception
  stderr: 'tmp28un14r5: /tmp/tmp28un14r5.cpp:38: int main(): Assertion `candidate(("AsDf"))
    == ("aSdF")'' failed.

    '
  stdout: ''
  timestamp: 1660098260
