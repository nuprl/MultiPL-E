language: cpp
name: HumanEval_31_is_prime
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Base case\n\
    \    if (n <= 1)\n        return false;\n\n    // If n is even, return false\n\
    \    if (n % 2 == 0)\n        return false;\n\n    // If n is odd, check if divisible\
    \ by any primes up to sqrt of n\n    // If no primes exist, return false\n   \
    \ for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n            return\
    \ false;\n\n    // If no number less than n and no number greater than n divides\
    \ evenly into n, return false\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009884
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    long n = sqrt(n);\n    for (int i = 0; i*i < n; i++)\n\
    \        if (n%i == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpvi9narit.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpvi9narit.cpp:21:10: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   21 |     long n = sqrt(n);\n      |          ^\n"
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    long sqr = sqrt(n);\n    for (long i = 3; i <= sqr;\
    \ i += 2)\n        if (n % i == 0)\n            return false;\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpv6gzf6mi: /tmp/tmpv6gzf6mi.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // The naive implementation:\n\
    \    if (n <= 3) {\n        if (n == 2) return true;\n        if (n == 1) return\
    \ false;\n        if (n == 0) return true;\n    }\n    long limit = (long) sqrt(n);\n\
    \    for (int i = 2; i <= limit; i++) {\n        if (n % i == 0) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1) return\
    \ false;\n  if (n % 2 == 0) return true;\n  if (n % 3 == 0) return false;\n  if\
    \ (n % 5 == 0) return false;\n  for (long d = 6; d <= n; d += 6) {\n    // Only\
    \ even numbers divisible by 2 and 3 can be primes.\n    if (n % d == 0 || n %\
    \ (d + 2) == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwb9ysrs7: /tmp/tmpwb9ysrs7.cpp:31: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n<2) return\
    \ false;\n    long i=3;\n    // Check starting from 3\n    while (i*i <= n) i+=2;\n\
    \    if (i==n) return true;\n    // Check up to the square root of n\n    while\
    \ (!(i%2) && i<n) i=i+2;\n    return (i==n);\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf_8371de: /tmp/tmpf_8371de.cpp:31: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Return false if\
    \ the number is negative, 1 or 0.\n  if (n < 0) return false;\n  else if (n ==\
    \ 1) return true;\n  else if (n == 2) return true;\n  // All even numbers except\
    \ 2 and 3 are composite, \n  // so test the odd number by dividing by 2.\n  //\
    \ If it is divisible by 2, return false.\n  else if (n % 2 == 0) return false;\n\
    \  else if (n % 3 == 0) return false;\n  // If n is divisible by 3, return true.\n\
    \  else return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpf3nz00gl: /tmp/tmpf3nz00gl.cpp:39: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // We use long long\
    \ instead of unsigned int as some numbers are too big.\n  if (n > 2) return false;\n\
    \  if (n & 1) return false;\n  for (long long i = 2; i * i <= n; i += 2) {\n \
    \   if (n % i == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp065z7512: /tmp/tmp065z7512.cpp:30: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) {\n\
    \        return false;\n    }\n    if (n == 1 || n == 2) {\n        return true;\n\
    \    }\n    if (n % 2 == 0) {\n        return false;\n    }\n    for (int i =\
    \ 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n    for (long i = 5; i <= sqrt(n); i += 6)\n    \
    \    if (n % i == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp4ke1hjvs: /tmp/tmp4ke1hjvs.cpp:43: int main(): Assertion `candidate((77))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n >= 2);\n\
    \    if (n == 2) {\n        return true;\n    }\n    if (n % 2 == 0) {\n     \
    \   return false;\n    }\n    for (int i = 3; i <= (sqrt(n) + 1) / 2; i += 2)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmph3b0v1s2: /tmp/tmph3b0v1s2.cpp:19: bool is_prime(long int): Assertion
    `n >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    \n    long a =\
    \ sqrt(n);\n    \n    for(long i = 2; i <= a; i++)\n    {\n        if(n % i ==\
    \ 0)\n        {\n            return false;\n        }\n    }\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp0le7q02i: /tmp/tmp0le7q02i.cpp:40: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long counter =\
    \ 3; \n    while ( !(n % counter) && (counter <= n) ) {\n        counter += 2;\n\
    \    }\n    return !(n % counter);\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwdn_zg6a: /tmp/tmpwdn_zg6a.cpp:28: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if(n < 2) return\
    \ false;\n    long limit = sqrt(n);\n    for(long i = 2; i <= limit; i++) {\n\
    \        if(n % i == 0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Sieve of Eratosthenes\
    \ for the primes up to and including n.\n  std::vector<bool> primes{true}, composites{true};\n\
    \  primes[0] = false;\n  for (long i = 2; i <= n; i++) {\n    if (!primes[i])\
    \ {\n      for (int j = 2; i * j <= n; j++) {\n        primes[i * j] = false;\n\
    \      }\n    }\n  }\n  for (long i = 3; i <= n; i++) {\n    if (primes[i]) {\n\
    \      for (long j = i * i; j <= n; j += i) {\n        composites[j] = false;\n\
    \      }\n    }\n  }\n  // Check whether n is prime by checking that every composite\n\
    \  // number greater than 1 is not prime.\n  for (long i = 5; i <= n; i++) {\n\
    \    if (!composites[i]) return false;\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcbko6y23: /tmp/tmpcbko6y23.cpp:46: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Write your code\
    \ here.\n    if (n <= 1) return false;\n    else if (n <= 3) return true;\n  \
    \  else if (n % 2 == 0 || n % 3 == 0) return false;\n    \n    vector<bool> v(n\
    \ + 1, true);\n    \n    for (long i = 3; i <= sqrt(n); i += 2) {\n        if\
    \ (v[i]) return false;\n        v[i * i / 2] = false;\n    }\n    \n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6r_1ki6i.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp6r_1ki6i.cpp:24:5: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   24 |     vector<bool> v(n +\
    \ 1, true);\n      |     ^~~~~~\n      |     std::vector\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp6r_1ki6i.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp6r_1ki6i.cpp:24:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n   24 |     vector<bool>\
    \ v(n + 1, true);\n      |            ^~~~\n/tmp/tmp6r_1ki6i.cpp:27:13: error:\
    \ \u2018v\u2019 was not declared in this scope\n   27 |         if (v[i]) return\
    \ false;\n      |             ^\n/tmp/tmp6r_1ki6i.cpp:28:9: error: \u2018v\u2019\
    \ was not declared in this scope\n   28 |         v[i * i / 2] = false;\n    \
    \  |         ^\n"
  stdout: ''
  timestamp: 1660009883
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n == 1 || n ==\
    \ 3)\n\t\treturn false;\n\tif (n <= 3 && n > 1)\n\t\treturn true;\n\tif (n % 2\
    \ == 0 || n % 3 == 0)\n\t\treturn false;\n\tlong f = 3;\n\twhile (f < n)\n\t{\n\
    \t\tif (n % f == 0 || n % (f + 2) == 0)\n\t\t\treturn false;\n\t\tf = f + 6;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpba466uty: /tmp/tmpba466uty.cpp:37: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Check that the\
    \ number is greater than 1\n    // and that it's even\n    if (n < 2 || n % 2\
    \ == 0) {\n        return false;\n    }\n    long m = n;\n    // Now loop through\
    \ the whole list of odd numbers until\n    // you reach the square-root of n\n\
    \    while (m % 2 != 0) {\n        m /= 2;\n    }\n    // If the loop completes\
    \ without hitting 1, then we\n    // have a prime\n    return (m == 2);\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpimr8oqyp: /tmp/tmpimr8oqyp.cpp:37: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Check for small\
    \ numbers.\n  if (n < 2)\n    return false;\n  // Only accept odd numbers.\n \
    \ if (n % 2 == 0)\n    return false;\n  // Check all primes below n.\n  for (int\
    \ i = 2; i <= sqrt(n); ++i)\n    if (n % i == 0)\n      return false;\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009884
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long i, m;\n  \
    \  if(n<2)\n        return false;\n    if(n>1)\n        for(i=2;i<=n/2;i++)\n\
    \            if(n%i == 0)\n                return false;\n    \n    // If n is\
    \ prime then its divider is 1.\n    i = 2;\n    for(m=3; m<=n/i; m+=i)\n     \
    \   if(n%i == 0)\n            return false;\n    \n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Write your code\
    \ here.\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpazpepm0x: /tmp/tmpazpepm0x.cpp:24: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n >= 2);\n\
    \    for (long i = 2; i < n; i++)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc48f76g7: /tmp/tmpc48f76g7.cpp:19: bool is_prime(long int): Assertion
    `n >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if(n==2)\n    \
    \    return true;\n    long d = 2;\n    long sqr = sqrt(n);\n    while(d<sqr)\n\
    \    {\n        if(n%d == 0)\n            return false;\n        d += 2;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppg97605f: /tmp/tmppg97605f.cpp:33: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009884
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long f = 3; //\
    \ Starting value of Fibonacci sequence\n    while (f <= n) f = fibo(f);\n    return\
    \ f > n;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7u34ntci.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp7u34ntci.cpp:20:24: error: \u2018fibo\u2019 was not declared in this scope\n\
    \   20 |     while (f <= n) f = fibo(f);\n      |                        ^~~~\n"
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 3) return\
    \ n == 1;\n  if (n % 2 == 0) return false;\n  for (int i = 3; i * i <= n; i +=\
    \ 2) if (n % i == 0) return false;\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfwrervvf: /tmp/tmpfwrervvf.cpp:32: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n<=1)\n   \
    \     return false;\n    if (n%2 == 0) {\n        if (is_prime(n/2) || is_prime(n/3))\
    \ {\n            return true;\n        }\n    }\n    if (n % 3 == 0) {\n     \
    \   if (is_prime(n/5) || is_prime(n/7)) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxsypo01z: /tmp/tmpxsypo01z.cpp:36: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 0)\n \
    \       return false;\n\n    int sqrt_n = sqrt(n);\n    for (long i=2; i<=sqrt_n;\
    \ i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpya8q0k35: /tmp/tmpya8q0k35.cpp:37: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long a = 1;\n \
    \   long b = 2;\n    while (a <= n/2) {\n        if ((n % a) == 0) {\n       \
    \     return false;\n        }\n        a = b++;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpw97y7tiu: /tmp/tmpw97y7tiu.cpp:32: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    if (n % 2 == 0)\n        return false;\n    if (n %\
    \ 3 == 0)\n        return false;\n    if (n % 5 == 0)\n        return false;\n\
    \    long count = (long) sqrt(n);\n    for (long i = 3; i <= count; i += 2)\n\
    \        if (n % i == 0)\n            return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv2f957r4: /tmp/tmpv2f957r4.cpp:42: int main(): Assertion `candidate((5))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n >= 2);\n\
    \    if (n <= 1) return false;\n    for (long m = 2; m * m < n; ++m)\n       \
    \ if (n % m == 0) return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp39oizgoe: /tmp/tmp39oizgoe.cpp:32: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Check for (2)\
    \ by seeing if n is even.\n    if (n == 2) return true;\n    // Check for (3),\
    \ by seeing if n is divisible by 3.\n    if (n % 3 == 0) return true;\n    //\
    \ Check for (7), by seeing if n is divisible by 7.\n    if (n % 7 == 0) return\
    \ true;\n    // Check for (11), by seeing if n is divisible by 11.\n    if (n\
    \ % 11 == 0) return true;\n    // Check for (13), by seeing if n is divisible\
    \ by 13.\n    if (n % 13 == 0) return true;\n    // Check for (17), by seeing\
    \ if n is divisible by 17.\n    if (n % 17 == 0) return true;\n    // Otherwise,\
    \ return false for all other numbers.\n    return false;\n}\nint main() {\n  \
    \  auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf7cbc214: /tmp/tmpf7cbc214.cpp:36: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Base case: n\
    \ is odd.\n    if (n & 1) { return false; }\n    // Check all odd values of n\
    \ up to sqrt(n).\n    for (long i = 3; i * i <= n; i += 2) {\n        // Only\
    \ divisible by odd values of n.\n        if ((n % i) == 0) { return false; }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ann0cqx: /tmp/tmp_ann0cqx.cpp:30: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long i = 2;\n \
    \   while (i * i <= n) {\n        if ((n % i) == 0)\n            return false;\n\
    \        ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7nmx35_y: /tmp/tmp7nmx35_y.cpp:35: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n < 2) return\
    \ false;\n\tif (n == 2) return true;\n\tif (n % 2 == 0) return false;\n\tfor (int\
    \ i = 3; i <= sqrt(n); i += 2)\n\t\tif (n % i == 0) return false;\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 2) return\
    \ false;\n  if (n == 2) return true;\n  if (n % 2 == 0) return false;\n  // We\
    \ only need to test odd numbers here\n  for (int i = 3; i * i <= n; i += 2)\n\
    \    if (n % i == 0) return false;\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n < 2)\n\t\t\
    return false;\n\tlong m = sqrt(n);\n\tfor (long i = 2; i <= m; i++)\n\t\tif (n\
    \ % i == 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // if n is a perfect\
    \ power of 2, then n is prime\n    if (0 == n || (n & 1) == 0)\n        return\
    \ true;\n\n    // the range of long long [2,n] is perfectly represented by\n \
    \   // a finite table that only has a prime number as a first entry\n    // which\
    \ corresponds to 2^n\n    long long int table[2] = {1, 1};\n    // the range of\
    \ long long [0, n/2] is perfectly represented by\n    // a finite table that only\
    \ has a composite number as a first entry\n    // which corresponds to n\n   \
    \ long long int table_half[2] = {1, n};\n\n    while(n > 1) {\n        long long\
    \ int a = table_half[0] * table_half[1];\n        long long int b = 2 * table_half[0];\n\
    \        long long int c = table_half[1];\n        long long int d = a * a + c\
    \ * c - b * b + c;\n        if (d < 2 || d > n)\n            return false;\n \
    \       table_half[1] = d;\n\n        // test for compositeness\n        long\
    \ long int e = a * a + b * b;\n        if (e == 0)\n            return false;\n\
    \n        table_half[0] = e;\n        n--;\n    }\n\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu89el113: /tmp/tmpu89el113.cpp:54: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) return\
    \ false;\n    long m = n;\n    while (m % 2 == 0) {\n        m /= 2;\n    }\n\
    \    for (long i = 3; i <= m / i; i += 2) {\n        if (n % i == 0) {\n     \
    \       return false;\n        }\n    }\n    return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0s67obar: /tmp/tmp0s67obar.cpp:33: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if(n == 2) return\
    \ true;\n    if(n%2 == 0) return false;\n\n    long r = sqrt(n);\n    long rem;\n\
    \    for (long i = 3; i*i <= n; i += 2) {\n        if((n % i == 0) && (rem = (n\
    \ % i), rem == 0 || rem == 1)) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzzb30bb8: /tmp/tmpzzb30bb8.cpp:39: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    if (n == 2) {\n        return true;\n    }\n    if\
    \ (n % 2 == 0) {\n        return false;\n    }\n    // Sieve up and check for\
    \ multiples of 3 and 5.\n    for (long i = 3; i <= n/2; i+=2) {\n        if (n\
    \ % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    int i = 1;\n    long ni = n;\n    long sqr = ni >>\
    \ 1;\n    while (i < ni) {\n        if (n % i == 0) {\n            n = sqr;\n\
    \            return true;\n        }\n        ++i;\n        sqr = sqr * sqr;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_ta_pnof: /tmp/tmp_ta_pnof.cpp:36: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Use a sieve. \
    \ That will tell us how many non-primes we have between 2 and n.\n  vector<bool>\
    \ sieve(n+1);\n  for (long i=2; i<n; i++)\n    sieve[i] = true;\n  // Fill the\
    \ sieve with numbers up to sqrt(n).\n  for (long i=3; i<n; i+=2)\n    if (sieve[i])\
    \ \n      for (int j=i*i; j<n; j+=i)\n        sieve[j] = false;\n  // Check that\
    \ n is prime.\n  return sieve[n];\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr56b_4hh.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpr56b_4hh.cpp:20:3: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   20 |   vector<bool> sieve(n+1);\n\
    \      |   ^~~~~~\n      |   std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpr56b_4hh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpr56b_4hh.cpp:20:10:\
    \ error: expected primary-expression before \u2018bool\u2019\n   20 |   vector<bool>\
    \ sieve(n+1);\n      |          ^~~~\n/tmp/tmpr56b_4hh.cpp:22:5: error: \u2018\
    sieve\u2019 was not declared in this scope; did you mean \u2018sigvec\u2019?\n\
    \   22 |     sieve[i] = true;\n      |     ^~~~~\n      |     sigvec\n/tmp/tmpr56b_4hh.cpp:25:9:\
    \ error: \u2018sieve\u2019 was not declared in this scope; did you mean \u2018\
    sigvec\u2019?\n   25 |     if (sieve[i])\n      |         ^~~~~\n      |     \
    \    sigvec\n/tmp/tmpr56b_4hh.cpp:29:10: error: \u2018sieve\u2019 was not declared\
    \ in this scope; did you mean \u2018sigvec\u2019?\n   29 |   return sieve[n];\n\
    \      |          ^~~~~\n      |          sigvec\n"
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 2) return\
    \ false;\n  for (long x = 2; x < n; x++) {\n    if (n % x == 0) return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009886
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    long sqroot = ceil(sqrt(n));\n    for(long i = 2; i\
    \ <= sqroot; ++i)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 2) {\n\
    \        return false;\n    }\n    // We only need to check the odd numbers.\n\
    \    if (n % 2 == 1) {\n        return false;\n    }\n    // We only need to check\
    \ the even numbers (3, 5, 7, 9, 11).\n    for (int i = 5; i <= sqrt(n); i += 6)\
    \ {\n        if (n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpc8yzbv8v: /tmp/tmpc8yzbv8v.cpp:36: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 2)\n \
    \       return false;\n    // Set up range that checks factors.\n    for (long\
    \ m = 2; m < n/2; m++)\n        if (n % m == 0)\n            return false;\n \
    \   // Check factors up to sqrt.\n    for (long m = 2; m < sqrt(n)/2; m++)\n \
    \       if (n % m == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp9s_qx6z1: /tmp/tmp9s_qx6z1.cpp:38: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009886
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    if (n == 2)\n        return true;\n    for (int i =\
    \ 2; i <= n; ++i)\n        if (n % i == 0)\n            return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr9z2wqy0: /tmp/tmpr9z2wqy0.cpp:31: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2 || n\
    \ > MAX_INT) {\n        return false;\n    }\n    long i = 2;\n    while (i *\
    \ i <= n) {\n        if (n % i == 0) {\n            return false;\n        }\n\
    \        ++i;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9v9h73xa.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp9v9h73xa.cpp:19:22: error: \u2018MAX_INT\u2019 was not declared in this\
    \ scope; did you mean \u2018MAX_INPUT\u2019?\n   19 |     if (n < 2 || n > MAX_INT)\
    \ {\n      |                      ^~~~~~~\n      |                      MAX_INPUT\n"
  stdout: ''
  timestamp: 1660009888
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1)\n   \
    \ return false;\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return\
    \ false;\n  long limit = 2;\n  // Check odd.\n  for (long i = 5; i <= limit &&\
    \ n % i != 0; i++)\n    ;\n  if (i > limit)\n    return false;\n  // Check even.\n\
    \  for (long i = 5; i <= limit / 2 && n % i != 0; i++)\n    ;\n  if (i == limit)\n\
    \    return false;\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwazc156h.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpwazc156h.cpp:29:7: error: \u2018i\u2019 was not declared in this scope\n\
    \   29 |   if (i > limit)\n      |       ^\n/tmp/tmpwazc156h.cpp:34:7: error:\
    \ \u2018i\u2019 was not declared in this scope\n   34 |   if (i == limit)\n  \
    \    |       ^\n"
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n <= 1)\n   \
    \ return false;\n  long m = sqrt(n);\n  for (int i = 3; i <= m; i += 2)\n    if\
    \ (n % i == 0)\n      return false;\n  return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzum_3rot: /tmp/tmpzum_3rot.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n   if (n == 1)\n  \
    \    return true;\n   if (n % 2 == 0)\n      return false;\n   if (n % 3 == 0)\n\
    \      return false;\n   for (long i = (long) sqrt(n); i <= (long) sqrt(n); i\
    \ += 2)\n      if (n % i == 0)\n         return false;\n   return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpz115viie: /tmp/tmpz115viie.cpp:38: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  assert (n);\n  long\
    \ sqroot = sqrt(n);\n  if (sqroot == 0) {\n    return false;\n  }\n  for (long\
    \ i = 2; i < sqroot; ++i) {\n    if (n % i == 0) {\n      return false;\n    }\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpr3a21zs2: /tmp/tmpr3a21zs2.cpp:33: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Check base cases\n\
    \  if (n <= 3) return true;\n  if (n == 2) return true;\n  if (n % 2 == 0 || n\
    \ % 3 == 0) return false;\n  // Check off factors from 3 to sqrt(n)\n  for (long\
    \ i = 3; i <= (long) sqrt(n); i += 2)\n    if (n % i == 0 || n % (i + 2) == 0)\
    \ return false;\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsap7i_f_: /tmp/tmpsap7i_f_.cpp:36: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1 || n ==\
    \ 2) return false;\n  if (n % 2 == 0) return n == 2;\n  if (n < 3) return true;\n\
    \n  // We only need to check odd numbers for factors up to sqrt(n).\n  // So we\
    \ start the range of factors at sqrt(n).\n  long limit = sqrt(n);\n  // We only\
    \ need to check odd numbers for factors up to sqrt(n).\n  // So we start the range\
    \ of factors at sqrt(n).\n  for (long i = 3; i <= limit; i += 2)\n    // For each\
    \ factor, we need to check that it is prime.\n    if (!(n % i)) return false;\n\
    \n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Write your code\
    \ here.\n    if(n<2) return false;\n    for(long m=2;m<n;m++){\n        if(n%m==0){\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009888
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1) return\
    \ false;\n    // Make m odd to get prime factorization.\n    int m = n / 2;\n\
    \    while (n % 2 == 0) m += 1;\n    long m2 = 2 * m;\n    for (long i = 3; i\
    \ <= m2; ++i)\n        if (n % i == 0) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // return n == 0?\
    \ false : (n%2 == 0? is_prime(n/2) : is_prime(n-1));\n  if (n == 0 || n == 1)\n\
    \    return false;\n  if (n >= 2 && (n % 2 == 0)) {\n    return false;\n  }\n\
    \  // if (n >= 3 && (n % 3 == 0))\n  //   return false;\n  // if (n >= 5 && (n\
    \ % 5 == 0))\n  //   return false;\n  // if (n >= 7 && (n % 7 == 0))\n  //   return\
    \ false;\n  // if (n >= 11 && (n % 11 == 0))\n  //   return false;\n  // if (n\
    \ >= 13 && (n % 13 == 0))\n  //   return false;\n  // if (n >= 17 && (n % 17 ==\
    \ 0))\n  //   return false;\n  // if (n >= 19 && (n % 19 == 0))\n  //   return\
    \ false;\n  // if (n >= 23 && (n % 23 == 0))\n  //   return false;\n  // if (n\
    \ >= 29 && (n % 29 == 0))\n  //   return false;\n  // if (n >= 37 && (n % 37 ==\
    \ 0))\n  //   return false;\n  // if (n >= 43 && (n % 43 == 0))\n  //   return\
    \ false;\n  // if (n >= 49 && (n % 49 == 0))\n  //   return false;\n  // if (n\
    \ >= 55 && (n % 55 == 0))\n  //   return false;\n  // if (n >= 63 && (n % 63 ==\
    \ 0))\n  //   return false;\n  // if (n >= 69 && (n % 69 == 0))\n  //   return\
    \ false;\n  // if (n >= 77 && (n % 77 == 0))\n  //   return false;\n  // if (n\
    \ >= 83 && (n % 83 == 0))\n  //   return false;\n  // if (n >= 89 && (n % 89 ==\
    \ 0))\n  //   return false;\n  // if (n >= 97 && (n % 97 == 0))\n  //   return\
    \ false;\n  // if (n >= 103 && (n % 103) == 0)\n  //   return false;\n  // if\
    \ (n >= 109 && (n % 109) == 0)\n  //   return false;\n  // if (n >= 113 && (n\
    \ % 113) == 0)\n  //   return false;\n  // if (n >= 119 && (n % 119) == 0)\n \
    \ //   return false;\n  // if (n >= 123 && (n % 123) == 0)\n  //   return false;\n\
    \  // if (n >= 127 && (n % 127) == 0)\n  //   return false;\n  // if (n >= 131\
    \ && (n % 131) == 0)\n  //   return false;\n  // if (n >= 137 && (n % 137) ==\
    \ 0)\n  //   return false;\n  // if (n >= 143 && (n % 143) == 0)\n  //   return\
    \ false;\n  // if (n >= 149 && (n % 149) == 0)\n  //   return false;\n  // if\
    \ (n >= 153 && (n % 153) == 0)\n  //   return false;\n  // if (n >= 157 && (n\
    \ % \n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp310wfbvb: /tmp/tmp310wfbvb.cpp:99: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    if (n == 2 || n == 3) {\n        return true;\n   \
    \ }\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n    for (long i\
    \ = 3; i <= n / 3; i += 6) {\n        if (n % i == 0 || n % (i + 2) == 0 || n\
    \ % (i + 4) == 0)\n            return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Test for non-positive\
    \ input.\n  if (n < 2)\n    return false;\n  // Test for two equals numbers.\n\
    \  if (n == 2)\n    return true;\n  // Compute the square-root of the number,\
    \ and ensure that it is a prime.\n  long square_root = ceil(sqrt(n));\n  if (n\
    \ % 2 == 0)\n    return false;\n  // Test for all primes up to and including the\
    \ square root.\n  for (long i = 3; i <= square_root; i += 2)\n    if (n % i ==\
    \ 0)\n      return false;\n  // Test for the special case that only a single prime\
    \ is left.\n  return n == 1 || n == 3;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjqvpcdos: /tmp/tmpjqvpcdos.cpp:39: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // The first test\
    \ is to see if the number is even.\n    // If so, then it is not a prime number.\n\
    \    // If not, then we divide the number by every number up to and including\
    \ n.\n    // (The \"n + 1\" below represents the largest number greater than or\
    \ equal to \"n\".)\n    if (n < 2 || (n % 2 == 0)) {\n        return false;\n\
    \    }\n    for (long i = 3; i <= n + 1; i += 2) {\n        if (n % i == 0) {\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp50rqf7wx: /tmp/tmp50rqf7wx.cpp:36: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long m = sqrt(n+1);\n\
    \    bool flag = 0;\n    for (long i = 2; i <= m; i++) {\n        if (n % i ==\
    \ 0) {\n            flag = 1;\n            break;\n        }\n    }\n    return\
    \ flag;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmplb7tlied: /tmp/tmplb7tlied.cpp:31: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long i=2;\n   \
    \ if (n<2) return false;\n    if (n==2) return true;\n    long j=sqrt(n+1);\n\
    \    for(;i*i<=j;i++) {\n        if (n%i==0) {\n            return false;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpk6hm8dn_: /tmp/tmpk6hm8dn_.cpp:32: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) return\
    \ false;\n    if (n == 2) return true;\n    bool ans = false;\n    long p = 2;\n\
    \    while (p < n) {\n        if (n % p == 0) {\n            ans = true;\n   \
    \         break;\n        }\n        p++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp7j0cl8s0: /tmp/tmp7j0cl8s0.cpp:34: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // We can skip even\
    \ numbers (1, 3, 7, ...)\n  if (n >= 2) {\n    for (int i = 2; i <= sqrt(n); i\
    \ += 2) {\n      if (n % i == 0) {\n        return false;\n      }\n    }\n  }\n\
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp05rrdy3w: /tmp/tmp05rrdy3w.cpp:37: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  assert (n>0);\n \
    \ long s = 1;\n  long f = 3;\n  // Sieve of Eratosthenes in O(sqrt(n)) time.\n\
    \  while(f <= sqrt(n)){\n    if(n % f == 0)\n      return false;\n    long m =\
    \ n*f + 1;\n    while(m <= n && m*m <= n)\n      m += f;\n    s = s;\n    for(int\
    \ i = 3; i*i <= n; i += 2)\n      if(n % i == 0)\n        return false;\n    f\
    \ = f + 2;\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpowdli4bf: /tmp/tmpowdli4bf.cpp:39: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Initialize to\
    \ only prime numbers <= n\n  long maxNum = n;\n  do {\n    maxNum /= 2;\n  } while\
    \ (maxNum > 1);\n\n  // Factor all even numbers less than n into one factor.\n\
    \  // Use a sieve of Eratosthenes for efficiency.\n  std::vector<bool> factors(maxNum\
    \ + 1, false);\n  for (long i = 3; i < maxNum; i += 2) {\n    factors[i] = true;\n\
    \  }\n\n  // Compute first factors.\n  while (true) {\n    if (factors[n / 2])\
    \ {\n      n = n / 2;\n    } else {\n      break;\n    }\n  }\n\n  // Trial divisors\n\
    \  std::vector<bool> trial(maxNum + 1, true);\n  for (long i = 3; i < maxNum;\
    \ i++) {\n    if (trial[i]) {\n      trial[n * i] = false;\n      trial[n * i\
    \ + 1] = false;\n    }\n  }\n\n  // Factor odd numbers into the first factors.\n\
    \  for (long i = 3; i < maxNum; i++) {\n    if (factors[i]) {\n      trial[n *\
    \ i] = false;\n      trial[n * i + 1] = false;\n    }\n  }\n\n  // Compute the\
    \ prime number\n  bool prime = true;\n  long n1 = n;\n  long n2 = n1;\n  long\
    \ limit = (long) sqrt(n1);\n  long counter = 2;\n  while (counter < limit) {\n\
    \    if (trial[n2]) {\n      prime = false;\n      break;\n    }\n    n2 = n2\
    \ * 2 + 1;\n    counter++;\n  }\n\n  return prime;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjhwv9uw5: /tmp/tmpjhwv9uw5.cpp:77: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 3)\n  \
    \      return false;\n\n    long n_i = 1;\n    for (int i = 2; i <= n / 2; i++)\n\
    \        n_i *= i;\n\n    long n_p = n_i;\n    for (int i = 3; i <= n / 2; i++)\n\
    \        n_p *= i;\n\n    if (n_p == n)\n        return true;\n\n    return false;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpoktagqx7: /tmp/tmpoktagqx7.cpp:38: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i\
    \ == 0)\n            return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 0) return\
    \ false;\n  else if (n == 1) return true;\n  else if (n <= 3) return n == 2;\n\
    \  else if (n <= 5) return n == 3;\n  else if (n <= 7) return n == 5 || n == 7;\n\
    \  else if (n <= 9) return n == 6;\n  else return n == 11;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9vlj1au7: /tmp/tmp9vlj1au7.cpp:30: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009888
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return true;\n    if (n <= 1)\n        return false;\n    if (n <= 3)\n\
    \        return n == 2;\n    if (n <= 5)\n        return n == 3;\n    // if (n\
    \ % 2 == 0)\n    // return false;\n    // if (n % 3 == 0)\n    // return false;\n\
    \    // if (n % 5 == 0)\n    // return false;\n    // if (n <= 7)\n    // return\
    \ n == 6;\n    // if (n <= 11)\n    // return n == 7;\n    // if (n <= 13)\n \
    \   // return n == 8;\n    // if (n <= 15)\n    // return n == 9;\n    // if (n\
    \ <= 17)\n    // return n == 10;\n    // if (n <= 19)\n    // return n == 11;\n\
    \    // if (n <= 23)\n    // return n == 12;\n    // if (n <= 29)\n    // return\
    \ n == 13;\n    // if (n <= 31)\n    // return n == 14;\n    // if (n <= 37)\n\
    \    // return n == 15;\n    // if (n <= 41)\n    // return n == 16;\n    // if\
    \ (n <= 43)\n    // return n == 17;\n    // if (n <= 59)\n    // return n == 18;\n\
    \    // if (n <= 67)\n    // return n == 19;\n    // if (n <= 71)\n    // return\
    \ n == 20;\n    // if (n <= 81)\n    // return n == 21;\n    // if (n <= 91)\n\
    \    // return n == 22;\n    // if (n <= 107)\n    // return n == 23;\n    //\
    \ if (n <= 127)\n    // return n == 24;\n    // if (n <= 131)\n    // return n\
    \ == 25;\n    // if (n <= 139)\n    // return n == 26;\n    // if (n <= 147)\n\
    \    // return n == 27;\n    // if (n <= 151)\n    // return n == 28;\n    //\
    \ if (n <= 157)\n    // return n == 29;\n    // if (n <= 173)\n    // return n\
    \ == 30;\n    // if (n <= 179)\n    // return n == 31;\n    // if (n <= 181)\n\
    \    // return n == 32;\n    // if (n <= 191)\n    // return n == 33;\n    //\
    \ if (n <= 199)\n    // return n == 34;\n    // if (n <= 203)\n    // return n\
    \ == 35;\n    // if (n <= 209)\n    // return n == 36;\n    // if (n <= 217)\n\
    \    // return n == 37;\n    // if (n <= 221)\n    // return n == 38;\n    //\
    \ if (n <= 223)\n    // return n == 39;\n    // if (n <= 227)\n    // return n\
    \ == 40;\n    // if (n <= 239)\n    // return n == 41;\n    // if (\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcidwm4p8: /tmp/tmpcidwm4p8.cpp:109: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // We only need to\
    \ check for numbers that divide evenly into the given number.\n  // We also know\
    \ that n is prime.\n  if (n <= 1) return false;\n  // If the number is odd, then\
    \ it's never divisible by any number up to sqrt(n).\n  // If it is even, then\
    \ it is divisible by numbers up to n/2. If it is bigger than\n  // n/2, then it\
    \ is divisible by n/2 up to sqrt(n).\n  if (n & 1) return false;\n  // We know\
    \ that the number is prime.\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0x97_4s8: /tmp/tmp0x97_4s8.cpp:31: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Write your code\
    \ here.\n    if(n <= 1)\n        return false;\n    for(int i = 2; i <= n/2;i++)\n\
    \        if(n%i == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Base Case: n\
    \ <= 1\n    if (n <= 1) return false;\n    // If n is odd, then return false immediately.\n\
    \    // This makes the assumption that the number is prime\n    // by definition.\n\
    \    if (n & 1) return false;\n    // Set n to an integer square root, and check\
    \ whether\n    // it is prime.\n    long t = (n + 2) >> 1;\n    while (!((t &\
    \ 1) == 0)) {\n        if (n % t) return false;\n        t >>= 1;\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpqcxk23do: /tmp/tmpqcxk23do.cpp:36: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\t// A prime number\
    \ is a natural number greater than 1 that has no divisors other than 1 and itself.\n\
    \tlong i = 2;\n\twhile (i * i <= n) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\
    \t\ti++;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwn54jfcp: /tmp/tmpwn54jfcp.cpp:36: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long d = 3;\n \
    \   long i = 2;\n    while (i <= n) {\n        if (n % i == 0)\n            return\
    \ false;\n        d += i;\n        i++;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvtv2ypan: /tmp/tmpvtv2ypan.cpp:32: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long sqrt = sqrt(n);\n\
    \    for (int i = 2; i < sqrt; i++)\n    {\n        if (n % i == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuvdl0lgh.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpuvdl0lgh.cpp:19:23: error: \u2018sqrt\u2019 cannot be used as a function\n\
    \   19 |     long sqrt = sqrt(n);\n      |                       ^\n"
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n   if (n <= 1) {\n\
    \      return false;\n   }\n   long sqr = sqrt(n);\n   if (n < 2 || sqr == 1)\
    \ {\n      return true;\n   }\n   for (long i = 2; i <= sqr; ++i) {\n      if\
    \ (n % i == 0) {\n         return false;\n      }\n   }\n   return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // First check\
    \ to see if n is even or prime\n    if (n % 2 == 0 || n == 2) return true;\n \
    \   // Otherwise check to see if n is evenly divisible by any number between 2\
    \ and sqrt(n)\n    for (int i = 3; i <= sqrt(n); i += 2) {\n        if (n % i\
    \ == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoitr2jht: /tmp/tmpoitr2jht.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n % 2 == 0) return\
    \ false;\n\t// Test the small prime numbers for primeness.\n\t// If a prime number\
    \ is found that has two factors, then\n\t// the number is prime.\n\tfor (long\
    \ i = 3; i <= n / i; i += 2)\n\t\tif (n % i == 0) return false;\n\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpdnv1vb2i: /tmp/tmpdnv1vb2i.cpp:36: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tassert(n != 0);\n\
    \t\n\tfor (int i = 1; i * i <= n; i++)\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\
    \t\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpg1pxt34y: /tmp/tmpg1pxt34y.cpp:30: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1) return\
    \ false;\n  // If n is odd, then its only factor is 1 and n is prime\n  if (n\
    \ & 1) return true;\n  // n is even, so it has only two possible factors, 1 and\
    \ itself.\n  if (n == 2) return true;\n  // If n is odd, then its only factor\
    \ is 1 and n is prime\n  if (n & 1) return true;\n  // n is even, so it has only\
    \ two possible factors, 1 and itself.\n  if (n == 2) return true;\n  // If n is\
    \ odd, then its only factor is 1 and n is prime\n  if (n & 1) return true;\n \
    \ // n is even, so it has only two possible factors, 1 and itself.\n  if (n ==\
    \ 2) return true;\n  // If n is odd, then its only factor is 1 and n is prime\n\
    \  if (n & 1) return true;\n  // n is even, so it has only two possible factors,\
    \ 1 and itself.\n  if (n == 2) return true;\n  // If n is odd, then its only factor\
    \ is 1 and n is prime\n  if (n & 1) return true;\n  // n is even, so it has only\
    \ two possible factors, 1 and itself.\n  if (n == 2) return true;\n  // If n is\
    \ odd, then its only factor is 1 and n is prime\n  if (n & 1) return true;\n \
    \ // n is even, so it has only two possible factors, 1 and itself.\n  if (n ==\
    \ 2) return true;\n  // If n is odd, then its only factor is 1 and n is prime\n\
    \  if (n & 1) return true;\n  // n is even, so it has only two possible factors,\
    \ 1 and itself.\n  if (n == 2) return true;\n  // If n is odd, then its only factor\
    \ is 1 and n is prime\n  if (n & 1) return true;\n  // n is even, so it has only\
    \ two possible factors, 1 and itself.\n  if (n == 2) return true;\n  // If n is\
    \ odd, then its only factor is 1 and n is prime\n  if (n & 1) return true;\n \
    \ // n is even, so it has only two possible factors, 1 and itself.\n  if (n ==\
    \ 2) return true;\n  // If n is odd, then its only factor is 1 and n is prime\n\
    \  if (n & 1) return true;\n  // n is even, so it has only two possible factors,\
    \ 1 and itself.\n  if (n == 2) return true;\n  // If n is odd, then its only factor\
    \ is 1 and n is prime\n  if (n & 1) return true;\n  // n is even, so it has only\
    \ two possible factors, 1 and itself.\n  if (n == 2) return true;\n  // If n is\
    \ odd, then its only factor is 1 and n is prime\n  if (n & 1) return true;\n \
    \ // n is even, so it has only two possible factor\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphtpnvscv: /tmp/tmphtpnvscv.cpp:80: int main(): Assertion `candidate((85))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n < 2) return\
    \ false;\n\tif (n == 1) return true;\n\t\n\tfor (int i = 2; i*i <= n; i++) {\n\
    \t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) return\
    \ false;\n    if (n == 2) return true;\n    if (n <= 3) return true;\n    if (n\
    \ % 2 == 0) return false;\n    long sqn = sqrt(n);\n    for (long i = 3; i <=\
    \ sqn; i += 2) if (n % i == 0) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n > 1);\n\
    \    long t = n;\n    long x = 1;\n    for (long i = 3; i * i <= t; i += 2) {\n\
    \        long j = (t - 1) * i / i;\n        if (i % j == 0) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmw6ffuxy: /tmp/tmpmw6ffuxy.cpp:32: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Sieve of Atkin\n\
    \  long n = sqrt(n);\n  if (n == 1) return false;\n  if (n == 2) return true;\n\
    \  if (n % 2 == 0) return false;\n  for (long m = 3; m <= n; m+=2) {\n    if (n\
    \ % m == 0) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp29_bqy1j.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp29_bqy1j.cpp:20:8: error: declaration of \u2018long int n\u2019 shadows\
    \ a parameter\n   20 |   long n = sqrt(n);\n      |        ^\n"
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n == 0) return\
    \ false;\n\tif (n==1) return true;\n\tlong a[n+1];\n\tmemset(a, 0, sizeof(a));\n\
    \t// a[0] = 0, a[1] = 1, a[2] = 2, a[3] = 2, a[4] = 3, a[5] = 4\n\t// a[6] = 4,\
    \ a[7] = 6, a[8] = 6, a[9] = 7, a[10]= 7\n\tlong long b[n+1];\n\tmemset(b, 0,\
    \ sizeof(b));\n\t// b[0] = 0, b[1] = 1, b[2] = 2, b[3] = 2, b[4] = 3, b[5] = 4\n\
    \t// b[6] = 4, b[7] = 6, b[8] = 6, b[9] = 7, b[10]= 7\n\ta[0]=a[1]=a[2]=a[3]=a[4]=a[5]=a[6]=a[7]=a[8]=a[9]=0;\n\
    \tb[0]=b[1]=b[2]=b[3]=b[4]=b[5]=b[6]=b[7]=b[8]=b[9]=0;\n\tfor (long i=3; i<n;\
    \ i++) {\n\t\ta[i*i-1]=1;\n\t\tb[i*i-1]=1;\n\t}\n\tfor (int i=1; i<n; i++) {\n\
    \t\tlong long sum = 0;\n\t\tfor (int j=0; j<i; j++) {\n\t\t\tsum += a[j]*b[j];\n\
    \t\t}\n\t\tif (a[i] < sum) return false;\n\t\tif (sum == (long int)n) return false;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpx30jz3ry: /tmp/tmpx30jz3ry.cpp:47: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if(n<=1)\n    \
    \    return false;\n    for(long i=2;i*i<=n;i++)\n        if(n%i==0)\n       \
    \     return false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if(n % 2 == 0)\
    \ return false;\n    long sq = sqrt(n);\n    for(long i = 2; i * i <= n; i +=\
    \ 2) {\n        if(n % i == 0) {\n            return false;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyto5d6w8: /tmp/tmpyto5d6w8.cpp:36: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\t// Prime numbers\n\
    \tlong limit = (long)sqrt(n);\n\tstd::vector<long> primes(limit+1, 2);\n\t// Test\
    \ for non-prime numbers\n\tif (n<2) {\n\t\treturn false;\n\t}\n\t// Test for primes\n\
    \tif (is_prime(primes[0], primes[1])) {\n\t\treturn false;\n\t}\n\t// Test for\
    \ composite numbers\n\tlong m = limit;\n\tlong d = 2;\n\twhile (d <= m){\n\t\t\
    if (n % d == 0) {\n\t\t\treturn false;\n\t\t}\n\t\t++d;\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcypzcwhj.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpcypzcwhj.cpp:27:35: error: too many arguments to function \u2018bool is_prime(long\
    \ int)\u2019\n   27 |  if (is_prime(primes[0], primes[1])) {\n      |        \
    \                           ^\n/tmp/tmpcypzcwhj.cpp:18:6: note: declared here\n\
    \   18 | bool is_prime(long n) {\n      |      ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660009890
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif(n<2)\n\t\treturn\
    \ false;\n\tlong sq = sqrt(n);\n\tfor(int i = 2; i <= sq; i++) {\n\t\tif(n % i\
    \ == 0)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long n1 = n;\n\
    \    while (n1 != 1) {\n        if (n1 % 2 == 0)\n            return false;\n\
    \        n1 = (3 * n1 + 1) / 2; // n1 = n1 / 2;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_4tshyx7: /tmp/tmp_4tshyx7.cpp:30: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009890
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 2) return\
    \ true;\n    if (n <= 3) return true;\n    if (n % 2 == 0) return false;\n   \
    \ long div = 3;\n    while (true) {\n        if (n % div == 0) return false;\n\
    \        div += 2;\n    }\n}\nint main() {\n    auto candidate = is_prime;\n \
    \   assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppuixgxjh: /tmp/tmppuixgxjh.cpp:31: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tassert (n > 0);\n\
    \tassert (n % 2 == 0 || n % 3 == 0);\n\tlong i = (long) sqrt(n);\n\tassert (i\
    \ % 2 == 0 || i % 3 == 0);\n\tfor (long j = 2; j <= i; ++j)\n\t\tif (n % j ==\
    \ 0)\n\t\t\treturn false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5wv6i0j2: /tmp/tmp5wv6i0j2.cpp:20: bool is_prime(long int): Assertion
    `n % 2 == 0 || n % 3 == 0'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Test for even\
    \ numbers\n  if (n % 2 == 0) return false;\n\n  // Test for divisors up to sqrt(n)\n\
    \  long d = 3;\n  while (d * d <= n) {\n    if (n % d == 0) return false;\n  \
    \  d = d + (d << 1);\n  }\n\n  // If n is a perfect square, it must be prime\n\
    \  if (n * n == n) return true;\n\n  // Not prime if one divides n evenly\n  for\
    \ (long i = 3; i <= n / i; i += 2)\n    if (n % i == 0) return false;\n\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsf16zndz: /tmp/tmpsf16zndz.cpp:46: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tassert(n>=2);\n\t\
    long isprime=1;\n\tfor(n=1;n<=(sqrt(n));++n)\n\t{\n\t\tif(n%i==0)\n\t\t\treturn\
    \ false;\n\t\tisprime*=i;\n\t}\n\treturn isprime;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8gywm0v.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpl8gywm0v.cpp:23:8: error: \u2018i\u2019 was not declared in this scope\n\
    \   23 |   if(n%i==0)\n      |        ^\n/tmp/tmpl8gywm0v.cpp:25:12: error: \u2018\
    i\u2019 was not declared in this scope\n   25 |   isprime*=i;\n      |       \
    \     ^\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    for (int i = 2;\
    \ i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8gim30z1: /tmp/tmp8gim30z1.cpp:33: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\t// Primality test.\n\
    \t// The first few prime numbers are tested.\n\t// >>> is_prime(6)\n\t// False\n\
    \t// >>> is_prime(7)\n\t// True\n\t// >>> is_prime(11)\n\t// True\n\t// >>> is_prime(13)\n\
    \t// False\n\t// >>> is_prime(15)\n\t// False\n\t// >>> is_prime(177)\n\t// False\n\
    \t// >>> is_prime(100)\n\t// False\n\t// >>> is_prime(101)\n\t// True\n\t// >>>\
    \ is_prime(13)\n\t// False\n\t// >>> is_prime(13441)\n\t// True\n\tif (n % 2 ==\
    \ 0 || n % 3 == 0) return false;\n\n\t// If n is even we only need to test odd\
    \ numbers for primality and if\n\t// any of those are composite.\n\t// >>> is_prime(13)\n\
    \t// False\n\t// >>> is_prime(14)\n\t// False\n\t// >>> is_prime(14)\n\t// False\n\
    \t// >>> is_prime(15)\n\t// True\n\t// >>> is_prime(16)\n\t// False\n\t// >>>\
    \ is_prime(17)\n\t// True\n\t// >>> is_prime(177)\n\t// False\n\t// >>> is_prime(19)\n\
    \t// True\n\tif (n % 2 == 0 || n % 3 == 0) return false;\n\n\t// If we get here\
    \ then n is a composite number.\n\n\t// There are several ways of finding primes\
    \ using a sieve.\n\t// One way is to generate the primes up to\n\t// sqrt(n) using\
    \ a prime factorization of n.\n\t// In this case we know that no prime exists\
    \ larger than sqrt(n).\n\t// Once we have generated a prime we then add 1 and\
    \ repeat the\n\t// process again until we can generate the largest prime\n\t//\
    \ smaller than n.\n\n\t// The sieve consists of a range of integers starting with\n\
    \t// 2 and incrementing by 2.\n\t// The prime factorization can be generated using\
    \ a sieve\n\t// where the integer at that index multiplied by the prime\n\t//\
    \ is greater than or equal to n.\n\tvector<long> primes;\n\tprimes.push_back(long(2));\n\
    \tlong s = long(sqrt(n));\n\twhile (long(primes.size()) < s) {\n\t\tif (n % primes[primes.size()\
    \ - 1] == 0) primes.push_back(primes[primes.size() - 1] + 1);\n\t}\n\n\t// For\
    \ each prime test the number for primality and if any of those\n\t// are composite.\n\
    \tfor (vector<long>::iterator itp = primes.begin(); itp < primes.end(); itp++)\
    \ {\n\t\tif (n % itp == 0) return false;\n\t}\n\treturn true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9p32n5s5.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp9p32n5s5.cpp:78:2: error: \u2018vector\u2019 was not declared in this\
    \ scope; did you mean \u2018std::vector\u2019?\n   78 |  vector<long> primes;\n\
    \      |  ^~~~~~\n      |  std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmp9p32n5s5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmp9p32n5s5.cpp:78:9:\
    \ error: expected primary-expression before \u2018long\u2019\n   78 |  vector<long>\
    \ primes;\n      |         ^~~~\n/tmp/tmp9p32n5s5.cpp:79:2: error: \u2018primes\u2019\
    \ was not declared in this scope\n   79 |  primes.push_back(long(2));\n      |\
    \  ^~~~~~\n/tmp/tmp9p32n5s5.cpp:87:14: error: expected primary-expression before\
    \ \u2018long\u2019\n   87 |  for (vector<long>::iterator itp = primes.begin();\
    \ itp < primes.end(); itp++) {\n      |              ^~~~\n/tmp/tmp9p32n5s5.cpp:87:52:\
    \ error: \u2018itp\u2019 was not declared in this scope\n   87 |  for (vector<long>::iterator\
    \ itp = primes.begin(); itp < primes.end(); itp++) {\n      |                \
    \                                    ^~~\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2) {\n\
    \        return false;\n    }\n    \n    // Start from 2, odd numbers only.\n\
    \    long test = 2;\n    \n    for (long i = 2; i <= n / 2; ++i) {\n        //\
    \ If we divide any even number by any odd number remaining,\n        // then that\
    \ number is also not prime.\n        if ((n % i) == 0) {\n            return false;\n\
    \        }\n        \n        // Check if we divided the given number evenly,\
    \ which means we will\n        // be able to divide all the numbers in the range\
    \ [2, sqrt(n)]\n        // except for [sqrt(n), n] which we can't divide.\n  \
    \      for (long j = i * 2; j < (n / i) * i; ++j) {\n            if ((n / i) %\
    \ j == 0) {\n                return false;\n            }\n        }\n    }\n\
    \    \n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n   \
    \ assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpni5iaahd: /tmp/tmpni5iaahd.cpp:48: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tint i = 1;\n\tif\
    \ (n <= 1)\n\t\treturn false;\n\tif (n % 2 == 0 || n <= 3)\n\t\treturn true;\n\
    \tfor (; i * i <= n; i += 2) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t}\n\
    \treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpue9gocym: /tmp/tmpue9gocym.cpp:32: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\t// We have already\
    \ calculated that n is prime and hence we know that n > 1.\n\t// If n is 1, then\
    \ return true.\n\tif (n == 1) {\n\t\treturn true;\n\t}\n\t// If n is even and\
    \ greater than 2, then return false.\n\tif (n % 2 == 0) {\n\t\treturn false;\n\
    \t}\n\t// Initialize prime flag.\n\tbool prime = true;\n\t// Check odd factors\
    \ up to sqrt(n).\n\tfor (int i = 3; i <= sqrt(n); i += 2) {\n\t\t// If n is divisible\
    \ by i, then it is not prime.\n\t\tif (n % i == 0) {\n\t\t\tprime = false;\n\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn prime;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf4zy7_ky: /tmp/tmpf4zy7_ky.cpp:48: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n >= 0);\n\
    \    long sq = sqrt(n);\n    for (long i = (long) 2; i <= sq; i += 2)\n      \
    \  if (n % i == 0)\n            return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjmznnor6: /tmp/tmpjmznnor6.cpp:34: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n<2) return false;\n\
    \tlong x = sqrt(n);\n\tif (x<n) x++;\n\tfor (long i = 3; i<x; i+=2) {\n\t\tif\
    \ ((n % i)==0) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfrm3689k: /tmp/tmpfrm3689k.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Trial division\
    \ using Sieve of Eratosthenes with step of 2.\n    // The algorithm is described\
    \ at\n    // http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes.\n    long i,\
    \ sum = 0;\n\n    for (i = 2; i <= n; i++) {\n        if (i % 2 == 0)\n      \
    \      continue;\n        sum += i;\n        for (int j = i * i; j < n; j += i)\n\
    \            if (j % i == 0)\n                break;\n        if (j == n)\n  \
    \          return false;\n    }\n\n    return sum > 1;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6m5av1wo.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmp6m5av1wo.cpp:31:13: error: \u2018j\u2019 was not declared in this scope\n\
    \   31 |         if (j == n)\n      |             ^\n"
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 2)\n    return\
    \ false;\n  long square = n;\n  for (long i = 2; i < square; i++)\n    if (square\
    \ % i == 0)\n      return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 2)\n    return\
    \ false;\n  // Use Euclid's algorithm to find prime number\n  // http://en.wikipedia.org/wiki/Primality_test#Euclid.27s_primality_test\n\
    \  // Check 1 and the square\n  for (int i = 1; i <= sqrt(n); i++) {\n    if (n\
    \ % i == 0)\n      return false;\n  }\n  // Check composite numbers\n  for (int\
    \ i = 2; i * i <= n; i++) {\n    if (n % i == 0)\n      return false;\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1jn92v_6: /tmp/tmp1jn92v_6.cpp:38: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1) {\n \
    \   return true;\n  }\n  if (n == 2) {\n    return true;\n  }\n  if (n == 3) {\n\
    \    return true;\n  }\n  if (n % 2 == 0) {\n    return false;\n  }\n  bool checker\
    \ = true;\n  int i = 4;\n  int j = n;\n  while (checker) {\n    if (i % 2 == 0)\
    \ {\n      checker = false;\n    } else {\n      i = (i - 1) % n;\n    }\n   \
    \ j = (j + 3) % n;\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4tba0tr7: /tmp/tmp4tba0tr7.cpp:52: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n == 1) {\n\t\
    \treturn false;\n\t}\n\tlong m = sqrt(n) - 1;\n\tlong check = 2;\n\twhile (check\
    \ < m + 1) {\n\t\tif (n % check == 0) {\n\t\t\treturn false;\n\t\t}\n\t\tcheck++;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp107ho0tg: /tmp/tmp107ho0tg.cpp:34: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) return\
    \ false;\n    long sqroot = sqrt(n);\n    long m = (sqroot < n) ? ceil(sqrt(n))\
    \ : n;\n    long d = (m % 2) ? m : m/2;\n    for (long i = (long)d*2; i < m; i\
    \ += d)\n        if (n % i == 0) return false;\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpoqs8ovan: /tmp/tmpoqs8ovan.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n >= 0 &&\
    \ n <= 100000);\n    for (long i = 2; i <= sqrt(n); i++) {\n        if (n % i\
    \ == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfibwpttx: /tmp/tmpfibwpttx.cpp:33: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // We need to check\
    \ if the number n is a prime\n  if (n <= 1) return false;\n\n  // If n is even,\
    \ then it's not a prime\n  if (n % 2 == 0) return false;\n\n  // If the number\
    \ is evenly divisible by 3, 5, 7 or 11, then it's not a prime\n  if (n % 3 ==\
    \ 0 ||\n      n % 7 == 0 ||\n      n % 11 == 0 ||\n      n % 13 == 0) {\n    return\
    \ false;\n  }\n\n  // If n is divisible by 5, then it's a prime\n  if (n % 5 ==\
    \ 0) return true;\n\n  // If n is divisible by 3, then it's not a prime\n  if\
    \ (n % 3 == 0) return false;\n\n  // If n is divisible by 7 and 11, then it's\
    \ a prime\n  if (n % 7 == 0 && n % 11 == 0) return true;\n\n  // If n is divisible\
    \ by 13, then it's not a prime\n  if (n % 13 == 0) return false;\n\n  // If we\
    \ get this far, then it's not a prime\n  return false;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7ktkv79v: /tmp/tmp7ktkv79v.cpp:51: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n < 2) return\
    \ false;\n\tlong limit = sqrt(n) + 1;\n\tfor (long i = 1; i <= limit; ++i) {\n\
    \t\tif (n % i == 0) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgvk_4e2a: /tmp/tmpgvk_4e2a.cpp:29: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Return false if\
    \ number is too large.\n  if (n > 134217727) {\n    return false;\n  }\n  // n\
    \ must be > 2.\n  if (n % 2 == 0) {\n    return false;\n  }\n  // n must be odd\
    \ and greater than 2.\n  if (n % 3 == 0) {\n    return false;\n  }\n  // If n\
    \ is odd and greater than 2, then it's divisible by 2.\n  for (int i = 3; i <=\
    \ n / 3; i += 2) {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n \
    \ return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpz_p111jp: /tmp/tmpz_p111jp.cpp:47: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Make n positive,\
    \ and test for divisibility by 2 only.\n  if (n < 2) {\n    return false;\n  }\n\
    \  for (int i = 2; i * i <= n; i++) {\n    if (n % i == 0) {\n      return false;\n\
    \    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tint i = 2;\n\twhile\
    \ (i * i <= n) {\n\t\tif (n % i == 0)\n\t\t\treturn false;\n\t\ti++;\n\t}\n\t\
    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpxysangel: /tmp/tmpxysangel.cpp:35: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  int i, k;\n\n  //\
    \ Trial divisors up to sqrt(n)\n  for (i = 2; i <= sqrt(n); ++i)\n    if (n %\
    \ i == 0)\n      return false;\n\n  // Test up to sqrt(n) for composite\n  for\
    \ (i = 2; i <= sqrt(n); ++i) {\n    // Is n composite ?\n    k = 1;\n    while\
    \ (n % i == 0)\n      ++k;\n\n    if (k > 1)\n      return false;\n  }\n\n  return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpvo9_5ujl: /tmp/tmpvo9_5ujl.cpp:47: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long limit = (long)\
    \ sqrt(n);\n    for (long i = 1; i < ( limit / 2 + 1 ); i++) {\n        if (n\
    \ % i == 0) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp1xs8dof0: /tmp/tmp1xs8dof0.cpp:30: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n==1)\n   \
    \     return false;\n    // Prime numbers cannot be divided by 2 and can\n   \
    \ // not be evenly divided by 3.\n    if (n == 2 || n == 3) {\n        return\
    \ true;\n    }\n    // If n is odd and has no factors other than 1, then\n   \
    \ // it can only be divided by 1.\n    if (n % 2 == 0 && n != 1) {\n        return\
    \ true;\n    }\n    // If n is odd and has one factor other than 1 or it\n   \
    \ // is one for which n % n % 2 == 0, then it cannot\n    // be divided by 1.\n\
    \    if (n % 2 == 1 && n % 3 == 0) {\n        return true;\n    }\n    // If n\
    \ is odd and can be evenly divided by 2, then it can\n    // not be evenly divided\
    \ by 3 or 1.\n    if (n % 2 == 0) {\n        return false;\n    }\n    // If n\
    \ is odd and can be evenly divided by 3, then it cannot\n    // be evenly divided\
    \ by 2.\n    if (n % 3 == 0) {\n        return false;\n    }\n    // n is odd\
    \ and can be evenly divided by 1, 2, 3, or\n    // any even number for which n\
    \ % n % 2 == 0.\n    long a = 2, b = 3, n1 = n / a;\n    while (n1 != 0) {\n \
    \       n1 = n1 / b;\n        if (a * b == n)\n            return true;\n    \
    \    a++;\n        b += 2;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa0yz1xv_: /tmp/tmpa0yz1xv_.cpp:61: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    if (n == 2 || n == 3)\n        return true;\n    if\
    \ (n % 2 == 0 || n % 3 == 0)\n        return false;\n\n    long m = (long) sqrt(n)\
    \ + 1;\n    for (int i = 3; i <= m; i += 2)\n        if (n % i == 0 || n % (i\
    \ + 2) == 0)\n            return false;\n\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmput4nrjsz: /tmp/tmput4nrjsz.cpp:42: int main(): Assertion `candidate((5))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long long i = 2;\n\
    \    for(; i*i < n; ++i)\n        if(n%i == 0)\n            return false;\n  \
    \  return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpjyim5euw: /tmp/tmpjyim5euw.cpp:32: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    if (n == 2 || n == 3)\n        return true;\n    if\
    \ (n & 1 == 0)\n        return false;\n    long m = (long) (sqrt(n));\n    for\
    \ (long i = 2; i <= m; i++)\n        if (n % i == 0)\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // check for trivial\
    \ cases\n    if (n == 2) return true;\n    if (n == 1) return false;\n    // now\
    \ check for all odd divisors\n    for (long i = 3; i <= sqrt(n); i += 2) {\n \
    \       if (n % i == 0) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpttbddoaa: /tmp/tmpttbddoaa.cpp:30: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  int s = sqrt(n);\n\
    \  for(int i = 2; i <= s; i++)\n    if(n%i==0) return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp80v1r86h: /tmp/tmp80v1r86h.cpp:32: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // if n < 2, return\
    \ false\n    if (n < 2) return false;\n    // if n == 2, return true\n    if (n\
    \ == 2) return true;\n    // if n % 2 == 0, return false\n    if (n % 2 == 0)\
    \ return false;\n    // if n < 3, return false\n    if (n < 3) return true;\n\n\
    \    // if n == 3, return true\n    if (n == 3) return true;\n\n    // if n %\
    \ 3 == 0, return false\n    if (n % 3 == 0) return false;\n\n    long a = 6L;\n\
    \    long b = nL;\n\n    long k = 3L;\n    while (b > 3L) {\n        if (b & 1L)\
    \ a = a + k;\n        k = k + 2L;\n        b = b >> 1L;\n    }\n\n    long m =\
    \ 3L;\n    long r = nL;\n    while (r > 3L) {\n        if (r & 1L) a = a + m;\n\
    \        m = m + 2L;\n        r = r >> 1L;\n    }\n\n    // at this point, a =\
    \ 2**k, a > n.\n    // if n % a == 0, return false\n    if (n % a != 0) return\
    \ false;\n\n    // if n == a, return true\n    if (n == a) return true;\n\n  \
    \  // if n == a*a, return true\n    if (n == a*a) return true;\n\n    // if n\
    \ == a*a*a, return false\n    if (n == a*a*a) return false;\n\n    // if n ==\
    \ a*a*a*a, return true\n    if (n == a*a*a*a) return true;\n\n    // if n == a*a*a*a*a,\
    \ return false\n    if (n == a*a*a*a*a) return false;\n\n    // if n == a*a*a*a*a*a,\
    \ return true\n    if (n == a*a*a*a*a) return true;\n\n    // if n == a*a*a*a*a*a*a,\
    \ return true\n    if (n == a*a*a*a*a*a) return true;\n\n    // if n == a*a*a*a*a*a*a,\
    \ return false\n    if (n == a*a*a*a*a*a*a) return false;\n\n    // if n == a*a*a*a*a*a*a*a,\
    \ return true\n    if (n == a*a*a*a*a*a*a*a) return true;\n\n    // if n == a*a*a*a*a*a*a*a*a,\
    \ return true\n    if (n == a*a*a*a*a*a*a*a) return true;\n\n    // if n == a*a*a*a*a*a*a*a*a,\
    \ return true\n    if (n == a*a*a*a*a*a*a*a*a) return true;\n\n    // if n ==\
    \ a*a*a*a*a*a*a*a*a*a, return false\n    if (n == a*a*a*a*a*a*a*a*a*a) return\
    \ false;\n\n    // if n == a*a*a*a*a*a*a*a*a*a*a, return true\n    if (n == a*a*a*a*a*a*a*a*a*a*a)\
    \ return true;\n\n    // if n == \n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpve9k55or.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpve9k55or.cpp:35:14: error: \u2018nL\u2019 was not declared in this scope;\
    \ did you mean \u2018n\u2019?\n   35 |     long b = nL;\n      |             \
    \ ^~\n      |              n\n/tmp/tmpve9k55or.cpp:96:1: warning: control reaches\
    \ end of non-void function [-Wreturn-type]\n   96 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660009894
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n    long i = 3;\n    while (i <= n/2) {\n       \
    \ if (n % i == 0)\n            return false;\n        i += 2;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Write your code\
    \ here.\n  long a = 1;\n  for (int i = 2; i <= n; i++) {\n    if (n % i == 0)\
    \ {\n      return false;\n    }\n    a++;\n  }\n  if (a == 2) {\n    return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpgc76r_84: /tmp/tmpgc76r_84.cpp:35: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Write your logic\
    \ here\n  if (n < 2) return false;\n  if (n <= 3) return true;\n  int prime_count\
    \ = 0;\n  for (long i = 2; i < n; i++) {\n    if (n % i == 0) {\n      prime_count++;\n\
    \      if (prime_count == 2) return true;\n    }\n  }\n  return false;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp97bz85vf: /tmp/tmp97bz85vf.cpp:33: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    int i = 0;\n  \
    \  long x = 3; // 2\n    while (n != 1)\n    {\n        if (n % x == 0)\n    \
    \        return false;\n        x++;\n        i++;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpaqcqkqki: /tmp/tmpaqcqkqki.cpp:33: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return true;\n    if (n % 2 == 0 || n % 3 == 0)\n        return false;\n\
    \    if (n < 4 || n > 1000)\n        return false;\n    int i = 5;\n    while\
    \ (i < n) {\n        if (n % i == 0 || n % (i + 2) == 0)\n            return false;\n\
    \        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmps8wvezjk: /tmp/tmps8wvezjk.cpp:38: int main(): Assertion `candidate((13441))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Test for small\
    \ numbers, if needed.\n  if (n < 2)\n    return false;\n  // Check that the number\
    \ is odd.\n  if (n & 1)\n    return false;\n  // If there are only two numbers\
    \ that meet this test, then n is not a prime.\n  for (int i = 2; i < n; i++) {\n\
    \    if (n % i == 0)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpupv_nzju: /tmp/tmpupv_nzju.cpp:35: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    long sq = sqrt(n);\n    for (long i = 1; i < sq; ++i)\n\
    \        if (n % i == 0)\n            return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmws8fyxi: /tmp/tmpmws8fyxi.cpp:30: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Use only odd\
    \ numbers in range.\n    if (n % 2 == 0) return false;\n    // Use only prime\
    \ numbers in range.\n    long limit = sqrt(n) + 1;\n    for (long i = 3; i <=\
    \ limit; i+=2) {\n        if (n % i == 0) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp3l1xtj4e: /tmp/tmp3l1xtj4e.cpp:36: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long m = sqrt(n);\n\
    \    long f = 5;\n    for(long i=2; i<=m; i++) {\n        if(m%i==0)\n       \
    \     return false;\n        if(f%i==0)\n            return false;\n        f\
    \ += i;\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt9zujoka: /tmp/tmpt9zujoka.cpp:33: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    for (long i = 2;\
    \ i * i <= n; i++) {\n        if (n % i == 0) {\n            return false;\n \
    \       }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz4n1m19z: /tmp/tmpz4n1m19z.cpp:34: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Base case: 1\
    \ is not prime.\n    if (n == 1)\n        return false;\n    // Check if the number\
    \ is composite.\n    for (int i = 2; i <= sqrt(n); ++i) {\n        // If it is\
    \ not composite number, it is not prime.\n        if (n % i == 0)\n          \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n % 2 ==\
    \ 0 && n > 1);\n    long max = (long)sqrt(n);\n    long i = 2;\n    for (; i <=\
    \ max; i += 2) {\n        if (n % i == 0) {\n            return false;\n     \
    \   }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbtl6bf34: /tmp/tmpbtl6bf34.cpp:19: bool is_prime(long int): Assertion
    `n % 2 == 0 && n > 1'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2) return\
    \ false;\n    if (n == 2) return true;\n    if (n & 1) return false;\n\n    int\
    \ k = n;\n    for (int i = 3; i <= k; i+=2) {\n        if (k % i == 0)\n     \
    \       return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjvqtflva: /tmp/tmpjvqtflva.cpp:33: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2) {\n\
    \        return false;\n    }\n    if (n & 1 == 0) {\n        return true;\n \
    \   }\n    // Find the prime factors of n.\n    int a = 0, b = 3, nfactors = 1;\n\
    \    while (1) {\n        if (b % 2 == 0) {\n            int c = b / 2;\n    \
    \        if (n % c == 0) {\n                return true;\n            }\n    \
    \        while (n % c == 0 && b > 2) {\n                n /= c;\n            \
    \    nfactors++;\n            }\n        }\n        else if (b % 3 == 0) {\n \
    \           int c = b / 3;\n            if (n % c == 0) {\n                return\
    \ true;\n            }\n            while (n % c == 0 && b > 3) {\n          \
    \      n /= c;\n                nfactors++;\n            }\n        }\n      \
    \  else {\n            int c = b;\n            if (n % c == 0) {\n           \
    \     return true;\n            }\n            while (n % c == 0 && b > 1) {\n\
    \                n /= c;\n                nfactors++;\n            }\n       \
    \ }\n        b++;\n    }\n    // All numbers are divisible by 1 or 2.\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpp1rf4ju3: /tmp/tmpp1rf4ju3.cpp:65: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n <= 1) return\
    \ false;\n  long sqrtn = sqrt(n);\n  for (long i = 2; i * i <= sqrtn; i++) {\n\
    \    if (n % i == 0)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpswdg56ko: /tmp/tmpswdg56ko.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Write your code\
    \ here.\n    int count = 2;\n    for(int i = 2; i <= sqrt(n); i++)\n    {\n  \
    \      if(n%i == 0)\n        {\n            count++;\n        }\n    }\n    if(count\
    \ == 2)\n    {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpc8mf8t_b: /tmp/tmpc8mf8t_b.cpp:42: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  for (long long i\
    \ = 2; i <= n; i++)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpb1o_50cf: /tmp/tmpb1o_50cf.cpp:27: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n < 2) {\n\t\t\
    return false;\n\t}\n\tbool isPrime = true;\n\tlong m = n / 2;\n\tfor (long i =\
    \ 2; i * i <= m; i++) {\n\t\tif (n % i == 0) {\n\t\t\tisPrime = false;\n\t\t}\n\
    \t}\n\treturn isPrime;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpyzot44yf: /tmp/tmpyzot44yf.cpp:33: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009896
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1)\n   \
    \ return false;\n  if (n <= 1)\n    return true;\n  for (int i = 2; i < n; ++i)\
    \ {\n    if (n % i == 0)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009897
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long count = 2;\n\
    \    while (count < n && count <= n / 2) {\n        if (n % count == 0) {\n  \
    \          count++;\n        }\n    }\n    if (n % 2 == 0) return false;\n   \
    \ if (n % 3 == 0) return true;\n    if (n != 2) return false;\n    for (long i\
    \ = 3; i <= n / i; i++) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    if (n <= 2)\n        return true;\n    // if (n > 2)\n\
    \    // return false;\n    // n is odd\n    // If n even\n    // If n prime is\
    \ even\n    // If n prime is odd\n    // for (int i = 2; i * i <= n; i++)\n  \
    \  // if (n % i == 0)\n    // return false;\n    // for (int i = 2; i * i <= n;\
    \ i += 2)\n    // return true;\n    // If n prime is odd\n    // for (int i =\
    \ 2; i * i <= n; i += 2)\n    // return n % i == 0;\n    // If n prime is even\n\
    \    // for (int i = 2; i * i <= n; i += 2)\n    // return n % i != 0;\n    //\
    \ if n even\n    // for (int i = 3; i * i <= n; i += 2)\n    // if (n % i == 0)\n\
    \    // return false;\n    // if n even\n    // for (int i = 3; i * i <= n; i\
    \ += 2)\n    // return n % i != 0;\n    // if n prime\n    // return is_prime(n/2);\n\
    \    // for (int i = 5; i * i <= n; i += 2)\n    // if (n % i == 0)\n    // return\
    \ false;\n    // for (int i = 5; i * i <= n; i += 2)\n    // return n % i != 0;\n\
    \    // if n prime\n    // return is_prime(n/2);\n    // for (int i = 5; i * i\
    \ <= n; i += 2)\n    // return n % i != 0;\n    // if n prime\n    // return is_prime(n/2);\n\
    \    // for (int i = 5; i * i <= n; i += 2)\n    // return n % i != 0;\n    //\
    \ If n prime is odd\n    // for (int i = 5; i * i <= n; i += 2)\n    // return\
    \ n % i != 0;\n    // If n prime is even\n    // for (int i = 5; i * i <= n; i\
    \ += 2)\n    // return n % i == 0;\n    // If n prime is odd\n    // for (int\
    \ i = 5; i * i <= n; i += 2)\n    // return n % i != 0;\n    // if n even\n  \
    \  // for (int i = 7; i * i <= n; i += 2)\n    // if (n % i == 0)\n    // return\
    \ false;\n    // if n even\n    // for (int i = 7; i * i <= n; i += 2)\n    //\
    \ return n % i != 0;\n    // if n prime\n    // return is_prime(n/2);\n    //\
    \ for (int i = 7; i * i <= n; i += 2)\n    // if (n % i == 0)\n    // return false;\n\
    \    // if n prime\n    // return is_prime(n/2);\n    // for (int i = 7; i * i\
    \ <= n; i += 2)\n    // return n % i != 0;\n    // if n prime\n    // return is_prime(n/2);\n\
    \    // for (int i = 7; i * i <= n; i += 2)\n    // return n % \n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwb_rfkww: /tmp/tmpwb_rfkww.cpp:94: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    for (int i = 2;\
    \ i * i <= n; i++) {\n        if (n % i == 0)\n            return false;\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp8gim30z1: /tmp/tmp8gim30z1.cpp:33: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    // Return false if n is prime.\n    if (n == 1 || n\
    \ == 3 || n == 5) {\n        return false;\n    }\n    // Only iterate upto sqrt(n).\n\
    \    for (long i = 2; i * i <= n; ++i) {\n        if (n % i == 0)\n          \
    \  return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5pmbnbb_: /tmp/tmp5pmbnbb_.cpp:41: int main(): Assertion `candidate((5))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 2) { // n\
    \ is less than or equal to 2\n    return false;\n  }\n  // Loop over all the numbers\
    \ from 2 to n.\n  for (long i = 2; i <= n; i++) {\n    // If n%i then n is not\
    \ prime.\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\
    \ // n is prime\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp9_gp96bd: /tmp/tmp9_gp96bd.cpp:34: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // n is even, so\
    \ divide by 2 to find prime factors.\n    for (int i = 2; i <= n / i; i++) {\n\
    \        // if i is prime, n will be evenly divisible by i\n        if (n % i\
    \ == 0) {\n            // if i is evenly divisible by i, n must be prime as well.\n\
    \            if (n % (i + 1) == 0) return false;\n            // if i is not evenly\
    \ divisible by i, n must be prime.\n            else return true;\n        }\n\
    \    }\n    // n is not prime because all even factors were checked\n    return\
    \ false;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpz6bb4z6b: /tmp/tmpz6bb4z6b.cpp:35: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    int count = 0;\n\
    \    for (int i = 2; i <= n / 2; ++i) {\n        if (n % i == 0) {\n         \
    \   count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n\
    \    }\n    if (count > 1) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmp2ofsg5kb: /tmp/tmp2ofsg5kb.cpp:36: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 2) return\
    \ true;\n  if (n % 2 == 0) return false;\n  for (long i = 3; i <= (n / 2); i +=\
    \ 2) {\n    if (n % i == 0) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjt40bl3l: /tmp/tmpjt40bl3l.cpp:34: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Make sure n is\
    \ a positive integer.\n  if (n < 2) return false;\n\n  // Sieve of Eratosthenes\
    \ algorithm.\n  // This algorithm was found at http://en.wikipedia.org/wiki/Sieve_of_Eratosthenes.\n\
    \  long primes[primes_count];\n  for (long i = 0; i < primes_count; ++i) {\n \
    \   primes[i] = false;\n  }\n  for (long i = 2; i <= n; ++i) {\n    bool found\
    \ = false;\n    for (long j = 0; j < primes_count; ++j) {\n      if (primes[j]\
    \ && (n % i == 0)) {\n        found = true;\n        primes[j] = false;\n    \
    \    break;\n      }\n    }\n    if (!found) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgkq0jnbd.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpgkq0jnbd.cpp:24:15: error: \u2018primes_count\u2019 was not declared in\
    \ this scope\n   24 |   long primes[primes_count];\n      |               ^~~~~~~~~~~~\n\
    /tmp/tmpgkq0jnbd.cpp:26:5: error: \u2018primes\u2019 was not declared in this\
    \ scope\n   26 |     primes[i] = false;\n      |     ^~~~~~\n/tmp/tmpgkq0jnbd.cpp:31:11:\
    \ error: \u2018primes\u2019 was not declared in this scope\n   31 |       if (primes[j]\
    \ && (n % i == 0)) {\n      |           ^~~~~~\n"
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long i = 3, m =\
    \ sqrt(n), f = 3, flag = true;\n\n    while (flag) {\n        if (n % i == 0)\
    \ {\n            flag = false;\n        } else {\n            i++;\n        }\n\
    \n        if (i > m) {\n            flag = false;\n        }\n    }\n\n    if\
    \ (flag) {\n        return true;\n    } else {\n        return false;\n    }\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpfaipxgd4: /tmp/tmpfaipxgd4.cpp:42: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long i = sqrt(n)\
    \ + 1;\n    // Check only the odd numbers. \n    // The even numbers are already\
    \ checked.\n    for (; i * i < n; ++i)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphm1hmo_v: /tmp/tmphm1hmo_v.cpp:29: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  assert(n >= 2);\n\
    \  if (n == 2 || n == 3) return true;\n  if (n % 2 == 0 || n % 3 == 0) return\
    \ false;\n\n  long r = sqrt(n);\n  for (int i = 3; i * i <= n; i += 2) {\n   \
    \ if (n % i == 0 || n % (i + 2) == 0) return false;\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpsu1s00_b: /tmp/tmpsu1s00_b.cpp:19: bool is_prime(long int): Assertion
    `n >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Write your code\
    \ here.\n    if(n==1)\n        return false;\n    if(n==0)\n        return true;\n\
    \    if(n==2)\n        return true;\n    if(n % 2==0)\n        return false;\n\
    \    if(n < 3 || n > 7)\n        return false;\n    long a=1, b=(long) sqrt(n);\n\
    \    for(long i=3; i*i <= n; i++)\n        if(n%i == 0)\n            return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmprk19biz8: /tmp/tmprk19biz8.cpp:39: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\t// TODO: optimize\
    \ this for speed and efficiency.\n\tif (n<=1) return false;\n\tif (n<=3) return\
    \ true;\n\tif (n%2==0) return false;\n\tfor (long i=3; i*i<=n; i+=2) {\n\t\tif\
    \ (n%i==0) return false;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // If n is negative,\
    \ then we know that the number is not prime\n  if (n <= 0) return false;\n  //\
    \ We can stop checking numbers if our prime count has exceeded\n  // our limit\n\
    \  if (prime_count >= MAX_RULES) return false;\n  // Check if we've tested this\
    \ number before\n  if (prime[prime_count] == n) return false;\n  // Sieve of Eratosthenes\n\
    \  // If n is evenly divisible by any prime up to MAX_RULES,\n  // then it isn't\
    \ a prime.\n  for (long i = 3; i * i <= n; i += 2) {\n    if (n % i == 0) return\
    \ false;\n  }\n  // If n is divisible by 2 or 3, then it is prime.\n  if (n %\
    \ 2 == 0 && n % 3 == 0) return true;\n  // If we haven't tested this number before,\
    \ and we haven't found a prime\n  // that divides n, then we have found our first\
    \ prime.\n  prime[prime_count] = n;\n  ++prime_count;\n  return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuy0wh7m0.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmpuy0wh7m0.cpp:23:7: error: \u2018prime_count\u2019 was not declared in\
    \ this scope\n   23 |   if (prime_count >= MAX_RULES) return false;\n      | \
    \      ^~~~~~~~~~~\n/tmp/tmpuy0wh7m0.cpp:23:22: error: \u2018MAX_RULES\u2019 was\
    \ not declared in this scope\n   23 |   if (prime_count >= MAX_RULES) return false;\n\
    \      |                      ^~~~~~~~~\n/tmp/tmpuy0wh7m0.cpp:25:7: error: \u2018\
    prime\u2019 was not declared in this scope\n   25 |   if (prime[prime_count] ==\
    \ n) return false;\n      |       ^~~~~\n/tmp/tmpuy0wh7m0.cpp:25:13: error: \u2018\
    prime_count\u2019 was not declared in this scope\n   25 |   if (prime[prime_count]\
    \ == n) return false;\n      |             ^~~~~~~~~~~\n/tmp/tmpuy0wh7m0.cpp:36:3:\
    \ error: \u2018prime\u2019 was not declared in this scope\n   36 |   prime[prime_count]\
    \ = n;\n      |   ^~~~~\n/tmp/tmpuy0wh7m0.cpp:36:9: error: \u2018prime_count\u2019\
    \ was not declared in this scope\n   36 |   prime[prime_count] = n;\n      | \
    \        ^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if(n%2 == 0)\n\
    \        return false;\n    for (long i = 3; i*i <= n; i += 2) {\n        if (n%i\
    \ == 0)\n            return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5yh91iit: /tmp/tmp5yh91iit.cpp:35: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    for (long i = 2;\
    \ i <= sqrt(n); ++i) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3sb5a4hq: /tmp/tmp3sb5a4hq.cpp:34: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Special cases.\n\
    \  if (n <= 1) return false;\n  if (n <= 3) return true;\n  // Trial division\
    \ using Newton's method. If we find a divisor that\n  // divides evenly, we can\
    \ return false immediately.\n  // If we don't, then we can return True or False\
    \ according to the\n  // condition.\n  // If this number is smaller than 2, then\
    \ we can't even check for even\n  // divisors.\n  // If we already have 2 as a\
    \ divisor, then we return True immediately.\n  if (n == 2) return true;\n  //\
    \ Find the square of the number to test for primality.\n  // If number is odd,\
    \ then we add 1 to it.\n  long sqrt_n = sqrt(n);\n  long next_n = sqrt_n + 1;\n\
    \  long max_next_n = next_n * 2;\n  // Newton's method is faster than Newton-Rho\
    \ method for long numbers.\n  // We can also use a table to speed up the computation.\n\
    \  // Newton's method would require us to multiply by 2 every time, which would\n\
    \  // make our implementation slower.\n  long num_prime = 1;\n  while (num_prime\
    \ <= sqrt_n) {\n    if (n % num_prime == 0) return false;\n    // Multiply num_prime\
    \ by 2 to get the next larger number. Keep track\n    // of whether we've found\
    \ a divisor.\n    long new_num_prime = num_prime * 2;\n    long max_new_num_prime\
    \ = new_num_prime * 2;\n    while (true) {\n      long max_new_num_prime_prime\
    \ = max_new_num_prime + 1;\n      if (max_new_num_prime > max_next_n) break;\n\
    \      if (n % new_num_prime == 0) {\n        // Found a divisor.\n        num_prime\
    \ = next_n;\n        sqrt_n = sqrt_n + 1;\n        break;\n      }\n      new_num_prime\
    \ = max_new_num_prime_prime;\n      max_new_num_prime = max_new_num_prime_prime\
    \ * 2;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7icmiimk: /tmp/tmp7icmiimk.cpp:64: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long d = n - 1;\n\
    \    if (n <= 1) return false;\n    // The number can only be prime if there is\
    \ no even number before it.\n    // This means it can only be prime if the number\
    \ itself is prime.\n    if (d % 2 == 0) return true;\n    for (long i = 3; i *\
    \ i <= n; i += 2) {\n        if (n % i == 0) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmps2hlc0wx: /tmp/tmps2hlc0wx.cpp:31: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009898
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n < 2)\n    return\
    \ false;\n  int i = (int) sqrt(n);\n  for (; i > 1; i += 2)\n    if (n % i ==\
    \ 0)\n      return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009903
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long x = sqrt(n);\n\
    \    bool prime = true;\n    for (long i = 3; i < x; i += 2) {\n        if (n\
    \ % i == 0) {\n            prime = false;\n            break;\n        }\n   \
    \ }\n    return prime;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppok48b22: /tmp/tmppok48b22.cpp:31: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    // Trial division approach.\n    // if (n <= 1)\n \
    \   //     return true;\n    // if (n & 1)\n    //     return false;\n    long\
    \ r = n;\n    long m;\n    while (r != 1) {\n        m = r;\n        long s =\
    \ 1;\n        while (m & 1) {\n            m >>= 1;\n            ++s;\n      \
    \  }\n        if (s == r)\n            return true;\n        if (r & 1)\n    \
    \        r = 1;\n        else\n            r = 3 * r + 2;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660009903
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n > 1);\n\
    \    if (n == 1)\n        return true;\n    if (n == 2)\n        return false;\n\
    \    if (n % 2 == 0)\n        return false;\n    long m = (int)(sqrt(n) + 1);\n\
    \    for (long i = 3; i <= m; i += 2)\n        if (n % i == 0)\n            return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzi0amuhb: /tmp/tmpzi0amuhb.cpp:19: bool is_prime(long int): Assertion
    `n > 1'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1) return\
    \ false;\n  if (n & 1 == 0) return false;\n  for (long i = 2; i * i <= n; ++i)\
    \ {\n    if (n % i == 0) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 2)\n   \
    \ return true;\n  if (n == 3)\n    return true;\n  if (n % 2 == 0)\n    return\
    \ false;\n  if (n % 3 == 0)\n    return true;\n  if (n <= 4)\n    return false;\n\
    \  long m = sqrt(n);\n  for (long i = 5; i <= m; i += 6) {\n    if (n % i == 0\
    \ || n % (i + 2) == 0)\n      return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n == 1)\n\t\t\
    return false;\n\n\tbool ans = false;\n\tlong i = 2;\n\twhile (i <= n/2) {\n\t\t\
    if (n % i == 0)\n\t\t\tans = true;\n\t\ti++;\n\t}\n\n\treturn ans;\n}\nint main()\
    \ {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjh2af4c_: /tmp/tmpjh2af4c_.cpp:34: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1)\n   \
    \ return true;\n  // Check if n is co-prime\n  for (long m = 2; m <= n / 2; m++)\n\
    \    if (n % m == 0)\n      return false;\n  return true;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt3g6hexo: /tmp/tmpt3g6hexo.cpp:35: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1)\n   \
    \ return false;\n  if (n == 2)\n    return true;\n  if (n % 2 == 0)\n    return\
    \ false;\n  if (n <= 3)\n    return false;\n  if (n != 2)\n    return n == 3;\n\
    \  long sqr = n >> 1;\n  for (long i = 3; i <= sqr; i += 2)\n    if (n % i ==\
    \ 0)\n      return false;\n  return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf7ajvb0q: /tmp/tmpf7ajvb0q.cpp:38: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1 || n\
    \ == 2) return true;\n    for (int i = 2; i * i <= n; i++) {\n        if (n %\
    \ i == 0) return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0zool6w9: /tmp/tmp0zool6w9.cpp:33: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 2) return\
    \ true;\n    if (n <= 1) return false;\n    if (n == 3) return true;\n    if (n\
    \ % 2 == 0 || n % 3 == 0) return false;\n\n    int i = 5;\n    int t = sqrt(n);\n\
    \    while(i <= t)\n    {\n        if (n % i == 0 || n % (i + 2) == 0) return\
    \ false;\n        i += 6;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    bool prime = true;\n\
    \    if (n == 0) return false;\n    for (int i = 1; i <= n; ++i)\n    {\n    \
    \    int check = (n % i);\n        if (check != 0) prime = false;\n    }\n   \
    \ return prime;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmppq89daw2: /tmp/tmppq89daw2.cpp:31: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long sqr = sqrt(n);\n\
    \    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n         \
    \   return false;\n    for (long i = (sqr * (sqr + 1)) / 2; i * i <= n; i += 2)\n\
    \        if (n % i == 0)\n            return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n\
    \    assert(candidate((101)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((13441)) == (true));\n    assert(candidate((61)) == (true));\n\
    \    assert(candidate((4)) == (false));\n    assert(candidate((1)) == (false));\n\
    \    assert(candidate((5)) == (true));\n    assert(candidate((11)) == (true));\n\
    \    assert(candidate((17)) == (true));\n    assert(candidate((85)) == (false));\n\
    \    assert(candidate((77)) == (false));\n    assert(candidate((255379)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpz9kmeenb: /tmp/tmpz9kmeenb.cpp:30: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Check if n is\
    \ even\n  if (n % 2 == 0) return false;\n  // Check if n is greater than 1\n \
    \ if (n <= 1) return false;\n  // Check if n is odd\n  if (n % 2 == 1) return\
    \ false;\n  // If n is greater than or equal to 3 or 5, it is prime.\n  if (n\
    \ <= 3 || n >= 5) return false;\n\n  // Sieve of Erastothenes\n  std::vector<bool>\
    \ isPrime(2 * n + 1, true);\n  for (long i = 6; i <= n; i += 2) {\n    for (long\
    \ j = i; j < n; j += i) {\n      isPrime[j] = false;\n    }\n  }\n\n  return isPrime[n];\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpbc9eq1en: /tmp/tmpbc9eq1en.cpp:41: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n == 1) return\
    \ false;\n  long limit = (long) sqrt(n) + 1;\n  for (int i = (int) limit; i >\
    \ 1; i /= 2) if (n % i == 0) return false;\n  return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8bfllppr: /tmp/tmp8bfllppr.cpp:31: int main(): Assertion `candidate((4))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2) return\
    \ false;\n    if (n == 2) return true;\n    if (n % 2 == 0) return false;\n  \
    \  long c = 6, r = n;\n    while (c % 2 == 0) {\n        c = r/2;\n        r +=\
    \ c;\n    }\n    if (r == n) return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_8gb99xz: /tmp/tmp_8gb99xz.cpp:33: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n >= 2);\n\
    \    for (int i = 2; i <= n / i; i++) {\n        if (n % i == 0) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp81jyr4pm: /tmp/tmp81jyr4pm.cpp:19: bool is_prime(long int): Assertion
    `n >= 2'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // Check for non-prime\
    \ (negative) values\n  if (n < 0) {\n    return false;\n  }\n  // Trial division\
    \ with sieve, O(sqrt(n)) complexity.\n  std::vector<bool> sieve(n + 1);\n  for\
    \ (int i = 2; i <= sqrt(n); ++i) {\n    if (sieve[i]) {\n      for (int j = i;\
    \ i * j <= n; ++j) {\n        sieve[j] = false;\n      }\n    }\n  }\n  // Test\
    \ candidate for primality by trial division.\n  for (int i = 2; i <= sqrt(n);\
    \ ++i) {\n    if (sieve[i]) {\n      return true;\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpok7ilgn0: /tmp/tmpok7ilgn0.cpp:43: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  // If n is even,\
    \ return false.\n  if (n % 2 == 0) {\n    return false;\n  }\n\n  // Write the\
    \ Sieve of Eratosthenes in C++.\n  std::vector<bool> sieve(n / 2 + 1);\n\n  for\
    \ (int i = 2; i <= n / 2; ++i) {\n    if (sieve[i]) {\n      for (int j = i *\
    \ i; j <= n / 2; ++j) {\n        sieve[j] = false;\n      }\n    }\n  }\n  return\
    \ sieve[n];\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzot8c4nj: /tmp/tmpzot8c4nj.cpp:39: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    assert(n % 2 ==\
    \ 0);\n    // Assume n is prime and proceed from here if not.\n    for (int i\
    \ = 3; i * i <= n; i += 2) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptkdpuurk: /tmp/tmptkdpuurk.cpp:30: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  int flag=1;\n  for(int\
    \ i=2;i<n;i++)\n  {\n    if(n%i==0)\n    {\n    flag=false;\n    break;\n    }\n\
    \  }\n  return flag;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpozhra20x: /tmp/tmpozhra20x.cpp:38: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2)\n  \
    \      return false;\n    // Trial division methodology\n    int m = 1;\n    for\
    \ (int d = 2; d <= (int)sqrt(n); d++) {\n        if (n % d == 0) {\n         \
    \   if (m == 1)\n                return false;\n            else\n           \
    \     m += d;\n        }\n    }\n    return m == n;\n}\nint main() {\n    auto\
    \ candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl2u8nnn2: /tmp/tmpl2u8nnn2.cpp:36: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tint f=0, flag=0;\n\
    \tlong m=n;\n\twhile (n>1) {\n\t\tif (n%2 == 0) f=1;\n\t\tn=n>>1;\n\t}\n\tif (f==0\
    \ && n==1) return 0;\n\telse {\n\t\tif (f) flag=1;\n\t\telse {\n\t\t\tif (m<2)\
    \ return 0;\n\t\t\telse {\n\t\t\t\tlong sq=1;\n\t\t\t\tint i=1;\n\t\t\t\twhile\
    \ (i<=m) {\n\t\t\t\t\tif (m%i==0 && sq%i==0) return 0;\n\t\t\t\t\tsq=i*i;\n\t\t\
    \t\t\ti++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpug2_f295: /tmp/tmpug2_f295.cpp:45: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1)\n \
    \       return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n\n    long m = sqrt(n);\n    for (long i = 2; i <=\
    \ m; i++) {\n        if (n % i == 0)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n <= 1) {\n\
    \        return false;\n    }\n    \n    long i;\n    if (n == 2) {\n        return\
    \ true;\n    }\n    \n    // i is divided by n until it reaches 1.\n    for (i\
    \ = 2; i <= n/2; i++) {\n        if (n % i == 0) {\n            return false;\n\
    \        }\n    }\n    \n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n < 2)\n  \
    \      return false;\n    long i = 2;\n    long limit = sqrt(n);\n    while (i\
    \ <= limit)\n        if (n % i == 0)\n            return false;\n        else\n\
    \            i++;\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n\
    \    assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  for (long i = 2;\
    \ i <= sqrt(n); i++)\n    if (n % i == 0)\n      return false;\n  return true;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpux16c8vt: /tmp/tmpux16c8vt.cpp:32: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n == 1) {\n\t\
    \treturn false;\n\t}\n\t// Sieve of Erastothenes\n\t// This code should work:\n\
    \t// for (int i = 1; i <= n; i++) {\n\t// \tif (n % i == 0) {\n\t// \t\treturn\
    \ false;\n\t// \t}\n\t// }\n\tlong m = n;\n\tbool prime = true;\n\twhile (m !=\
    \ 1) {\n\t\tbool found = false;\n\t\tfor (int i = 2; i <= m && prime; i++) {\n\
    \t\t\tif (m % i == 0) {\n\t\t\t\tfound = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\tif (prime) {\n\t\t\tprime = found;\n\t\t}\n\t\tm--;\n\t}\n\treturn prime;\n\
    }\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6)) ==\
    \ (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpd_d88u6l: /tmp/tmpd_d88u6l.cpp:48: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n <= 1)\n\t\t\
    return false;\n\tlong i = 5;\n\tlong f = 6; // 6x\xB9 + 1\n\twhile (i <= n) {\n\
    \t\tif (n % i == 0) {\n\t\t\treturn false;\n\t\t}\n\t\ti += f;\n\t\tf = 6 - f;\n\
    \t}\n\treturn true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpsjubib31: /tmp/tmpsjubib31.cpp:34: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // n is divisible\
    \ by 2 or 3.\n    if (n == 2 || n == 3)\n        return true;\n\n    // n is divisible\
    \ by 1 or 5.\n    if (n == 1 || n == 5)\n        return false;\n\n    // n must\
    \ be even.\n    if (n % 2 == 0)\n        return false;\n\n    // Check if n is\
    \ prime.\n    for (long i = 3; i * i <= n; i += 2)\n        if (n % i == 0)\n\
    \            return false;\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyb47zc5c: /tmp/tmpyb47zc5c.cpp:47: int main(): Assertion `candidate((5))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long m = n-1;\n\
    \    long r = 1;\n    while (m%2 == 0) {\n        m /= 2;\n        r *= 2;\n \
    \   }\n    for (int i = 3; i*i <= n; i += 2) {\n        if (n%i == 0) {\n    \
    \        return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp00h9vz5e: /tmp/tmp00h9vz5e.cpp:34: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 1)\n \
    \       return false;\n    if (n == 2)\n        return true;\n    if (n % 2 ==\
    \ 0)\n        return false;\n    if (n <= 3)\n        return false;\n    for (int\
    \ i = 3; i <= n / i; i++) {\n        if (n % i == 0)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n  \
    \  assert(candidate((6)) == (false));\n    assert(candidate((101)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((13441)) == (true));\n\
    \    assert(candidate((61)) == (true));\n    assert(candidate((4)) == (false));\n\
    \    assert(candidate((1)) == (false));\n    assert(candidate((5)) == (true));\n\
    \    assert(candidate((11)) == (true));\n    assert(candidate((17)) == (true));\n\
    \    assert(candidate((85)) == (false));\n    assert(candidate((77)) == (false));\n\
    \    assert(candidate((255379)) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\t// Primality test:\n\
    \tif (n <= 1)\n\t\treturn false;\n\tlong r = n;\n\twhile (r > 2) {\n\t\tif (r\
    \ == 1)\n\t\t\treturn false;\n\t\tlong t = r / 2;\n\t\tif (n % t == 0)\n\t\t\t\
    return false;\n\t\tr = t;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgfa0r21v: /tmp/tmpgfa0r21v.cpp:36: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n\tif (n <= 3) return\
    \ true;\n\tif (n & 1 == 0) return false;\n\tfor (int i = 2; i * i <= n; i++)\n\
    \t\tif (n % i == 0) return false;\n\treturn true;\n}\nint main() {\n    auto candidate\
    \ = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8arzijhr: /tmp/tmp8arzijhr.cpp:33: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    long k;\n    for\
    \ (k = 2; k <= (sqrt(n) + 1) / 2; k++)\n        if (n % k == 0) return false;\n\
    \    return n == 1;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpzmie6mxh: /tmp/tmpzmie6mxh.cpp:27: int main(): Assertion `candidate((101))
    == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Return true\
    \ if n is prime, and false otherwise.\n    // >>> is_prime(6)\n    // False\n\
    \    // >>> is_prime(101)\n    // True\n    // >>> is_prime(11)\n    // True\n\
    \    // >>> is_prime(13441)\n    // True\n    // >>> is_prime(61)\n    // True\n\
    \    // >>> is_prime(4)\n    // False\n    // >>> is_prime(1)\n    // False\n\
    \    long div = 2;\n    bool flag = true;\n    while (flag && div <= sqrt(n))\
    \ {\n        if (n % div == 0) {\n            flag = false;\n        }\n     \
    \   div += 1;\n    }\n    return flag;\n}\nint main() {\n    auto candidate =\
    \ is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphx_9dsbe: /tmp/tmphx_9dsbe.cpp:52: int main(): Assertion `candidate((1))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    // Check factors\n\
    \    if (n <= 1) {\n        return false;\n    }\n    for (long i = 2; i <= sqrt(n);\
    \ i++) {\n        if (n % i == 0) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009901
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n  if (n <= 3) {\n \
    \   return false;\n  }\n  int sqrt_n = sqrt(n);\n  int primes[] = {3, 5, 7, 11,\
    \ 13, 17, 19};\n  bool isPrime = false;\n  for (int i = 0; i < primes.size();\
    \ i++) {\n    if (isPrime) {\n      break;\n    }\n    if (n % primes[i] == 0)\
    \ {\n      isPrime = true;\n    }\n  }\n  return isPrime;\n}\nint main() {\n \
    \   auto candidate = is_prime;\n    assert(candidate((6)) == (false));\n    assert(candidate((101))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((13441))\
    \ == (true));\n    assert(candidate((61)) == (true));\n    assert(candidate((4))\
    \ == (false));\n    assert(candidate((1)) == (false));\n    assert(candidate((5))\
    \ == (true));\n    assert(candidate((11)) == (true));\n    assert(candidate((17))\
    \ == (true));\n    assert(candidate((85)) == (false));\n    assert(candidate((77))\
    \ == (false));\n    assert(candidate((255379)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwtwzdqr.cpp: In function \u2018bool is_prime(long int)\u2019:\n\
    /tmp/tmprwtwzdqr.cpp:25:30: error: request for member \u2018size\u2019 in \u2018\
    primes\u2019, which is of non-class type \u2018int [7]\u2019\n   25 |   for (int\
    \ i = 0; i < primes.size(); i++) {\n      |                              ^~~~\n"
  stdout: ''
  timestamp: 1660009901
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true if a given\
    \ number is prime, and false otherwise.\n// >>> is_prime((6))\n// (false)\n//\
    \ >>> is_prime((101))\n// (true)\n// >>> is_prime((11))\n// (true)\n// >>> is_prime((13441))\n\
    // (true)\n// >>> is_prime((61))\n// (true)\n// >>> is_prime((4))\n// (false)\n\
    // >>> is_prime((1))\n// (false)\nbool is_prime(long n) {\n    if (n == 0) return\
    \ false;\n    if (n & 1 == 0) return false;\n    long sqt_n = n;\n    for (int\
    \ i = 2; i * i <= sqt_n; i++)\n        if (sqt_n % (i * i) == 0) return false;\n\
    \    return true;\n}\nint main() {\n    auto candidate = is_prime;\n    assert(candidate((6))\
    \ == (false));\n    assert(candidate((101)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((13441)) == (true));\n    assert(candidate((61))\
    \ == (true));\n    assert(candidate((4)) == (false));\n    assert(candidate((1))\
    \ == (false));\n    assert(candidate((5)) == (true));\n    assert(candidate((11))\
    \ == (true));\n    assert(candidate((17)) == (true));\n    assert(candidate((85))\
    \ == (false));\n    assert(candidate((77)) == (false));\n    assert(candidate((255379))\
    \ == (false));\n}\n"
  status: Exception
  stderr: 'tmpk48xt2ft: /tmp/tmpk48xt2ft.cpp:28: int main(): Assertion `candidate((6))
    == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660009901
