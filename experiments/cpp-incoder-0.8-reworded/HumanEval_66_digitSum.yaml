name: HumanEval_66_digitSum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Task\n// Write a function\
  \ that takes a string as input and returns the sum of the upper characters only'\n\
  // ASCII codes.\n// Examples:\n// >>> digitSum((\"\"))\n// (0)\n// >>> digitSum((\"\
  abAB\"))\n// (131)\n// >>> digitSum((\"abcCd\"))\n// (67)\n// >>> digitSum((\"helloE\"\
  ))\n// (69)\n// >>> digitSum((\"woArBld\"))\n// (131)\n// >>> digitSum((\"aAaaaXa\"\
  ))\n// (153)\nlong digitSum(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = digitSum;\n    assert(candidate((\"\"\
  )) == (0));\n    assert(candidate((\"abAB\")) == (131));\n    assert(candidate((\"\
  abcCd\")) == (67));\n    assert(candidate((\"helloE\")) == (69));\n    assert(candidate((\"\
  woArBld\")) == (131));\n    assert(candidate((\"aAaaaXa\")) == (153));\n    assert(candidate((\"\
  \ How are yOu?\")) == (151));\n    assert(candidate((\"You arE Very Smart\")) ==\
  \ (327));\n}\n"
completions: ["    long sum = 0;\n    for (auto i : s) {\n        if (i == 'A' ||\
    \ i == 'a') {\n            sum += 32;\n        } else {\n            sum += i;\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    // Your code here\n\
    \    auto it = s.begin();\n    while (it != s.end()) {\n        sum += *it++;\n\
    \        if (sum > '9')\n            sum += '0';\n        if (it == s.end())\n\
    \            break;\n    }\n    return sum;", "    // Your code here\n    int\
    \ sum = 0;\n    for (int i = 0; i < s.size();i++) {\n        if (s[i]>='A' &&\
    \ s[i] <= 'Z')\n            sum+=s[i]-'A'+1;\n    }\n    return sum;", "  if (s.empty())\n\
    \    return 0;\n  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n  \
    \  sum += s[i] - 'A' + 1;\n  }\n  return sum;", "    std::cout << \"digitSum(\\\
    \"'\" << s << \"'\\\")\" << std::endl;\n    long sum = 0;\n    for (char ch :\
    \ s) {\n        sum += ch >= 'a' && ch <= 'z' ? ch - 'a' + 10 : ch;\n    }\n \
    \   return sum;", "  std::map<char, int> m;\n  for (char c : s) {\n    m[c]++;\n\
    \  }\n  long sum = 0;\n  for (const auto kvp : m) {\n    if (kvp.second > 1) {\n\
    \      sum += kvp.first;\n    }\n  }\n  return sum;", "  long ans = 0;\n  for\
    \ (int i = 0; i < s.length(); i++)\n    ans += (s.at(i) > '9' && s.at(i) < 'A')\
    \ ? s.at(i) - '9' : s.at(i) - 'A' + 10;\n  return ans;", "    long sum = 0;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(i == s.size() - 1) {\n  \
    \          sum += s[i] - 'A';\n        } else {\n            sum += s[i] - 'A'\
    \ + s[i + 1] - 'A';\n        }\n    }\n    return sum;", "  // code here\n  assert(s.size()\
    \ != 0);\n  int sum = 0;\n  for (int i = 0; i < s.size(); ++i) {\n    sum += s[i];\n\
    \  }\n  return sum;", "    // code here\n    int sum=0;\n    for(int i=0;i<s.size();i++){\n\
    \        sum+=s.at(i);\n    }\n    return sum;", "  if (s.size() == 0) return\
    \ 0;\n  int res = 0;\n  for (int i = 0; i < s.size(); ++i) {\n    res = res *\
    \ 10 + static_cast<int>(s[i] - 'A');\n  }\n  return res;", "    std::stack<long\
    \ long int> s;\n    for (auto &c: s) {\n        c.push_back(std::accumulate(s.begin(),\
    \ s.end(), 0, [&](long long int a, long long int b) -> long long int {\n     \
    \       int n = a - 'A' + b;\n            if (n < 0 || n > 26) return 0;\n   \
    \         return n + 'A';\n        }));\n    }\n    return s.top();", "   long\
    \ sum=0;\n   for(char c: s)\n   {\n      if(c>='A'&&c<='Z')\n      {\n       \
    \  sum+=(c-'A')*10;\n      }\n   }\n   return sum;", "  long ret = 0;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      ret\
    \ += s[i] - 'A' + 10;\n    } else {\n      ret += s[i];\n    }\n  }\n  return\
    \ ret;", "    assert(s.size() > 0);\n    long sum = 0;\n    for (auto &it : s)\
    \ {\n        assert(it >= 'A' && it <= 'Z');\n        sum += (it - 'A');\n   \
    \ }\n    return sum;", "    // Write your code here\n    long sum = 0, i = 1;\n\
    \    while(i < s.size()){\n        if (s[i] >= 'a' && s[i] <= 'z'){\n        \
    \    sum += s[i] - 'a' + 1;\n        }\n        i++;\n    }\n    return sum;",
  "  int sum = -1;\n  int len = s.size();\n  assert(len >= 1);\n\n  // iterate over\
    \ the string, adding ASCII codes from 0 to 'a' to sum\n  for (int i = 0; i < len;\
    \ i++) {\n    sum += (s[i] + 'a');\n  }\n\n  return sum;", "    int sum = 0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'A' || s[i] ==\
    \ 'a') {\n            sum += 32;\n        } else {\n            sum += s[i];\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (char c : s)\n\
    \        sum += toupper(c);\n    return sum;", "    // Write your code here\n\
    \    long sum = 0;\n    for (unsigned int i = 0; i < s.length(); i++) {\n    \
    \    long val = s.at(i) - '0';\n        sum += val;\n    }\n    return sum;",
  "  assert(s.size() > 0);\n  int res = 0;\n  for (int i = 0; i < s.size(); i++) {\n\
    \    if (s.at(i) > 'A' || s.at(i) < 'a')\n      continue;\n    res += s.at(i);\n\
    \  }\n  return res;", "    long ans = 0;\n    int i;\n    for (i = 0; i <s.size()\
    \ ; i++) {\n        if (s.at(i) >= 'A' && s.at(i) <= 'Z') {\n            ans +=\
    \ s.at(i) - 'A';\n        }\n    }\n    return ans;", "    long sum = 0;\n   \
    \ for (auto val : s) {\n        sum += val - 'A' + 1;\n    }\n    return sum;",
  "    long sum = 0;\n    for (char &c: s)\n        sum += (unsigned)(c-32); // or\
    \ c+48 if you prefer\n    return sum;", "  assert(s.size() > 0);\n  int sum =\
    \ 0;\n  std::string subStr = s;\n  for (int i = 0; i < s.size(); i++) {\n    sum\
    \ += subStr[i]-'A'+1;\n  }\n  return sum;", "    // code goes here\n    return\
    \ 0; // your code goes here", "  // Initialize sum and counter\n  int sum = 0;\n\
    \  int count = 1;\n  // Iterate over each character\n  for (auto const &i : s)\
    \ {\n    // If it's an upper case letter, add the counter to sum and increment\
    \ it\n    if (i >= 'a' && i <= 'z')\n      sum += count;\n    // Increment the\
    \ counter\n    count++;\n  }\n  // Return the sum\n  return sum;", "    std::stack<long>\
    \ st;\n    long sum = 0;\n    for (auto it = s.begin(); it != s.end(); ++it) {\n\
    \        sum += std::isupper(*it) ? std::toupper(*it) - 'A' + 10 : std::tolower(*it)\
    \ - 'A';\n        st.push(*it);\n    }\n    while (!st.empty()) {\n        sum\
    \ += st.top();\n        st.pop();\n    }\n    return sum;", "    long sum = 0;\n\
    \    for (auto c: s) {\n        sum += c - 'A' + 1;\n    }\n    return sum;",
  "  // code here\n  long sum = 0;\n  for (int i = 0; i < s.length(); ++i) {\n   \
    \ if (s[i] == 'A' && i <= 'Z') {\n      sum += (i - 'A' + 1);\n    }\n  }\n  return\
    \ sum;", "    long ans = 0;\n    for (auto i : s) ans += (i >= 'A') ? 10 + i -\
    \ 'A' : i;\n    return ans;", "    long sum = 0;\n    for (int i = 0; i < s.size();\
    \ ++i) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i] -\
    \ 'A' + 1;\n        } else if (s[i] >= 'a' && s[i] <= 'z') {\n            sum\
    \ += s[i] - 'a' + 1;\n        }\n    }\n    return sum;", "  int sum = 0;\n  for\
    \ (int i = 0; i < s.length(); i++) {\n    sum += toupper(s[i]);\n  }\n  return\
    \ sum;", "    long ans = 0;\n    for(char c: s) {\n        ans += c;\n    }\n\
    \    return ans;", "    // code here\n    long sum = 0;\n    for (long i = 0;\
    \ i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n            sum += s[i]-'a';\
    \ //\n        }\n    }\n    return sum;", "    long sum = 0;\n    for (auto &\
    \ c : s) {\n        if ('A' <= c && c <= 'Z') {\n            sum += c - 'A' +\
    \ 10;\n        }\n    }\n    return sum;", "    std::cout << s << std::endl;\n\
    \    long sum = 0;\n    int len = s.length();\n    for (int i = 0; i < len; i++)\
    \ {\n        sum += (s[i]>=65 && s[i]<=90) ? s[i]-64 : s[i]-87;\n    }\n    return\
    \ sum;", "    long sum=0;\n    long j=0,i=0;\n    for(i=0; i<s.length(); i++)\
    \ {\n        j=s[i];\n        if(j>='a' && j<='z') {\n            j=j-'a'+10;\n\
    \        }\n        sum=sum+j;\n    }\n    return sum;", "    // Write code here\n\
    \    long sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'A' && s[i] <= 'Z')\n            sum += s[i] - 'A' + 1;\n        else\n \
    \           sum += s[i] - 'a' + 1;\n    }\n    return sum;", "    long result\
    \ = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        result += (toupper(s[i])\
    \ - 'A');\n    }\n    return result;", "    int sum = 0;\n    for (int i = 0;\
    \ i < s.length(); i++) {\n        sum += (s[i] == 'A' || s[i] == 'B' || s[i] ==\
    \ 'C' || s[i] == 'D' || s[i] == 'E' || s[i] == 'F' || s[i] == 'G' || s[i] == 'H'\
    \ || s[i] == 'I' || s[i] == 'J' || s[i] == 'K' || s[i] == 'L' || s[i] == 'M' ||\
    \ s[i] == 'N' || s[i] == 'O' || s[i] == 'P' || s[i] == 'Q' || s[i] == 'R' || s[i]\
    \ == 'S' || s[i] == 'T' || s[i] == 'U' || s[i] == 'V' || s[i] == 'W' || s[i] ==\
    \ 'X' || s[i] == 'Y' || s[i] == 'Z')? s[i]-'A' : -1;\n    }\n    return sum;",
  "    int sum = 0;\n    for (int i = 0; i < s.length(); i++)\n        if (s[i] >=\
    \ 'A' && s[i] <= 'Z')\n            sum += s[i] - 'A' + 1;\n    return sum;", " \
    \   long sum = 0;\n    int len = s.size();\n    for (int i = 0; i < len; i++)\
    \ {\n        if (s[i] < 'A' || s[i] >= 'Z') {\n            sum += s[i] - 'A' +\
    \ 10;\n        } else {\n            sum += s[i] - 'a' + 10;\n        }\n    }\n\
    \    return sum;", "  long sum = 0;\n  for (auto c : s) {\n    if (c == 'A') {\n\
    \      sum += 97;\n    } else if (c == 'a') {\n      sum += 65;\n    } else {\n\
    \      sum += c;\n    }\n  }\n  return sum;", "    std::stack<char> stack;\n \
    \   for (char &c: s) {\n        if (std::isupper(c)) stack.push(c);\n        if\
    \ (stack.empty()) return 0;\n        c = stack.top();\n        stack.pop();\n\
    \    }\n    return stack.size();", "    long ret = 0;\n    for(char c : s) {\n\
    \        if(c>='A' && c<='Z')\n            ret = ret+c-'A';\n    }\n    return\
    \ ret;", "    long sum = 0;\n    for (int i = 0; i < s.length(); i++)\n      \
    \  if (s.at(i) >= 'A' && s.at(i) <= 'Z')\n            sum += s.at(i) - 'A' + 1;\n\
    \    return sum;", "  long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n\
    \    sum += std::stoi(s, i + 1, std::strlen(s));\n  }\n  return sum;", "    long\
    \ ans = 0;\n    for (int i = 0; i < s.size(); i++) {\n        ans += std::toupper(s[i])\
    \ - 'A' + 1;\n    }\n    return ans;", "    if (s.size() == 0)\n        return\
    \ 0;\n    int sum = 0;\n    for (int i = 0; i < s.size(); i++)\n    {\n      \
    \  sum += s.at(i) - 'A' + 1;\n    }\n    return sum;", "    long sum = 0;\n  \
    \  for (auto i : s) {\n        sum += i;\n    }\n    return sum;", "\tassert(s.length()\
    \ > 0);\n\tlong sum = 0;\n\tfor (char c : s) {\n\t\tsum += c - 'a' + 1;\n\t}\n\
    \treturn sum;", "    // Write your code here\n    long ret=0;\n    for(int i=0;i<s.length();i++)\n\
    \    {\n        if(isupper(s[i]))\n            ret+=(int)s[i];\n    }\n    return\
    \ ret;", "    int sum = 0, sum = 0;\n    for (char c : s) {\n        sum += (int)c;\n\
    \    }\n    return sum;", "  int n = s.size();\n  long ans = 0;\n  for (int i\
    \ = 0; i < n; i++) {\n    ans += s[i];\n  }\n  return ans;", "  long long ans\
    \ = 0;\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i]\
    \ == 'a' || s[i] == 'X' || s[i] == 'x') {\n      ans += s[i] - 'A' + 10;\n   \
    \ }\n  }\n  return ans;", "\t// Write your code here\n\tlong sum = 0;\n\tfor (auto\
    \ i : s) {\n\t\tif (i > 'Z') {\n\t\t\tsum += i - 'A' + 1;\n\t\t} else {\n\t\t\t\
    sum += (i - 'A') - 10;\n\t\t}\n\t}\n\treturn sum;", "    // code here\n    return\
    \ 0 ;", "  assert(s.size() > 0);\n  // Initialize sum as 0.\n  long sum = 0;\n\
    \  // Convert the string into an array of characters.\n  std::string digits(s);\n\
    \  // Convert each character of the string into an integer value between '0' and\
    \ '9'.\n  for (int i = 0; i < s.size(); i++) {\n    assert(digits[i] >= '0' &&\
    \ digits[i] <= '9');\n    sum = sum * 10 + (digits[i] - '0');\n  }\n  return sum;",
  "    long sum = 0;\n    for (char c: s) {\n        sum += (c - 'A' + 1);\n    }\n\
    \    return sum;", "    long sum = 0;\n    for (auto c : s) {\n        sum +=\
    \ toupper(c);\n    }\n    return sum;", "  long sum = 0;\n  for (int i = 0; i\
    \ < s.size(); i++) {\n    sum += (s[i] - 'A');\n  }\n  return sum;", "    long\
    \ sum = 0;\n    for (auto i : s) {\n        if (i > 'A' && i < 'Z')\n        \
    \    sum += (i - 'A');\n    }\n    return sum;", "  long sum = 0;\n  for (auto\
    \ &ch : s)\n    if (ch >= 'A' && ch <= 'Z')\n      sum += ch - 'A' + 10;\n  return\
    \ sum;", "    int sum = 0;\n    int cur;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        sum = sum + s[i];\n    }\n    for (cur = sum; cur > 0; cur--) {\n\
    \        sum++;\n    }\n    return sum;", "  // Write code here\n  long sum =\
    \ 0;\n  for(auto c : s)\n  {\n    sum += (unsigned char)c;\n  }\n  return sum;",
  "    // code here\n    long long ans = 0;\n    for (long i = 0; i < s.length();\
    \ i++)\n    {\n        if (s.at(i) >= 'A' && s.at(i) <= 'Z')\n        {\n    \
    \        ans += (s.at(i) - 'A' + 10);\n        }\n    }\n    return ans;", " \
    \   int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ >= 'A' && s[i] <= 'Z') {\n            sum += (s[i] - 'A' + 1);\n        } else\
    \ if (s[i] >= 'a' && s[i] <= 'z') {\n            sum += (s[i] - 'a' + 1);\n  \
    \      } else if (s[i] >= '0' && s[i] <= '9') {\n            sum += (s[i] - '0');\n\
    \        }\n    }\n    return sum;", "  std::sort(s.begin(), s.end());\n  long\
    \ sum = 0;\n  for (auto c: s) {\n    sum += std::strlen(std::to_string(c));\n\
    \  }\n  return sum;", "    long ans = 0;\n    for(int i=0;i<s.length();++i){\n\
    \        ans += s.at(i) - 'A' + 1;\n    }\n    return ans;", "    // Write code\
    \ here\n    long result = 0;\n    for (const auto& char : s) {\n        if (char\
    \ == 'A') {\n            result += 48;\n        } else if (char == 'B') {\n  \
    \          result += 49;\n        } else if (char == 'C') {\n            result\
    \ += 50;\n        } else if (char == 'D') {\n            result += 51;\n     \
    \   } else if (char == 'E') {\n            result += 52;\n        } else if (char\
    \ == 'F') {\n            result += 53;\n        } else if (char == 'G') {\n  \
    \          result += 54;\n        } else if (char == 'H') {\n            result\
    \ += 55;\n        } else if (char == 'I') {\n            result += 56;\n     \
    \   } else if (char == 'J') {\n            result += 57;\n        } else if (char\
    \ == 'K') {\n            result += 58;\n        } else if (char == 'L') {\n  \
    \          result += 59;\n        } else if (char == 'M') {\n            result\
    \ += 60;\n        } else if (char == 'N') {\n            result += 61;\n     \
    \   } else if (char == 'O') {\n            result += 62;\n        } else if (char\
    \ == 'P') {\n            result += 63;\n        } else if (char == 'Q') {\n  \
    \          result += 64;\n        } else if (char == 'R') {\n            result\
    \ += 65;\n        } else if (char == 'S') {\n            result += 66;\n     \
    \   } else if (char == 'T') {\n            result += 67;\n        } else if (char\
    \ == 'U') {\n            result += 68;\n        } else if (char == 'V') {\n  \
    \          result += 69;\n        } else if (char == 'W') {\n            result\
    \ += 70;\n        } else if (char == 'X') {\n            result += 71;\n     \
    \   } else if (char == 'Y') {\n            result += 72;\n        } else if (char\
    \ == 'Z') {\n            result += 73;\n        } else if (char == 'a') {\n  \
    \          result += 97;\n        } else if (char == 'b') {\n            result\
    \ += 98;\n        } else if (char == 'c') {\n            result += 99;\n     \
    \   } else if (char == 'd') {\n            result += 100;\n        } else if (char\
    \ == 'e') {\n            result += 101;\n        } else if (char == 'f') {\n \
    \           result += 102;\n        } else if (char == 'g') {\n            result\
    \ += 103;\n        } else if (char == 'h') {\n            result += 104;\n   \
    \     } else if (char == 'i') {\n            result += 105;\n        } else if\
    \ (char == 'j') {\n            result += 106;\n        } else if (char == 'k')\
    \ {\n            result += 107;\n        } else if (char == 'l') {\n         \
    \   result += 108;\n        } else if (char == 'm') {\n            result += 109;\n\
    \        } else if (char == 'n') {\n            result += 110;\n        } else\
    \ if (char == 'o') {\n            result += 111;\n        } else if (char == 'p')\
    \ {\n            result += 112;\n        } else if (char == 'q') {\n         \
    \   result += 113;\n        } else if (char == 'r') {\n            result += 114;\n\
    \        } else if (char == 's') {\n            result += 115;\n        } else\
    \ if (", "    int sum = 0, counter = 0;\n    for (auto val : s) {\n        sum\
    \ += val;\n        counter++;\n    }\n    return sum;", "  if (s.size() == 0)\
    \ {\n    return 0;\n  }\n  int res = 0;\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    res += s[i];\n  }\n  return res;", "    assert(s.size() >= 2);\n    long\
    \ sum = 0;\n    for (auto c : s) {\n        sum += std::stoll(c);\n    }\n   \
    \ return sum;", "        long sum = 0;\n        // Loop through the string\n \
    \       for (auto &i : s) {\n                // Loop through the ASCII codes\n\
    \                for (int j = 0; j < 64; j++) {\n                        // If\
    \ the digit is less than the ASCII code then add it to the sum\n             \
    \           if (i >= 'A' && i <= 'Z') {\n                                sum +=\
    \ j;\n                        }\n                }\n        }\n        return\
    \ sum;", "    int sum = 0;\n    for (int i = 0; i < s.size(); i++) {\n       \
    \ sum = sum + s[i];\n    }\n    return sum;", "    // code here\n    long sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        sum += (s[i] - 'A')\
    \ - 64;\n    }\n    return sum;", "    long sum = 0;\n    for (auto &character\
    \ : s) {\n        sum += (character > 64) ? (character - 55) : 0;\n    }\n   \
    \ return sum;", "    long total = 0;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        total += toupper(s[i]);\n    }\n    return total;", "    long sum\
    \ = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if ('a' <= s[i] &&\
    \ s[i] <= 'z') {\n            sum += s[i] - 'a';\n        } else {\n         \
    \   break;\n        }\n    }\n    return sum;", "    long ret = 0;\n    for(auto\
    \ c: s) {\n        if(c >= 'a' && c <= 'z') {\n            c -= ('a' - 'A');\n\
    \            ret += c;\n        } else {\n            return -1;\n        }\n\
    \    }\n    return ret;", "    int sum = 0;\n    for (auto i : s) {\n        if\
    \ (i >= 'A' && i <= 'Z') {\n            sum += i - 'A';\n        } else {\n  \
    \          sum += i-'0';\n        }\n    }\n    return sum;", "  // Your code\
    \ here\n  long sum = 0;\n  long len = s.length();\n  for(int i=0;i<len;i++){\n\
    \    if(s[i]>='A'&&s[i]<='Z'){\n      sum = sum+s[i] - 'A';\n    }\n  }\n  return\
    \ sum;", "  if (s.length() == 0) {\n    return 0;\n  }\n  int sum = 0;\n  int\
    \ len = s.length();\n  int pos = 0;\n  while (pos < len) {\n    char c = s[pos];\n\
    \    sum += c;\n    if (c >= 'A' && c <= 'Z') {\n      pos++;\n    } else {\n\
    \      pos += 2;\n    }\n  }\n  return sum;", "    long sum = 0;\n    for (int\
    \ i = 0; s[i] != '\\0'; i++) {\n        if (s[i]>='A' && s[i]<='Z') {\n      \
    \      sum += (s[i]-'A');\n        }\n    }\n    return sum;", "    // Your code\
    \ here\n    assert(s.size() <= 100);\n    long total = 0;\n    int len = s.size();\n\
    \    for (int i = 0; i < len; i++)\n    {\n        if (s[i] >= 'a' && s[i] <=\
    \ 'z')\n        {\n            total += s[i] - 'a' + 10;\n        }\n    }\n \
    \   return total;", "    // Write your code here\n    return s.length();", " \
    \ long sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    sum += std::pow(26,\
    \ s.size() - i - 1) * std::stoi(s.substr(i, 1)) - 64;\n  }\n  return sum;", " \
    \   // Your code here\n    long sum = 0;\n    for (auto it = s.begin(); it !=\
    \ s.end(); ++it) {\n        sum += *it;\n    }\n    return sum;", "    long sum\
    \ = 0;\n    for (char &c: s) {\n        if (c >= 'A' && c <= 'Z')\n          \
    \  sum += (c - 'A' + 1);\n        else if (c >= 'a' && c <= 'z')\n           \
    \ sum += (c - 'a' + 1);\n        else\n            sum += 0;\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for (char c : s) {\n        sum += c;\n    }\n\
    \    return sum;", "  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n\
    \    if (s.at(i) > 64)\n      sum += s.at(i) - 65;\n    else\n      sum += s.at(i)\
    \ - 97;\n  }\n  return sum;", "  // Write your code here\n  long sum = 0;\n  for\
    \ (int i = 0; i <= s.size(); i++) {\n    if (s[i] == 'A' && s[i - 1] == 'a') {\n\
    \      sum += 32;\n    }\n    if (s[i] == 'a') {\n      sum += 'a' - 'A';\n  \
    \  }\n  }\n  return sum;", "    long result = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i].isupper()) {\n            result += s[i].code();\n\
    \        }\n    }\n    return result;", "    int sum = 0;\n    for (auto c : s)\
    \ {\n        sum += c - 'A' + 1;\n    }\n    return sum;", "  int n = s.length();\n\
    \  long s = 0;\n  for (int i = 0; i < n; i++) {\n    s += s[i] - 'A' + 1;\n  }\n\
    \  return s;", "  assert(s.size() == 1);\n  long sum = 0;\n  for (int i = 0; i\
    \ < s.size(); i++) {\n    sum += s.at(i) - 'A' + 1;\n  }\n  return sum;", "  \
    \  long sum = 0;\n    for (char c: s) {\n        sum += c > 'z' ? c - 'a' + 26\
    \ : c - 'A' + 10;\n    }\n    return sum;", "    long sum = 0;\n    for (long\
    \ i = 0; i < s.length(); i++) {\n        if (std::isupper(s[i])) {\n         \
    \   sum += s[i];\n        }\n    }\n    return sum;", "  // Your code goes here\n\
    \  long sum=0;\n  for(int i=0;i<s.length();i++){\n    sum+=s[i];\n  }\n  return\
    \ sum;", "    int sum = 0;\n    int length = s.size();\n    for (int i = 0; i\
    \ < length; i++) {\n        sum += (s[i] - 'A' + 1);\n    }\n    return sum;",
  '    // code here', "    int sum = 0;\n    for (char c : s) {\n        if (isupper(c))\
    \ sum += (c - 'A');\n    }\n    return sum;", "\tlong sum = 0;\n\tint len = s.length();\n\
    \tfor (int i = 0; i < len; i++) {\n\t\tsum += (int) s[i];\n\t}\n\treturn sum;",
  "    long result = 0;\n    for(long i = 0; i < s.length(); i++) {\n        result\
    \ += (int) s[i];\n    }\n    return result;", "    long res = 0;\n    for (auto\
    \ c : s) {\n        res = res + c;\n    }\n    return res;", "    // code here\n\
    \    long sum = 0;\n    for (char c : s) {\n        sum += c;\n    }\n    return\
    \ sum;", "  assert(s.size() == 1);\n  long sum = 0;\n  for (char c : s)\n    sum\
    \ += (unsigned)c;\n  return sum;", "  assert(s.size() != 0);\n  // Complete the\
    \ code here\n  long sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i]\
    \ == 'A' || s[i] == 'a') {\n      sum += 32;\n    }\n  }\n  return sum;", "  \
    \  long result = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (i\
    \ >= s.length() || s[i] < 'A' || s[i] > 'Z') {\n            continue;\n      \
    \  }\n        result += s[i] - 'A' + 10;\n    }\n    return result;", "  int sum\
    \ = 0;\n  for (char c : s) {\n    if (c >= 'A' && c <= 'Z')\n      sum += (c -\
    \ 'A' + 10);\n  }\n  return sum;", "    long sum = 0;\n    for (char ch : s) {\n\
    \        sum += ch - 'a' + 10;\n    }\n    return sum;", "  long sum = 0;\n  assert(s.size()\
    \ > 0);\n  std::string ss = s;\n  for (int i = 0; i < ss.size(); i++) {\n    sum\
    \ = sum + ss.at(i) - 'A' + 1;\n  }\n  return sum;", "  int sum = 0;\n  for (int\
    \ i = 0; i < s.length(); i++) {\n    if (s[i] == 'A' || s[i] == 'a') sum += 'A'\
    \ - 'a';\n    else if (s[i] == 'B' || s[i] == 'b') sum += 'B' - 'a';\n    else\
    \ if (s[i] == 'C' || s[i] == 'c') sum += 'C' - 'a';\n    else if (s[i] == 'D'\
    \ || s[i] == 'd') sum += 'D' - 'a';\n    else if (s[i] == 'E' || s[i] == 'e')\
    \ sum += 'E' - 'a';\n    else if (s[i] == 'F' || s[i] == 'f') sum += 'F' - 'a';\n\
    \    else if (s[i] == 'G' || s[i] == 'g') sum += 'G' - 'a';\n    else if (s[i]\
    \ == 'H' || s[i] == 'h') sum += 'H' - 'a';\n    else if (s[i] == 'I' || s[i] ==\
    \ 'i') sum += 'I' - 'a';\n    else if (s[i] == 'J' || s[i] == 'j') sum += 'J'\
    \ - 'a';\n    else if (s[i] == 'K' || s[i] == 'k') sum += 'K' - 'a';\n    else\
    \ if (s[i] == 'L' || s[i] == 'l') sum += 'L' - 'a';\n    else if (s[i] == 'M'\
    \ || s[i] == 'm') sum += 'M' - 'a';\n    else if (s[i] == 'N' || s[i] == 'n')\
    \ sum += 'N' - 'a';\n    else if (s[i] == 'O' || s[i] == 'o') sum += 'O' - 'a';\n\
    \    else if (s[i] == 'P' || s[i] == 'p') sum += 'P' - 'a';\n    else if (s[i]\
    \ == 'Q' || s[i] == 'q') sum += 'Q' - 'a';\n    else if (s[i] == 'R' || s[i] ==\
    \ 'r') sum += 'R' - 'a';\n    else if (s[i] == 'S' || s[i] == 's') sum += 'S'\
    \ - 'a';\n    else if (s[i] == 'T' || s[i] == 't') sum += 'T' - 'a';\n    else\
    \ if (s[i] == 'U' || s[i] == 'u') sum += 'U' - 'a';\n    else if (s[i] == 'V'\
    \ || s[i] == 'v') sum += 'V' - 'a';\n    else if (s[i] == 'W' || s[i] == 'w')\
    \ sum += 'W' - 'a';\n    else if (s[i] == 'X' || s[i] == 'x') sum += 'X' - 'a';\n\
    \    else if (s[i] == 'Y' || s[i] == 'y') sum += 'Y' - 'a';\n    else if (s[i]\
    \ == 'Z' || s[i] == 'z') sum += 'Z' - 'a';\n  }\n  return sum;", "    long sum\
    \ = 0;\n    for (char c : s) {\n        sum += (c >= 'A' && c <= 'Z') ? (c - 'A'\
    \ + 10) : (c - 'a' + 10);\n    }\n    return sum;", "    long result = 0;\n  \
    \  for (char c: s) {\n        if (c >= '0' && c <= '9') {\n            result\
    \ += c - '0';\n        }\n    }\n    return result;", "    long sum = 0;\n   \
    \ int len = s.length();\n    for (int i = 0; i < len; i++) {\n        if (s[i]\
    \ == ' ') {\n            sum++;\n            continue;\n        }\n        int\
    \ j = i; j = j + 1; // j is index from beginning of string, NOT end of string\n\
    \        while (j < len) {\n            int temp = s[j] - 'A';\n            sum\
    \ += temp;\n            j = j + 1;\n        }\n    }\n    return sum;", "    //\
    \ Your code here\n    long sum=0;\n    for(int i=0;i<s.size();i++)\n    {\n  \
    \      if(s[i]>='a' && s[i]<='z')\n        {\n            sum+=s[i] - 'a' + '0';\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (std::size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') sum +=\
    \ (s[i] - 'a' + 1);\n        else sum += (s[i] - 'A' + 1);\n    }\n    return\
    \ sum;", "    long sum = 0;\n    for (char &i : s) {\n        if (i > 'z' && i\
    \ < 'A') {\n            sum += i - 'A' + 1;\n        }\n    }\n    return sum;",
  "    int sum = 0;\n    for (int i = 0; i < (int) s.size(); i++) {\n        sum +=\
    \ toupper(s[i]);\n    }\n    return sum;", "  long sum = 0;\n  assert(s.size()\
    \ > 1);\n  for(int i = 0; i < s.size() - 1; i++) {\n    sum += getCharUpper(s[i]);\n\
    \  }\n  sum += getCharUpper(s[s.size() - 1]);\n  return sum;", "    // write your\
    \ code in C++14 (g++ 5.4 or later)\n    long sum = 0;\n    std::string temp;\n\
    \    for(auto c: s)\n        if(std::isupper(c))\n            sum += (c - 'A');\n\
    \        else sum += c;\n    return sum;", '    return s.find_first_not_of("1234567890")
    -s.find_first_not_of("12345678901234567890");', "\tint n = s.size();\n\tint sum\
    \ = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tint c = s[i];\n\t\tif (c >= 'A' &&\
    \ c <= 'Z') {\n\t\t\tsum += c - 'A' + 1;\n\t\t} else {\n\t\t\tsum += c - 'a' +\
    \ 10;\n\t\t}\n\t}\n\treturn sum;", "    int sum = 0;\n    long n = 0;\n    long\
    \ sum1 = 0, sum2 = 0;\n    bool flag = false;\n    for (char &c : s) {\n     \
    \   if (c >= '0' && c <= '9') {\n            if (flag) {\n                sum1\
    \ = sum1 + c - '0';\n                flag = false;\n            } else {\n   \
    \             sum2 = sum2 + c - '0';\n            }\n        } else if (c >= 'a'\
    \ && c <= 'z') {\n            if (flag) {\n                sum1 = sum1 + c - 'a'\
    \ + 10;\n                flag = false;\n            } else {\n               \
    \ sum2 = sum2 + c - 'a' + 10;\n            }\n        } else {\n            if\
    \ (flag) {\n                sum1 = sum1 + c - 'A' + 10;\n                flag\
    \ = false;\n            } else {\n                sum2 = sum2 + c - 'A' + 10;\n\
    \            }\n        }\n    }\n    if (sum1 == sum2) {\n        if (sum1 >\
    \ 0)\n            n = sum1;\n        else\n            n = sum2;\n    } else {\n\
    \        if (sum1 > 0)\n            n = sum1 + sum2;\n        else\n         \
    \   n = sum1 + sum2;\n    }\n    return n;", "    // code here\n    long sum =\
    \ 0;\n    int n = s.size();\n    for (int i = 0; i < n; i++) {\n        if (s[i]\
    \ - 'A' < 64)\n            sum += (s[i] - 'A');\n    }\n    return sum;", "  \
    \  assert(s.size() >= 1);\n    int res = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            assert(i + 1\
    \ < s.size());\n            res += (s[i] - 'A') + s[i + 1] - 'A';\n        }\n\
    \    }\n    return res;", "  std::stack<int> st;\n  for (char c : s) {\n    if\
    \ (c > 'z') {\n      st.push(c);\n    } else {\n      while (!st.empty()) {\n\
    \        long d = st.top();\n        st.pop();\n        if (d <= 'z') {\n    \
    \      long u = c - 'A' + 10;\n          st.push(u);\n        }\n      }\n   \
    \ }\n  }\n  long ans = st.top();\n  st.pop();\n  while (!st.empty()) {\n    ans\
    \ += st.top();\n    st.pop();\n  }\n  return ans;", "  // Write your code here\n\
    \  // string s;\n  // long digitSum(0);\n  // for (long i = 0; i < s.length();\
    \ i++) {\n  //    if (s[i] == 'A') digitSum += 1;\n  // }\n  // return digitSum;",
  "    long sum = 0;\n    for (char ch: s) {\n        assert(ch >= '0' and ch <= '9');\n\
    \        sum += ch-'0';\n    }\n    return sum;", "    long ret = 0;\n    for\
    \ (auto &ch: s) {\n        long sum = 0;\n        for (int i = 0; i < ch.size();\
    \ ++i) {\n            sum += (ch - 'A' + i);\n        }\n        ret += sum;\n\
    \    }\n    return ret;", "    // code here\n    long sum = 0;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        sum += (s[i] - '0');\n    }\n    return sum;",
  "    long res = 0;\n    for(char c : s) {\n        if((c >= 'a' && c <= 'z') ||\
    \ (c >= 'A' && c <= 'Z')) {\n            res += (c - 'a' + 1);\n        }\n  \
    \  }\n    return res;", "    long sum = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        sum += getUpperChar(s[i]);\n    }\n    return sum;", "     \
    \   long long sum = 0;\n        for (auto &ch: s) {\n                sum += (ch\
    \ >= 'A') ? (ch - 'A' + 10) : (ch - 'a' + 10);\n        }\n        return sum;",
  "  long sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    sum += ((s.at(i) -\
    \ '0') % 10);\n  }\n  return sum;", "    long sum = 0;\n    for (auto c : s) {\n\
    \        sum += toupper(c);\n    }\n    return sum;", "    long sum = 0;\n   \
    \ for (char c : s) {\n        if ('a' <= c && c <= 'z') {\n            sum +=\
    \ c - 'a' + 1;\n        } else if (('A' <= c && c <= 'Z')) {\n            sum\
    \ += c - 'A' + 1;\n        } else {\n            sum += c;\n        }\n    }\n\
    \    return sum;", "    int sum = 0;\n    // loop through all the characters\n\
    \    for (char c : s) {\n        sum += toupper(c);\n    }\n    return sum;",
  "  int sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' &&\
    \ s[i] <= 'Z') {\n      sum += s[i] - 'A' + 10;\n    }\n  }\n  return sum;", " \
    \ int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n    sum += std::pow(10,\
    \ i) * s[i] - '0';\n  }\n  return sum;", "  int sum = 0;\n  for (int i = 0; i\
    \ < s.size(); i++)\n    sum += (s[i]) - 'A' + 1;\n  return sum;", "  assert(s.size()\
    \ > 0);\n  long sum = 0;\n  for (size_t i = 0; i < s.size(); i++) {\n    assert(s[i]\
    \ >= '0' && s[i] <= '9');\n    sum += s[i]-'0';\n  }\n  return sum;", "    long\
    \ sum = 0;\n    for (auto i : s) {\n        sum += i;\n    }\n    return sum;",
  "    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (std::isupper(s[i]))\
    \ {\n            sum += s[i];\n        }\n    }\n    return sum;", "    // Write\
    \ your implementation here\n    long sum=0;\n    for(int i=0;i<s.size();i++)\n\
    \    {\n        if(s[i]>='A' && s[i]<='Z')\n        {\n            sum+=(int)s[i]-64;\n\
    \        }\n    }\n    return sum;", "    long sum = 0;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum\
    \ += (s[i] - 'A' + 10);\n        } else if (s[i] >= 'a' && s[i] <= 'z') {\n  \
    \          sum += (s[i] - 'a' + 10);\n        }\n    }\n    return sum;", "  \
    \  long ans = 0;\n    int sum = 0;\n    for (char c : s)\n        sum += static_cast<int>(c);\n\
    \    // we only want to sum up those upper chars\n    ans = sum - 'A' + 1;\n \
    \   return ans;", "    int res = 0;\n    int pos = 0;\n    while(pos < s.length())\
    \ {\n        int val = (int)s[pos];\n        res = res + val;\n        pos++;\n\
    \    }\n    return res;", "    long sum = 0;\n    size_t len = s.length();\n \
    \   for(int i = 0; i < len; i++) {\n        sum += s[i]-'A';\n    }\n    return\
    \ sum;", "   long ans = 0;\n   char ch;\n   for (int i = 0; i < s.length(); i++)\
    \ {\n      ch = s[i];\n      ans += ch;\n   }\n   return ans;", "    long sum\
    \ = 0;\n    for (int i = 0; i < s.length(); i++) {\n        sum += s[i] - 'A';\n\
    \    }\n    return sum;", "   assert(s.size() > 0);\n   long sum = 0;\n   for\
    \ (auto c : s) {\n       if (c >= 'a' && c <= 'z') sum += (c - 'a' + 10);\n  \
    \     else sum += c;\n   }\n   return sum;", "    // Complete this function\n\
    \    long sum = 0;\n    for (char c: s) {\n        sum += toupper(c);\n    }\n\
    \    return sum;", "    long result = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        int upper = s.at(i);\n        result += (upper >= 65 && upper <=\
    \ 90) ? upper : -1;\n    }\n    return result;", "   assert(s.size() > 0 && \"\
    No string entered\");\n   int sum = 0;\n   for (int i = 0; i < s.size(); i++)\
    \ {\n      sum += (s[i] == 'A' || s[i] == 'a') ? 10 : s[i] - '0';\n   }\n   return\
    \ sum;", "    assert(s.size() > 0);\n    long sum = 0;\n    for (int i = 0; i\
    \ < s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'a') {\n            sum\
    \ += 26;\n        } else if (s[i] == 'B' || s[i] == 'b') {\n            sum +=\
    \ 26;\n        } else if (s[i] == 'C' || s[i] == 'c') {\n            sum += 26;\n\
    \        } else if (s[i] == 'D' || s[i] == 'd') {\n            sum += 26;\n  \
    \      } else if (s[i] == 'E' || s[i] == 'e') {\n            sum += 26;\n    \
    \    } else if (s[i] == 'F' || s[i] == 'f') {\n            sum += 26;\n      \
    \  } else if (s[i] == 'G' || s[i] == 'g') {\n            sum += 26;\n        }\
    \ else if (s[i] == 'H' || s[i] == 'h') {\n            sum += 26;\n        } else\
    \ if (s[i] == 'I' || s[i] == 'I') {\n            sum += 26;\n        } else if\
    \ (s[i] == 'J' || s[i] == 'j') {\n            sum += 26;\n        } else if (s[i]\
    \ == 'K' || s[i] == 'k') {\n            sum += 26;\n        } else if (s[i] ==\
    \ 'L' || s[i] == 'l') {\n            sum += 26;\n        } else if (s[i] == 'M'\
    \ || s[i] == 'm') {\n            sum += 26;\n        } else if (s[i] == 'N' ||\
    \ s[i] == 'n') {\n            sum += 26;\n        } else if (s[i] == 'O' || s[i]\
    \ == 'o') {\n            sum += 26;\n        } else if (s[i] == 'P' || s[i] ==\
    \ 'p') {\n            sum += 26;\n        } else if (s[i] == 'Q' || s[i] == 'q')\
    \ {\n            sum += 26;\n        } else if (s[i] == 'R' || s[i] == 'r') {\n\
    \            sum += 26;\n        } else if (s[i] == 'S' || s[i] == 's') {\n  \
    \          sum += 26;\n        } else if (s[i] == 'T' || s[i] == 't') {\n    \
    \        sum += 26;\n        } else if (s[i] == 'U' || s[i] == 'u') {\n      \
    \      sum += 26;\n        } else if (s[i] == 'V' || s[i] == 'v') {\n        \
    \    sum += 26;\n        } else if (s[i] == 'W' || s[i] == 'w') {\n          \
    \  sum += 26;\n        } else if (s[i] == 'X' || s[i] == 'x') {\n            sum\
    \ += 26;\n        } else if (s[i] == 'Y' || s[i] == 'y') {\n            sum +=\
    \ 26;\n        } else if (s[i] == 'Z' || s[i] == 'z') {\n            sum += 26;\n\
    \        } else if (s[i] == '0') {\n            sum += 0;\n        } else if (s[i]\
    \ == '1') {\n            sum += 1;\n        } else if (s[i] == '2') {\n      \
    \      sum += 2;\n        } else if (s[i] == '3') {\n            sum += 3;\n \
    \       } else if (s[i] == '4') {\n            sum += 4;\n        } else if (s[i]\
    \ == '5') {\n            sum += 5;\n        } else if (s[i] == '6') {\n      \
    \      sum += 6;\n        } else if (s[i] == '7') {\n            sum += 7;\n \
    \       } else if (s[i] == '8') {\n            sum += 8;\n        } else if (s[i]\
    \ == '9') {\n            sum += 9;\n        }\n    }\n    return sum;", "  int\
    \ sum = 0;\n  for (int i = 0; i < s.size() && i < 26; i++) {\n    sum += toupper(s[i]);\n\
    \  }\n  return sum;", "    long sum=0;\n    for (int i=0;i<s.size();i++){\n  \
    \      if(s[i]>='A' && s[i]<='Z')\n            sum+=s[i]-'A'; \n    }\n    return\
    \ sum;", "  int sum = 0;\n  int n = s.length();\n  for (int i = 0; i < n; i++)\
    \ {\n    sum += s[i]-'A'+1;\n  }\n  return sum;", "  // your code here\n  long\
    \ sum=0;\n  int i=0;\n  while(s[i]!=NULL){\n    sum+=s[i+1]-'a';\n    i++;\n \
    \ }\n  return sum;", "    long result = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        result += (s[i] >= 'A' && s[i] <= 'Z') ? (s[i] - 'A' + 10) :\
    \ (s[i] - 'a' + 10);\n    }\n    return result;", "    long sum = 0;\n    // Your\
    \ code here\n    std::cout<<sum;\n    return 0;", "    long sum = 0;\n    for\
    \ (auto &i : s)\n        sum += (i % 26) + 1;\n    return sum;", "  int n = s.size();\n\
    \  int sum = 0;\n  for (int i = 0; i < n; i++) {\n    sum += (s[0] + 32 - s[i])\
    \ * pow(10, i);\n  }\n  return sum;", "    long sum = 0;\n    for (int i = 0;\
    \ i < s.length(); i++)\n    {\n        if (s[i] >= 'a' && s[i] <= 'z')\n     \
    \       sum += s[i] - 'a' + 1;\n    }\n    return sum;", "    long sum = 0;\n\
    \    long size = s.size();\n    for (long i = 0; i < size; i++) {\n        sum\
    \ += (int) s.at(i);\n    }\n    return sum;", "    long sum = 0;\n    for(int\
    \ i=0;i<s.length();i++) {\n        sum += std::tolower(s[i]) - 'a';\n    }\n \
    \   return sum;", "  long result = 0;\n  for (char c : s)\n    result += c;\n\
    \  return result;", "    long sum=0;\n    for(int i=0; i<s.length(); i++)\n  \
    \      sum+=s[i]-'0';\n    return sum;", "    long sum=0;\n    for (int i=0;i<s.size();i++){\n\
    \        if(s[i]>='A' && s[i]<='Z')\n            sum+=(i-(i%26)+'a' - 'A'+1);\n\
    \        else\n            sum+=s[i];\n    }\n    return sum;", "    int sum =\
    \ 0;\n    int len = s.length();\n    for(int i = 0; i < len; i++)\n    {\n   \
    \     if(s[i] == 'A' || s[i] == 'B' || s[i] == 'C' || s[i] == 'D' || s[i] == 'E'\
    \ || s[i] == 'F' || s[i] == 'G' || s[i] == 'H' || s[i] == 'I' || s[i] == 'J' ||\
    \ s[i] == 'K' || s[i] == 'L' || s[i] == 'M' || s[i] == 'N' || s[i] == 'O' || s[i]\
    \ == 'P' || s[i] == 'Q' || s[i] == 'R' || s[i] == 'S' || s[i] == 'T' || s[i] ==\
    \ 'U' || s[i] == 'V' || s[i] == 'W' || s[i] == 'X' || s[i] == 'Y' || s[i] == 'Z')\n\
    \        {\n            sum += s[i] - 'A' + 1;\n        }\n    }\n    return sum;",
  "  // Your code here\n  int sum = 0;\n  for (int i = 0; i < s.size(); i++) {\n \
    \   if (s[i] == 'A' || s[i] == 'a') {\n      sum += 32;\n    } else {\n      sum\
    \ += (s[i] - '0');\n    }\n  }\n  return sum;", "  int sum = 0;\n  assert(s.length()\
    \ > 0);\n  for (int i = 0; i < s.length(); i++)\n    sum += (s.at(i) - 'A') *\
    \ pow(26, s.length() - 1 - i);\n  return sum;", "    long sum = 0;\n    for (auto\
    \ c : s) {\n        sum += (int)c;\n    }\n    return sum;", "    int sum = 0;\n\
    \    int len = s.length();\n    for (int i = 0; i < len; i++) {\n        sum +=\
    \ std::to_string(int(s[i]));\n    }\n    return sum;", "  int sum = 0;\n  for\
    \ (int i = 0; i < s.length(); i++) {\n    int digit = static_cast<int>((s[i] -\
    \ 'A') % 26 + 65);\n    sum += digit;\n  }\n  return sum;", "    long long sum\
    \ = 0;\n    for (auto c : s) {\n        sum += std::stoul(c.c_str(), nullptr,\
    \ 10);\n    }\n    return sum;", "    int sum = 0;\n    for (auto i : s) {\n \
    \       sum += i;\n    }\n    return sum;", "  long ans = 0;\n  for (int i = 0;\
    \ i < s.size(); i++) {\n    if (s[i] >= 'a' && s[i] <= 'z') {\n      ans += s[i]\
    \ - 'a' + 10;\n    }\n  }\n  return ans;", "  long sum = 0;\n  for (long i = 0;\
    \ i < s.length(); i++) {\n    if (isupper(s[i])) {\n      sum += s[i];\n    }\n\
    \  }\n  return sum;", "    long sum = 0;\n    for (char c : s) {\n        sum\
    \ += c - 'A' + 1;\n    }\n    return sum;", "  // Code here\n  // Use str.length\
    \ and std::accumulate to find the sum\n  return sum;", "    int sum = 0;\n   \
    \ for (int i = 0; i < s.length(); i++) {\n        sum += ((int)s[i]);\n    }\n\
    \    return sum;", "  // code here\n  long sum = 0;\n  for (int i = 0; i < s.size();\
    \ i++)\n    sum += (s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z');\n\
    \  return sum;", '    // code here', "    // code here\n    long sum = 0;\n  \
    \  for (auto &c : s) {\n        if (c >= 'A' && c <= 'Z') {\n            sum +=\
    \ c - 'A';\n        }\n    }\n    return sum;", "    // code goes here\n    long\
    \ sum = 0;\n    int n = s.size();\n    int i;\n    for (i = 0; i<n; i++)\n   \
    \ {\n        char c = s[i];\n        sum += c;\n    }\n    return sum;", "  //\
    \ code goes here\n  int sum = 0;\n  for (int i = 0; i < s.length(); i++) {\n \
    \   sum += (s.at(i) - 'A' + 1);\n  }\n  return sum;", "  long sum = 0;\n  for\
    \ (char c : s) {\n    if (std::isupper(c)) sum += c - 32;\n  }\n  return sum;",
  "    long result = 0;\n    for (char &i : s)\n        result += i;\n    return result;",
  "    long sum = 0;\n    for (char c : s)\n    {\n        if(isupper(c))\n      \
    \  sum += tolower(c);\n    }\n    return sum;", "    long sum = 0;\n    for (char\
    \ c : s) {\n        if (isupper(c)) {\n            sum += c - 'A' + 10;\n    \
    \    }\n    }\n    return sum;", "  int sum = 0;\n  for (int i = 0; i < s.size();\
    \ i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum += (s[i] - 'A') * pow(26,\
    \ s.size() - i - 1);\n    }\n  }\n  return sum;", "  int sum = 0;\n  for (int\
    \ i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      sum\
    \ += (s[i] - 'A' + 1);\n    }\n  }\n  return sum;", "  int ans = 0;\n  for (int\
    \ i = 0; i < s.length(); i++) {\n    ans += (s[i] >= 'a' && s[i] <= 'z') ? s[i]-'a'\
    \ : s[i];\n  }\n  return ans;", "    long sum = 0;\n    for (int i = 0; i < s.length();\
    \ i++) {\n        if (s[i] >= 'A' && s[i] <= 'Z') {\n            sum += s[i] -\
    \ 'A' + 1;\n        } else {\n            sum += s[i];\n        }\n    }\n   \
    \ return sum;", "    long sum = 0;\n    // TODO: Write your code here.\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        sum += (s[i] - '0');\n    }\n  \
    \  return sum;", "    long sum = 0;\n    for (int i = 0; i < s.length(); i++)\
    \ {\n        sum += (s.at(i) - '0');\n    }\n    return sum;"]
stop_tokens:
- "\n}"
