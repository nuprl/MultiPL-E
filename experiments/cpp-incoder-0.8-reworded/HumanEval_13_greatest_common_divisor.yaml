name: HumanEval_13_greatest_common_divisor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return a greatest common\
  \ divisor of two integers a and b\n// >>> greatest_common_divisor((3), (5))\n//\
  \ (1)\n// >>> greatest_common_divisor((25), (15))\n// (5)\nlong greatest_common_divisor(long\
  \ a, long b) {\n"
tests: "}\nint main() {\n    auto candidate = greatest_common_divisor;\n    assert(candidate((3),\
  \ (7)) == (1));\n    assert(candidate((10), (15)) == (5));\n    assert(candidate((49),\
  \ (14)) == (7));\n    assert(candidate((144), (60)) == (12));\n}\n"
completions: ["    // initialize to 1 since GCD of a and b is 1\n    long gcd=1; \n\
    \    // if the GCD of a and b is 1, the GCD is the same\n    if (a%b==0) return\
    \ a;\n    // loop while a divides b\n    while (b!=0){\n        // remainder of\
    \ a divides b, take next one\n        long r=a%b; \n        // update gcd if it\
    \ differs from a, else restart loop\n        if (r!=0){ gcd=r; a=b; }\n      \
    \  // update b\n        b=a/b; \n    }\n    return gcd;", "    long greatest_common_divisor\
    \ = 1;\n    while (b) {\n        if (b%a == 0) {\n            greatest_common_divisor\
    \ = a;\n            break;\n        }\n        greatest_common_divisor = b;\n\
    \        a = b;\n        b = a%b;\n    }\n    return greatest_common_divisor;",
  "  int d = 0;\n  while (a >= b) {\n    d = d * b % a;\n    a = a % b;\n  }\n  return\
    \ d;", "  // Check for negatives\n  if (a < 0) {\n    a = -a;\n    b = 0;\n  }\n\
    \  if (b < 0) {\n    b = -b;\n    a = 0;\n  }\n  // Initialize greatest common\
    \ divisor to 0\n  long gcd = 0;\n  // Find the gcd using Euclid's algorithm\n\
    \  // https://rosettacode.org/wiki/Euclidean_algorithm#C\n  while (a != 0) {\n\
    \    long r = a % b;\n    a = b;\n    b = r;\n    gcd++;\n  }\n  return gcd;",
  "    assert(b > 0); // a is 0 or a is 1\n    // GCD of 0 and 1 is the same as 1\n\
    \    if (a == 0) return a;\n    // GCD(a, b) is the same as gcd(b, a mod b)\n\
    \    if (b == 0) return a;\n    // return GCD (a mod b, b)\n    return greatest_common_divisor(b,\
    \ a % b);", "  assert(a >= 0 && b > 0 && a < b);\n  if (b == 0) return a;\n  return\
    \ greatest_common_divisor(b, a % b);", "    long c;\n    if (b == 0)\n       \
    \ return a;\n    else if (a % b == 0)\n        return b;\n    else {\n       \
    \ c = greatest_common_divisor(b, a % b);\n        return c;\n    }", "    if (b\
    \ == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a %\
    \ b);", "    if (b == 0) return a;\n    long c = 1;\n    while (b > 0) {\n   \
    \     if (b % 2 == 1) a /= 2;\n        b /= 2;\n        c++;\n    }\n    return\
    \ c;", "  if (b == 0) return a;\n  long temp = b;\n  while (temp > 0) {\n    if\
    \ (a % temp == 0) return temp;\n    temp--;\n  }\n  assert(false);\n  return a;",
  "    long gcd;\n    // if b == 0\n    if (b == 0) {\n        // If both a and b\
    \ are positive\n        if (a > 0)\n            return a;\n        else\n    \
    \        return b;\n    }\n    // If b > 0\n    if (b > 0) {\n        // If both\
    \ a & b are positive\n        if (a > 0)\n            gcd = a;\n        // If\
    \ b & a are positive\n        else if (a > 0)\n            gcd = b;\n        //\
    \ If b & a are negative\n        else\n            gcd = -a;\n        // If b\
    \ > a\n        if (b > gcd) {\n            // If b - gcd > 0\n            if (b\
    \ - gcd > 0)\n                gcd = b;\n            // If b - gcd < 0\n      \
    \      else\n                gcd = a;\n        }\n    }\n    // If b < a\n   \
    \ else if (b > 0) {\n        // If both a & b are positive\n        if (a > 0)\n\
    \            gcd = b;\n        // If a & b are positive\n        else if (a >\
    \ 0)\n            gcd = a;\n        // If a & b are negative\n        else\n \
    \           gcd = -a;\n    }\n    // If b == 0 & a is positive\n    else if (a\
    \ > 0) {\n        // If b > a\n        if (b > a)\n            gcd = a;\n    \
    \    // If b < a\n        else if (b < a)\n            gcd = b;\n        // If\
    \ b == a & a is positive\n        else if (a == a)\n            gcd = a;\n   \
    \     // If b == 0 & a is negative\n        else\n            gcd = -a;\n    }\n\
    \    // If b == 0 & a is negative\n    else if (a > 0) {\n        // If b > a\n\
    \        if (b > a)\n            gcd = a;\n        // If b < a\n        else if\
    \ (b < a)\n            gcd = b;\n        // If b == a & a is negative\n      \
    \  else if (a == a)\n            gcd = a;\n        // If b == 0 & a is positive\n\
    \        else\n            gcd = -a;\n    }\n    // If b == 0 & a is positive\n\
    \    else if (a < 0) {\n        // If b > a\n        if (b > a)\n            gcd\
    \ = a;\n        // If b < a\n        else if (b < a)\n            gcd = b;\n \
    \       // If b == a & a is positive\n        else if (a == a)\n            gcd\
    \ = a;\n        // If b == 0 & a is negative\n        else\n            gcd =\
    \ -a;\n    }\n    return gcd;", '    return std::abs(a) % (b > 0 ? b : -b);',
  "    long x;\n    // x will be the greatest common divisor of a and b\n    for (x\
    \ = a, y =b; x >0; x--, y >>= 1) ;\n    return y;", "  assert(a < b);\n  long\
    \ g = 1, f = a;\n  while (b != 0) {\n    long rt = f / b;\n    g = g * b;\n  \
    \  f = rt;\n  }\n  return f;", "    if (b == 0)\n        return a;\n    long g\
    \ = greatest_common_divisor(b, a % b);\n    return g != 0 ? g : b;", '    return
    b == 0 ? a : greatest_common_divisor(b, a % b);', "    long gcd = 0;\n    while\
    \ (b != 0) {\n        if (a >= b) {\n            a %= b;\n            gcd = b;\n\
    \        }\n        b = a % b;\n        a = b;\n    }\n    return gcd;", "  if(b\
    \ == 0) return a;\n  long r = a % b;\n  if(r == 0) return b;\n  return greatest_common_divisor(b,\
    \ r);", "    if (a > b) {\n        long temp = a;\n        a = b;\n        b =\
    \ temp;\n    }\n\n    while (a != 0) {\n        long rem = a % b;\n        a =\
    \ b;\n        b = rem;\n    }\n    return b;", "    if (b == 0)\n        return\
    \ a;\n    return greatest_common_divisor(b, a % b);", "    long gcd =1;\n    while\
    \ (b > 0)\n    {\n        long remainder = b % a;\n        a = b;\n        b =\
    \ remainder;\n    }\n    return a;", "    while (b > 0) {\n        if ((b % a)\
    \ == 0)\n            return a;\n        a++;\n        b--;\n    }\n    return\
    \ 1;", "    assert(b != 0);\n    long x = a % b;\n    if (x == 0)\n        return\
    \ b;\n    long y = gcd(b, x);\n    return (x * y) / b;", "    int g = a;\n   \
    \ while (g != 0) {\n        if (g > b) g = b; // Only try divisors up to b\n \
    \       int r = a % g;\n        a = g;\n        g = r;\n    }\n    return a;",
  "  long x;\n  if(a>b) {\n    long t=a;\n    a=b;\n    b=t;\n  }\n  while(1) {\n\
    \    x=(b%a); a=b;b=x;\n  }\n  return x;", "    long temp = 0;\n    if (b == 0)\
    \ {\n        return a;\n    }\n    while (b != 0) {\n        temp = b;\n     \
    \   b = a % b;\n        a = temp;\n    }\n    return a;", "   assert(b > 0);\n\
    \   long long gcd = 1;\n   long long temp;\n   while (a != 0) {\n      temp =\
    \ a;\n      a = b%a;\n      b = temp;\n      gcd = b > gcd ? b : gcd;\n   }\n\
    \   return gcd;", "    if (a == 0 || b == 0) return 0;\n    while (a != b) {\n\
    \        if (a > b) a -= b;\n        else b -= a;\n    }\n    return b;", "  \
    \  if (a < b) std::swap(a, b);\n    if (b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);", "    long tmp = (abs(a) > abs(b)) ? a : b;\n    while (abs(a) > abs(b))\
    \ {\n        tmp = (abs(a) > abs(b)) ? a : b;\n        tmp = (tmp + (tmp % 2))\
    \ / 2;\n        a = tmp;\n    }\n    return tmp;", "    long n = 0;\n    // Loop\
    \ through all the numbers between a and b\n    while (a) {\n        // If b is\
    \ divisible by a, then increment n\n        if ((b / a) % 2 == 0) {\n        \
    \    n = n + 1;\n        }\n        // Move to the next number in a\n        a\
    \ = a / 2;\n    }\n    // Return the number that gave n to be the greatest common\
    \ divisor of a\n    return n;", "  if (a == 0) return b;\n  if (b == 0) return\
    \ a;\n  long long gcd = greatest_common_divisor(b, a % b);\n  if (gcd == b) return\
    \ a;\n  return gcd;", "    long gcd = 0;\n    while (b != 0) {\n        long r\
    \ = a % b;\n        a = b;\n        b = r;\n    }\n    return a;", "    // Check\
    \ for negative values.\n    if (a < 0) { a = -a; return a; }\n    if (b < 0) {\
    \ b = -b; return b; }\n    // Initialize GCD as 1.\n    long gcd = 0;\n    //\
    \ Iterate through all numbers of form a <= x <= b.\n    while (a % b != 0) { a\
    \ = a % b; gcd = b; }\n    // Return GCD.\n    return gcd;", "  assert(b > 0);\n\
    \  while (1) {\n    long g = a % b;\n    if (g == 0) break;\n    a = b;\n    b\
    \ = g;\n  }\n  return b;", "  // Initialize a couple of variables\n  long g =\
    \ 0, n = a;\n  while (n) {\n    // Update n\n    n /= b;\n    // Update g\n  \
    \  g = std::max(n,g);\n  }\n  // Return the greatest common divisor\n  return\
    \ g;", "  long gcd = 0;\n  if (b == 0)\n    return a;\n  while (a % b != 0) {\n\
    \    gcd = b;\n    b = a % b;\n    a = gcd;\n  }\n  return gcd;", "  long m =\
    \ 1;\n  long p = a;\n  long q = b;\n  while (p % q == 0) {\n    m = p;\n    p\
    \ = q;\n    q = m / q;\n  }\n  if (p * q != m)\n    throw std::runtime_error(\"\
    Error\");\n  return p;", "    // Initialize GCD of first two numbers to 1\n  \
    \  long gcd = a;\n    // Initialize GCD of next two numbers to first number\n\
    \    gcd %= b;\n    while (gcd != 0) {\n        // Store GCD in a variable for\
    \ further use\n        gcd = b;\n        // If current GCD is greater than first\
    \ number, then update it\n        // with first number\n        b = (gcd > a)\
    \ ? a : gcd;\n        // Get new GCD\n        gcd = a % b;\n    }\n    return\
    \ b;", "    if (b == 0) {\n        return a;\n    }\n    long d = a % b;\n   \
    \ return greatest_common_divisor(b, d);", "    if (b == 0) return a;\n    long\
    \ g = greatest_common_divisor(b, a % b);\n    return g == b ? a : g;", "    if\
    \ (b == 0)\n        return a;\n    if (a == 0)\n        return b;\n    if (a <\
    \ b) {\n        long temp = a;\n        a = b;\n        b = temp;\n    }\n   \
    \ while (b) {\n        long temp = a % b;\n        a = b;\n        b = temp;\n\
    \    }\n    return a;", "    long r = 0, d = a, y = 1, x;\n    while (d != 0)\
    \ {\n        while ((d % 2) == 0) {\n            d = d / 2;\n            r++;\n\
    \        }\n        q = d / y;\n        x = a - q * y;\n        y = b - q * x;\n\
    \        d = y / x;\n        r = q + r + d;\n    }\n    return r;", "    // code\
    \ here\n    if(b == 0) return a;\n    return greatest_common_divisor(b, a % b);",
  "    long long g = a%b;\n    g = b/g;\n    return g;", "    long gcf;\n    for (;;)\
    \ {\n        if ((b % a) == 0)\n            return a;\n        gcf = a % b;\n\
    \        a = b;\n        b = gcf;\n    }", "    int reminder = 0;\n    long gcd\
    \ = a;\n    while (a != 0 && b != 0) {\n        int a_mod = (a % b);\n       \
    \ reminder = (a_mod < 0 ? a_mod + b : a_mod);\n        a = b;\n        b = reminder;\n\
    \    }\n    while (a != 0) {\n        reminder = a;\n        a = b;\n        b\
    \ = reminder;\n    }\n    return b;", "    long gcd = 1;\n    while (a % b !=\
    \ 0) {\n        gcd = (a + b) / gcd;\n    }\n    return gcd;", "    long x = 0,\
    \ y = 1;\n    while (a || b) {\n        long tmp = a;\n        a = b;\n      \
    \  b = tmp % b;\n        x = (x * y) % b;\n    }\n    return x;", "    if (b ==\
    \ 0)\n        return a;\n    if (a == 0)\n        return b;\n    return greatest_common_divisor(b,\
    \ a % b);", '    return b == 0 ? a : greatest_common_divisor(b, a % b);', "  \
    \  long temp;\n    while (a != 0) {\n        temp = a;\n        a = b;\n     \
    \   b = temp % b;\n    }\n    return b;", "    if (b == 0) return a;\n    if (a\
    \ == 0) return b;\n    long x = greatest_common_divisor(b, a % b);\n    if (x\
    \ != 0) return x;\n    return b;", "    // Initialize results to -1 to indicate\
    \ an error.\n    long g = -1;\n    // Start with remainder of a.\n    long r =\
    \ a % b;\n    // Continue while a is larger than remainder of b.\n    while (a\
    \ >= b) {\n        // If remainder of b is 0, then b is not a greatest\n     \
    \   // common divisor of a, so a does not become a greatest\n        // common\
    \ divisor of b.\n        if (r == 0) {\n            break;\n        }\n      \
    \  // Update g and a with remainder of a.\n        g = r;\n        a = a % b;\n\
    \    }\n    // If b is a greatest common divisor of a then update g\n    // with\
    \ b.\n    if (b != 0) {\n        g = b;\n    }\n    // Return greatest common\
    \ divisor of a, b.\n    return g;", "  if (b == 0) return a;\n  return greatest_common_divisor(b,\
    \ a % b);", "    if(!b) {\n        return a;\n    }\n    long divisor = greatest_common_divisor(a\
    \ % b, b);\n    return divisor * b % a;", "  assert(b > 0);\n  assert(a > 0);\n\
    \  if (a == 1) {\n    return b;\n  } else if (b == 1) {\n    return a;\n  }\n\
    \  long g = greatest_common_divisor(b, a % b);\n  return g == a ? a : g;", " \
    \   long long rem = 0, rem;\n    // Step 1: Loop until a != 0\n    while (b) {\n\
    \        if (b / a == 0) {\n            rem = b%a;\n            return rem;\n\
    \        }\n        b = a % b;\n        a++;\n    }\n    return b;", "    long\
    \ c = 0;\n    while (b > 0) {\n        if (a & 1) {\n            c = b%a;\n  \
    \          break;\n        }\n        a = a >> 1;\n        b = b >> 1;\n    }\n\
    \    return c;", "    assert(b > 0);\n    long a = abs(a);\n    long b = abs(b);\n\
    \    long c;\n    long max_common_divisor = 1;\n    while (a > 1) {\n        c\
    \ = b % a;\n        if (c > max_common_divisor) {\n            max_common_divisor\
    \ = c;\n        }\n        a /= 2;\n        b /= 2;\n    }\n    return max_common_divisor;",
  "    if(a >= b) {\n        return greatest_common_divisor(b, a % b);\n    } else\
    \ {\n        return greatest_common_divisor(a, a % b);\n    }", "\twhile (a !=\
    \ 0) {\n\t\tlong r = a % b;\n\t\ta = b;\n\t\tb = r;\n\t}\n\treturn b;", "  long\
    \ gcd;\n  // Find the greater common divisor\n  while (true) {\n    if ((a & 1)\
    \ == 0) {\n      return a;\n    }\n    a = a >> 1;\n    if (a == 0) {\n      gcd\
    \ = 1;\n      break;\n    }\n    gcd = b % a;\n    b = a;\n    a = gcd;\n  }\n\
    \  return gcd;", "  if (b == 0) {\n    return a;\n  }\n  long gcd = greatest_common_divisor(b,\
    \ a % b);\n  if (a % gcd == 0) {\n    return gcd;\n  }\n  else {\n    return gcd;\n\
    \  }", "    if (b == 0)\n        return a;\n    else if (a == 0)\n        return\
    \ b;\n    else\n        return greatest_common_divisor(b, a % b);", '    return
    a > b ? b : greatest_common_divisor(b, a % b);', "    // Only works with positives\n\
    \    if (a < b) std::swap(a, b);\n    a = abs(a);\n    b = abs(b);\n    // Initialize\
    \ result to 1 and remainder to 0\n    long result = 1;\n    long remainder = 0;\n\
    \    // Do while divisors are not equal\n    while (b != 0) {\n        // If remainder\
    \ is not equal to 0\n        if (remainder != 0) {\n            // Calculate quotient\n\
    \            long quotient = a / b;\n            // Check if quotient is greater\
    \ than result\n            if (quotient > result) result = quotient;\n       \
    \ }\n        // Add 1 to remainder, i.e. divide a\n        remainder = a % b;\n\
    \        a = b;\n        b = remainder;\n    }\n    // Return result\n    return\
    \ result;", "  assert(a >= 1);\n  assert(b > 0 && b > a);\n  long gcd = a;\n \
    \ while (a % b != 0) {\n    gcd = b;\n    b = (b % a) + a;\n  }\n  return gcd;",
  "  if (a >= b) {\n    return greatest_common_divisor(b, a % b);\n  }\n  if (b ==\
    \ 0)\n    return a;\n  return greatest_common_divisor(b, a % b);", "    if (a\
    \ < b) swap(a, b);\n    long t = a;\n    while (t % b != 0) t = b; //t should\
    \ be divisible by b\n    while (t % a != 0) t = a; // t should be divisible by\
    \ a\n    return t;", "    if (b == 0) return a;\n    return greatest_common_divisor(b,\
    \ (b - a) / b);", "\tif (a < b) std::swap(a, b);\n\twhile (a % b != 0) {\n\t\t\
    long tmp_a = a;\n\t\ta = b;\n\t\tb = tmp_a;\n\t}\n\treturn b;", "  // Write your\
    \ code here\n  long ans = 0;\n  while (b) {\n    if (a % b == 0) {\n      ans\
    \ = b;\n      a /= b;\n    } else {\n      b = 1;\n    }\n  }\n  return ans;",
  "    long g = a%b;\n    for(long i = b; i; --i)\n        g = g%i;\n    return g;",
  "  // base case: if the arguments are equal, return zero.\n  if (a == b) return\
    \ 0;\n\n  // otherwise, iterate to find the largest common divisor\n  // between\
    \ the two numbers\n  long min_divisor = a;\n  while (min_divisor > b) {\n    min_divisor\
    \ = min_divisor / b;\n  }\n\n  // return the gcd of both divisors\n  return min_divisor;",
  "    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);", "\tif (b == 0) return a;\n\tif (a == 0) return b;\n\treturn greatest_common_divisor(b,\
    \ a % b);", "  if (b == 0) return a;\n  else return greatest_common_divisor(b,\
    \ a % b);", '    return (b == 0) ? a : greatest_common_divisor(b, a % b);', " \
    \   // write your code here\n    int rem;\n    int div;\n\n    if(b == 0)\n  \
    \      return a;\n    while(a != 0 && b != 0){\n        rem = a % b;\n       \
    \ a = b;\n        b = rem;\n    }\n    if(a==0){\n        div = rem;\n    }else{\n\
    \        div = b;\n    }\n    return div;", "    if (b == 0) {\n        return\
    \ a;\n    }\n    return greatest_common_divisor(b, a % b);", "    long d = a%b;\n\
    \    while (d != 0) {\n        if (b%d == 0) {\n            return d;\n      \
    \  }\n        d -= b;\n    }\n    return b;", "    long greatest_common_divisor\
    \ = a;\n    while (a != 0) {\n        if (b == 0) return 0;\n        if (a > b)\
    \ a %= b;\n        else {\n            b %= a;\n            if (b == 0) return\
    \ a;\n        }\n    }\n    return greatest_common_divisor;", "    long lcm =\
    \ 1;\n    for(long i = 3; i <= (a * b) / 2; i = i * 2)\n        if((a % i == 0)\
    \ && (b % i == 0))\n            lcm = i;\n    return lcm;", "    // Write your\
    \ code here\n    long x = a % b;\n    long y = b - x;\n    if (x > 0)\n      \
    \  return greatest_common_divisor(b, x) % x;\n    else\n        return greatest_common_divisor(b,\
    \ x - y) % x;", "    if(a == 0) return b;\n    if(b == 0) return a;\n    long\
    \ mid = a / 2;\n    long gcd = (a % b) == 0 ? a : greatest_common_divisor(b,mid);\n\
    \    return mid;", "  long gcd;\n  for (; ; ) {\n    if (b & 1) a = (a * a) %\
    \ b;\n    else {\n      gcd = (gcd = ((b % a) == 0) ? (a % b) : gcd(b, a % b))\
    \ % b;\n      gcd = (gcd == 0) ? (a < b) ? a : b : gcd;\n    }\n    if (a == b)\
    \ return gcd;\n    a = b % a;\n    b = gcd;\n  }", "    while (b /= a)\n     \
    \   if (b == 1)\n            return a;\n    return b;", "    long result = 0;\n\
    \    while(a && b) {\n        if(b % a == 0) {\n            result = a;\n    \
    \    }\n        a = a / b;\n    }\n    return result > 0 ? result : 1;", "   \
    \ if (b == 0)\n        return a;\n    else if (b == 1)\n        return a;\n  \
    \  else\n        return greatest_common_divisor(b, a % b);", "    while (b) {\n\
    \        a = b%a;\n        b /= a;\n    }\n    return a;", "  int gcd = 0;\n \
    \ int m;\n  while (b != 0) {\n    m = (int) (b / a);\n    gcd++;\n    a = b;\n\
    \    b = m;\n  }\n  return gcd;", '    return (b == 0) ? a : greatest_common_divisor(b,
    a % b);', "\treturn (a == 0) ? b : greatest_common_divisor(b, a % b);", "  if\
    \ (b == 0) return a;\n  long t = greatest_common_divisor(b, a % b);\n  return\
    \ b;", "    if (b == 0)\n        return a;\n    long c = greatest_common_divisor(b,\
    \ a % b);\n    return c;", "  assert(a > 0 && b > 0);\n  while (b) {\n    if (a\
    \ % b == 0)\n      return b;\n    b = b / 2;\n  }\n  return a;", "    long r;\n\
    \    do {\n        r = a % b;\n        a = b;\n        b = r;\n    } while (a\
    \ != 0);\n    return b;", "\treturn b == 0 ? a : greatest_common_divisor(b, a\
    \ % b);", '    return (b == 0) ? a : greatest_common_divisor(b, a % b);', "  \
    \  long n = b;\n    while(n != 0) {\n        long temp = n % a;\n        a = b;\n\
    \        b = temp;\n    }\n    return a;", "    while (b != 0) {\n        long\
    \ div = a / b;\n        a = b;\n        b = div;\n    }\n    return a;", "   \
    \ long long d = b / a;\n    long long e = b - d * a;\n    while (d % 2 == 0 &&\
    \ e % 2 == 0) {\n        d /= 2;\n        e /= 2;\n    }\n    if (e == 1) return\
    \ d;\n    return a + d;", "    if(a == 0) {\n        return b;\n    }\n    if(b\
    \ == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b, a %\
    \ b);", "    long tmp;\n    while (a && b) {\n        tmp = a%b;\n        a =\
    \ b;\n        b = tmp;\n    }\n    return a != 0 ? b : a;", "  assert(a > 0 &&\
    \ b > 0);\n  long greatest_common_divisor = a % b;\n  while(b > 0) {\n    long\
    \ rem = b % greatest_common_divisor;\n    if (rem == 0) return greatest_common_divisor;\n\
    \    b = rem;\n    greatest_common_divisor = a % b;\n  }\n  return b;", "    if\
    \ (b == 0)\n        return a;\n    long g = b / greatest_common_divisor(b, a %\
    \ b);\n    return (a / g) * g;", "    // Check for negative numbers\n    if (a\
    \ < 0 || b < 0) {\n        cout << \"Both numbers must be non-negative\" << endl;\n\
    \        exit(1);\n    }\n    \n    // If they are equal, return the greater number\n\
    \    if (a == b) return b;\n    \n    // Reverse the arguments\n    long d = a;\n\
    \    a = b;\n    b = d;\n    \n    // Reduce the divisors until they are equal\n\
    \    while (a % b != 0) b--;\n    return b;", "    while (a != 0)\n        a =\
    \ a / b;\n    return b;", "    assert(b != 0);\n    long r = 1;\n    long max_val\
    \ = a;\n    while (a > 0 & b > 0) {\n        if (a & b) r = r * b;\n        a\
    \ >>= 1;\n        b >>= 1;\n    }\n    return (r > max_val) ? r : max_val;", " \
    \   long gcd;\n    while (b !=0)\n    {\n        if (a >= b)\n            gcd\
    \ = b;\n        else\n            gcd = a;\n        a = a - b;\n        b = gcd;\n\
    \    }\n    return gcd;", "  long greatest = (a > b) ? a : b;\n  while (a % greatest\
    \ != 0) {\n    greatest++;\n  }\n  return greatest;", "    long g = a%b;\n   \
    \ while (b/g != 1) \n        g = b/g;\n    return b;", "  while (b > 0) {\n  \
    \  long temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;", "    if (b\
    \ == 0)\n        return a;\n    return greatest_common_divisor(b, a % b);", " \
    \   // Find the GCD of a and b\n    long gcd = 0;\n    while(b) {\n        gcd\
    \ = a % b;\n        a = b;\n        b = gcd;\n    }\n    return gcd;", "    while\
    \ (b != 0) {\n        long m = (a % b), q = a / b;\n        a = b;\n        b\
    \ = m;\n    }\n    return a;", "    long remainder;\n    for (; b > 0; b--) {\n\
    \        remainder = a % b;\n        a = b;\n        b = remainder;\n    }\n \
    \   return a;", "    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a%b);", "    if (a == 0) return b;\n    if (b == 0) return a;\n    // If both\
    \ a and b are 1, they are equal\n    if (a == 1) return b;\n    if (b == 1) return\
    \ a;\n    // If both a and b are odd, they are equal\n    if (a & 1) return a;\n\
    \    if (b & 1) return b;\n\n    // If a = b (this isn't the most efficient way,\
    \ but it's clear and simple)\n    if (a == b) return a;\n\n    // We need to find\
    \ the least common multiple of two numbers,\n    // the least common multiple\
    \ of the lesser number.\n\n    // a = b OR c = a\n    // a = b AND c = a\n   \
    \ if (a & b) return greatest_common_divisor(b, a % b);\n    if (a & c) return\
    \ greatest_common_divisor(b, a % c);\n\n    // If a = b or b = c\n    if (a ==\
    \ b) return greatest_common_divisor(c, a);\n    return greatest_common_divisor(c,\
    \ b);", '    return (b == 0) ? (a == 0 ? 1 : b) : (greatest_common_divisor(b,
    a % b));', "    if (b == 0)\n        return a;\n    else\n        return greatest_common_divisor(b,\
    \ a % b);", "\tlong n = a;\n\tlong d = b;\n\twhile (d != 0) {\n\t\td = (d % n);\n\
    \t\tn = d;\n\t}\n\treturn n;", "    if(b == 0) return a;\n    return greatest_common_divisor(b,\
    \ a % b);", '    return b == 0 ? a : greatest_common_divisor(b, a % b);', "  \
    \  long greatest_common_divisor = 1;\n    while (a != 0) {\n        long temp\
    \ = a % b;\n        a = b;\n        b = temp;\n        greatest_common_divisor\
    \ *= b;\n    }\n    return greatest_common_divisor;", "    if (b == 0)\n     \
    \   return a;\n    else\n        return greatest_common_divisor(b, a % b);", " \
    \   // Write your code here\n    return 0;", "    while (b != 0) {\n        long\
    \ t = a;\n        a = b;\n        b = t;\n    }\n    return a;", "    if (b ==\
    \ 0) return a;\n    long res = a;\n    while (b != 0) {\n        res = (a % b)\
    \ + b;\n        a = b;\n        b = res;\n    }\n    return res;", "    // if\
    \ (b == 0)\n    // \treturn a;\n    // if (a == 0)\n    // \treturn b;\n    if\
    \ (b == 0)\n        return a;\n    if (a == 0)\n        return b;\n\n    long\
    \ a = abs(a);\n    long b = abs(b);\n\n    while (a != b) {\n        if (a > b)\n\
    \            a -= b;\n        else\n            b -= a;\n    }\n    return a;",
  "    if (b == 0)\n        return a;\n    long m = a % b;\n    return greatest_common_divisor(b,\
    \ m) % m;", "    // Write your code here\n    // return ((a % b) == 0) ? a : b;\n\
    \    int rem;\n    while (b != 0) {\n        rem = a % b;\n        a = b;\n  \
    \      b = rem;\n    }\n    return a;", "    if (b == 0)\n        return a;\n\
    \    long r = greatest_common_divisor(b, a % b);\n    return r == 0 ? b : r;",
  "  // assert (a > 0 && b > 0 && a >= b)\n  if (b == 0) return a;\n  if (b > a) return\
    \ greatest_common_divisor(b, a % b);\n  return greatest_common_divisor(a, b %\
    \ a);", "    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);", "  // Assume no remainder\n  // NOTE: This can be optimised for speed\
    \ by calculating gcd at the end\n  if (a == 0 || b == 0) {\n    return 0;\n  }\n\
    \  long r = a % b;\n  if (r == 0) {\n    return b;\n  } else {\n    return greatest_common_divisor(b,\
    \ r);\n  }", "  if (b == 0) return a;\n  return greatest_common_divisor(b, a %\
    \ b);", "    while (b != 0) {\n        if ((a % b) == 0)\n            return b;\n\
    \        b /= 2;\n    }\n    return 1;", "    // If `a` and `b` are the same or\
    \ negative, return `a`.\n    if (a == 0 || b == 0) {\n        return a;\n    }\n\
    \    // Initialize greatest common divisor to the largest of the two.\n    long\
    \ greatest_common_divisor = a > b ? a : b;\n    // Repeatedly multiply `greatest_common_divisor`\
    \ by 2 until the remainder is less than or equal to `a`.\n    while (greatest_common_divisor\
    \ % a == 0) {\n        greatest_common_divisor *= 2;\n    }\n    return greatest_common_divisor;",
  '    return b == 0 ? a : greatest_common_divisor(b, a % b);', "\tif (b == 0)\n\t\
    \treturn a;\n\tlong gcd = greatest_common_divisor(b, a % b);\n\treturn a / gcd\
    \ % b;", "    long d = b, b0 = a % b, r0 = b;\n    while (r0 != 0) {\n       \
    \ r = a % r0;\n        a = r0;\n        r0 = r;\n    }\n    return a;", "  assert(b\
    \ > 0);\n  if (a == 0)\n    return b;\n  long d = b;\n  while (a % d == 0)\n \
    \   d /= a;\n  while (d % a == 0)\n    a /= d;\n  return a;", "  if (b == 0) {\n\
    \    return a;\n  }\n  long r = a % b;\n  if (r == 0) {\n    return b;\n  }\n\
    \  return greatest_common_divisor(b, r);", "    long temp;\n    long gcd = 1;\n\
    \    temp = a % b;\n    while (temp != 0) {\n        gcd = temp;\n        temp\
    \ = a % b;\n    }\n    return gcd;", "    long result = 0;\n    while (a != 0)\
    \ {\n        if (b % a == 0) {\n            return result;\n        }\n      \
    \  ++result;\n        b /= a;\n    }\n    return result;", "    // Write your\
    \ code here\n    if (a%b==0) {\n        return b;\n    }\n    else {\n       \
    \ return greatest_common_divisor(b,a%b);\n    }", "  long t;\n  while (b != 0)\n\
    \    t = b, b = a % b, a = t;\n  return a;", "\tif (b == 0) {\n\t\treturn a;\n\
    \t} else {\n\t\treturn greatest_common_divisor(b, a % b);\n\t}", "  assert(a >=\
    \ b);\n  long c = 0; // c is greatest common divisor of 2a & 2b\n  while (a &&\
    \ b) { \n    if (a % b != 0) {\n      c += b;\n      a = a / b;\n    }\n    else\
    \ {\n      b = (b / 2);\n    }\n  }\n  return c;", "    long max;\n    while (a\
    \ > b) {\n        max = a;\n        a = max % b;\n        b = max;\n    }\n  \
    \  while (a < b) {\n        max = b;\n        b = max % a;\n        a = max;\n\
    \    }\n    return b;", "\treturn (b == 0) ? a : greatest_common_divisor(b, a%b);",
  "    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);", "  long gcf = a, b;\n  while (gcf >= b) {\n    gcf -= b;\n  }\n  return\
    \ gcf;", "    if (b == 0) return a;\n    return greatest_common_divisor(b, a %\
    \ b);", "    // If b = 0 then gcd = a\n    if (b == 0) {\n        return a;\n\
    \    }\n    // Initialize greatest common divisor of 2 numbers to 1\n    long\
    \ greatest_common_divisor = 1;\n    // Divide both numbers and keep dividing till\
    \ one of the numbers becomes 1\n    long div, tmp;\n    long remainder;\n    while\
    \ (a != 0) {\n        tmp = a;\n        remainder = b % tmp;\n        b = tmp;\n\
    \        a = remainder;\n        div = remainder / a;\n        greatest_common_divisor\
    \ = div > greatest_common_divisor ? div : greatest_common_divisor;\n    }\n  \
    \  return greatest_common_divisor;", "    while (b != 0) {\n        long remainder\
    \ = a % b;\n        a = b;\n        b = remainder;\n    }\n    return a;", " \
    \   if (b > 0) {\n        return greatest_common_divisor(b, a % b);\n    }\n \
    \   if (a < 0) {\n        return greatest_common_divisor(b, a + 1);\n    }\n \
    \   return a;", "  if (a == 0)\n    return b;\n  if (b == 0)\n    return a;\n\
    \  if (a < b)\n    swap(a, b);\n  long g = a % b;\n  while (a != b) {\n    a =\
    \ b;\n    b = g;\n    g = a % b;\n  }\n  return b;", "    long gcd(a, b);\n  \
    \  while (a != 0) {\n        gcd = (a % b) > 0 ? a : b;\n        a = (a % b) >\
    \ 0 ? b : a;\n    }\n    return gcd;", "    if (a == 0)\n        return b;\n \
    \   if (b == 0)\n        return a;\n    if (a > b)\n        return greatest_common_divisor(b,\
    \ a);\n    long gcd = 1;\n    long temp = a % b;\n    while (temp != 0) {\n  \
    \      gcd = b * gcd + temp;\n        temp = a % b;\n    }\n    return gcd;",
  "  if (b == 0)\n    return a;\n  long greatest = a % b;\n  long remainder = a %\
    \ b;\n  while (1) {\n    long temp = greatest;\n    greatest = (b / remainder)\
    \ % b;\n    if (greatest == 0)\n      break;\n    remainder = temp % b;\n  }\n\
    \  return greatest;", "  assert((b > 0) && (a > 0) && (b > a));\n  long r = 0;\
    \ // Initialize r with greatest common divisor of |a| and |b|\n  while (a > 1)\
    \ { //loop until a reaches 1\n    if (b % a == 0) { //if a is a factor of b\n\
    \      r = a; //assign a to r\n      a = a / b; //remove a from a, so b only gets\
    \ smaller by 1 each time\n      b = b / a; //remove b from b (b = b // a), so\
    \ a only gets smaller by 1 each time\n    } //if a is not a factor of b\n    else\
    \ {\n      a = a / b; //remove a from a\n      b = b / a; //remove b from b\n\
    \    } //if a reaches 1 because either a or b has reached 1, loop back\n  } //until\
    \ a reaches 1\n  return r; //return r", "\t// Base case: a == 0\n\tif (b == 0)\n\
    \t\treturn a;\n\t// Recursive case: b is 1 or greater\n\telse if (b > 0) {\n\t\
    \t// Recursive case: b is 2 or greater\n\t\tlong temp=greatest_common_divisor(b-a,b);\n\
    \t\t// Compute the gcd of a and b\n\t\treturn temp==b?a:temp;\n\t}\n\telse\n\t\
    \t// Base case: a is 1\n\t\treturn 1;", "\tif (b == 0) return a;\n\treturn greatest_common_divisor(b,\
    \ a % b);", "    long remainder;\n    do {\n        remainder = b%a;\n       \
    \ a = b;\n        b = remainder;\n    } while(a != 1);\n    return b;", "  long\
    \ x = 0;\n  while (a != 0) {\n    long r = a % b;\n    x = r > x ? r : x;\n  \
    \  a = b;\n    b = x;\n  }\n  return b;", "    long greatest_divisor = 1;\n  \
    \  while (b > 0) {\n        if (a % b == 0)\n            greatest_divisor = b;\n\
    \        b--;\n    }\n    return greatest_divisor;", "    if (a < b) swap(a, b);\n\
    \    if (b == 0) return a;\n    long long a = abs(a);\n    long long b = abs(b);\n\
    \    while (true) {\n        if (a >= b) break;\n        if (b == 0) return a;\n\
    \        long long c = a % b;\n        a = b;\n        b = c;\n    }\n    return\
    \ b;", "    if (b == 0) {\n        return a;\n    }\n    return greatest_common_divisor(b,\
    \ a % b);", "    while (b > 0) {\n        long temp = a % b;\n        a = b;\n\
    \        b = temp;\n    }\n    return a;", "    long gcd = 1;\n    while (a !=\
    \ 0) {\n        if (a > b)\n            a /= b;\n        else\n            b /=\
    \ a;\n        gcd = b > gcd? b : gcd;\n    }\n    return gcd;", "    long gcd;\n\
    \    while (a != 0) {\n        gcd = (a%b);\n        a = b;\n        b = gcd;\n\
    \    }\n    return b;", "    if(a == 0) return b;\n    if(a == 1) return b;\n\
    \    if(b == 0) return a;\n    if(b == 1) return a;\n    // Initialize m and n\
    \ and gcd\n    long m = 0, n = a, g = a;\n    while(g != 0) {\n        if(n %\
    \ g == 0) n = n/g;\n        else m = m*g + 1;\n        g = g/g;\n    }\n    //\
    \ Check for greatest common divisor\n    long res = n;\n    while(m != 0) {\n\
    \        if(m % n == 0) res = res*n + m;\n        m = m/n;\n    }\n    return\
    \ res;", "  if (b == 0)\n    return a;\n  return greatest_common_divisor(b, a\
    \ % b);", "  if (b == 0) return a;\n  if (a == 0) return b;\n  if (a < b) std::swap(a,\
    \ b);\n  if (a % b == 0) return b;\n  return greatest_common_divisor(b, a % b);",
  '    // code goes here', "    long gcd = 0;\n    while (a % b != 0)\n    {\n   \
    \     a = a % b;\n        gcd++;\n    }\n    return gcd;", "    while (b > 0)\
    \ {\n        if (a % b == 0) {\n            return b;\n        }\n        ++b;\n\
    \    }\n    return a;", '    // Write your code here', "  long long int r1, r2,\
    \ rm, r;\n\n  r1 = a%b;\n  r2 = b%r1;\n  rm = r1%r2;\n  if(rm==0) return r1;\n\
    \  else return r2;", "    if (b == 0)\n        return a;\n    return greatest_common_divisor(b,\
    \ a % b);", "    long a = abs(a), b = abs(b);\n    long max_num = a > b ? a :\
    \ b;\n    long min_num = b > a ? b : a;\n    long gcd = 1;\n    long gcd2 = 1;\n\
    \    long gcd3 = (max_num == min_num ? 1 : max_num);\n    long p = 1;\n    long\
    \ q = max_num;\n    while(1) {\n        if(q % 2 == 1)\n            q = (q / 2);\n\
    \        else\n            break;\n        gcd = gcd(gcd, q);\n        p <<= 1;\n\
    \    }\n    while(1) {\n        if(p % 2 == 1)\n            p = (p / 2);\n   \
    \     else\n            break;\n        gcd = gcd(gcd, p);\n        q >>= 1;\n\
    \    }\n    return gcd;", "  long c;\n  while(a && b) {\n    c = (a%b); a = b;\n\
    \    b = c;\n  }\n  return c;", "    while (b != 0) {\n        long long mod =\
    \ a % b;\n        a = b;\n        b = mod;\n    }\n    return a;", '    return
    (b == 0) ? a : greatest_common_divisor(b, a % b);', '    return b == 0 ? a : greatest_common_divisor(b,
    a % b);', "  if (a == 0 && b == 0) {\n    return 1;\n  }\n  long greatest = a;\n\
    \  while (a % b != 0) {\n    greatest = b;\n    b--;\n  }\n  while (b % a != 0)\
    \ {\n    a = b;\n    b--;\n  }\n  return greatest;", "    if (b == 0)\n      \
    \  return a;\n    if (a == 0)\n        return b;\n    long r = a % b;\n    if\
    \ (r != 0)\n        return greatest_common_divisor(b, r);\n    else\n        return\
    \ greatest_common_divisor(a, b - 1);", "    assert(b != 0);\n    while (b > 0)\
    \ {\n        if (a % b == 0) {\n            return b;\n        }\n        a /=\
    \ b;\n    }\n    return a;", "\tif (a == 0) return b;\n\tlong q = a / b;\n\ta\
    \ = a % b;\n\tb = b;\n\tif (a == 0) return b;\n\tif (b == 0) return q;\n\tlong\
    \ g = greatest_common_divisor(b, a % b);\n\treturn g * q;", "    if (a < b) return\
    \ greatest_common_divisor(b, a % b);\n    if (a == 0) return 0;\n    if (b ==\
    \ 0) return a;\n    long c;\n    while (1) {\n        c = (a * b) % b;\n     \
    \   if (c <= a) return c;\n        a = b;\n        b = c;\n    }", "    // Write\
    \ your code here\n    return 0L;", "    while (b) {\n        long temp = a % b;\n\
    \        a = b;\n        b = temp;\n    }\n    return a;", "    if (b == 0)\n\
    \        return a;\n    return greatest_common_divisor(b, a % b);", "    long\
    \ p = 1;\n    long q = a / b;\n    a = a % b;\n    while (a != 0) {\n        p\
    \ = p * q;\n        a = a % b;\n    }\n    return p;", "    long div = a / b;\n\
    \    long mod = a % b;\n    while (mod != 0) {\n        if (div > b) return b;\n\
    \        div = b;\n        mod = a % b;\n    }\n    return div;", "    while (a\
    \ > 0 && b > 0) {\n        if (a > b) {\n            a = a - b;\n        } else\
    \ if (b > a) {\n            b = b - a;\n        } else {\n            return b;\n\
    \        }\n    }\n    return 1;", "  assert(b);\n  assert(a);\n  long reminder,\
    \ reminder_prev;\n  long common_divisor = 1;\n  long lcm = (a * b);\n  long greatest_common_divisor\
    \ = 1;\n\n  while (true) {\n    reminder = lcm/common_divisor;\n    reminder_prev\
    \ = lcm%common_divisor;\n    if (reminder_prev != 0) {\n      common_divisor++;\n\
    \    } else {\n      greatest_common_divisor = common_divisor;\n      lcm = common_divisor\
    \ * reminder;\n      break;\n    }\n  }\n\n  return greatest_common_divisor;"]
stop_tokens:
- "\n}"
