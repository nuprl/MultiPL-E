language: cpp
name: HumanEval_120_maximum
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = arr.size(), max_num = arr[0], max_count\
    \ = 0;\n    std::vector<long> ans;\n    for(int i = 0; i < n; i++) {\n       \
    \ if(max_count < k) {\n            max_count = k;\n            max_num = arr[i];\n\
    \        }\n        if(max_count == k) {\n            ans.push_back(max_num);\n\
    \            max_count = 0;\n            max_num = arr[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqlug2wyn: /tmp/tmpqlug2wyn.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0 || k < 1 || k > arr.size())\
    \ return result;\n\n    // The first number in arr is always positive.\n    result.push_back(arr[0]);\n\
    \n    long max = arr[0];\n    for (auto i : arr) {\n        // If a new number\
    \ is bigger than max, replace it.\n        if (i > max) max = i;\n    }\n    //\
    \ After this loop, max has the maximum number among all elements.\n    // It can\
    \ be greater than k and it may be less than k as well\n    while (result.size()\
    \ < k) result.push_back(max);\n\n    // The max element will be in result.\n \
    \   // So remove all elements except top k.\n    std::nth_element(result.begin(),\
    \ result.begin() + k, result.end());\n    // Now the top k elements are in the\
    \ result.\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmcbncask: /tmp/tmpmcbncask.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Code here\n    \n    // write your code in C/C++ without using libraries\n\
    \    long long max_num = 0;\n    long long max = 0;\n    long long curr = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_num) {\n\
    \            max_num = arr[i];\n            max = arr[i];\n            curr =\
    \ 0;\n        }\n        else if (arr[i] == max_num) {\n            if (curr <\
    \ k) {\n                max = max_num;\n                curr = k;\n          \
    \  }\n            else if (curr > k) {\n                max_num = arr[i];\n  \
    \              max = arr[i];\n                curr = 0;\n            }\n     \
    \   }\n        else if (arr[i] < max_num) {\n            max_num = arr[i];\n \
    \           max = arr[i];\n            curr = 0;\n        }\n    }\n    \n   \
    \ // vector must be in the range of [1, 1000]\n    assert(max <= 1000);\n    \n\
    \    // k must be in the range of [1, arr_size]\n    assert(k <= arr.size());\n\
    \    \n    std::vector<long> res;\n    long long i = 1;\n    while (i < max_num)\
    \ {\n        if (i % k == 0) {\n            res.push_back(max);\n        }\n \
    \       max = max * 10 + 1;\n        i++;\n    }\n    \n    return res;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1px4ttj_: /tmp/tmp1px4ttj_.cpp:69: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    if (k < arr.size()) {\n     \
    \   return std::vector<long>(std::max_element(arr.begin(), arr.begin() + k));\n\
    \    } else {\n        return std::vector<long>(std::max_element(arr.rbegin(),\
    \ arr.rend()));\n    }\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv6_te0vo.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpv6_te0vo.cpp:21:80: error: no matching function\
    \ for call to \u2018std::vector<long int>::vector(__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >)\u2019\n   21 |         return std::vector<long>(std::max_element(arr.begin(),\
    \ arr.begin() + k));\n      |                                                \
    \                                ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv6_te0vo.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpv6_te0vo.cpp:21:80: note:   candidate expects 3 arguments,\
    \ 1 provided\n   21 |         return std::vector<long>(std::max_element(arr.begin(),\
    \ arr.begin() + k));\n      |                                                \
    \                                ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpv6_te0vo.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std:"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() < k) {\n        return arr;\n    }\n    long max_num =\
    \ arr[0];\n    for (long i = 1; i < k; ++i) {\n        if (arr[i] > max_num) {\n\
    \            max_num = arr[i];\n        }\n    }\n    std::vector<long> max_number(arr.size());\n\
    \    for (long i = 0; i < k; ++i) {\n        max_number[i] = max_num;\n    }\n\
    \    for (long i = k; i < arr.size(); ++i) {\n        max_number[i] = arr[i];\n\
    \    }\n    return max_number;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8crvb3jv: /tmp/tmp8crvb3jv.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long maximum = arr[0];\n    \n    for(int i=1;\
    \ i<arr.size(); i++) {\n        if(arr[i] > maximum) {\n            maximum =\
    \ arr[i];\n        }\n    }\n\n    return std::vector<long>({maximum});\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8fjtflal: /tmp/tmp8fjtflal.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long lower, upper, sum = 0;\n    \n  \
    \  // Sort the array (with O(n log n) time complexity).\n    std::sort(arr.begin(),\
    \ arr.end());\n\n    // Find the sum of all elements in arr less than the current\
    \ element (\n    // O(n) time complexity).\n    for(auto it = arr.begin(); it\
    \ < arr.end(); it++) {\n        sum = sum + *it;\n    }\n    \n    // Find the\
    \ lower and upper bounds for k, which must be in the range [0, n).\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] < sum) {\n            lower\
    \ = i;\n            break;\n        }\n        if(arr[i] > sum) {\n          \
    \  upper = i;\n            break;\n        }\n    }\n\n    // If k is larger than\
    \ the number of elements in arr then just return the\n    // array (O(1) time\
    \ complexity).\n    if(upper - lower > k) {\n        return arr;\n    }\n    \n\
    \    // Find the maximum k numbers in arr[lower, upper] (O(n) time complexity).\n\
    \    for(long i = lower; i <= upper; i++) {\n        result.push_back(arr[i]);\n\
    \        \n        sum = sum - arr[i];\n    }\n    \n    return result.end() >\
    \ arr.end() ? result.end() : arr;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpiiry0711.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpiiry0711.cpp:56:37: error: operands to ?: have\
    \ different types \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019} and \u2018std::vector<long int>\u2019\n\
    \   56 |     return result.end() > arr.end() ? result.end() : arr;\n      |  \
    \          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    // initialize an array to store the results\n\
    \    std::vector<long> result(k);\n    // iterate over the array and compare and\
    \ find max\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] >\
    \ result[k - 1]) {\n            result[k - 1] = arr[i];\n        }\n    }\n  \
    \  return std::move(result);\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpo2brgd26: /tmp/tmpo2brgd26.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long size = arr.size();\n    \n    std::vector<long> max_arr(size);\n\
    \    \n    // Find the max number among arr\n    long max_num = arr[0];\n    for\
    \ (long i = 0; i < size; ++i) {\n        if (arr[i] > max_num) {\n           \
    \ max_num = arr[i];\n        }\n    }\n    \n    if (k > size) {\n        std::cout\
    \ << \"ERROR: k should be less than \" << size << std::endl;\n    }\n    \n  \
    \  if (k > 0 && max_num > 0) {\n        // Find the max number of arr among arr\
    \ which has more than k elements\n        for (long i = 0; i < size; ++i) {\n\
    \            if (k > size - i) {\n                k = size - i;\n            }\n\
    \            \n            if (arr[i] > max_num) {\n                max_num =\
    \ arr[i];\n            }\n        }\n    }\n    \n    // Sort the maximum k numbers\
    \ in arr\n    for (long i = 0; i < k; ++i) {\n        max_arr[i] = max_num;\n\
    \        \n        // Find the max number among arr which has more than k elements\n\
    \        for (long j = i; j < size; ++j) {\n            if (max_arr[j] > arr[j])\
    \ {\n                max_arr[j] = arr[j];\n            }\n        }\n    }\n \
    \   \n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmphlj6lvx0: /tmp/tmphlj6lvx0.cpp:64: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n        std::vector<long> max_vec;\n        long sum = 0;\n        for(auto\
    \ it:arr){\n            sum += it;\n        }\n        for(long i = k; i >= 0;\
    \ i--){\n            max_vec.push_back((sum - arr[i]) /arr[i]);\n        }\n \
    \       return max_vec;\n    }\n</code>\n<|/ a dscore=3 |>\n<| a tags=algorithm,sorting\
    \ |>\n<code>\ndef maxElements(arr, k):\n    if len(arr) == 0:\n        return\n\
    \n    largest = max(arr[:k])\n    largestIndex = arr.index(largest)\n\n    while\
    \ k <= largestIndex:\n        arr[largestIndex], arr[k] = (arr[k], arr[largestIndex])\n\
    \        largestIndex = arr.index(largest)\n        k+=1\n    print arr\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 tags=algorithm,sorting |>\n<code>\ndef maximum(a,k):\n\
    \    largest = a[0]\n    max_index = -1\n    for i in range(k):\n        if a[i]\
    \ > largest:\n            max_index = i\n            largest = a[i]\n\n    a[max_index],\
    \ a[k] = (a[k], a[max_index])\n    return a\n\na = [1,3,5,7]\nprint maximum(a,5)\n\
    </code>\n<|/ a |>\n<| a dscore=2 |>\nThis algorithm is also O(n) time complexity\
    \ and has O(n) space complexity. It is basically sorting in descending order and\
    \ then picking the first k elements.\n<code>\ndef maximum(lst, k):\n    lst =\
    \ sorted(lst, reverse=True)\n    k = min(k, len(lst)-1)\n    return lst[:k]\n\
    </code>\n<|/ a tags=algorithm,sorting |>\n<| a dscore=2 |>\n<code>\ndef maxElements(arr,\
    \ k):\n    \"\"\"\n    :type arr: List[int]\n    :type k: int\n    :rtype: List[int]\n\
    \    \"\"\"\n    arr = sorted(arr, key=lambda x:-x)[:k]\n    return arr\n</code>\n\
    <|/ a tags=algorithm,sorting |>\n<| a dscore=2 |>\nMy C++ solution:\n<code>\n\
    #include<bits/stdc++.h>\nusing namespace std;\nvector<int> maximum(int arr[],\
    \ int k){\n    vector<int> arr2(arr,arr+10);\n    sort(arr2.begin(),arr2.end(),[](int\
    \ a, int b){return a-b;});\n    k=min(k,arr2.size());\n    arr2.erase(arr2.begin(),arr2.begin()+k);\n\
    \    return arr2;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphm_jdnzg.cpp:76:7: warning: missing terminating \" character\n\
    \   76 |     \"\"\"\n      |       ^\n/tmp/tmphm_jdnzg.cpp:76:7: error: missing\
    \ terminating \" character\n/tmp/tmphm_jdnzg.cpp:80:7: warning: missing terminating\
    \ \" character\n   80 |     \"\"\"\n      |       ^\n/tmp/tmphm_jdnzg.cpp:80:7:\
    \ error: missing terminating \" character\n/tmp/tmphm_jdnzg.cpp:29:1: error: expected\
    \ unqualified-id before \u2018<\u2019 token\n   29 | </code>\n      | ^\n/tmp/tmphm_jdnzg.cpp:90:1:\
    \ error: \u2018vector\u2019 does not name a type\n   90 | vector<int> maximum(int\
    \ arr[], int k){\n      | ^~~~~~\n"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    ans.reserve(k);\n    for (long i = 0; i <\
    \ arr.size(); i++) {\n        if (k <= 0) return ans;\n        long j = 0;\n \
    \       long curr = arr[i];\n        while (j < k) {\n            if (arr[j] >\
    \ curr) {\n                long val = arr[j];\n                arr[j] = curr;\n\
    \                curr = val;\n                j++;\n            } else {\n   \
    \             j++;\n            }\n        }\n        ans.push_back(curr);\n \
    \       k--;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmphvy7kymd: /tmp/tmphvy7kymd.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here\n    sort(arr.begin(), arr.end());\n    vector<long>\
    \ maxRes;\n    long maxVal = arr[0];\n    for(long i=0; i<arr.size(); i++){\n\
    \        if (arr[i]>maxVal){\n            maxVal = arr[i];\n        }\n    }\n\
    \    for (long i=0; i<arr.size(); i++){\n        if (arr[i]==maxVal){\n      \
    \      maxRes.push_back(maxVal);\n        }\n    }\n    return maxRes;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpef78qz1o.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpef78qz1o.cpp:21:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   21 |     vector<long> maxRes;\n      |  \
    \   ^~~~~~\n/tmp/tmpef78qz1o.cpp:21:5: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpef78qz1o.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpef78qz1o.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpef78qz1o.cpp:21:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   21 |     vector<long>\
    \ maxRes;\n      |            ^~~~\n/tmp/tmpef78qz1o.cpp:30:13: error: \u2018\
    maxRes\u2019 was not declared in this scope\n   30 |             maxRes.push_back(maxVal);\n\
    \      |             ^~~~~~\n/tmp/tmpef78qz1o.cpp:33:12: error: \u2018maxRes\u2019\
    \ was not declared in this scope\n   33 |     return maxRes;\n      |        \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> results;\n    results.reserve(arr.size());\n    for\
    \ (long i = 0; i < arr.size(); ++i) {\n        if (i == 0) {\n            results\
    \ = std::move(results);\n            results.push_back(arr[i]);\n        } else\
    \ if (arr[i] > results[0]) {\n            results = std::move(results);\n    \
    \        results.push_back(arr[i]);\n        } else if (arr[i] > results[1] &&\
    \ results.size() > 1) {\n            results = std::move(results);\n         \
    \   results.push_back(arr[i]);\n        } else if (arr[i] > results[2] && results.size()\
    \ > 2) {\n            results = std::move(results);\n            results.push_back(arr[i]);\n\
    \        } else if (arr[i] > results[3] && results.size() > 3) {\n           \
    \ results = std::move(results);\n            results.push_back(arr[i]);\n    \
    \    } else if (arr[i] > results[4] && results.size() > 4) {\n            results\
    \ = std::move(results);\n            results.push_back(arr[i]);\n        } else\
    \ if (arr[i] > results[5] && results.size() > 5) {\n            results = std::move(results);\n\
    \            results.push_back(arr[i]);\n        }\n    }\n\n    std::vector<long>\
    \ temp(results);\n    std::sort(temp.begin(), temp.end());\n    return temp;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprkihwpp_: /tmp/tmprkihwpp_.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // code here\n    return arr;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwtjkg_ro: /tmp/tmpwtjkg_ro.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    \n    return arr;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpfsbb1ssz: /tmp/tmpfsbb1ssz.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k > 0 && k < arr.size());\n    std::vector<long> result;\n   \
    \ long max = 0;\n    for (long i = 0; i < k; ++i) {\n        max = std::max(max,\
    \ arr[i]);\n        result.push_back(max);\n    }\n    for (long i = k; i < arr.size();\
    \ ++i) {\n        max = std::max(max, arr[i]);\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpfcun7czd: /tmp/tmpfcun7czd.cpp:19: std::vector<long int> maximum(std::vector<long
    int>, long int): Assertion `k > 0 && k < arr.size()'' failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Your code here\n  \n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpyw5v7cuc: /tmp/tmpyw5v7cuc.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::sort(arr.begin(), arr.end());\n    if\
    \ (arr.size() > k) {\n        arr.erase(std::max_element(arr.begin(), arr.end())\
    \ - arr.begin());\n    }\n    return arr;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_n6i78ej.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp_n6i78ej.cpp:22:73: error: no matching function\
    \ for call to \u2018std::vector<long int>::erase(__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::difference_type)\u2019\n   22 |         arr.erase(std::max_element(arr.begin(),\
    \ arr.end()) - arr.begin());\n      |                                        \
    \                                 ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_n6i78ej.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1427:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::difference_type\u2019 {aka \u2018long int\u2019} to \u2018std::vector<long\
    \ int>::const_iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<const long\
    \ int*, std::vector<long int> >\u2019}\n 1427 |       erase(const_iterator __position)\n\
    \      |             ~~~~~~~~~~~~~~~^~~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1454:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vec"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if(arr.size() == 0) {\n        return std::vector<long>();\n    }\n \
    \   \n    std::vector<long> answer;\n    long n = arr.size();\n    for(long i\
    \ = 0; i < n; i++) {\n        long max = arr[i];\n        for(long j = i; j <\
    \ n; j++) {\n            if(arr[j] > max) {\n                max = arr[j];\n \
    \           }\n        }\n        answer.push_back(max);\n    }\n    \n    std::vector<long>\
    \ result;\n    for(long i = 0; i < answer.size(); i++) {\n        if(answer.size()\
    \ > k) {\n            answer.pop_back();\n        }\n        result.push_back(answer[i]);\n\
    \    }\n    \n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqzv9wmbw: /tmp/tmpqzv9wmbw.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Write your code here\n  assert(arr.size() <= 1000);\n  assert(k <= arr.size());\n\
    \  std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n  long\
    \ curr = 0;\n  for (auto i : arr) {\n    pq.push(i);\n    curr++;\n    while (curr\
    \ > k) {\n      pq.push(pq.top());\n      curr--;\n    }\n  }\n  std::vector<long>\
    \ result;\n  while (!pq.empty()) {\n    result.push_back(pq.top());\n    curr--;\n\
    \    pq.pop();\n  }\n  return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppj9selwj: /tmp/tmppj9selwj.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k || k <= 0) {\n        return arr;\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(0);\n    std::sort(res.begin(), res.end(), [&arr](int\
    \ i, int j) { return arr[i] < arr[j]; });\n    while (k != 0) {\n        res.push_back(res.back()\
    \ + arr[res.size() - k]);\n        k--;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1jq0ko_8: /tmp/tmp1jq0ko_8.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0 || arr.empty())\n        return arr;\n\n    std::vector<long>\
    \ new_arr;\n    long cur_max = arr[0];\n\n    for (long i : arr) {\n        if\
    \ (cur_max < i)\n            cur_max = i;\n    }\n\n    for (long i : arr) {\n\
    \        if (i == cur_max)\n            new_arr.push_back(i);\n    }\n\n    for\
    \ (long i : arr) {\n        if (i >= cur_max) {\n            if (new_arr.size()\
    \ == k) {\n                new_arr.pop_back();\n            } else {\n       \
    \         new_arr.push_back(i);\n            }\n        }\n    }\n\n    return\
    \ new_arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvi3mmgwe: /tmp/tmpvi3mmgwe.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  if (k <= 0 || k > arr.size()) {\n    return {};\n  }\n  std::vector<long>\
    \ arr2(arr.size() - k);\n  auto it = std::max_element(arr.begin(), arr.end());\n\
    \  auto end = std::max_element(arr.begin(), arr.end(), [&arr2](long a, long b)\
    \ {\n    return arr2.back() < a + b;\n  });\n  for (long i = end - 1; i != it;\
    \ ++i) {\n    arr2.push_back(*i);\n  }\n  return arr2;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp7hbrbvab.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp7hbrbvab.cpp:27:21: error: cannot convert \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   27 |   for (long i = end - 1; i != it; ++i)\
    \ {\n      |                 ~~~~^~~\n      |                     |\n      | \
    \                    __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n/tmp/tmp7hbrbvab.cpp:27:28: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   27 |   for (long i = end - 1; i !=\
    \ it; ++i) {\n      |                          ~ ^~ ~~\n      |              \
    \            |    |\n      |                          |    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n      |                          long int\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7hbrbvab.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp7hbrbvab.cpp:27:31: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   27 |   for (long i = end - 1; i != it; ++i) {\n\
    \      |                               ^~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n "
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long maxnum = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (maxnum < arr[i]) {\n            maxnum = arr[i];\n        }\n   \
    \ }\n    std::vector<long> res;\n    std::vector<long>::iterator it;\n    for\
    \ (it = arr.begin(); it != arr.end(); it++) {\n        if (*it == maxnum) {\n\
    \            while (it != arr.begin() && (*it != maxnum || it+1 != arr.end() &&\
    \ *(it+1) > maxnum)) {\n                res.push_back(*it);\n                ++it;\n\
    \            }\n            res.push_back(*it);\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_i_rwzio: /tmp/tmp_i_rwzio.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(k <= arr.size());\n  long res = arr[0];\n  for (long i = 1; i <\
    \ k; i++)\n    if (arr[i] > res)\n      res = arr[i];\n  assert(k == static_cast<long>(arr.size()\
    \ - 1));\n  std::vector<long> resArr;\n  resArr.push_back(res);\n  for (long i\
    \ = 1; i < arr.size(); i++) {\n    if (arr[i] > res) {\n      resArr.push_back(res);\n\
    \      res = arr[i];\n    } else {\n      resArr.push_back(arr[i]);\n    }\n \
    \ }\n  return resArr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpw9qlc0jg: /tmp/tmpw9qlc0jg.cpp:24: std::vector<long int> maximum(std::vector<long
    int>, long int): Assertion `k == static_cast<long>(arr.size() - 1)'' failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long n = 0;\n    for(int i = 0;i < arr.size();\
    \ i++){\n        if(arr[i] > arr[n]){\n            n = i;\n        }\n    }\n\
    \    std::vector<long> result(k);\n    long max = 0;\n    for(int i = 0; i < k;\
    \ i++){\n        if(arr[i] > max){\n            max = arr[i];\n        }\n   \
    \ }\n    for(int i = 0; i < k; i++){\n        result[i] = max;\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzu82m9l9: /tmp/tmpzu82m9l9.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long long max_element = INT_MIN;\n    long long count = 0;\n    long\
    \ long max_elements = 0;\n    for (long long i = 0; i < arr.size(); i++) {\n \
    \       if (max_element < arr[i]) {\n            max_element = arr[i];\n     \
    \   }\n        count++;\n    }\n\n    long long temp = 0;\n    for (int i = 0;\
    \ i < k; i++) {\n        temp = max_element;\n        max_element = max_element\
    \ - count;\n        count--;\n        max_elements++;\n        max_element +=\
    \ temp;\n    }\n    std::vector<long> result;\n    result.push_back(-max_elements);\n\
    \    for (int i = 0; i < k; i++) {\n        result.push_back(-max_elements);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpdjf52_du: /tmp/tmpdjf52_du.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here.\n\t\n\t// Create a vector to hold k elements\n\
    \    std::vector<long> max_num(k);\n    \n    // Sort the vector\n    std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) -> bool {return b < a; });\n    \n    // Search\
    \ for the first k elements in the sorted vector\n    size_t position = 0;\n  \
    \  long cur_max = arr[0];\n    while(position < k) {\n        if(cur_max < arr[position])\
    \ {\n            cur_max = arr[position];\n        }\n        position++;\n  \
    \  }\n    \n    // Copy the elements from the sorted vector to the new vector\n\
    \    for(size_t i = 1; i < arr.size(); i++) {\n        if(cur_max < arr[i]) {\n\
    \            max_num[i - 1] = arr[i];\n        }\n    }\n    \n    // Return the\
    \ new vector\n    return max_num;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplscsxkh_: /tmp/tmplscsxkh_.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    long min = 0;\n    for (auto i : arr) {\n\
    \        if(i>k) break;\n        if(i<k) min++;\n    }\n    assert(min<=k);\n\
    \    std::vector<long> ans(k);\n    for (long i=0; i<k; i++) {\n        ans[i]\
    \ = arr[i+min];\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpw83z5v9i: /tmp/tmpw83z5v9i.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k <= 0 || arr.size() <= k) return arr;\n    std::vector<long> ans(k);\n\
    \    long max_val = arr[0];\n    long curr_max = arr[0];\n    for (long i : arr)\
    \ {\n        if (curr_max < i) curr_max = i;\n        if (curr_max > max_val)\
    \ max_val = curr_max;\n    }\n    for (long i = 0; i < k; ++i) {\n        ans[i]\
    \ = max_val;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8bj47ues: /tmp/tmp8bj47ues.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(k <= arr.size());\n  long largest_num = arr[0];\n  long largest_cnt\
    \ = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] > largest_num)\
    \ {\n      largest_num = arr[i];\n      largest_cnt = 1;\n    } else {\n     \
    \ largest_cnt += 1;\n    }\n  }\n  std::vector<long> result;\n  for (long i =\
    \ 1; i < k; i++) {\n    long cnt = 0;\n    long cur_num = arr[i];\n    while (cur_num\
    \ > largest_num && cnt < largest_cnt) {\n      cnt += 1;\n      cur_num -= (cur_num\
    \ / largest_num) * largest_num;\n    }\n    result.push_back(cur_num);\n  }\n\
    \  return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjt_e1_8l: /tmp/tmpjt_e1_8l.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n \
    \   result.reserve(k);\n    for (long i: arr) {\n        if (i < 0)\n        \
    \    result.push_back(-i);\n        else \n            result.push_back(i);\n\
    \    }\n    std::sort(result.begin(), result.end());\n    return std::copy(result.begin(),\
    \ result.end(), std::back_inserter(arr));\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj0052yec.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpj0052yec.cpp:29:21: error: could not convert\
    \ \u2018std::copy<__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >, std::back_insert_iterator<std::vector<long int> > >(result.std::vector<long\
    \ int>::begin(), result.std::vector<long int>::end(), std::back_inserter<std::vector<long\
    \ int> >(arr))\u2019 from \u2018std::back_insert_iterator<std::vector<long int>\
    \ >\u2019 to \u2018std::vector<long int>\u2019\n   29 |     return std::copy(result.begin(),\
    \ result.end(), std::back_inserter(arr));\n      |            ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                     |\n      |                     std::back_insert_iterator<std::vector<long\
    \ int> >\n"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> answer;\n    long temp = 0;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > temp) {\n            temp = arr[i];\n\
    \        }\n    }\n    long cur = 0;\n    long temp2 = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        long cur2 = 0;\n        if (arr[i] > temp) {\n\
    \            cur = arr[i];\n        }\n        if (cur > temp2) {\n          \
    \  temp2 = cur;\n        }\n    }\n    if (k == temp2) {\n        return arr;\n\
    \    }\n    if (k < temp2) {\n        for (long i = 0; i < arr.size(); i++) {\n\
    \            long cur2 = 0;\n            if (arr[i] > temp) {\n              \
    \  cur = arr[i];\n            }\n            if (cur < temp2) {\n            \
    \    temp2 = cur;\n            }\n        }\n    }\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == temp2) {\n            answer.push_back(temp2);\n\
    \        }\n    }\n    return answer;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpv4mresw6: /tmp/tmpv4mresw6.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here\n    sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ ans;\n    long max_val = arr[0];\n    for (long i = 0; i < k; i++) {\n     \
    \   if (arr[i] > max_val)\n            max_val = arr[i];\n    }\n    ans.push_back((max_val));\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp38t8_8x3: /tmp/tmp38t8_8x3.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code goes here\n    std::vector<long> v;\n    long a = 0, b =\
    \ 0;\n    long max = 0;\n    for (long i = 0; i < k; i++) {\n        v.push_back(arr[i]);\n\
    \    }\n    for (long i = 0; i < k; i++) {\n        for (long j = i + 1; j < k;\
    \ j++) {\n            if (v[j] > v[i]) {\n                a = v[i];\n        \
    \        b = v[j];\n                max = a;\n            }\n        }\n     \
    \   if (v[i] > max) {\n            max = v[i];\n        }\n    }\n    return v;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp4ykueyy_: /tmp/tmp4ykueyy_.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> vec;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (vec.size() >= k) {\n            break;\n \
    \       }\n        long cur = arr[i];\n        for (long j = 0; j < k; j++) {\n\
    \            if (cur > vec[j]) {\n                long temp = vec[j];\n      \
    \          vec[j] = cur;\n                cur = temp;\n            }\n       \
    \ }\n        vec.push_back(cur);\n    }\n    return vec;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= 1) {\n        return arr;\n    }\n\n    std::vector<long>\
    \ max_arr;\n    long max = 0;\n    long i = 1;\n    // max_arr.push_back(0);\n\
    \    max_arr.push_back(arr[0]);\n    for (; i < arr.size(); ++i) {\n        //\
    \ if (arr[i] >= max) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \        }\n        if (k == i) {\n            max_arr.push_back(max);\n     \
    \       k = i + 1;\n        }\n    }\n\n    return max_arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5wq58f9l: /tmp/tmp5wq58f9l.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long curr = *std::max_element(arr.begin(),\
    \ arr.end());\n    if (curr <= 0) return result;\n    while (curr > 0) {\n   \
    \     for (long i = 0; i < k; ++i) {\n            result.push_back(arr[i]);\n\
    \        }\n        curr--;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpg6huqq7y: /tmp/tmpg6huqq7y.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095954
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // code here\n    \n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9xqf05z8: /tmp/tmp9xqf05z8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    std::sort(arr.begin(), arr.end());\n  \
    \  auto new_size = arr.size() - k;\n    std::vector<long> ans;\n    for (long\
    \ i = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    ans.insert(ans.begin()\
    \ + new_size, arr[arr.size() - 1]);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpd_krc7v4: /tmp/tmpd_krc7v4.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max;\n    max.resize(arr.size());\n    long temp =\
    \ 0;\n    // The max value will be in the range of [-1000, 1000].\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        max = std::max_element(max.begin(), max.end(),\
    \ [&arr]() {return arr[i]; });\n        temp += arr[i];\n        if((temp <= k)\
    \ && (temp >= -1000)) {\n            arr[i] = temp;\n        }\n        else {\n\
    \            temp = arr[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3qzrzu7o.cpp: In lambda function:\n/tmp/tmp3qzrzu7o.cpp:24:77:\
    \ error: \u2018i\u2019 is not captured\n   24 |         max = std::max_element(max.begin(),\
    \ max.end(), [&arr]() {return arr[i]; });\n      |                           \
    \                                                  ^\n/tmp/tmp3qzrzu7o.cpp:24:61:\
    \ note: the lambda has no capture-default\n   24 |         max = std::max_element(max.begin(),\
    \ max.end(), [&arr]() {return arr[i]; });\n      |                           \
    \                                  ^\n/tmp/tmp3qzrzu7o.cpp:23:14: note: \u2018\
    long int i\u2019 declared here\n   23 |     for(long i = 0; i < arr.size(); i++)\
    \ {\n      |              ^\n/tmp/tmp3qzrzu7o.cpp: In function \u2018std::vector<long\
    \ int> maximum(std::vector<long int>, long int)\u2019:\n/tmp/tmp3qzrzu7o.cpp:24:82:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::vector<long\
    \ int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   24 |         max = std::max_element(max.begin(), max.end(),\
    \ [&arr]() {return arr[i]; });\n      |                                      \
    \                                            ^\nIn file included from /usr/include/c++/9/vector:72,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3qzrzu7o.cpp:2:\n/usr/include/c++/9/bits/vector.tcc:198:5:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>& std::vector<_Tp, _Alloc>::operator=(const\
    \ std::vector<_Tp, _Alloc>&) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n  198 |     vector<_Tp, _Alloc>::\n      |     ^~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/vector.tcc:199:42: note:   no known conversion for argument\
    \ 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018const std::vector<long int>&\u2019\n  199 |     operator=(const vector<_Tp,\
    \ _Alloc>& __x)\n      |               ~~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long len = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (len < k) {\n            if (arr[i] > arr[i + 1]) {\n                len = i\
    \ + 1;\n            }\n        }\n    }\n    std::vector<long> res;\n    for (long\
    \ i = 0; i < len; i++) {\n        res.push_back(arr[i]);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpl2xfiptp: /tmp/tmpl2xfiptp.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code goes here\n    if(arr.size()<=k)\n    {\n        return\
    \ arr;\n    }\n    long i,j,t,max;\n    max=arr[0];\n    for(j=1;j<arr.size();j++)\n\
    \    {\n        if(arr[j]>max)\n        {\n            max=arr[j];\n        }\n\
    \    }\n    for(i=1;i<k;i++)\n    {\n        t=max;\n        max=arr[0];\n   \
    \     for(j=1;j<arr.size();j++)\n        {\n            if(arr[j]>t)\n       \
    \     {\n                max=arr[j];\n            }\n        }\n        arr[i-1]=t;\n\
    \    }\n    return arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprsx8kxk8: /tmp/tmprsx8kxk8.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res(k);\n    long max_val = arr[0];\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n        }\n    }\n    long start_index = 0;\n    long end_index\
    \ = max_val - k + 1;\n    while (start_index < end_index) {\n        long middle_index\
    \ = start_index + end_index;\n        if (max_val < arr[middle_index]) {\n   \
    \         end_index = middle_index - 1;\n        } else {\n            start_index\
    \ = middle_index + 1;\n            end_index = start_index + k + 1;\n        }\n\
    \    }\n    long max_index = start_index;\n    for (long i = 0; i < res.size();\
    \ i++) {\n        if (arr[i] > arr[max_index]) {\n            max_index = i;\n\
    \        }\n    }\n    for (long i = 0; i < res.size(); i++) {\n        res[i]\
    \ = arr[max_index];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_nums;\n    max_nums.reserve(k);\n    for (auto\
    \ i = 0; i < arr.size(); i++) {\n        max_nums.push_back(std::max(arr[i], arr[i\
    \ + 1]));\n    }\n    return max_nums;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9va1avp7: /tmp/tmp9va1avp7.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() <= 1000);\n    assert(k <= arr.size());\n    std::vector<long>\
    \ ans;\n    long i = 1, max = 0;\n    while (i <= arr.size() && max < arr[i])\
    \ {\n        max = arr[i];\n        i++;\n    }\n    if (max < arr[i-1])\n   \
    \     ans.push_back(arr[i-1]);\n    while (i <= arr.size() && max < arr[i]) {\n\
    \        ans.push_back(max);\n        i++;\n        max = arr[i];\n    }\n   \
    \ while (i <= arr.size() && max < arr[i]) {\n        ans.push_back(arr[i]);\n\
    \        i++;\n        max = arr[i];\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpv15zmih3: /tmp/tmpv15zmih3.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095953
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long cnt = 0;\n    long max_num = arr[0];\n    for(int i = 0; i < k;\
    \ i++) {\n        if(max_num > arr[i]) {\n            max_num = arr[i];\n    \
    \    }\n    }\n    std::vector<long> result = {max_num};\n    for(int i = 1; i\
    \ < k; i++) {\n        if(arr[i] > arr[max_num]) {\n            result.push_back(arr[i]);\n\
    \        } else {\n            result.push_back({max_num});\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_u2uwx40: /tmp/tmp_u2uwx40.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095955
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    std::vector<long> res(std::min(k, n));\n   \
    \ for (int i = 0; i < n; ++i)\n        res[i] = std::max(arr[i], res[i - n <=\
    \ 0 ? 0 : i - n]);\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpakhj_qew.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpakhj_qew.cpp:20:40: error: no matching function\
    \ for call to \u2018min(long int&, int&)\u2019\n   20 |     std::vector<long>\
    \ res(std::min(k, n));\n      |                                        ^\nIn file\
    \ included from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpakhj_qew.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpakhj_qew.cpp:20:40: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018int\u2019)\n   20 |     std::vector<long> res(std::min(k, n));\n \
    \     |                                        ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpakhj_qew.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpakhj_qew.cpp:20:40:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   20 |     std::vector<long> res(std::min(k,\
    \ n));\n      |                                        ^\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpakhj_qew."
  stdout: ''
  timestamp: 1660095955
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    \n    int l = 0;\n    for (auto i = 0; i\
    \ < arr.size(); ++i) {\n        auto min = i;\n        for (int j = i + 1; j <\
    \ arr.size(); ++j) {\n            if (arr[j] < arr[min])\n                min\
    \ = j;\n        }\n        if (l < k) {\n            arr[min] = arr[i];\n    \
    \    } else {\n            std::swap(arr[i], arr[min]);\n        }\n        l++;\n\
    \    }\n    std::vector<long> ans;\n    for (auto i = 0; i < k; ++i)\n       \
    \ ans.push_back(arr[i]);\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmbw6s38c: /tmp/tmpmbw6s38c.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> maxs(arr.begin(), arr.begin()\
    \ + k);\n    maxs.push_back(k);\n    for(long i = 0 ;i < (k+1) && maxs.size()\
    \ < 1000; i++){\n        maxs.push_back(max(maxs.back(), maxs.front()));\n   \
    \ }\n    return maxs;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2wadq44.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpo2wadq44.cpp:23:24: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |    \
    \     maxs.push_back(max(maxs.back(), maxs.front()));\n      |               \
    \         ^~~\n      |                        std::max\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpo2wadq44.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095955
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  long max_size = arr.size();\n  if (max_size\
    \ <= k) {\n    return result;\n  }\n  std::vector<long> vec(max_size - k);\n \
    \ for (long i = 0; i <= max_size - k; i++) {\n    vec[i - k] = arr[i];\n  }\n\
    \  sort(vec.begin(), vec.end(), std::greater<>());\n  for (long i = 0; i <= max_size\
    \ - k; i++) {\n    if (vec[i] > arr[i + k]) {\n      result.push_back(arr[i +\
    \ k]);\n      for (int j = i - k; j <= i - 1; j++) {\n        arr[j] = arr[j +\
    \ k];\n      }\n      for (int j = i + k; j <= max_size; j++) {\n        arr[j]\
    \ = vec[j - k];\n      }\n      for (int j = 0; j < k; j++) {\n        arr[j +\
    \ k - 1] = arr[j];\n      }\n      for (int j = 0; j < k; j++) {\n        arr[j\
    \ - k - 1] = arr[j];\n      }\n    }\n  }\n  return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp72bam1yi: /tmp/tmp72bam1yi.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Write your code here\n  assert(arr.size() >= k);\n  std::vector<long>\
    \ maximum;\n  maximum.reserve(arr.size());\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (maximum.size() >= k) break;\n    if (arr[i] > arr[i+1]) maximum.push_back(arr[i]);\n\
    \  }\n  return maximum;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0w3mootx: /tmp/tmp0w3mootx.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    std::vector<long> ret;\n    long max = 0;\n\
    \    long index = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            index = i;\n      \
    \  }\n    }\n    for (long i = 0; i < k; i++) {\n        ret.push_back(arr[index]);\n\
    \        index++;\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0hl18gmn: /tmp/tmp0hl18gmn.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k) return arr;\n    long maxNum = arr[0];\n    for\
    \ (long i = 1; i < k; i++) {\n        if (arr[i] > maxNum) {\n            maxNum\
    \ = arr[i];\n        }\n    }\n    std::vector<long> res = std::vector<long>(k);\n\
    \    for (long i = 0; i < k; i++) {\n        res[i] = maxNum;\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpnhyrx_ua: /tmp/tmpnhyrx_ua.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\t// Your code here\n\tstd::vector<long> res;\n\tres.reserve(arr.size());\n\
    \tstd::partial_sort(arr.begin(), arr.begin() + k, std::back_inserter(res));\n\t\
    for (long i = 0; i < k; i++) {\n\t\tres.push_back(arr[i]);\n\t}\n\treturn res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp29owt_7n.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp29owt_7n.cpp:22:73: error: no matching function\
    \ for call to \u2018partial_sort(std::vector<long int>::iterator, __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >, std::back_insert_iterator<std::vector<long int>\
    \ >)\u2019\n   22 |  std::partial_sort(arr.begin(), arr.begin() + k, std::back_inserter(res));\n\
    \      |                                                                     \
    \    ^\nIn file included from /usr/include/c++/9/algorithm:62,\n             \
    \    from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n            \
    \     from /tmp/tmp29owt_7n.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4713:5:\
    \ note: candidate: \u2018template<class _RAIter> void std::partial_sort(_RAIter,\
    \ _RAIter, _RAIter)\u2019\n 4713 |     partial_sort(_RandomAccessIterator __first,\n\
    \      |     ^~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4713:5: note:  \
    \ template argument deduction/substitution failed:\n/tmp/tmp29owt_7n.cpp:22:73:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    std::back_insert_iterator<std::vector<long int> >\u2019)\n   22 |  std::partial_sort(arr.begin(),\
    \ arr.begin() + k, std::back_inserter(res));\n      |                        \
    \                                                 ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp29owt_7n.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:4751:5:\
    \ note: candidate: \u2018template<class _RAIter, class _Compare> void std::partial_sort(_RAIter,\
    \ _RAIter, _RAIter, _Compare)\u2019\n 4751 |     partial_sort(_RandomAccessIterator\
    \ __first,\n      |     ^~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:4751:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp29owt_7n.cpp:22:73:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, "
  stdout: ''
  timestamp: 1660095955
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    if(k > n) k = n;\n    std::vector<long> ans;\n\
    \    for(long i=0; i<k; i++) {\n        long max = arr[i];\n        for(long j=i;\
    \ j<n; j++) {\n            if(max < arr[j]) {\n                max = arr[j];\n\
    \            }\n        }\n        ans.push_back(max);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqyv8g4ob: /tmp/tmpqyv8g4ob.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long l=0, m=0;\n    for(long i=0; i<arr.size(); i++) {\n        if(l<arr.size()-1\
    \ && l<k) {\n            if(arr[l]>arr[i+1]) l++;\n            else break;\n \
    \       }\n        if(m<k) m=k;\n        for(long j=0; j<k; j++) {\n         \
    \   if(arr[j]<arr[i]) break;\n        }\n        if(j==k) arr.push_back((long)arr[i]);\n\
    \    }\n    return std::vector<long>(arr.begin(), arr.begin()+m+1);\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprpxnb5iv.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmprpxnb5iv.cpp:29:12: error: \u2018j\u2019 was\
    \ not declared in this scope\n   29 |         if(j==k) arr.push_back((long)arr[i]);\n\
    \      |            ^\n"
  stdout: ''
  timestamp: 1660095955
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    long max_so_far = arr[0], max_ending_here\
    \ = arr[0];\n    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_ending_here) {\n            max_ending_here = max_so_far;\n        }\n\
    \        max_so_far = max(arr[i], max_so_far);\n        if (max_so_far >= k) {\n\
    \            arr.clear();\n            break;\n        }\n    }\n    return arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp81khr6sl.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp81khr6sl.cpp:25:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   25 |    \
    \     max_so_far = max(arr[i], max_so_far);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp81khr6sl.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // your code goes here\n    long ans = arr[0];\n    long curMax = arr[0];\n\
    \    long index = 1;\n    while(index < arr.size()){\n        long n = arr[index];\n\
    \        if(n>curMax){\n            ans = n;\n            curMax = n;\n      \
    \  }\n        index++;\n    }\n    return std::vector<long>{ans, curMax};\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpqx4sgju7: /tmp/tmpqx4sgju7.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int n = arr.size();\n    if (n < k) return std::vector<long>();\n   \
    \ std::vector<long> ans;\n    std::vector<long> tmp;\n    long max_elem = arr[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (arr[i] > max_elem) {\n       \
    \     tmp.resize(tmp.size() + 1);\n            tmp[tmp.size() - 1] = max_elem;\n\
    \            ans.insert(ans.end(), tmp.begin(), tmp.end());\n            max_elem\
    \ = arr[i];\n        } else if (arr[i] == max_elem) {\n            tmp.resize(tmp.size()\
    \ + 1);\n            tmp[tmp.size() - 1] = arr[i];\n        } else {\n       \
    \     ans.insert(ans.end(), tmp.begin(), tmp.end());\n            tmp.resize(tmp.size()\
    \ + 1);\n            tmp[tmp.size() - 1] = arr[i];\n        }\n    }\n    ans.insert(ans.end(),\
    \ tmp.begin(), tmp.end());\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpdcb4wl_k: /tmp/tmpdcb4wl_k.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    vector<long> result;\n    long max = 0;\n    for (int i = 0; i < k; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    for (int i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            result.push_back(max);\n\
    \            max = arr[i];\n        } else {\n            if (i != k - 1) {\n\
    \                result.push_back(arr[i]);\n            }\n        }\n    }\n\
    \    for (int i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            result.push_back(max);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmptuvofwud.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmptuvofwud.cpp:19:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   19 |     vector<long> result;\n      |  \
    \   ^~~~~~\n/tmp/tmptuvofwud.cpp:19:5: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptuvofwud.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptuvofwud.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmptuvofwud.cpp:19:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   19 |     vector<long>\
    \ result;\n      |            ^~~~\n/tmp/tmptuvofwud.cpp:28:13: error: \u2018\
    result\u2019 was not declared in this scope\n   28 |             result.push_back(max);\n\
    \      |             ^~~~~~\n/tmp/tmptuvofwud.cpp:32:17: error: \u2018result\u2019\
    \ was not declared in this scope\n   32 |                 result.push_back(arr[i]);\n\
    \      |                 ^~~~~~\n/tmp/tmptuvofwud.cpp:38:13: error: \u2018result\u2019\
    \ was not declared in this scope\n   38 |             result.push_back(max);\n\
    \      |             ^~~~~~\n/tmp/tmptuvofwud.cpp:41:12: error: \u2018result\u2019\
    \ was not declared in this scope\n   41 |     return result;\n      |        \
    \    ^~~~~~\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long l = 0;\n    long m = INT_MAX;\n    for(long i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] >= 0) {\n            l = max(l, arr[i]);\n       \
    \ } else {\n            m = min(m, arr[i]);\n        }\n    }\n    std::vector<long>\
    \ result(k, m);\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i]\
    \ >= 0) {\n            result[k] = max(result[k], arr[i]);\n        } else {\n\
    \            result[k] = min(result[k], arr[i]);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm6mps_dj.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpm6mps_dj.cpp:23:17: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |    \
    \         l = max(l, arr[i]);\n      |                 ^~~\n      |          \
    \       std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n  \
    \               from /tmp/tmpm6mps_dj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpm6mps_dj.cpp:25:17: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   25 |             m = min(m, arr[i]);\n      |                 ^~~\n      |\
    \                 std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm6mps_dj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpm6mps_dj.cpp:31:25: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   31 |             result[k] = max(result[k], arr[i]);\n      |            \
    \             ^~~\n      |                         std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm6mps_dj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpm6mps_dj.cpp:33:25: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   33 |             result[k] = min(result[k], arr[i]);\n      |            \
    \             ^~~\n      |                         std::min\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n    "
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long long max = 0;\n    std::vector<long> max_arr;\n    long long size\
    \ = arr.size();\n    \n    if(k >= size)\n        return arr;\n    \n    for(long\
    \ long i = 0; i <= size-k; i++){\n        if(arr[i] > max)\n            max =\
    \ arr[i];\n    }\n    \n    for(long long i = 0; i < size-k; i++)\n        max_arr.push_back(arr[i]);\n\
    \    \n    return max_arr;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0ymff45g: /tmp/tmp0ymff45g.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> max_arr;\n    if (arr.size() <= k) {\n        max_arr\
    \ = arr;\n    }\n    else {\n        sort(arr.begin(), arr.end());\n        std::nth_element(arr.begin(),\
    \ arr.begin() + k - 1, arr.end());\n        max_arr.insert(max_arr.end(), arr.begin()\
    \ + k, arr.begin() + k + 1);\n    }\n    return max_arr;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpry7c4d3l: /tmp/tmpry7c4d3l.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long m = arr[0], n = 0;\n    for (auto x : arr) {\n        if (x>m) {\n\
    \            n = n;\n            m = x;\n        }\n    }\n    if (k > n) {\n\
    \        return arr;\n    }\n    std::vector<long> ans;\n    long start = 0, end\
    \ = n, mid = (end-start)/2;\n    while (start < end) {\n        while (start <\
    \ n && arr[mid] >= arr[start]) {\n            mid = mid+1;\n            start++;\n\
    \        }\n        while (n < end && arr[mid] <= arr[end]) {\n            end\
    \ = end-1;\n            n++;\n        }\n        ans.push_back(arr[mid]);\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpphm3nv_b: /tmp/tmpphm3nv_b.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    sort(arr.begin(), arr.end());\n    long result = 0;\n    for (long i\
    \ = 0; i < k; i++) {\n        if (arr[i] > result) {\n            result = arr[i];\n\
    \        }\n    }\n    std::vector<long> max;\n    max.push_back(result);\n  \
    \  while (!max.empty()) {\n        long maxElement = max.back();\n        max.pop_back();\n\
    \        if (maxElement > 0) {\n            long index = find(arr.begin(), arr.end(),\
    \ maxElement);\n            arr.erase(arr.begin() + index);\n        }\n    }\n\
    \    return arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpdwlnz627.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpdwlnz627.cpp:32:30: error: cannot convert \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   32 |             long index = find(arr.begin(),\
    \ arr.end(), maxElement);\n      |                          ~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                              |\n      |                             \
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    std::vector<long> ans;\n    long curMax\
    \ = arr[0];\n    for (long i = 1; i < k; i++) {\n        if (arr[i] > curMax)\
    \ {\n            ans.clear();\n            ans.push_back(curMax);\n          \
    \  curMax = arr[i];\n        } else {\n            ans.push_back(arr[i]);\n  \
    \      }\n    }\n    ans.clear();\n    ans.push_back(curMax);\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp75si_kxj: /tmp/tmp75si_kxj.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k) {\n        return arr;\n    }\n    std::vector<long>\
    \ res(arr.size());\n    for (long i = 0; i < arr.size(); i++) {\n        long\
    \ cur = arr[i];\n        long next = 0;\n        for (long j = 0; j < i; j++)\
    \ {\n            if (arr[j] < cur) {\n                cur = arr[j];\n        \
    \        next = j;\n            }\n        }\n        if (next == i) {\n     \
    \       next = 0;\n        }\n        res[i] = cur;\n    }\n    res.erase(std::unique(std::begin(res),\
    \ std::end(res)), std::end(res));\n    return res;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpz_scioxf: /tmp/tmpz_scioxf.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (k == 0 || arr.size() <= k) {\n\t\treturn arr;\n\t} else if (k > arr.size())\
    \ {\n\t\treturn arr;\n\t} else {\n\t\tstd::vector<long> ret(arr.size());\n\t\t\
    ret[0] = arr[0];\n\t\tlong max_val = arr[0];\n\t\tint index = 1;\n\t\tfor (long\
    \ i : arr) {\n\t\t\tif (i > (max_val * k)) {\n\t\t\t\tret[index] = i;\n\t\t\t\t\
    max_val = i;\n\t\t\t\tindex++;\n\t\t\t}\n\t\t}\n\t\tret[index] = arr[index];\n\
    \t\tfor (size_t i = k; i < arr.size(); i++) {\n\t\t\tret[i] = arr[i];\n\t\t}\n\
    \t\treturn ret;\n\t}\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp70_0rtdv: /tmp/tmp70_0rtdv.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long maxCount = 0;\n    for (size_t i\
    \ = 0; i < arr.size(); i++) {\n        if (maxCount < arr[i]) {\n            result.push_back(arr[i]);\n\
    \            maxCount = arr[i];\n        } else {\n            maxCount = max(maxCount,\
    \ arr[i]);\n        }\n    }\n    long ans = max(result.size(), k);\n    while\
    \ (ans - result.size() > 0) {\n        result.push_back(-1);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3_f6i5v8.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp3_f6i5v8.cpp:26:24: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   26 |    \
    \         maxCount = max(maxCount, arr[i]);\n      |                        ^~~\n\
    \      |                        std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3_f6i5v8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp3_f6i5v8.cpp:29:16: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   29 |     long ans = max(result.size(), k);\n      |                ^~~\n \
    \     |                std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3_f6i5v8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long n = arr.size();\n    long max_value = INT_MIN;\n    std::vector<long>\
    \ arr1;\n    for (long i = 0; i < n; i++) {\n        if (arr[i] > max_value) {\n\
    \            arr1 = arr;\n            max_value = arr[i];\n        }\n       \
    \ else {\n            max_value = max(max_value, arr[i]);\n        }\n    }\n\
    \    arr1.resize(max_value - k);\n    return arr1;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yqnev0g.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp3yqnev0g.cpp:28:25: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   28 |    \
    \         max_value = max(max_value, arr[i]);\n      |                       \
    \  ^~~\n      |                         std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3yqnev0g.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    std::vector<long> maxNumbers;\n    maxNumbers.reserve(k);\n\
    \    for(long i = 1; i < k; ++i){\n        if(arr[i] > arr[i - 1])\n         \
    \   maxNumbers.push_back(arr[i]);\n    }\n    return maxNumbers;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1i59h0mx: /tmp/tmp1i59h0mx.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    assert(k <= arr.size() && \"Invalid input\"\
    );\n    for (long i = 0; i < arr.size(); i++)\n        if (result.size() == k)\n\
    \            break;\n        if (arr[i] > result[k - 1])\n        {\n        \
    \    result[k] = arr[i];\n            k++;\n        }\n    return result;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpz344vinp.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpz344vinp.cpp:24:17: error: \u2018i\u2019 was\
    \ not declared in this scope\n   24 |         if (arr[i] > result[k - 1])\n  \
    \    |                 ^\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> arrSorted;\n  for (long i = 0; i < arr.size(); i++) {\n\
    \    arrSorted.push_back(std::max(arr[i], arrSorted[arrSorted.size() - 1]));\n\
    \  }\n  return arrSorted;\n}\nint main() {\n    auto candidate = maximum;\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // code here\n    int n = arr.size();\n    std::vector<long> max_arr(n\
    \ / k, 0);\n    long max_val = 0;\n    for (int i = 0; i < n / k; i++) {\n   \
    \     max_val = arr[i];\n        for (int j = i + 1; j < n / k; j++) {\n     \
    \       if (max_val < arr[j]) {\n                max_val = arr[j];\n         \
    \   }\n        }\n        max_arr[i] = max_val;\n    }\n    return max_arr;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpdv62bvdi: /tmp/tmpdv62bvdi.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here.\n    long N = arr.size();\n    long max_sum\
    \ = arr[0];\n    long max_pos = 0;\n    for(int i = 1; i < N; i++)\n    {\n  \
    \      long curr_sum = arr[i];\n        if(curr_sum > max_sum)\n        {\n  \
    \          max_pos = i;\n            max_sum = curr_sum;\n        }\n    }\n \
    \   std::vector<long> ans;\n    for(int i = 0; i < k; i++)\n    {\n        ans.push_back(arr[max_pos\
    \ + i]);\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmphkxhhxpn: /tmp/tmphkxhhxpn.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    \n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5z358jls: /tmp/tmp5z358jls.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Your code here\n  assert(arr.size() <= 1000L);\n  assert(k <= arr.size());\n\
    \  std::set<long> mset(arr.begin(), arr.begin() + k);\n  std::vector<long> max;\n\
    \  max.reserve(arr.size() - k + 1);\n  for (size_t i = 0; i < arr.size(); ++i)\
    \ {\n    if (mset.find(arr[i]) != mset.end()) {\n      max.push_back(arr[i]);\n\
    \      mset.erase(arr[i]);\n    }\n  }\n  if (mset.size() != 0) {\n    std::set<long>::iterator\
    \ it = mset.begin();\n    std::set<long>::iterator end1 = mset.end();\n    while\
    \ (++it != end1) {\n      max.push_back(*it);\n    }\n  }\n  return max;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9_nuxogy: /tmp/tmp9_nuxogy.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res(k + 1);\n    for (int i = 0; i < k; i++) {\n  \
    \      res[i] = arr[i];\n    }\n    for (int i = k; i < res.size(); i++) {\n \
    \       res[i] = max(res[i - 1], arr[i]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyjm6jepc.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpyjm6jepc.cpp:24:18: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   24 |    \
    \     res[i] = max(res[i - 1], arr[i]);\n      |                  ^~~\n      |\
    \                  std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyjm6jepc.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095955
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    \n    long maxNums = arr[0];\n    long minNums\
    \ = arr[0];\n    \n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > maxNums) {\n            maxNums = arr[i];\n        } else if (arr[i] < minNums)\
    \ {\n            minNums = arr[i];\n        }\n    }\n    \n    std::vector<long>\
    \ ans;\n    long count = 0;\n    \n    while (minNums < maxNums) {\n        ans.push_back(minNums);\n\
    \        minNums += 1;\n    }\n    \n    std::vector<long> temp = ans;\n    ans.clear();\n\
    \    \n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > maxNums)\
    \ {\n            ans.push_back(arr[i]);\n        } else if (arr[i] < minNums)\
    \ {\n            ans.push_back(arr[i]);\n        }\n    }\n    \n    ans.insert(ans.begin(),\
    \ temp.begin(), temp.end());\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpcxt607mt: /tmp/tmpcxt607mt.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k < 1 || k > arr.size()) return {};\n    std::vector<long> ans;\n\
    \    long maxValue = arr[0];\n    long currentValue = maxValue;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (currentValue < arr[i]) {\n      \
    \      currentValue = arr[i];\n            maxValue = i;\n        }\n    }\n \
    \   while (maxValue > 0) {\n        ans.push_back(arr[maxValue]);\n        maxValue--;\n\
    \    }\n    std::reverse(ans.begin(), ans.end());\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp60_2iro3: /tmp/tmp60_2iro3.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    std::vector<long> result;\n    long long\
    \ max = arr[0];\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n    }\n    if (arr.size() >\
    \ k) {\n        long long count = 0;\n        for (long i = 0; i < arr.size();\
    \ i++) {\n            if (arr[i] == max) {\n                count++;\n       \
    \     }\n        }\n        if (count > k) {\n            result.push_back(max);\n\
    \            count -= k;\n            for (long i = 0; i < count; i++) {\n   \
    \             result.push_back(max);\n            }\n        }\n    } else {\n\
    \        result.push_back(max);\n    }\n    return result;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpg_z3_5v1: /tmp/tmpg_z3_5v1.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    \n    std::sort(arr.begin(), arr.end());\n   \
    \ std::vector<long> vec;\n    long len = arr.size();\n    \n    for(int i = len-1;\
    \ i>=0; i--){\n        if(k == 0){\n            break;\n        }\n        else\
    \ if(k <= len){\n            break;\n        }\n        if(vec[i] < arr[i]){\n\
    \            vec.erase(vec.begin()+i);\n            len--;\n        }\n      \
    \  else{\n            k--;\n        }\n    }\n    \n    return vec;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppb5en14u: /tmp/tmppb5en14u.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> arr1(arr.begin(), arr.end());\n    std::vector<long>\
    \ maxarr(k);\n    sort(arr1.begin(), arr1.end());\n    long i = 0;\n    while\
    \ (arr1[i] > 0 && i < k) {\n        maxarr[i] = arr1[i];\n        i++;\n    }\n\
    \    sort(maxarr.begin(), maxarr.end());\n    return maxarr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppoz84rh2: /tmp/tmppoz84rh2.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(arr.size() >= k);\n  std::nth_element(arr.begin(), arr.begin() +\
    \ k, arr.end());\n  return std::vector<long>(arr.begin(), arr.begin() + k);\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpq3x6kcrr: /tmp/tmpq3x6kcrr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    if (arr.size() < k){\n        k = arr.size();\n\
    \    }\n    long mid = arr.size()/2;\n    long left = arr.front();\n    long right\
    \ = arr[mid];\n    std::vector<long> max;\n    max.push_back(left);\n    max.push_back(right);\n\
    \    for(int i=2;i<=mid;++i){\n        if(arr[i]>right)\n            right = arr[i];\n\
    \        if(arr[i]>max)\n            max = std::vector<long>({arr[i]});\n    }\n\
    \    if (k==0){\n        return max;\n    }\n    if (arr.size() % 2 != 0){\n \
    \       std::vector<long> temp;\n        temp.push_back(arr[mid]);\n        temp.push_back(right);\n\
    \        return maximum(temp, k-1);\n    }else{\n        return maximum(temp,\
    \ k-1);\n    }\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1n8htjv.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpg1n8htjv.cpp:32:18: error: no match for \u2018\
    operator>\u2019 (operand types are \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} and \u2018std::vector<long\
    \ int>\u2019)\n   32 |         if(arr[i]>max)\nIn file included from /usr/include/c++/9/regex:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpg1n8htjv.cpp:2:\n/usr/include/c++/9/bits/regex.h:1081:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator>(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1081 |     operator>(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/regex.h:1081:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpg1n8htjv.cpp:32:19:\
    \ note:   mismatched types \u2018const std::__cxx11::sub_match<_BiIter>\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   32 |         if(arr[i]>max)\n      |        \
    \           ^~~\nIn file included from /usr/include/c++/9/regex:62,\n        \
    \         from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n      \
    \           from /tmp/tmpg1n8htjv.cpp:2:\n/usr/include/c++/9/bits/regex.h:1136:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator>(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1136 |     operator>(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /usr/include/c++/9/bits/regex.h:1136:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpg1n8htjv.cpp:32:19: note:   mismatched types \u2018std::__cxx11::__sub_match_string<_Bi_iter,\
    \ _Ch_traits, _Ch_alloc>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka"
  stdout: ''
  timestamp: 1660095956
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans = INT_MIN;\n    auto it = std::max_element(arr.begin(),\
    \ arr.end());\n    for (long i = it; i != arr.end(); i++) {\n        if (i - it\
    \ <= k) {\n            ans = std::max(ans, *i);\n            it = i;\n       \
    \ }\n    }\n    return std::vector<long>({ans});\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzji088ok.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpzji088ok.cpp:22:19: error: cannot convert \u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   22 |     for (long i = it; i != arr.end();\
    \ i++) {\n      |                   ^~\n      |                   |\n      | \
    \                  __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\n/tmp/tmpzji088ok.cpp:22:25: error: no match for \u2018operator!=\u2019 (operand\
    \ types are \u2018long int\u2019 and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   22 |     for (long i = it; i != arr.end(); i++) {\n      |            \
    \           ~ ^~ ~~~~~~~~~\n      |                       |           |\n    \
    \  |                       long int    std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpzji088ok.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpzji088ok.cpp:22:36: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   22 |     for (long i = it; i != arr.end(); i++)\
    \ {\n      |                                    ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if(arr.size() < 1 || k <= 0 || k > arr.size()){\n        throw std::invalid_argument(\"\
    Invalid Input: k is not between 0 and len(arr)\");\n    }\n    if(arr.size() >\
    \ k){\n        throw std::invalid_argument(\"Invalid Input: k is greater than\
    \ the size of arr\");\n    }\n    // Create a vector to store the k maximum values\n\
    \    std::vector<long> max_elements(k, -1);\n    for(long i = 0; i < arr.size();\
    \ ++i){\n        // Calculate the new max value if current value is greater than\
    \ any previous value\n        long new_max = std::max<long>(arr[i], max_elements[i]);\n\
    \        // Assign the new max value to the corresponding position of max_elements\n\
    \        max_elements[i] = new_max;\n    }\n    return max_elements;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpfmgblb32: /tmp/tmpfmgblb32.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  if (arr.size() < k) {\n    return {};\n  }\n  std::vector<long> res;\n\
    \  long max_value = arr[0];\n  for (long i = 1; i < arr.size(); i++) {\n    if\
    \ (arr[i] > max_value) {\n      max_value = arr[i];\n    }\n  }\n  std::sort(arr.begin(),\
    \ arr.end(), [&](long n1, long n2) {\n    return n1 > n2;\n  });\n  long count\
    \ = 1;\n  for (long i = 0; i < arr.size(); i++) {\n    if (max_value == arr[i])\
    \ {\n      count++;\n    }\n  }\n  res.reserve(count);\n  for (long i = 0; i <\
    \ arr.size(); i++) {\n    if (max_value == arr[i]) {\n      res.push_back(i);\n\
    \    }\n  }\n  return res;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpb29l6ioo: /tmp/tmpb29l6ioo.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tassert(arr.size() >= k);\n\tstd::vector<long> temp(k);\n\ttemp[0] = arr[0];\n\
    \tfor (int i = 1; i < k; i++) {\n\t\ttemp[i] = max(temp[i - 1], arr[i]);\n\t}\n\
    \treturn temp;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0tlarl6w.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0tlarl6w.cpp:23:13: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |   temp[i]\
    \ = max(temp[i - 1], arr[i]);\n      |             ^~~\n      |             std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0tlarl6w.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095956
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here.\n    std::vector<long> ans;\n    if (arr.size()\
    \ < k) {\n        ans.push_back(arr[0]);\n        return ans;\n    }\n    \n \
    \   std::vector<long> temp = arr;\n    std::sort(temp.begin(), temp.end(), [&](long\
    \ a, long b){return a>b;});\n    ans.reserve(k);\n    for (int i = k - 1; i >=\
    \ 0; i--) {\n        ans.push_back(temp[i]);\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    // Your code here\n    \n    assert(arr.size() != 0);\n    assert(k\
    \ <= arr.size());\n    \n    std::map<long, int> mmap;\n    \n    for (auto i\
    \ : arr) {\n        mmap[i] += 1;\n        if (mmap.size() > k) {\n          \
    \  mmap.erase(std::max_element(std::begin(mmap), std::end(mmap)));\n        }\n\
    \    }\n    \n    std::vector<long> result;\n    \n    for (auto i : mmap) {\n\
    \        result.push_back(i.first);\n    }\n    \n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxcsd0ixc: /tmp/tmpxcsd0ixc.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> vec(k);\n    long n = arr.size();\n    long i = 0;\n\
    \    for (int j = 0; j < k; ++j) {\n        vec[j] = arr[i++];\n    }\n    //\
    \ std::cout << vec << std::endl;\n    sort(vec.begin(), vec.end());\n    return\
    \ vec;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwskmczo5: /tmp/tmpwskmczo5.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1av3om84: /tmp/tmp1av3om84.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095958
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(arr.size() >= k);\n  std::vector<long> res;\n  res.reserve(arr.size());\n\
    \  if (arr.size() > k) {\n    return res;\n  }\n  auto max_element = [](const\
    \ std::vector<long>& lhs, const std::vector<long>& rhs) {\n    return lhs.size()\
    \ > rhs.size() ? lhs : rhs;\n  };\n  auto max_elements = [](const std::vector<long>&\
    \ lhs, const std::vector<long>& rhs) {\n    return std::max(lhs, rhs);\n  };\n\
    \  // Step 1:\n  // Find the max element of arr and put it in res.\n  // Complexity:\
    \ O(min(k, arr.size())) ~ O(k).\n  auto max_element = max_elements(arr, arr);\n\
    \  res.push_back(max_element);\n  // Step 2: \n  // Find the max elements of the\
    \ remaining arr.\n  // Complexity: O(min(k, arr.size() - 1)) ~ O(min(k, arr.size()\
    \ - 1 - k)).\n  for (size_t i = arr.size() - 1; i >= k; --i) {\n    auto max_element\
    \ = max_element(res, res);\n    res.erase(res.begin());\n    res.push_back(max_element);\n\
    \  }\n  // Step 3:\n  // Find the max elements of the remaining arr.\n  // Complexity:\
    \ O(min(k, arr.size() - 1 - k)) ~ O(k).\n  auto max_element = max_element(res,\
    \ res);\n  res.erase(res.begin());\n  res.push_back(max_element);\n  return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpeco02vvh.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpeco02vvh.cpp:34:8: error: conflicting declaration\
    \ \u2018auto max_element\u2019\n   34 |   auto max_element = max_elements(arr,\
    \ arr);\n      |        ^~~~~~~~~~~\n/tmp/tmpeco02vvh.cpp:25:8: note: previous\
    \ declaration as \u2018maximum(std::vector<long int>, long int)::<lambda(const\
    \ std::vector<long int>&, const std::vector<long int>&)> max_element\u2019\n \
    \  25 |   auto max_element = [](const std::vector<long>& lhs, const std::vector<long>&\
    \ rhs) {\n      |        ^~~~~~~~~~~\n/tmp/tmpeco02vvh.cpp:35:28: error: no matching\
    \ function for call to \u2018push_back(maximum(std::vector<long int>, long int)::<lambda(const\
    \ std::vector<long int>&, const std::vector<long int>&)>&)\u2019\n   35 |   res.push_back(max_element);\n\
    \      |                            ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpeco02vvh.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019 <near match>\n 1184 |       push_back(const value_type& __x)\n\
    \      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note: \
    \  conversion of argument 1 would be ill-formed:\n/tmp/tmpeco02vvh.cpp:35:17:\
    \ error: invalid user-defined conversion from \u2018maximum(std::vector<long int>,\
    \ long int)::<lambda(const std::vector<long int>&, const std::vector<long int>&)>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019} [-fpermissive]\n\
    \   35 |   res.push_back(max_element);\n      |                 ^~~~~~~~~~~\n\
    /tmp/tmpeco02vvh.cpp:25:22: note: candidate is: \u2018constexpr maximum(std::vector<long\
    \ int>, long "
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> res;\n  long max_element = 0;\n  for (long i = 0; i <\
    \ k; i++) {\n    if (max_element < arr[i]) {\n      max_element = arr[i];\n  \
    \  }\n  }\n  if (max_element > 0) {\n    res.push_back(max_element);\n  }\n  for\
    \ (long i = k; i < arr.size(); i++) {\n    if (max_element < arr[i]) {\n     \
    \ max_element = arr[i];\n    }\n    res.push_back(max_element);\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmper508507: /tmp/tmper508507.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    std::vector<long> ans;\n    long max_val = arr[0];\n    for (auto\
    \ i: arr)\n    {\n        if (i > max_val)\n        {\n            max_val = i;\n\
    \        }\n    }\n    ans.push_back(max_val);\n    for (auto i: arr)\n    {\n\
    \        if (i <= max_val)\n        {\n            ans.push_back(i);\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpc01mwq07: /tmp/tmpc01mwq07.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    sort(arr.begin(), arr.end());\n    long max =\
    \ 0;\n    std::vector<long> arr2(k);\n    for (int i = 0; i < k; i++) {\n    \
    \    arr2[i] = arr[i];\n    }\n    sort(arr2.begin(), arr2.end());\n    int i\
    \ = 0;\n    int j = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            i = j;\n        }\n       \
    \ else {\n            j++;\n        }\n    }\n    for (int i = i; i < (k - 1);\
    \ i++) {\n        arr2[i - 1] = arr2[i];\n    }\n    for (int i = 0; i < k; i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\
    \    arr2.resize(j);\n    return arr2;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpq8oittmz: /tmp/tmpq8oittmz.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> ans;\n    long maxn = arr[0],\
    \ pos = 0;\n    for (auto n : arr){\n        if(maxn < n)\n            maxn =\
    \ n;\n        if(pos < k){\n            ans.push_back(n);\n        }\n       \
    \ if(maxn == arr[k-1]){\n            ans.push_back(n);\n        }\n        pos++;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmperny6u38: /tmp/tmperny6u38.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long ans = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        ans += arr[i];\n        if (ans == k) {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpmortelle: /tmp/tmpmortelle.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ret(k);\n    long max_val = 0;\n    for (auto &val\
    \ : arr) {\n        max_val = max(max_val, val);\n    }\n    if (max_val < 0)\n\
    \        max_val = max(max_val, arr[0]);\n    for (auto &val : arr) {\n      \
    \  if (val > max_val) {\n            std::swap(val, max_val);\n            ret.push_back(max_val);\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw9hfy4hj.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpw9hfy4hj.cpp:22:19: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     max_val = max(max_val, val);\n      |                   ^~~\n      |   \
    \                std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw9hfy4hj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpw9hfy4hj.cpp:25:19: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   25 |         max_val = max(max_val, arr[0]);\n      |                   ^~~\n\
    \      |                   std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw9hfy4hj.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(arr.size() <= 1000);\n  assert(k <= arr.size());\n  std::sort(arr.begin(),\
    \ arr.end());\n  std::vector<long> ans;\n  long currMax = 0;\n  for (long i =\
    \ 0; i < k; i++) {\n    currMax = std::max(currMax, arr[i]);\n    ans.push_back(currMax);\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpe6_fs3xf: /tmp/tmpe6_fs3xf.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::vector<long> max_nums;\n    max_nums.reserve(k);\n\
    \    for(long i=0; i<k; i++){\n        max_nums.push_back(arr[i]);\n    }\n  \
    \  sort(max_nums.begin(), max_nums.end());\n    if(max_nums.size()>k){\n     \
    \   while(max_nums.size()<k){\n            max_nums.push_back(-max_nums.back());\n\
    \        }\n    }\n    res = max_nums;\n    return res;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpejtezrau: /tmp/tmpejtezrau.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> results;\n    results.reserve(k);\n    long current\
    \ = 0;\n    for (long i : arr) {\n        if (current == k) {\n            break;\n\
    \        }\n        results.push_back(i);\n        current += 1;\n    }\n    results.push_back(0);\n\
    \    return results;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5u7le8vz: /tmp/tmp5u7le8vz.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    // Number of comparisons\n    long long count\
    \ = 0; \n    long long maxCount = 0; \n    std::vector<long>::iterator it;\n \
    \   long maxValue = std::numeric_limits<long>::min();\n    long minValue = std::numeric_limits<long>::max();\n\
    \    for (it = arr.begin(); it != arr.end(); ++it) {\n        // Count the comparisons\n\
    \        count += (*it < maxValue) - (*it > minValue);\n        // Update max\
    \ and min values if necessary\n        if (*it > maxValue) {\n            maxValue\
    \ = *it;\n        }\n        if (*it < minValue) {\n            minValue = *it;\n\
    \        }\n        // Check if we have found the right number of max elements\n\
    \        if ((count % k) == 0) {\n            maxCount++;\n        }\n    }\n\
    \    // If count is not a multiple of k, \n    // update the max and min values\n\
    \    while (maxCount % k) {\n        maxCount--;\n    }\n    maxCount++;\n   \
    \ // Update max and min values\n    it = arr.begin();\n    while (maxCount !=\
    \ 0) {\n        count -= maxCount;\n        maxCount--;\n        arr.insert(arr.begin(),\
    \ maxValue);\n        it++;\n    }\n    res.insert(res.end(), arr.begin(), arr.end());\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6gwv_7y5: /tmp/tmp6gwv_7y5.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    if (arr.size() == 0 || arr.size() < 1 ||\
    \ k > arr.size()) {\n        return {};\n    }\n\n    std::vector<long> ans;\n\
    \    auto lower = arr[0];\n    auto upper = arr[0];\n    for (size_t i = 1; i\
    \ < arr.size(); i++) {\n        if (arr[i] < lower) {\n            lower = arr[i];\n\
    \        }\n        if (arr[i] > upper) {\n            upper = arr[i];\n     \
    \   }\n    }\n\n    // If any element in the arr doesn't meet the condition\n\
    \    if (lower < 0 || upper > 0 && k <= upper - lower) {\n        return {};\n\
    \    }\n\n    // If there are more elements to be added to the result than k elements\n\
    \    // then just return what we have already\n    if (arr.size() > k || arr.size()\
    \ < k) {\n        return ans;\n    }\n\n    // Now sort arr using quick sort and\
    \ get max k elements\n    for (size_t i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] > upper) {\n            // If arr[i] doesn't meet the condition, then\
    \ remove it from arr\n            ans.push_back(arr[i]);\n            arr.pop_back();\n\
    \        }\n    }\n    ans.insert(ans.end(), arr.begin(), arr.end());\n\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp44br126w: /tmp/tmp44br126w.cpp:61: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long min = arr[0];\n    long max;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \        else if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n\
    \    std::vector<long> ans;\n    if (k == arr.size()) {\n        ans.push_back(min);\n\
    \        ans.push_back(max);\n        return ans;\n    }\n    if (k == 0) {\n\
    \        ans.push_back(min);\n        return ans;\n    }\n    long mid = (min\
    \ + max) / 2;\n    std::vector<long> lefts;\n    std::vector<long> rights;\n \
    \   lefts.push_back(min);\n    rights.push_back(max);\n    std::vector<long> results;\n\
    \    while (k > 0) {\n        if (rights.size() >= k) {\n            if (lefts.size()\
    \ <= k) {\n                std::vector<long> res;\n                res.push_back(mid);\n\
    \                k--;\n                res.insert(res.end(), rights.begin(), rights.end());\n\
    \                results.insert(results.end(), res.begin(), res.end());\n    \
    \        } else {\n                std::vector<long> res;\n                res.push_back(mid);\n\
    \                k--;\n                res.insert(res.end(), lefts.begin(), lefts.end());\n\
    \                results.insert(results.end(), res.begin(), res.end());\n    \
    \        }\n        } else if (lefts.size() >= k) {\n            std::vector<long>\
    \ res;\n            res.push_back(mid);\n            k--;\n            res.insert(res.end(),\
    \ lefts.begin(), lefts.end());\n            results.insert(results.end(), res.begin(),\
    \ res.end());\n        } else {\n            std::vector<long> res;\n        \
    \    res.push_back(mid);\n            k--;\n            res.insert(res.end(),\
    \ rights.begin(), rights.end());\n            results.insert(results.end(), res.begin(),\
    \ res.end());\n        }\n        if (lefts.size() == k) {\n            lefts.erase(lefts.begin());\n\
    \        } else if (rights.size() == k) {\n            rights.erase(rights.begin());\n\
    \        }\n        if (rights.size() == 0) {\n            mid = (min + max) /\
    \ 2;\n        }\n        if (lefts.size() == 0) {\n            mid = (min + max)\
    \ / 2;\n        }\n    }\n    return results;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8vice5kr: /tmp/tmp8vice5kr.cpp:89: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k) {\n        return arr;\n    }\n    std::vector<long>\
    \ max_arr(k);\n    for (long i = 0; i < arr.size(); i++) {\n        long max_element\
    \ = arr[i];\n        for (int j = 0; j < i; j++) {\n            if (arr[j] > max_element)\
    \ {\n                max_element = arr[j];\n            }\n        }\n       \
    \ max_arr[i] = max_element;\n    }\n    return max_arr;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmphuyic6s5: /tmp/tmphuyic6s5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long long sum = 0, curr = 0, pos = 0;\n    vector<long> res;\n    if\
    \ (arr.empty()) return res;\n    for (pos = 0; pos < arr.size() - 1; pos++) {\n\
    \        if (pos >= k && arr[k] > arr[pos]) k = pos;\n    }\n    for (pos = 0;\
    \ pos < arr.size() - 1; pos++) {\n        sum += arr[pos];\n    }\n    for (pos\
    \ = 0; pos < arr.size() - 1; pos++) {\n        if (sum > arr[k]) {\n         \
    \   curr += arr[k] - sum;\n            sum -= arr[k];\n            if (pos < k)\
    \ curr = curr > arr[k] ? curr : arr[k];\n        }\n        arr[k] = arr[pos];\n\
    \        arr[k + 1] = curr;\n        res.push_back(arr[k + 1]);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1dxnk156.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp1dxnk156.cpp:20:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   20 |     vector<long> res;\n      |     ^~~~~~\n\
    /tmp/tmp1dxnk156.cpp:20:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1dxnk156.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1dxnk156.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmp1dxnk156.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ res;\n      |            ^~~~\n/tmp/tmp1dxnk156.cpp:21:29: error: \u2018res\u2019\
    \ was not declared in this scope\n   21 |     if (arr.empty()) return res;\n \
    \     |                             ^~~\n/tmp/tmp1dxnk156.cpp:36:9: error: \u2018\
    res\u2019 was not declared in this scope\n   36 |         res.push_back(arr[k\
    \ + 1]);\n      |         ^~~\n/tmp/tmp1dxnk156.cpp:38:12: error: \u2018res\u2019\
    \ was not declared in this scope\n   38 |     return res;\n      |           \
    \ ^~~\n"
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    if (arr.size() == 0 || arr.size() >= k)\
    \ {\n        return arr;\n    }\n    std::sort(arr.begin(), arr.end(), std::greater<long>());\n\
    \    return arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp_j99bbgm: /tmp/tmp_j99bbgm.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() <= 1000);\n    assert(k <= arr.size());\n    std::vector<long>\
    \ res;\n    int i = 0;\n    while (i < arr.size() && k > 0) {\n        int j =\
    \ i;\n        while (j + 1 < arr.size() && arr[j] < arr[j + 1]) {\n          \
    \  ++j;\n        }\n        if (k > 0) {\n            while (j - 1 >= 0 && arr[j]\
    \ > arr[j - 1]) {\n                --k;\n            }\n        }\n        res.insert(res.end(),\
    \ std::max(std::max(arr[i], arr[j]), arr[i]), arr[j]);\n        i++;\n       \
    \ j++;\n        if (k > 0 && j + 1 < arr.size()) {\n            k = std::min(k,\
    \ arr.size() - j);\n        }\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnp4xyxwx.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpnp4xyxwx.cpp:37:43: error: no matching function\
    \ for call to \u2018min(long int&, std::vector<long int>::size_type)\u2019\n \
    \  37 |             k = std::min(k, arr.size() - j);\n      |                \
    \                           ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnp4xyxwx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpnp4xyxwx.cpp:37:43: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    })\n   37 |             k = std::min(k, arr.size() - j);\n      |            \
    \                               ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpnp4xyxwx.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpnp4xyxwx.cpp:37:43:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019})\n   37 |             k = std::min(k, arr.size() - j);\n\
    \      |                                           ^\nIn file i"
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int max_index = -1;\n    long max_value = arr[0];\n\n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] > arr[max_index]) {\n        \
    \    max_index = i;\n            max_value = arr[i];\n        }\n    }\n\n   \
    \ if (max_index - k >= 0) {\n        std::vector<long> ans;\n        for (int\
    \ i = k; i < max_index; i++) {\n            ans.push_back(arr[i]);\n        }\n\
    \        ans.push_back(max_value);\n        return ans;\n    } else {\n      \
    \  return arr;\n    }\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9pxc73zt: /tmp/tmp9pxc73zt.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tif (arr.size() < k)\n\t\treturn arr;\n\tstd::vector<long> temp;\n\tfor\
    \ (long i = 0; i < k; i++)\n\t\ttemp.push_back(arr[i]);\n\tlong m = temp.size();\n\
    \tfor (long i = k; i < arr.size(); i++)\n\t\ttemp[i] = arr[i] - arr[i - k];\n\t\
    long n = k;\n\tlong tempsum = 0;\n\twhile (tempsum < m / 2 && tempsum < m / 4)\
    \ {\n\t\ttempsum += n;\n\t\tn++;\n\t}\n\ttempsum -= m / 2;\n\tfor (long i = tempsum;\
    \ i < m / 2; i++)\n\t\ttemp[i] = arr[i] - arr[i - tempsum];\n\tstd::vector<long>\
    \ ans;\n\tlong tempsum2 = 0;\n\twhile (n--) {\n\t\tfor (long i = 0; i < (m - n);\
    \ i++)\n\t\t\tans.push_back(temp[i]);\n\t\ttempsum2 += n;\n\t}\n\tfor (long i\
    \ = tempsum2; i < m; i++)\n\t\tans.push_back(temp[i]);\n\treturn ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    long res = 0;\n    for (long i : arr){\n\
    \        res= max(res, i);\n    }\n    std::vector<long> result;\n    for(long\
    \ i= 0;i<k;i++){\n        if(res==0) break;\n        result.push_back(res);\n\
    \        res--;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3yvfanvf.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp3yvfanvf.cpp:22:14: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \     res= max(res, i);\n      |              ^~~\n      |              std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp3yvfanvf.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    // Your code goes here\n    \n    std::vector<long> temp(arr.begin(),\
    \ arr.end());\n    \n    auto it1 = std::max_element(temp.begin(), temp.begin()+k);\n\
    \    std::vector<long> res(it1-temp.begin());\n    \n    return res;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp0lsy_fn9: /tmp/tmp0lsy_fn9.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    if(arr.size() < k) {\n        std::cout <<\
    \ \"ERROR: the number of elements is less than k\" << std::endl;\n    }\n    std::vector<long>\
    \ arr2(arr.begin(), arr.begin() + k);\n    std::partial_sort(arr2.begin(), arr2.begin()\
    \ + k, arr2.end(), std::greater<long>());\n    return arr2;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpng7z085j: /tmp/tmpng7z085j.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> temp;\n    std::sort(arr.begin(), arr.end());\n   \
    \ long ans = arr[0];\n    long cnt = 0;\n    for (long i : arr) {\n        if\
    \ (cnt > k) {\n            break;\n        }\n        if (cnt == k) {\n      \
    \      temp.push_back(i);\n        }\n        cnt += 1;\n        ans = max(ans,\
    \ i);\n    }\n    return temp;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpg8xnf1cl.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpg8xnf1cl.cpp:31:15: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   31 |    \
    \     ans = max(ans, i);\n      |               ^~~\n      |               std::max\n\
    In file included from /usr/include/c++/9/algorithm:62,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpg8xnf1cl.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5: note: \u2018\
    std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp> __l, _Compare\
    \ __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095958
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() == 0) {\n        return arr;\n    }\n    if (k > arr.size())\
    \ {\n        return arr;\n    }\n\n    std::vector<long> arr1 = maximum(arr, k\
    \ - 1);\n    std::vector<long> arr2 = arr;\n    std::pop_heap(arr1.begin(), arr1.end());\n\
    \    arr1.push_back(arr2[0]);\n    return arr1;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp19e0e26r: /tmp/tmp19e0e26r.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(k <= arr.size());\n  long max_val = arr[0], max_idx = 0, max_pos\
    \ = 0;\n  for (size_t i = 1; i < arr.size(); ++i) {\n    if (arr[i] > max_val)\
    \ {\n      max_val = arr[i];\n      max_pos = i;\n    }\n  }\n  \n  std::vector<long>\
    \ ans;\n  long count = 0;\n  while (count < k) {\n    ans.push_back(arr[max_pos]);\n\
    \    max_val -= arr[max_pos];\n    count += 1;\n    max_pos = (max_pos == arr.size())\
    \ ? 0 : max_pos + 1;\n  }\n  return ans;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpky14v9b1: /tmp/tmpky14v9b1.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    std::vector<long> temp;\n    int m = arr.size();\n\
    \    for(int i = 0; i < m; i++)\n    {\n        if(arr[i] > arr[arr.size() - 1\
    \ - i])\n        {\n            temp.push_back(arr[arr.size() - 1 - i]);\n   \
    \         arr[i] = arr[arr.size() - 1 - i];\n            arr[arr.size() - 1 -\
    \ i] = arr[i];\n        }\n    }\n    if(arr.size() > k)\n    {\n        temp\
    \ = maximum(temp, k);\n    }\n    return temp;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpv8icsyd7: /tmp/tmpv8icsyd7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    if (k == 0 || k > arr.size()) return {};\n    // Write your code\
    \ here.\n    long temp = 0;\n    \n    for (size_t i = 0; i < arr.size(); i++)\n\
    \    {\n        temp = max(temp, arr[i]);\n        \n        if (temp == arr[i])\n\
    \        {\n            arr[i] = temp;\n        }\n    }\n    return arr;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0rde4l9a.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0rde4l9a.cpp:26:16: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   26 |    \
    \     temp = max(temp, arr[i]);\n      |                ^~~\n      |         \
    \       std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n  \
    \               from /tmp/tmp0rde4l9a.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095959
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    \n    long lower = INT_MIN;\n    long higher =\
    \ INT_MAX;\n    for (auto i : arr) {\n        lower = std::min(i->first, lower);\n\
    \        higher = std::max(i->second, higher);\n    }\n    \n    std::vector<long>\
    \ res;\n    long mid = (lower + higher) / 2;\n    \n    if (k <= arr.size()) mid\
    \ = k; // k <= arr.size()\n    \n    for (long i = mid; i > 0; i--) {\n      \
    \  \n    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphbqb_iqe.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphbqb_iqe.cpp:24:27: error: base operand of \u2018\
    ->\u2019 is not a pointer\n   24 |         lower = std::min(i->first, lower);\n\
    \      |                           ^~\n/tmp/tmphbqb_iqe.cpp:25:28: error: base\
    \ operand of \u2018->\u2019 is not a pointer\n   25 |         higher = std::max(i->second,\
    \ higher);\n      |                            ^~\n"
  stdout: ''
  timestamp: 1660095958
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\tstd::vector<long> max_kth_nums;\n\tmax_kth_nums.reserve(k);\n\tstd::max_element(arr.begin(),\
    \ arr.end(), max_kth_nums.begin(), max_kth_nums.end());\n\treturn max_kth_nums;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6axuxaxw.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp6axuxaxw.cpp:21:83: error: no matching function\
    \ for call to \u2018max_element(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, std::vector<long int>::iterator, std::vector<long int>::iterator)\u2019\
    \n   21 |  std::max_element(arr.begin(), arr.end(), max_kth_nums.begin(), max_kth_nums.end());\n\
    \      |                                                                     \
    \              ^\nIn file included from /usr/include/c++/9/algorithm:62,\n   \
    \              from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n  \
    \               from /tmp/tmp6axuxaxw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5713:5:\
    \ note: candidate: \u2018template<class _FIter> constexpr _FIter std::max_element(_FIter,\
    \ _FIter)\u2019\n 5713 |     max_element(_ForwardIterator __first, _ForwardIterator\
    \ __last)\n      |     ^~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5713:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6axuxaxw.cpp:21:83:\
    \ note:   candidate expects 2 arguments, 4 provided\n   21 |  std::max_element(arr.begin(),\
    \ arr.end(), max_kth_nums.begin(), max_kth_nums.end());\n      |             \
    \                                                                      ^\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp6axuxaxw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:5738:5:\
    \ note: candidate: \u2018template<class _FIter, class _Compare> constexpr _FIter\
    \ std::max_element(_FIter, _FIter, _Compare)\u2019\n 5738 |     max_element(_ForwardIterator\
    \ __first, _ForwardIterator __last,\n      |     ^~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5738:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp6axuxaxw.cpp:21:83:\
    \ note:   candidate expects 3 arguments, 4 provided\n   21 |  std::max_element(arr.begin(),\
    \ arr.end(), max_kth_nums.begin(), max_kth_nums.end());\n      |             \
    \                               "
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    // Your code here\n    // Your code here\n   \
    \ // Your code here\n    // Your code here\n    \n    // Your code here\n    //\
    \ Your code here\n    // Your code here\n    \n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    \n    // Your code\
    \ here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    \n    // Your code here\n    // Your code here\n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    \n    // Your code here\n    // Your code\
    \ here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    \n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    \n    // Your code here\n    // Your code here\n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    \n    // Your code here\n    // Your code here\n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    \n    // Your code here\n    // Your code here\n    // Your code here\n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    \n    // Your code here\n    // Your code here\n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    \n    // Your code here\n    // Your code here\n \
    \   // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    // Your code here\n    // Your code here\n    // Your code here\n\
    \    // Your code here\n    // Your code here\n    // Your code here\n    // Your\
    \ code here\n    \n    // Your code here\n    // Your code here\n    // Your code\
    \ here\n    // Your code here\n    // Your code \n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpfc0ybcib: /tmp/tmpfc0ybcib.cpp:132: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long long ans = arr[0];\n    for(long long i = 1; i < arr.size(); i++)\
    \ {\n        if(arr[i] > ans) {\n            ans = arr[i];\n        }\n    }\n\
    \    std::vector<long> v;\n    while(k != 0) {\n        v.push_back(ans);\n  \
    \      k--;\n    }\n    v.push_back(ans);\n    return v;\n}\nint main() {\n  \
    \  auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpu79erjtv: /tmp/tmpu79erjtv.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    sort(arr.begin(), arr.end()); \n    return std::vector<long>(arr.begin()+k,\
    \ arr.end()+k);\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpii0510uj: /tmp/tmpii0510uj.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    long i = arr.size(), j = 0;\n    while (i\
    \ >= k) {\n        while (j > 0) {\n            long m = arr[j];\n           \
    \ while (j > 0 && m < arr[j-1]) {\n                arr[j] = arr[j-1];\n      \
    \          j--;\n            }\n            res.push_back(m);\n            j--;\n\
    \        }\n        i--;\n    }\n    if (j > 0) {\n        while (j > 0) {\n \
    \           long m = arr[j];\n            while (j > 0 && m > arr[j-1]) {\n  \
    \              arr[j] = arr[j-1];\n                j--;\n            }\n     \
    \       res.push_back(m);\n            j--;\n        }\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpepyxj7fn: /tmp/tmpepyxj7fn.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Your code goes here\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzw2vur6m: /tmp/tmpzw2vur6m.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> result; \n    for (auto\
    \ i:arr){\n        if (result.size() < k){\n            result.push_back(i);\n\
    \        }\n    }\n    sort(result.begin(), result.end());\n    return result;\
    \ \n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6yiudfmc: /tmp/tmp6yiudfmc.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> output;\n    long index = 0;\n    for (; k < arr.size();\
    \ k++) {\n        if (arr[index] > arr[index + 1]) {\n            index = k;\n\
    \        }\n        output.push_back(arr[index]);\n    }\n    return output;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvs3j_6vw: /tmp/tmpvs3j_6vw.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long max_num = 0, max_index = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (max_num < arr[i]) {\n            max_num = arr[i];\n   \
    \         max_index = i;\n        }\n    }\n    std::vector<long> res;\n    while\
    \ (k <= max_index) {\n        res.push_back(arr[max_index]);\n        max_index--;\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp8s3qziyf: /tmp/tmp8s3qziyf.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\t// Your code here\n}\nint main() {\n    auto candidate = maximum;\n   \
    \ assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3)) ==\
    \ (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplh40druv: /tmp/tmplh40druv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    std::vector<long> arr2(arr.size());\n    long i, j, max = 0;\n\
    \    \n    for(i = 0; i < arr.size(); i++) {\n        arr2[i] = arr[i];\n    }\n\
    \    \n    for(i = arr.size() - k + 1; i < arr.size(); i++) {\n        max = 0;\n\
    \        for(j = 0; j < k; j++) {\n            if(arr2[i + j] > max) {\n     \
    \           max = arr2[i + j];\n            }\n        }\n        arr2[i] = max;\n\
    \    }\n    \n    return arr2;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp23fabl4b: /tmp/tmp23fabl4b.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    // Your code here\n    return arr;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpi97nvylx: /tmp/tmpi97nvylx.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    \n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5z358jls: /tmp/tmp5z358jls.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095957
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Your code goes here\n  long maxValue = arr[0];\n  long maxIndex = -1;\n\
    \  for (size_t i = 1; i < arr.size(); ++i) {\n    if (arr[i] > maxValue) {\n \
    \     maxValue = arr[i];\n      maxIndex = i;\n    }\n  }\n  std::vector<long>\
    \ arrResult;\n  for (size_t i = 0; i < k; ++i) {\n    if (maxIndex == i) {\n \
    \     arrResult.push_back(maxValue);\n    } else {\n      arrResult.push_back(arr[maxIndex]);\n\
    \    }\n  }\n  return arrResult;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwl7b04zk: /tmp/tmpwl7b04zk.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    // The size of the output vector.\n    long n = arr.size();\n \
    \   // If the size of the output vector is smaller than k.\n    if (n < k) {\n\
    \        // Create a vector of size k to store the maximum numbers.\n        std::vector<long>\
    \ maximums(k);\n        // For each index i in range [0, k - 1] and arr[i] > arr[i\
    \ + 1].\n        for (long i = 0; i < k; i++) {\n            if (arr[i] > arr[i\
    \ + 1])\n                std::swap(arr[i], arr[i + 1]);\n        }\n        //\
    \ Store the max numbers in output vector.\n        for (long i = 0; i < k; i++)\n\
    \            maximums[i] = arr[i];\n        // Return the output vector.\n   \
    \     return maximums;\n    }\n    // If the size of the output vector is greater\
    \ than k.\n    else {\n        // Create a vector of size k to store the maximum\
    \ numbers.\n        std::vector<long> maximums(k);\n        // For each index\
    \ i in range [0, k - 1] and arr[i] > arr[i + 1].\n        for (long i = 0; i <\
    \ k; i++) {\n            if (arr[i] > arr[i + 1])\n                std::swap(arr[i],\
    \ arr[i + 1]);\n        }\n        // Store the max numbers in output vector.\n\
    \        for (long i = 0; i < k; i++)\n            maximums[i] = arr[i];\n   \
    \     // Return the output vector.\n        return maximums;\n    }\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp6qfmlhzq: /tmp/tmp6qfmlhzq.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095959
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    long max = 0;\n    std::vector<long> result;\n\
    \    for(size_t i = 0; i < arr.size(); i++) {\n        if(max < arr[i]) {\n  \
    \          max = arr[i];\n        }\n    }\n\n    if(max > 0)\n        result.push_back(max);\n\
    \n    for(size_t i = 0; i < arr.size(); i++) {\n        if(max == arr[i]) {\n\
    \            if(i < k - 1) {\n                result.push_back(arr[i]);\n    \
    \        }\n        }\n    }\n\n    return result;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpg_qfeg_u: /tmp/tmpg_qfeg_u.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095960
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::partial_sort_copy(arr.begin(), arr.end(),\
    \ res.begin(), \n        [](long x, long y) -> bool { return x >= y; });\n   \
    \ res.resize(std::min(k, arr.size()));\n    return res;\n}\nint main() {\n   \
    \ auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpj00atc_m.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpj00atc_m.cpp:21:54: error: no matching function\
    \ for call to \u2018partial_sort_copy(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, std::vector<long int>::iterator, maximum(std::vector<long int>,\
    \ long int)::<lambda(long int, long int)>)\u2019\n   21 |         [](long x, long\
    \ y) -> bool { return x >= y; });\n      |                                   \
    \                   ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj00atc_m.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1742:5:\
    \ note: candidate: \u2018template<class _IIter, class _RAIter> _RAIter std::partial_sort_copy(_IIter,\
    \ _IIter, _RAIter, _RAIter)\u2019\n 1742 |     partial_sort_copy(_InputIterator\
    \ __first, _InputIterator __last,\n      |     ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1742:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpj00atc_m.cpp:21:54:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    maximum(std::vector<long int>, long int)::<lambda(long int, long int)>\u2019)\n\
    \   21 |         [](long x, long y) -> bool { return x >= y; });\n      |    \
    \                                                  ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj00atc_m.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1792:5:\
    \ note: candidate: \u2018template<class _IIter, class _RAIter, class _Compare>\
    \ _RAIter std::partial_sort_copy(_IIter, _IIter, _RAIter, _RAIter, _Compare)\u2019\
    \n 1792 |     partial_sort_copy(_InputIterator __first, _InputIterator __last,\n\
    \      |     ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1792:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpj00atc_m.cpp:21:54:\
    \ note:   deduced conflict"
  stdout: ''
  timestamp: 1660095959
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> v;\n    int n = arr.size();\n\
    \    int m = 0;\n    int i = 1;\n    while(i < n){\n        if(arr[i] > v[m]){\n\
    \            v[m] = arr[i];\n            m++;\n        }\n        i++;\n    }\n\
    \    int end = k-1;\n    for(int j=k-1; j < n; j++){\n        if(v[j] > v[end]){\n\
    \            v[end] = v[j];\n            end--;\n        }\n    }\n    for(int\
    \ j = 0; j < n; j++){\n        v[j] =v[n - 1];\n    }\n    for(long i = 0; i <\
    \ n; i++){\n        arr[i] = v[i];\n    }\n    return arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    // your code here\n\tassert(arr.size() == k && \"Array length should\
    \ match k\");\n\tstd::vector<long> res(k);\n\tfor(int i=0;i<k;i++){\n\t\tif(i>0\
    \ && arr[i-1]>arr[i]){\n\t\t\tres[i] = arr[i-1];\n\t\t\tcontinue;\n\t\t}\n\t\t\
    if(i==0){\n\t\t\tres[i] = arr[i];\n\t\t\tcontinue;\n\t\t}\n\t\tif(arr[i-1]>arr[i]){\n\
    \t\t\tres[i] = arr[i];\n\t\t}else{\n\t\t\tres[i] = arr[i-1];\n\t\t}\n\t}\n\treturn\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvd6894w4: /tmp/tmpvd6894w4.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  // Write your code here\n  assert(arr.size() >= k);\n  std::partial_sort_copy(arr.begin(),\
    \ arr.end(), arr.begin() + k - 1, arr.end());\n  return arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpazziq0ge: /tmp/tmpazziq0ge.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095961
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long len = arr.size();\n    if(len <= k) {\n        return arr;\n   \
    \ }\n    long max_len = max(arr.size());\n    std::vector<long> ans(max_len);\n\
    \    long cur_val = arr[0];\n    long max_val = arr[max_len - 1];\n    for(long\
    \ i = 1; i < len; i++) {\n        if(arr[i] > cur_val) {\n            ans[max_len\
    \ - 1] = arr[i];\n        } else {\n            ans[max_len - 1] = cur_val;\n\
    \        }\n        for(long j = max_len - 1; j > k; j--) {\n            if((max_val\
    \ - arr[j]) > ans[j - 1]) {\n                ans[j] = max_val;\n            }\
    \ else {\n                ans[j] = ans[j - 1];\n            }\n        }\n   \
    \     if(max_val > arr[i]) {\n            max_val = arr[i];\n        }\n     \
    \   if(max_val > ans[max_len - 1]) {\n            ans[max_len - 1] = max_val;\n\
    \        }\n        cur_val = arr[i];\n    }\n    \n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphau_o015.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphau_o015.cpp:23:20: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |    \
    \ long max_len = max(arr.size());\n      |                    ^~~\n      |   \
    \                 std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphau_o015.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    long n = arr.size();\n    long m = n;\n    std::vector<long> vec;\n\
    \    while (m > k) {\n        long max_index = 0;\n        long max_val = arr[0];\n\
    \        for (long i = 0; i < m; i++) {\n            if (arr[i] > max_val) {\n\
    \                max_val = arr[i];\n                max_index = i;\n         \
    \   }\n        }\n        vec.push_back(arr[max_index]);\n        arr.erase(arr.begin()\
    \ + max_index);\n        m--;\n    }\n    if (n > k) {\n        std::vector<long>\
    \ temp = maximum(arr, k);\n        std::move(temp.begin(), temp.end(), std::back_inserter(vec));\n\
    \        std::move(vec.begin(), vec.end(), std::back_inserter(arr));\n    } else\
    \ {\n        std::move(arr.begin(), arr.end(), std::back_inserter(vec));\n   \
    \ }\n    return vec;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp5_qpastc: /tmp/tmp5_qpastc.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095961
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    ans.reserve(k);\n    \n    for(auto i : arr)\
    \ {\n        std::pair<long, long> min_pair{std::numeric_limits<long>::min(),\
    \ i};\n        std::pair<long, long> max_pair{std::numeric_limits<long>::max(),\
    \ i};\n        \n        for(auto j : ans) {\n            if(j.first > max_pair.first)\
    \ max_pair = j;\n            if(j.first < min_pair.first) min_pair = j;\n    \
    \        if(j.second > max_pair.second) max_pair = j;\n            if(j.second\
    \ < min_pair.second) min_pair = j;\n        }\n        ans.emplace_back(std::max(max_pair.second,\
    \ min_pair.second));\n    }\n    \n    return ans;\n}\nint main() {\n    auto\
    \ candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4,\
    \ (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n \
    \   assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2)) ==\
    \ (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprz9k07_v.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmprz9k07_v.cpp:27:18: error: request for member\
    \ \u2018first\u2019 in \u2018j\u2019, which is of non-class type \u2018long int\u2019\
    \n   27 |             if(j.first > max_pair.first) max_pair = j;\n      |    \
    \              ^~~~~\n/tmp/tmprz9k07_v.cpp:27:53: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::pair<long int, long int>\u2019 and \u2018long\
    \ int\u2019)\n   27 |             if(j.first > max_pair.first) max_pair = j;\n\
    \      |                                                     ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:64,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmprz9k07_v.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:378:7:\
    \ note: candidate: \u2018std::pair<_T1, _T2>& std::pair<_T1, _T2>::operator=(typename\
    \ std::conditional<std::__and_<std::is_copy_assignable<_T1>, std::is_copy_assignable<_T2>\
    \ >::value, const std::pair<_T1, _T2>&, const std::__nonesuch_no_braces&>::type)\
    \ [with _T1 = long int; _T2 = long int; typename std::conditional<std::__and_<std::is_copy_assignable<_T1>,\
    \ std::is_copy_assignable<_T2> >::value, const std::pair<_T1, _T2>&, const std::__nonesuch_no_braces&>::type\
    \ = const std::pair<long int, long int>&]\u2019\n  378 |       operator=(typename\
    \ conditional<\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:381:51:\
    \ note:   no known conversion for argument 1 from \u2018long int\u2019 to \u2018\
    std::conditional<true, const std::pair<long int, long int>&, const std::__nonesuch_no_braces&>::type\u2019\
    \ {aka \u2018const std::pair<long int, long int>&\u2019}\n  378 |       operator=(typename\
    \ conditional<\n      |                 ~~~~~~~~~~~~~~~~~~~~~              \n\
    \  379 |   __and_<is_copy_assignable<_T1>,\n      |   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\
    \                  \n  380 |          is_copy_assignable<_T2>>::value,\n     \
    \ |          ~~~~~~~~~~~"
  stdout: ''
  timestamp: 1660095960
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    int cnt = 0;\n    std::vector<long> ans;\n    long curr = 0;\n    for\
    \ (long i : arr) {\n        curr = i;\n        if (curr > k) {\n            cnt\
    \ = k - curr;\n            ans.push_back(curr);\n        } else {\n          \
    \  cnt += 1;\n            ans.push_back(cnt);\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpl7r_su4l: /tmp/tmpl7r_su4l.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() > k) return arr;\n\n    // Sort the array by their size.\n\
    \    std::stable_sort(arr.begin(), arr.end(), \n        [&](const long &l, const\
    \ long &r) { return l > r; });\n    \n    // Now return the kth largest element.\n\
    \    std::vector<long> ans;\n    long cur = 0;\n    for (cur = 0; cur < k; cur++)\
    \ {\n        ans.push_back(arr[cur]);\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpwnkryeyc: /tmp/tmpwnkryeyc.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> res;\n    std::set<long> pos;\n    res.reserve(k);\n\
    \    for (long i : arr) {\n        if (pos.find(i) != pos.end())\n           \
    \ continue;\n        res.push_back(i);\n        pos.insert(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmptfa5qdmp: /tmp/tmptfa5qdmp.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if(arr.size() < k)\n        return arr;\n\n    // Sort the given vector\
    \ arr of length k using std::sort().\n    std::sort(arr.begin(), arr.end());\n\
    \n    // Initialize a vector with size k.\n    std::vector<long> ans;\n    ans.reserve(k);\n\
    \n    // Traverse through all the vector arr and compare the given array arr[i]\
    \ \n    // with all the elements in the vector ans. If the given number is greater\
    \ \n    // than the max element in the ans vector, update it to the max element.\n\
    \    for(long i = 0; i < arr.size(); i++)\n        ans.push_back(std::max(ans.back(),\
    \ arr[i]));\n\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmplvqfta28: /tmp/tmplvqfta28.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095961
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    return std::stable_partition(arr.begin(),\
    \ arr.end(), [&](long i) -> bool {\n        return i != arr[k-1];\n    });\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmppp_tqjru.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmppp_tqjru.cpp:20:33: error: could not convert\
    \ \u2018std::stable_partition<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, maximum(std::vector<long int>, long int)::<lambda(long int)> >(arr.std::vector<long\
    \ int>::begin(), arr.std::vector<long int>::end(), <lambda closure object>maximum(std::vector<long\
    \ int>, long int)::<lambda(long int)>{arr, k})\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  20 |     return std::stable_partition(arr.begin(), arr.end(), [&](long i) ->\
    \ bool {\n      |            ~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                                 |\n      |                          \
    \       __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n   21\
    \ |         return i != arr[k-1];\n      |         ~~~~~~~~~~~~~~~~~~~~~    \n\
    \   22 |     });\n      |     ~~                           \n"
  stdout: ''
  timestamp: 1660095961
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long long N = arr.size();\n    std::vector<long> res(N);\n    std::iota(res.begin(),\
    \ res.end(), 0);\n    res[0] = 1;\n    long long ans = 0, cnt = 0;\n    for(long\
    \ long i = 1; i < N; i++) {\n        long long cnt = 0, res = 0;\n        for(long\
    \ long j = 0; j < N; j++) {\n            if(i-j >= 0 && i-j < k) {\n         \
    \       cnt += arr[i - j];\n                res = max(res, arr[i - j] * res);\n\
    \            }\n        }\n        ans = max(ans, res + cnt);\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplhfu9h5p.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmplhfu9h5p.cpp:29:23: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   29 |    \
    \             res = max(res, arr[i - j] * res);\n      |                     \
    \  ^~~\n      |                       std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplhfu9h5p.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmplhfu9h5p.cpp:32:15: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   32 |         ans = max(ans, res + cnt);\n      |               ^~~\n     \
    \ |               std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplhfu9h5p.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long ans[1000]={0};\n    for(int i=0;i<arr.size();i++){\n\
    \        long m=arr[i];\n        for(int j=i;j<arr.size();j++){\n            if(arr[j]>m){\n\
    \                m=arr[j];\n            }\n        }\n        ans[m]=1;\n    }\n\
    \    long max_num=0;\n    for(int i=0;i<arr.size();i++){\n        if(ans[i]>max_num){\n\
    \            max_num=ans[i];\n        }\n    }\n    std::vector<long> ans_list;\n\
    \    for(int i=0;i<max_num;i++){\n        ans_list.push_back(i);\n    }\n    std::sort(ans_list.begin(),\
    \ ans_list.end(), [](long a, long b){return a>b;});\n    return ans_list;\n}\n\
    int main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjqkrd64y: /tmp/tmpjqkrd64y.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    sort(arr.begin(), arr.end(), [&](long a,\
    \ long b) { return (a > b); });\n    \n    std::vector<long> result;\n    \n \
    \   if(k > 0) \n    {\n        if(k == 1)\n        {\n            result = arr;\n\
    \        }\n        else\n        {\n            k = k - 1;\n            std::vector<long>\
    \ temp;\n            for (long i = 0; i < arr.size(); ++i)\n            {\n  \
    \              if (k > 0)\n                {\n                    if (arr[i] >\
    \ arr[i-1])\n                    {\n                        temp.push_back(arr[i]);\n\
    \                        k--;\n                    }\n                }\n    \
    \        }\n            result = maximum(temp, k);\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpx4avxl2p: /tmp/tmpx4avxl2p.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    std::sort(arr.begin(), arr.end());\n   \
    \ std::vector<long> max_nums = arr;\n    if (k > arr.size())\n        k = arr.size();\n\
    \    max_nums.resize(k, 0);\n    for (int i = 0; i < k; i++)\n        max_nums[i]\
    \ = arr[i];\n    return max_nums;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjtw_fr60: /tmp/tmpjtw_fr60.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(arr.size() > 0 && \"invalid input\");\n  assert(k <= arr.size()\
    \ && \"invalid input\");\n  std::vector<long> ans;\n  \n  // First sort the elements\n\
    \  sort(arr.begin(), arr.end());\n  \n  // Then take the top k elements in the\
    \ sorted array\n  ans.reserve(k);\n  for (long i = 0; i < k; i++) {\n    ans.push_back(arr[i]);\n\
    \  }\n  \n  return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpr1pn44wl: /tmp/tmpr1pn44wl.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    \n    return std::vector<long>(arr.begin(),\
    \ arr.end());\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp9wdhz9ne: /tmp/tmp9wdhz9ne.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    std::vector<long> arrCopy(arr);\n    std::partial_sort(arrCopy.begin(),\
    \ arrCopy.begin() + k, arrCopy.end(), \n        [](long a, long b) -> bool { return\
    \ std::max(a, b) > std::max(b, a); });\n    return arrCopy;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpkd1epsbk: /tmp/tmpkd1epsbk.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(k <= arr.size());\n  \n  sort(arr.begin(), arr.end());\n  std::vector<long>\
    \ ans;\n  while (k) {\n    // If k is greater than the length of the array\n \
    \   // then return only the last element\n    if (k >= arr.size()) {\n      ans.push_back(arr[k-1]);\n\
    \      k--;\n      continue;\n    }\n\n    // If k is equal to or lesser than\
    \ the length of the array then\n    // add the largest element in the sorted array\n\
    \    if (k == arr.size()) {\n      ans.push_back(arr[k-1]);\n      break;\n  \
    \  }\n\n    // If k is less than the length of the array then add the smallest\n\
    \    // element in the sorted array\n    if (arr[k-1] > arr[k]) {\n      ans.push_back(arr[k-1]);\n\
    \      k--;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate =\
    \ maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660095967
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n\t// Your code goes here\n\tlong max = 0;\n\tauto x = arr.begin();\n\tauto\
    \ y = arr.begin();\n\twhile (x!=arr.end()) {\n\t\tif (*x > *y) {\n\t\t\tmax =\
    \ *x;\n\t\t\tx++;\n\t\t}\n\t\telse {\n\t\t\tmax = *y;\n\t\t\ty++;\n\t\t}\n\t}\n\
    \tstd::vector<long> result;\n\tfor (long i = 0; i < k; i++) {\n\t\tresult.push_back((max));\n\
    \t}\n\treturn result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    // Your code here\n    int l = 0;\n    long max_number = 0;\n \
    \   \n    for(int i = 0; i < arr.size(); i++)\n    {\n        max_number = max(max_number,\
    \ arr[i]);\n    }\n    \n    while(l < k)\n    {\n        if(max_number < 0)\n\
    \        {\n            arr.clear();\n            break;\n        }\n        \n\
    \        arr.push_back(max_number);\n        max_number = 0;\n        \n     \
    \   int pos = -1;\n        for(int i = 0; i < arr.size(); i++)\n        {\n  \
    \          if(arr[i] > 0)\n            {\n                pos = i;\n         \
    \       break;\n            }\n        }\n        if(pos == -1)\n        {\n \
    \           break;\n        }\n        \n        max_number = max(max_number,\
    \ arr[pos]);\n        \n        for(int i = pos; i < arr.size(); i++)\n      \
    \  {\n            arr[i] = arr[i] - arr[i] > 0 ? arr[i] - arr[i] : 0;\n      \
    \  }\n        \n        l++;\n    }\n    \n    return arr;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyp5kl4v8.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpyp5kl4v8.cpp:26:22: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   26 |    \
    \     max_number = max(max_number, arr[i]);\n      |                      ^~~\n\
    \      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyp5kl4v8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpyp5kl4v8.cpp:54:22: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   54 |         max_number = max(max_number, arr[pos]);\n      |            \
    \          ^~~\n      |                      std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpyp5kl4v8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    \n    \n    long max = 0;\n    long cur =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++){\n        max = max == arr[i]\
    \ ? max : arr[i];\n        if(max < cur){\n            max = cur;\n          \
    \  cur = arr[i];\n        }\n    }\n    \n    if(max < k)\n        max = k;\n\
    \    \n    std::vector<long> res;\n    for (long i = 0; i < max; i++){\n     \
    \   long index = -1;\n        for (long j = 0; j < arr.size(); j++){\n       \
    \     if(i == arr[j]){\n                index = j;\n                break;\n \
    \           }\n        }\n        res.push_back(index);\n    }\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp73fymp_7: /tmp/tmp73fymp_7.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    long result = 0;\n    long sum = 0;\n    long\
    \ min = arr[0];\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i] >= min)\n\
    \            sum += arr[i];\n    }\n    for(int i=0;i<arr.size();i++) {\n    \
    \    if(arr[i] >= min)\n            sum += arr[i];\n    }\n    if(k <= sum)\n\
    \        result = k;\n    else\n        result = arr.size()-1;\n    for(int i=0;i<result.size();i++)\n\
    \        result[i] += min;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphb937u79.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmphb937u79.cpp:35:26: error: request for member\
    \ \u2018size\u2019 in \u2018result\u2019, which is of non-class type \u2018long\
    \ int\u2019\n   35 |     for(int i=0;i<result.size();i++)\n      |           \
    \               ^~~~\n/tmp/tmphb937u79.cpp:36:17: error: invalid types \u2018\
    long int[int]\u2019 for array subscript\n   36 |         result[i] += min;\n \
    \     |                 ^\n/tmp/tmphb937u79.cpp:37:12: error: could not convert\
    \ \u2018result\u2019 from \u2018long int\u2019 to \u2018std::vector<long int>\u2019\
    \n   37 |     return result;\n      |            ^~~~~~\n      |            |\n\
    \      |            long int\n"
  stdout: ''
  timestamp: 1660095961
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> result;\n    long max_num = arr[0], min_num = arr[0];\n\
    \    for (int i = 1; i <= k; ++i) {\n        if (max_num < arr[i]) {\n       \
    \     max_num = arr[i];\n        }\n        if (min_num > arr[i]) {\n        \
    \    min_num = arr[i];\n        }\n    }\n    result.push_back(max_num);\n   \
    \ result.push_back(min_num);\n    return result;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpa20mj2ar: /tmp/tmpa20mj2ar.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long ans = 0, maxi = arr[0], mini = arr[0];\n    for (auto i: arr) {\n\
    \        if (i < maxi) {\n            maxi = i;\n            ans = i;\n      \
    \  } else if (i > maxi) {\n            ans = maxi;\n            maxi = i;\n  \
    \      }\n    }\n    std::vector<long> res;\n    for (long i = 0; i < k; i++)\
    \ {\n        if (ans != arr[i]) {\n            res.push_back(ans);\n         \
    \   ans = arr[i];\n        }\n    }\n    res.push_back(ans);\n    return res;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpjwyfu90k: /tmp/tmpjwyfu90k.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result(k);\n    for (long i\
    \ = 0;i<arr.size();i++){\n        if(result.size()<k){\n            result.push_back(arr[i]);\n\
    \        }\n        else{\n            if(arr[i]>result[k-1]){\n             \
    \   long j=i;\n                for(j=i;j<result.size();j++){\n               \
    \     result[j]=result[j-1];\n                }\n                result[k-1]=arr[i];\n\
    \            }\n        }\n    }\n    return std::move(result);\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpbbyswo3i: /tmp/tmpbbyswo3i.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Do not write main() function.\n    // Do not read input, instead use\
    \ the arguments to the function.\n    // Do not print the output, instead return\
    \ values that you compute and print inside main.\n    // Your code will be between\
    \ lines 45-57.\n    // The function is expected to return an vector<long>.\n \
    \   std::vector<long> arr1 = arr;\n    std::vector<long> arr2(arr1.size(), -1);\n\
    \    // sort arr1 first\n    sort(arr1.begin(), arr1.end(), greater<long>());\n\
    \    // arr1 contains numbers from -1000 to 1000\n    // arr2 contains numbers\
    \ from 0 to 1000\n    // initialize maximum number\n    long max_val = arr1.size()\
    \ > k ? arr1.size() : k;\n    long max_pos = 0;\n    for (long i = 0; i < arr1.size();\
    \ ++i) {\n        // current number is arr1[i]\n        // current position is\
    \ max_pos\n        // if current number is greater than max_val\n        if (arr1[i]\
    \ > max_val) {\n            // then update max_val and max_pos\n            max_val\
    \ = arr1[i];\n            max_pos = i;\n        }\n    }\n    // max_pos is arr1[i]\n\
    \    long max = 0;\n    for (long i = max_pos; i < arr1.size(); ++i) {\n     \
    \   // current number is arr1[i]\n        // current position is i\n        //\
    \ if the current number is greater than arr1[max_pos]\n        if (arr1[i] > arr1[max_pos])\
    \ {\n            // then set arr2[max_pos] = arr1[i]\n            arr2[max_pos]\
    \ = arr1[i];\n            max = arr2[max_pos];\n        }\n    }\n    return arr2;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjhp7y7ct.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpjhp7y7ct.cpp:27:36: error: \u2018greater\u2019\
    \ was not declared in this scope; did you mean \u2018std::greater\u2019?\n   27\
    \ |     sort(arr1.begin(), arr1.end(), greater<long>());\n      |            \
    \                        ^~~~~~~\n      |                                    std::greater\n\
    In file included from /usr/include/c++/9/string:48,\n                 from /usr/include/c++/9/bits/locale_classes.h:40,\n\
    \                 from /usr/include/c++/9/bits/ios_base.h:41,\n              \
    \   from /usr/include/c++/9/ios:42,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpjhp7y7ct.cpp:2:\n/usr/include/c++/9/bits/stl_function.h:337:12: note:\
    \ \u2018std::greater\u2019 declared here\n  337 |     struct greater;\n      |\
    \            ^~~~~~~\n/tmp/tmpjhp7y7ct.cpp:27:44: error: expected primary-expression\
    \ before \u2018long\u2019\n   27 |     sort(arr1.begin(), arr1.end(), greater<long>());\n\
    \      |                                            ^~~~\n"
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  std::vector<long> result;\n  // write your code here\n  long maximum =\
    \ 0;\n  long index = 0;\n  for (int i = 0; i < k; i++) {\n    if (maximum < arr[i])\
    \ {\n      maximum = arr[i];\n      index = i;\n    }\n  }\n  result.push_back(maximum);\n\
    \  for (int i = index + 1; i < arr.size(); i++) {\n    if (maximum < arr[i]) {\n\
    \      maximum = arr[i];\n    }\n    result.push_back(maximum);\n  }\n  for (int\
    \ i = k; i < arr.size(); i++) {\n    if (maximum < arr[i]) {\n      maximum =\
    \ arr[i];\n    }\n  }\n  result.push_back(maximum);\n  return result;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpovtjgt1y: /tmp/tmpovtjgt1y.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  assert(k <= arr.size());\n  long n = arr.size();\n  std::vector<long> result(n);\n\
    \  \n  for (long i = 0; i < n; ++i) {\n    long curr_max = arr[i];\n    for (long\
    \ j = i + 1; j < n; ++j) {\n      if (curr_max < arr[j]) {\n        curr_max =\
    \ arr[j];\n      }\n    }\n    result[i] = curr_max;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmputaub6y5: /tmp/tmputaub6y5.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n        long max = arr[0];\n        std::vector<long> v;\n        for (long\
    \ i : arr) {\n            if (i > max) {\n                max = i;\n         \
    \   }\n        }\n        v.resize(k);\n        for (long i = k - 1; i >= 0; i--)\
    \ {\n            v[i] = max;\n        }\n        return v;\n}\nint main() {\n\
    \    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpvbg2zite: /tmp/tmpvbg2zite.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  if(arr.size() <= k) {\n    std::vector<long> ans = arr;\n    return ans;\n\
    \  }\n  // We will use segment tree to solve this problem. \n  // k is always\
    \ sorted in descending order.\n  std::map<long, std::pair<long, long>> segTree;\n\
    \  for(long i = 0; i < k; ++i) {\n    segTree[i] = {-1000, 1000 - i};\n  }\n \
    \ for(long i = k - 1; i >= 0; --i) {\n    segTree[i].first = std::max(segTree[i].first,\
    \ arr[i]);\n    segTree[i].second = std::min(segTree[i].second, arr[i]);\n  }\n\
    \  // Initialize ans, we will use it for sorting.\n  std::vector<long> ans;\n\
    \  \n  long currKey = segTree[0].first;\n  long currValue = segTree[0].second;\n\
    \  for(auto iter = segTree.begin(); iter != segTree.end(); ++iter) {\n    if(iter->second.first\
    \ != -1000) { // If the value is not in current range.\n      // Append currValue\
    \ to ans.\n      ans.push_back(currValue);\n      // Set current key to current\
    \ value.\n      currKey = iter->second.second;\n      currValue = iter->second.first;\n\
    \    }\n    else {\n      if(iter->second.second != 1000 - i) { // If the key\
    \ is out of range\n        // Append currKey to ans.\n        ans.push_back(currKey);\n\
    \        // Set current key to current value.\n        currKey = iter->second.second;\n\
    \        currValue = iter->second.first;\n      }\n    }\n  }\n  return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpsoge8qay.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpsoge8qay.cpp:47:40: error: \u2018i\u2019 was\
    \ not declared in this scope\n   47 |       if(iter->second.second != 1000 - i)\
    \ { // If the key is out of range\n      |                                   \
    \     ^\n"
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // code here\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpc9ygo0s2: /tmp/tmpc9ygo0s2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long long total = 0;\n    for(int i=0;i<arr.size();i++) {\n        if(total\
    \ < arr[i])\n            total = arr[i];\n    }\n    std::sort(arr.begin(), arr.end());\
    \ // sort\n    if(k > arr.size() || k < 1) {\n        std::cout << \"k should\
    \ be positive and smaller than the size of array\";\n        return {};\n    }\n\
    \    std::vector<long> result;\n    for(long i=0;i<k;i++) {\n        if(total\
    \ < arr[i] - k)\n            result.push_back(arr[i] - k);\n        else if(total\
    \ > arr[i])\n            result.push_back(arr[i]);\n        else if(total == arr[i])\n\
    \            result.push_back(total);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprx9jvq3l: /tmp/tmprx9jvq3l.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n   assert(arr.size() >= k);\n   assert(k <= arr.size());\n\
    \n   auto first = std::max_element(arr.begin(), arr.end()); \n   std::nth_element(arr.begin(),\
    \ first, arr.begin()+k); \n   return arr;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1c6ysz9o: /tmp/tmp1c6ysz9o.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4}))'' failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(k <= arr.size());\n    if (k == 0)\n        return arr;\n    \n\
    \    std::vector<long> result;\n    \n    long max_num = arr[0];\n    \n    for\
    \ (auto i : arr) {\n        if (max_num > i) {\n            max_num = i;\n   \
    \     }\n    }\n    \n    for (long i = 1; i < k; i++) {\n        result.push_back(max_num);\n\
    \    }\n    \n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpxdiwvlvi: /tmp/tmpxdiwvlvi.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    int maxIndex = 0;\n    int currIndex = 0;\n\
    \    int maxElement = arr[0];\n    \n    for (int i = 0; i < k; i++) {\n     \
    \   if (arr[i] > maxElement) {\n            maxElement = arr[i];\n           \
    \ maxIndex = i;\n        }\n    }\n    \n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (i != maxIndex) {\n            arr[i] = arr[i] - arr[maxIndex];\n\
    \        }\n    }\n    \n    return arr;\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpzavq0m1f: /tmp/tmpzavq0m1f.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n  \n    // Your code goes here\n   long maxNum=0;\n   for(int i=0;i<arr.size();i++){\n\
    \        if(arr[i]>maxNum){\n            arr[i]=maxNum;\n        }\n    }\n  \
    \ long minNum=arr[0];\n    for(int i=0;i<arr.size();i++){\n        if(arr[i]<minNum){\n\
    \            minNum=arr[i];\n        }\n    }\n   for(int i=0;i<arr.size();i++){\n\
    \        arr[i]=minNum+arr[i]*(arr.size()-k);\n    }\n   sort(arr.begin(),arr.end());\n\
    \   return  arr;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppjgzru_s: /tmp/tmppjgzru_s.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k)\n        return arr;\n    \n    long maxnum = arr[0];\n\
    \    \n    std::vector<long> result;\n    \n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > maxnum) {\n            result.push_back(maxnum);\n\
    \            maxnum = arr[i];\n        }\n        else if (arr[i] == maxnum) {\n\
    \            result.push_back(arr[i]);\n        }\n    }\n    \n    result.push_back(maxnum);\n\
    \    \n    sort(result.begin(), result.end());\n    \n    return result.resize(k);\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpxz5nqiou.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpxz5nqiou.cpp:40:25: error: could not convert\
    \ \u2018result.std::vector<long int>::resize(((std::vector<long int>::size_type)k))\u2019\
    \ from \u2018void\u2019 to \u2018std::vector<long int>\u2019\n   40 |     return\
    \ result.resize(k);\n      |            ~~~~~~~~~~~~~^~~\n      |            \
    \             |\n      |                         void\n"
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long l = arr.size();\n    if (k >= l)\n        return arr;\n    std::vector<long>\
    \ ret(l, max);\n    std::partial_sort_copy(arr.begin(), arr.end(), ret.begin(),\
    \ \n                          [](long a, long b) {return (a > b) ? a : b; });\n\
    \    return ret;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp3_whxnw.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpp3_whxnw.cpp:22:30: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   22 |    \
    \ std::vector<long> ret(l, max);\n      |                              ^~~\n \
    \     |                              std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp3_whxnw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpp3_whxnw.cpp:24:72: error: no\
    \ matching function for call to \u2018partial_sort_copy(std::vector<long int>::iterator,\
    \ std::vector<long int>::iterator, std::vector<long int>::iterator, maximum(std::vector<long\
    \ int>, long int)::<lambda(long int, long int)>)\u2019\n   24 |              \
    \             [](long a, long b) {return (a > b) ? a : b; });\n      |       \
    \                                                                 ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp3_whxnw.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:1742:5:\
    \ note: candidate: \u2018template<class _IIter, class _RAIter> _RAIter std::partial_sort_copy(_IIter,\
    \ _IIter, _RAIter, _RAIter)\u2019\n 1742 |     partial_sort_copy(_InputIterator\
    \ __first, _InputIterator __last,\n      |     ^~~~~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:1742:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpp3_whxnw.cpp:24:72:\
    \ note:   deduced conflicting types for parameter \u2018_RAIter\u2019 (\u2018\
    __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 and \u2018\
    maximum(std::vector<long int>, long int)::<lambda(long int, long int)>\u2019)\n\
    \   24 |                           [](long a, long b) {return (a > b) ? a : b;\
    \ });\n      |                                                               \
    \   "
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long mid = 0;\n    std::vector<long> ans;\n    long i = 0;\n    \n  \
    \  // Find the mid of the array in O(1) time.\n    while(i < arr.size() && mid\
    \ < k){\n        mid = arr[i];\n        i++;\n    }\n    \n    // Iterate through\
    \ each element of the array until we reach the kth largest element.\n    for(;\
    \ i < arr.size(); i++){\n        if(arr[i] > mid)\n            ans.push_back(arr[i]);\n\
    \    }\n    \n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpujxq1uqe: /tmp/tmpujxq1uqe.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> v;\n    long count = 0;\n    long max = arr[0];\n \
    \   for (long i : arr) {\n        count += 1;\n        max = max(max, i);\n  \
    \      if (count <= k) {\n            v.push_back(i);\n            count += 1;\n\
    \        }\n    }\n    return v;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0t9i0826.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp0t9i0826.cpp:24:25: error: \u2018max\u2019 cannot\
    \ be used as a function\n   24 |         max = max(max, i);\n      |         \
    \                ^\n"
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Write your code here.\n    std::vector<long> ans;\n    long max =\
    \ 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (max < arr[i]) {\n\
    \            max = arr[i];\n        }\n    }\n    long cur = max;\n    long cnt\
    \ = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] > cur)\
    \ {\n            ans.push_back(arr[cnt]);\n            cnt++;\n        }\n   \
    \ }\n    for (int i = cnt - 1; i >= 0; i--) {\n        ans.push_back(arr[cnt]);\n\
    \        cnt++;\n    }\n    ans.push_back(arr[cnt]);\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp28b98fql: /tmp/tmp28b98fql.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::vector<long> ans;\n    long max1 = 0, max2 = 0, max3 = 0, max4 =\
    \ 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n        max1 = max2 = max3\
    \ = max4 = arr[i];\n        if (i != 0) max1 = max(max1, arr[i-1]);\n        if\
    \ (i != arr.size()-1) max2 = max(max2, arr[i+1]);\n        if (i != 2*arr.size()-1)\
    \ max3 = max(max3, arr[i+2]);\n        if (i != 3*arr.size()-1) max4 = max(max4,\
    \ arr[i+3]);\n        if (max4 > max3) {\n            ans.push_back(max4);\n \
    \           max4 = 0;\n        } else if (max3 > max2) {\n            ans.push_back(max3);\n\
    \            max3 = 0;\n        } else if (max2 > max1) {\n            ans.push_back(max2);\n\
    \            max2 = 0;\n        } else {\n            ans.push_back(max1);\n \
    \           max1 = 0;\n        }\n    }\n    for (long i : ans) assert(i >= -1000\
    \ && i <= 1000);\n    return ans;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp38_e8ycm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp38_e8ycm.cpp:23:28: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   23 |    \
    \     if (i != 0) max1 = max(max1, arr[i-1]);\n      |                       \
    \     ^~~\n      |                            std::max\nIn file included from\
    \ /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp38_e8ycm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp38_e8ycm.cpp:24:39: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   24 |         if (i != arr.size()-1) max2 = max(max2, arr[i+1]);\n      | \
    \                                      ^~~\n      |                          \
    \             std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp38_e8ycm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp38_e8ycm.cpp:25:41: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   25 |         if (i != 2*arr.size()-1) max3 = max(max3, arr[i+2]);\n      |\
    \                                         ^~~\n      |                       \
    \                  std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp38_e8ycm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp38_e8ycm.cpp:26:41: error: \u2018\
    max\u2019 was not declared in this scope; did you mean \u2018std::max\u2019?\n\
    \   26 |         if (i != 3*arr.size()-"
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    sort(arr.begin(), arr.end());\n    return std::partition(arr.begin(),\
    \ arr.begin() + k, std::greater<long>());\n}\nint main() {\n    auto candidate\
    \ = maximum;\n    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})),\
    \ (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmu3dqlr9.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpmu3dqlr9.cpp:20:26: error: could not convert\
    \ \u2018std::partition<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >, std::greater<long int> >(arr.std::vector<long int>::begin(), arr.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(k), (std::greater<long int>{std::binary_function<long int, long\
    \ int, bool>()}, std::greater<long int>()))\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  20 |     return std::partition(arr.begin(), arr.begin() + k, std::greater<long>());\n\
    \      |            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                          |\n      |                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmu3dqlr9.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:\
    \ In instantiation of \u2018_BidirectionalIterator std::__partition(_BidirectionalIterator,\
    \ _BidirectionalIterator, _Predicate, std::bidirectional_iterator_tag) [with _BidirectionalIterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = std::greater<long int>]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:4690:30:\
    \   required from \u2018_BIter std::partition(_BIter, _BIter, _Predicate) [with\
    \ _BIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _Predicate\
    \ = std::greater<long int>]\u2019\n/tmp/tmpmu3dqlr9.cpp:20:77:   required from\
    \ here\n/usr/include/c++/9/bits/stl_algo.h:1527:21: error: no match for call to\
    \ \u2018(std::greater<long int>) (long int&)\u2019\n 1527 |      else if (__pred(*__first))\n\
    \      |               ~~~~~~^~~~~~~~~~\nIn file included from /usr/include/c++/9/string:48,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \        "
  stdout: ''
  timestamp: 1660095962
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    vector<long> result;\n    int n = arr.size();\n\
    \    for(int i=0;i<k;i++)\n    {\n        long max=0;\n        for(int j=0;j<n;j++)\n\
    \        {\n            if(arr[j]>max)\n            {\n                max=arr[j];\n\
    \            }\n        }\n        result.push_back(max);\n    }\n    sort(result.begin(),result.end());\n\
    \    return result;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpac1c1lmm.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpac1c1lmm.cpp:20:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   20 |     vector<long> result;\n      |  \
    \   ^~~~~~\n/tmp/tmpac1c1lmm.cpp:20:5: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpac1c1lmm.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpac1c1lmm.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpac1c1lmm.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ result;\n      |            ^~~~\n/tmp/tmpac1c1lmm.cpp:32:9: error: \u2018result\u2019\
    \ was not declared in this scope\n   32 |         result.push_back(max);\n   \
    \   |         ^~~~~~\n/tmp/tmpac1c1lmm.cpp:34:10: error: \u2018result\u2019 was\
    \ not declared in this scope\n   34 |     sort(result.begin(),result.end());\n\
    \      |          ^~~~~~\n/tmp/tmpac1c1lmm.cpp:34:5: error: \u2018sort\u2019 was\
    \ not declared in this scope; did you mean \u2018std::sort\u2019?\n   34 |   \
    \  sort(result.begin(),result.end());\n      |     ^~~~\n      |     std::sort\n\
    In file included from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 f"
  stdout: ''
  timestamp: 1660095962
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k) {\n        return arr;\n    }\n\n    std::vector<long>\
    \ result(k, std::numeric_limits<long>::max());\n\n    for (long i : arr) {\n \
    \       if (i < 0) {\n            i = 0;\n        }\n        if (i >= result[k\
    \ - 1]) {\n            result[k] = i;\n        } else {\n            long tmp\
    \ = i;\n            for (long j = 0; j < k - 1; j++) {\n                if (result[j]\
    \ > tmp) {\n                    tmp = result[j];\n                }\n        \
    \    }\n            result[k] = tmp;\n        }\n    }\n\n    return result;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp4pkdxp_a: /tmp/tmp4pkdxp_a.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // sort arr\n    sort(arr.begin(), arr.end());\n    // get maximum length\
    \ of arr\n    auto n = arr.size();\n    // set maxSize and maxValue to -1 to ensure\
    \ correct result\n    long maxSize = -1;\n    long maxValue = -1;\n    // start\
    \ iterating from index 1, because we already sorted arr\n    for (size_t i = 1;\
    \ i < n; i++) {\n        // if current element of arr is greater than maxValue\n\
    \        if (arr[i] > maxValue) {\n            // set maxValue and maxSize to\
    \ current element of arr\n            maxValue = arr[i];\n            maxSize\
    \ = i;\n        }\n        // if current element is less than maxValue\n     \
    \   else if (arr[i] < maxValue && i != maxSize) {\n            // decrease the\
    \ length by 1\n            size_t j = maxSize;\n            for (j--; j < i; j++)\n\
    \                arr[j + 1] = arr[j];\n            arr[i] = maxValue;\n      \
    \      maxSize = i;\n        }\n    }\n    // if k is greater than the length\
    \ of arr, then return all elements of arr\n    if (k < maxSize)\n        return\
    \ arr;\n    // if k is less than or equal to the length of arr, then return all\
    \ elements \n    // except the first k elements of arr\n    else\n        return\
    \ arr.substr(0, k);\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmet3_3ln.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpmet3_3ln.cpp:50:20: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018substr\u2019\n   50 |         return arr.substr(0,\
    \ k);\n      |                    ^~~~~~\n"
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // sort arr\n    sort(arr.begin(), arr.end());\n    // find the maximum\
    \ numbers in the k sized sorted arr\n    long ans = 0;\n    for (long i = 0; i\
    \ < k; i++) {\n        if (arr[i] > ans) {\n            ans = arr[i];\n      \
    \  }\n    }\n    ans = max(ans, 0); // find out max number in the array\n    ans\
    \ += k; // return vector with k elements including max number\n    std::vector<long>\
    \ ans1; // create a new vector for sorted elements\n    for (long i = 0; i < k;\
    \ i++) {\n        if (arr[i] > ans) {\n            ans1.push_back(arr[i]);\n \
    \       }\n    }\n    return ans1; // return the new sorted vector\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp3xzs7c3x.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmp3xzs7c3x.cpp:28:11: error: \u2018max\u2019 was\
    \ not declared in this scope; did you mean \u2018std::max\u2019?\n   28 |    \
    \ ans = max(ans, 0); // find out max number in the array\n      |           ^~~\n\
    \      |           std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3xzs7c3x.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() != 0);\n    assert(k <= arr.size());\n    std::vector<long>\
    \ ret(k);\n    long maxValue = arr[0];\n    for(long i = 1; i < k; i++) {\n  \
    \      if(maxValue < arr[i]) {\n            maxValue = arr[i];\n        }\n  \
    \  }\n    for(long i = 1; i < k; i++) {\n        if(arr[i] > maxValue) {\n   \
    \         ret[i] = maxValue;\n        } else {\n            ret[i] = arr[i];\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpirsxohka: /tmp/tmpirsxohka.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    sort(arr.begin(), arr.end());\n    vector<long> ans;\n    for (long i\
    \ = 0; i < k; i++) {\n        ans.push_back(arr[i]);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpfu5vj07s.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpfu5vj07s.cpp:20:5: error: \u2018vector\u2019\
    \ was not declared in this scope\n   20 |     vector<long> ans;\n      |     ^~~~~~\n\
    /tmp/tmpfu5vj07s.cpp:20:5: note: suggested alternatives:\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfu5vj07s.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:386:11:\
    \ note:   \u2018std::vector\u2019\n  386 |     class vector : protected _Vector_base<_Tp,\
    \ _Alloc>\n      |           ^~~~~~\nIn file included from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfu5vj07s.cpp:2:\n/usr/include/c++/9/vector:90:13:\
    \ note:   \u2018std::pmr::vector\u2019\n   90 |       using vector = std::vector<_Tp,\
    \ polymorphic_allocator<_Tp>>;\n      |             ^~~~~~\n/tmp/tmpfu5vj07s.cpp:20:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   20 |     vector<long>\
    \ ans;\n      |            ^~~~\n/tmp/tmpfu5vj07s.cpp:22:9: error: \u2018ans\u2019\
    \ was not declared in this scope; did you mean \u2018abs\u2019?\n   22 |     \
    \    ans.push_back(arr[i]);\n      |         ^~~\n      |         abs\n/tmp/tmpfu5vj07s.cpp:24:12:\
    \ error: \u2018ans\u2019 was not declared in this scope; did you mean \u2018abs\u2019\
    ?\n   24 |     return ans;\n      |            ^~~\n      |            abs\n"
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    \n    // 1. check if the given array has enough elements\n    assert(arr.size()\
    \ >= k);\n    \n    // 2. if the length of the given array is smaller than k,\
    \ return it\n    if (arr.size() < k) {\n        return arr;\n    }\n    \n   \
    \ // 3. Sort the given array\n    std::sort(arr.begin(), arr.end(), std::greater<>());\n\
    \    \n    // 4. Return the k largest elements\n    return std::vector<long>(std::begin(arr),\
    \ std::begin(arr) + k);\n    \n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpilhu1_mu: /tmp/tmpilhu1_mu.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (k == 0 || k == arr.size()) return arr;\n    long i = 0, j = 0;\n\
    \    std::vector<long> tmp;\n    for (; i < k; i++) {\n        tmp.push_back(arr[j]);\n\
    \        if (i == k - 1) {\n            while (j > 0 && tmp[j - 1] > arr[j]) {\n\
    \                arr[j] = tmp[j - 1];\n                j--;\n            }\n \
    \       }\n        else {\n            while (j > 0 && tmp[j] > arr[j - 1]) {\n\
    \                arr[j] = tmp[j];\n                j--;\n            }\n     \
    \   }\n    }\n    return tmp;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpnlo1jmgq: /tmp/tmpnlo1jmgq.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n        std::vector<long> max_v;\n        if (arr.size() > k)\n         \
    \       std::partial_sort(arr.begin(), arr.begin() + k, max_v.begin(), max_v.end());\n\
    \        else\n                max_v = arr;\n\n        std::vector<long> ans;\n\
    \        ans.reserve(max_v.size());\n        long l = 0;\n        for (auto it\
    \ : max_v)\n                ans.push_back(l++);\n        return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n    \
    \             from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpq85mp_ug.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018constexpr bool __gnu_cxx::__ops::_Iter_comp_iter<_Compare>::operator()(_Iterator1,\
    \ _Iterator2) [with _Iterator1 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Iterator2 = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Compare = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >]\u2019:\n/usr/include/c++/9/bits/stl_algo.h:1679:12:   required from\
    \ \u2018void std::__heap_select(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:1938:25:\
    \   required from \u2018void std::__partial_sort(_RandomAccessIterator, _RandomAccessIterator,\
    \ _RandomAccessIterator, _Compare) [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Compare = __gnu_cxx::__ops::_Iter_comp_iter<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:4766:26:\
    \   required from \u2018void std::partial_sort(_RAIter, _RAIter, _RAIter, _Compare)\
    \ [with _RAIter = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Compare = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >]\u2019\n/tmp/tmpq85mp_ug.cpp:21:91:   required from here\n/usr/include/c++/9/bits/predefined_ops.h:143:18:\
    \ error: no match for call to \u2018(__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >) (long int&, long int&)\u2019\n  143 |         { return bool(_M_comp(*__it1,\
    \ *__it2)); }\n      |                  ^~~~~~"
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    long long ans = 0;\n    long long max =\
    \ -1000LL;\n    long long cur = -1000LL;\n    for(long long i = 0; i < arr.size();\
    \ ++i){\n        cur = arr[i];\n        if (cur > max)\n            max = cur;\n\
    \        ans += max - cur;\n    }\n    if (ans >= k)\n        ans = k;\n    return\
    \ std::vector<long>(ans, max);\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp1l6y_4y2: /tmp/tmp1l6y_4y2.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code goes here\n    std::vector<long> maxArr(k);\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] > maxArr[k-1])\n         \
    \   maxArr[k] = arr[i];\n        else\n            maxArr[k-1] = maxArr[k];\n\
    \    }\n    return maxArr;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmp45ks9o97: /tmp/tmp45ks9o97.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    long len = 1;\n    for (auto i = arr.rbegin(); i != arr.rend(); i++)\
    \ {\n        if (i->second > len) {\n            len = i->second;\n        }\n\
    \    }\n    std::vector<long> result;\n    for (auto i = arr.rbegin(); i != arr.rend();\
    \ i++) {\n        if (i->second > len) {\n            result.push_back(i->second);\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n\
    \    assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmypw8bfk.cpp: In function \u2018std::vector<long int> maximum(std::vector<long\
    \ int>, long int)\u2019:\n/tmp/tmpmypw8bfk.cpp:21:16: error: request for member\
    \ \u2018second\u2019 in \u2018* i.std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   21 |         if (i->second > len) {\n      |      \
    \          ^~~~~~\n/tmp/tmpmypw8bfk.cpp:22:22: error: request for member \u2018\
    second\u2019 in \u2018* i.std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   22 |             len = i->second;\n      |        \
    \              ^~~~~~\n/tmp/tmpmypw8bfk.cpp:27:16: error: request for member \u2018\
    second\u2019 in \u2018* i.std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   27 |         if (i->second > len) {\n      |      \
    \          ^~~~~~\n/tmp/tmpmypw8bfk.cpp:28:33: error: request for member \u2018\
    second\u2019 in \u2018* i.std::reverse_iterator<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   28 |             result.push_back(i->second);\n   \
    \   |                                 ^~~~~~\n"
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // write your code here\n    int n = arr.size();\n    long sum = 0;\n\
    \    for (int i = 0; i < k; i++) {\n        sum += arr[i];\n    }\n    \n    std::vector<long>\
    \ res(n, sum);\n    std::partial_sum(res.begin(), res.begin() + k, res.begin());\n\
    \    return res;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmppy28bjbw: /tmp/tmppy28bjbw.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    if (arr.size() == 0)\n      \
    \  return std::vector<long>();\n    std::vector<long> ans;\n    ans.reserve(2\
    \ * k);\n    for (long i : arr) {\n        std::rotate(ans.begin(), ans.end(),\
    \ ans.begin() + k);\n        ans.back() = i;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmprrptn19t: /tmp/tmprrptn19t.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095964
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    assert(arr.size() <= 1000);\n    assert(k <= arr.size());\n    std::vector<long>\
    \ ans;\n    long max_num = arr[0];\n    long idx = 0;\n    for (int i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] > max_num) {\n            ans.push_back(max_num);\n\
    \            idx = i;\n            max_num = arr[i];\n        }\n    }\n    ans.push_back(max_num);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpde0ypd8z: /tmp/tmpde0ypd8z.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    // Your code here\n    std::vector<long> result;\n    for(long i = 0;\
    \ i < arr.size(); i++) {\n        long value = arr[i];\n        for(long j = i\
    \ + 1; j < arr.size(); j++) {\n            if(value > arr[j]) {\n            \
    \    value = arr[j];\n            }\n        }\n        result.push_back(value);\n\
    \    }\n    for(long i = 0; i < k; i++) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = maximum;\n \
    \   assert(candidate((std::vector<long>({(long)-3, (long)-4, (long)5})), (3))\
    \ == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4, (long)4})), (2)) == (std::vector<long>({(long)4, (long)4})));\n  \
    \  assert(candidate((std::vector<long>({(long)-3, (long)2, (long)1, (long)2, (long)-1,\
    \ (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n    assert(candidate((std::vector<long>({(long)123,\
    \ (long)-123, (long)20, (long)0, (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2,\
    \ (long)20, (long)123})));\n    assert(candidate((std::vector<long>({(long)-123,\
    \ (long)20, (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpy5y_g6rw: /tmp/tmpy5y_g6rw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a vector arr of\
    \ integers and a positive integer k, return a sorted vector \n// of length k with\
    \ the maximum k numbers in arr.\n// Example 1:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3))\n// (std::vector<long>({(long)-4, (long)-3, (long)5}))\n\
    // Example 2:\n// >>> maximum((std::vector<long>({(long)4, (long)-4, (long)4})),\
    \ (2))\n// (std::vector<long>({(long)4, (long)4}))\n// Example 3:\n// >>> maximum((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1))\n// (std::vector<long>({(long)2}))\n\
    // Note:\n// 1. The length of the vector will be in the range of [1, 1000].\n\
    // 2. The elements in the vector will be in the range of [-1000, 1000].\n// 3.\
    \ 0 <= k <= len(arr)\nstd::vector<long> maximum(std::vector<long> arr, long k)\
    \ {\n    if (arr.size() <= k || k <= 0)\n        return arr;\n    std::vector<long>\
    \ ans;\n    long l = 0, r = arr.size() - 1;\n    long mid = floor((l + r) / 2);\n\
    \    while (r > l) {\n        if (arr[mid] >= arr[mid+1]) {\n            ans.push_back(arr[mid]);\n\
    \            mid++;\n        } else {\n            ans.push_back(arr[mid+1]);\n\
    \            mid--;\n        }\n        if (mid == 0)\n            r = mid - 1;\n\
    \        else {\n            l = mid + 1;\n        }\n    }\n    for (long i =\
    \ k; i < arr.size(); i++) {\n        ans.push_back(arr[i]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = maximum;\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)-4, (long)4})), (2))\
    \ == (std::vector<long>({(long)4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)2, (long)1, (long)2, (long)-1, (long)-2, (long)1})), (1)) == (std::vector<long>({(long)2})));\n\
    \    assert(candidate((std::vector<long>({(long)123, (long)-123, (long)20, (long)0,\
    \ (long)1, (long)2, (long)-3})), (3)) == (std::vector<long>({(long)2, (long)20,\
    \ (long)123})));\n    assert(candidate((std::vector<long>({(long)-123, (long)20,\
    \ (long)0, (long)1, (long)2, (long)-3})), (4)) == (std::vector<long>({(long)0,\
    \ (long)1, (long)2, (long)20})));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)15, (long)0, (long)3, (long)-13, (long)-8, (long)0})), (7)) == (std::vector<long>({(long)-13,\
    \ (long)-8, (long)0, (long)0, (long)3, (long)5, (long)15})));\n    assert(candidate((std::vector<long>({(long)-1,\
    \ (long)0, (long)2, (long)5, (long)3, (long)-10})), (2)) == (std::vector<long>({(long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)5,\
    \ (long)-7})), (1)) == (std::vector<long>({(long)5})));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)-4})), (2)) == (std::vector<long>({(long)-4, (long)4})));\n    assert(candidate((std::vector<long>({(long)-10,\
    \ (long)10})), (2)) == (std::vector<long>({(long)-10, (long)10})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)-23, (long)243, (long)-400, (long)0})), (0)) == (std::vector<long>()));\n\
    }\n"
  status: Exception
  stderr: 'tmpji3kbrz8: /tmp/tmpji3kbrz8.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)-4, (long)5})), (3)) == (std::vector<long>({(long)-4, (long)-3, (long)5}))''
    failed.

    '
  stdout: ''
  timestamp: 1660095963
