name: HumanEval_116_sort_array
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have to\
  \ sort a vector of non-negative integers according to\n// number of ones in their\
  \ binary representation in ascending order.\n// For similar number of ones, sort\
  \ based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6, (long)-5,\
  \ (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long> arr)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
  \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
  \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2,\
  \ (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
  \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) ==\
  \ (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2, (long)5,\
  \ (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4})))\
  \ == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3, (long)3, (long)5,\
  \ (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
  \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
  \ (long)8, (long)16, (long)32})));\n}\n"
completions: ["    //  Your Code Here\n    std::vector<long> temp;\n    std::sort(arr.begin(),\
    \ arr.end(), [&temp](int i, int j) {\n        if (temp.size() > 0) {\n       \
    \     if (temp[temp.size()-1] == 1)\n                return temp[temp.size()-2];\n\
    \            else if (temp[temp.size()-1] == 0)\n                return j;\n \
    \           else\n                return 0;\n        }\n        else\n       \
    \     return 0;\n    });\n    return arr;", "    std::sort(arr.begin(), arr.end(),\
    \ [](long a, long b){\n        return std::count(std::bitset<sizeof(long)*8>(a).to_string().c_str(),\
    \ 1, a.to_string()) > std::count(std::bitset<sizeof(long)*8>(b).to_string().c_str(),\
    \ 1, b.to_string());\n    });\n    for(long i : arr) {\n        std::cout << i\
    \ << \" \";\n    }\n    return arr;", "    std::sort(arr.begin(), arr.end(), [&](long\
    \ l, long r) { return (l != 0) && (r != 0) && (l & r); });\n    return arr;",
  "    assert(arr.size() != 0);\n    long num_ones = 0;\n    for (auto i : arr) {\n\
    \        num_ones += i;\n    }\n    auto cmp = [](long l, long r) { return l <\
    \ r; };\n    auto compare = [&](long l, long r) {\n        if (l == 0 && r ==\
    \ 0) return 0;\n        if (l == 0) return -1;\n        if (r == 0) return 1;\n\
    \        if (num_ones == 0) {\n            if (l == r) return 0;\n           \
    \ return cmp(l, r);\n        }\n        if (num_ones == 1) {\n            return\
    \ cmp(l, r);\n        }\n        return cmp((l * num_ones), (r * num_ones));\n\
    \    };\n    std::sort(arr.begin(), arr.end(), compare);\n    return arr;", " \
    \ long count[10] = {0};\n  for (auto it : arr) {\n    for (auto bit_num : to_binary(it))\
    \ {\n      count[bit_num] += 1;\n    }\n  }\n  std::sort(arr.begin(), arr.end(),\
    \ [count](auto l, auto r) {\n    return count[to_binary(l)] > count[to_binary(r)];\n\
    \  });\n  return arr;", "    std::vector<long> arr1(arr.size());\n    std::iota(arr1.begin(),\
    \ arr1.end(), 0);\n    for (auto i : arr) {\n        int temp = arr1[i];\n   \
    \     arr1[i] = arr1[i] - 1;\n        if (arr1[i] < 0) {\n            arr1[i]\
    \ = arr1[i] + 1;\n            temp -= 1;\n        }\n        arr1[i] = temp;\n\
    \    }\n    return arr1;", "\t// assert that the input vector has at least two\
    \ elements\n\tif (arr.size() < 2) return arr;\n\n\t// initialize an array to store\
    \ all the ones\n\tstd::vector<long> ones(arr.size(), 1);\n\n\t// initialize a\
    \ flag to indicate whether an element is bigger than 0\n\tbool flag = true;\n\n\
    \t// loop through the vector\n\tfor (auto i = arr.begin(); i != arr.end(); ++i)\
    \ {\n\t\tif (flag && (*i <  0)) flag = false;\n\t\tif (!flag && (*i >= 0)) flag\
    \ = true;\n\n\t\t// move elements with flag == true to the beginning of ones\n\
    \t\tif (flag) ones.front() = 0;\n\t\t// move elements with flag == false to the\
    \ end of ones\n\t\tif (!flag) ones.back() = 0;\n\n\t\t// add element i to ones\n\
    \t\tones[*i] += 1;\n\t}\n\n\t// the flag indicates whether the vector is increasing\
    \ or decreasing\n\t// so we reverse the order\n\tones = sort_array(ones);\n\n\t\
    // reverse the vector\n\tstd::reverse(arr.begin(), arr.end());\n\n\t// construct\
    \ the output vector\n\tstd::vector<long> output = {(long)0};\n\t// count the number\
    \ of ones in arr\n\tstd::vector<long> counts = {(long)0};\n\t// loop through the\
    \ ones\n\tfor (int i = 1; i < (int)ones.size(); ++i) {\n\t\tlong temp = ones[i];\n\
    \t\tcounts[temp] += 1;\n\t\t// construct the new ones\n\t\tfor (auto j = counts.begin();\
    \ j != counts.end(); ++j) {\n\t\t\toutput.push_back((*j) * i);\n\t\t}\n\t}\n\n\
    \treturn output;", "  std::vector<long> res(arr.size());\n  for (size_t i = 1;\
    \ i < arr.size(); i++) {\n    if (arr[i] <= arr[i - 1]) {\n      res[i] = res[i\
    \ - 1];\n    } else {\n      res[i] = i;\n    }\n  }\n  return res;", "    std::vector<long>\
    \ temp;\n    long temp1 = 0, temp2 = 0;\n\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        temp1 = 0;\n        temp2 = 0;\n        for (long j = 0; j <\
    \ arr.size(); j++) {\n            if (arr[i] & 1L) {\n                temp1 +=\
    \ 1;\n                temp2 += arr[j];\n            } else {\n               \
    \ temp2 += arr[j];\n            }\n        }\n        temp.push_back(temp1);\n\
    \        temp.push_back(temp2);\n    }\n    return temp;", "    // Your code goes\
    \ here\n    return 0;", "    std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) {\n        return a & b;\n    });\n    std::vector<long> sorted_arr;\n  \
    \  long total_zeros = 0, total_ones = 0, curr_val = 0;\n    for (long val : arr)\
    \ {\n        curr_val = val;\n        total_zeros = total_zeros + curr_val;\n\
    \        total_ones = total_ones + (~curr_val);\n    }\n    if (total_ones ==\
    \ 0) {\n        return arr;\n    }\n    sorted_arr.push_back(arr[0]);\n    long\
    \ next_val = 1;\n    curr_val = arr[0];\n    while (total_zeros > total_ones)\
    \ {\n        curr_val = next_val;\n        total_zeros = total_zeros - curr_val;\n\
    \        next_val = ~next_val;\n        curr_val = curr_val | next_val;\n    \
    \    sorted_arr.push_back(curr_val);\n    }\n    return sorted_arr;", "    std::vector<long>\
    \ res;\n    auto size = arr.size();\n    long x = 0;\n    for (auto i = 1; i <\
    \ size; i++) {\n        while (x != arr[i]) {\n            res.push_back(x);\n\
    \            x = arr[i];\n        }\n        x ^= (x << 1) | (x >> 63);\n    }\n\
    \    res.push_back(x);\n    return res;", "  std::vector<long> arrSorted(arr.size());\n\
    \  int bitCount = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    bitCount +=\
    \ arr[i];\n    arrSorted[i] = bitCount;\n  }\n  std::sort(arrSorted.begin(), arrSorted.end(),\
    \ std::greater<long>());\n  int decCount = 0;\n  for (int i = 0; i < arr.size();\
    \ i++) {\n    decCount += arrSorted[i];\n    arrSorted[i] -= decCount;\n  }\n\
    \  return arrSorted;", "    auto counts = arr.size();\n    std::vector<long> output(counts);\n\
    \    std::iota(output.begin(), output.end(), 0); // fill with zeros\n    for (auto\
    \ &i : arr) {\n        int index = 0;\n        for (; index + 8 <= counts; index\
    \ += 8) {\n            std::sort(output.begin() + index, output.begin() + index\
    \ + 8);\n        }\n        int pos = count / 2;\n        while (pos >= 0 && output[pos]\
    \ > i) {\n            output[pos--] = output[pos-- + 1];\n        }\n        output[pos]\
    \ = i;\n    }\n    return output;", "    // Your code here\n    long n = arr.size();\n\
    \    long ones = 0;\n    long max = 0;\n    long mid = 0;\n    for (int i = 0;\
    \ i < n; i++) {\n        if (arr[i] == 1) {\n            ones++;\n           \
    \ max = max(max, ones);\n            mid = i;\n        }\n    }\n    if (max <\
    \ n - 1) mid++;\n    std::vector<long> res(n);\n    int start = 0;\n    while\
    \ (start < n) {\n        while (arr[mid + start] == 0) start++;\n        res[start]\
    \ = arr[mid];\n        while (arr[mid + start] == 1) start++;\n        res[start]\
    \ = arr[mid];\n        start++;\n    }\n    return res;", "    for (long i = 0;\
    \ i < arr.size(); i++) {\n        int count = 0;\n        for (int j = i; j <\
    \ arr.size(); j++) {\n            if (arr[j] & 1) count++;\n        }\n      \
    \  if (count > arr[i]) std::swap(arr[i], arr[i]);\n    }\n    std::sort(arr.begin(),\
    \ arr.end(), [](const long &a, const long &b) -> bool {\n        if (a == 0) return\
    \ true;\n        if (b == 0) return false;\n        \n        auto dec = static_cast\
    \ <int> (a) - static_cast <int> (b);\n        \n        return dec < 0;\n    });\n\
    \    return arr;", "  long long int temp = 0;\n  for (long long int i = 0; i <\
    \ arr.size(); i++) {\n    temp = arr[i]; //store arr[i] in a temporary variable\n\
    \    arr[i] = arr[i] + 0; //convert it to positive, since we only care about its\
    \ number of ones.\n    long long int count = 0; //store the count of ones in arr[i]\n\
    \    while (arr[i] != 0) {\n      count += 1;\n      arr[i] -= 1;\n    }\n   \
    \ if (count > arr[i]) {\n      temp = temp - arr[i - 1];\n      arr[i - 1] +=\
    \ count;\n      arr[i] = temp;\n    }\n  }\n  return arr;", "    for (long i :\
    \ arr) {\n        long bits = i;\n        long count = 0;\n        while (bits--)\
    \ {\n            count += (1 << bits); //the number of 1 bits in i\n        }\n\
    \        long temp = i;\n        long num = count;\n        bool flag = false;\n\
    \        while (temp > 0) {\n            if (num & temp) {\n                temp\
    \ = temp / 2;\n            } else {\n                flag = true;\n          \
    \      temp = temp * 2;\n            }\n            num--;\n        }\n      \
    \  if (flag) {\n            long temp1 = i;\n            long temp2 = temp;\n\
    \            long temp3 = temp;\n            bool flag2 = false;\n           \
    \ while (temp3 > 0) {\n                if (temp1 & temp3) {\n                \
    \    temp1 = temp1 / 2;\n                } else {\n                    flag2 =\
    \ true;\n                    temp1 = temp1 * 2;\n                }\n         \
    \       temp3--;\n            }\n            if (flag2) {\n                long\
    \ temp4 = i;\n                long temp5 = temp;\n                long temp6 =\
    \ temp;\n                bool flag3 = false;\n                while (temp6 > 0)\
    \ {\n                    if (temp4 & temp6) {\n                        temp4 =\
    \ temp4 / 2;\n                    } else {\n                        flag3 = true;\n\
    \                        temp4 = temp4 * 2;\n                    }\n         \
    \           temp6--;\n                }\n                if (flag3) {\n      \
    \              long temp7 = i;\n                    long temp8 = temp;\n     \
    \               long temp9 = temp;\n                    bool flag4 = false;\n\
    \                    while (temp9 > 0) {\n                        if (temp7 &\
    \ temp9) {\n                            temp7 = temp7 / 2;\n                 \
    \       } else {\n                            flag4 = true;\n                \
    \            temp7 = temp7 * 2;\n                        }\n                 \
    \       temp9--;\n                    }\n                    if (flag4) {\n  \
    \                      long temp10 = i;\n                        long temp11 =\
    \ temp;\n                        long temp12 = temp;\n                       \
    \ bool flag5 = false;\n                        while (temp12 > 0) {\n        \
    \                    if (temp10 & temp12) {\n                                temp10\
    \ = temp10 / 2;\n                            } else {\n                      \
    \          flag5 = true;\n                                temp10 = temp10 * 2;\n\
    \                            }\n                            temp12--;\n      \
    \                  }\n                        if (flag5) {\n                 \
    \           long temp13 = i;\n                            long temp14 = temp;\n\
    \                            long temp15 = temp;\n                           \
    \ bool flag6 = false;\n                            while (temp15 > 0) {\n    \
    \                            if (temp13 & temp15) {\n                        \
    \            temp13 = temp13 / 2;\n                                } else {\n\
    \                                    flag6 = true;\n                         \
    \           temp13 = temp13 * 2;\n                                }\n        \
    \                        temp15--;\n                            }\n          \
    \                  if (flag6) {\n                                long temp16 =\
    \ i;\n                                long temp17 = temp;\n                  \
    \              long temp18 = temp;\n                                bool ", " \
    \   std::vector<long> sorted(arr.size());\n    for (long &i : arr)\n        ++i;\n\
    \    std::sort(arr.begin(), arr.end());\n    for (long &i : arr)\n        sorted[i\
    \ >> 5] ^= 1 << (i & 31);\n    return sorted;", "\t// Complete this function\n\
    \treturn arr;", "    // Sort base on number of ones\n    // O(NlogN) or O(log(N))\
    \ if sort is using quick sort (O(NlogN))\n    std::sort(arr.begin(), arr.end(),\
    \ count_ones);\n\n    // Sort base on decimal value\n    // O(N^2) or O(NlogN)\
    \ if sort is using quick sort (O(NlogN))\n    std::vector<long> ret;\n    for\
    \ (auto i : arr) ret.push_back(i);\n    std::sort(ret.begin(), ret.end(), decimal_value);\n\
    \    return ret;", "    long long int sum = 0;\n    for (long long int i: arr)\n\
    \        sum += i;\n    \n    if (sum % 2)\n        std::sort(arr.begin(), arr.end());\n\
    \    else\n        std::sort(arr.begin(), arr.end(), [](long long int a, long\
    \ long int b){\n            long long int a_ones = 0, b_ones = 0;\n          \
    \  for (int i = 0; i < 64; ++i) {\n                bool is_a = (a & 1LL) != 0;\n\
    \                bool is_b = (b & 1LL) != 0;\n                if (is_a != is_b)\n\
    \                    return is_a - is_b;\n                a_ones <<= 1;\n    \
    \            b_ones <<= 1;\n                a >>= 1;\n                b >>= 1;\n\
    \            }\n            if (a_ones == b_ones)\n                return a <\
    \ b;\n            return a_ones < b_ones;\n        });\n    \n    return arr;",
  "    std::vector<long> res = {0};\n    for (auto it = arr.rbegin(); it != arr.rend();\
    \ ++it) {\n        long count = 0;\n        while (it != arr.rend() && count <\
    \ it->bits()) {\n            ++count;\n            ++it;\n        }\n        if\
    \ (count == it->bits()) {\n            ++count;\n            while (it != arr.rend()\
    \ && count < it->bits()) {\n                ++count;\n                ++it;\n\
    \            }\n        }\n        res.push_back((long)count);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    assert(arr.size() > 0);\n    int length\
    \ = arr.size();\n    // Write your code here\n    std::sort(arr.begin(), arr.end(),\
    \ [](int l, int r){\n        return l != 0 && r != 0 && l < r;\n    });\n    for\
    \ (int i = 0; i < length; i++) {\n        if(arr[i] != 0){\n            std::swap(arr[i],\
    \ arr[arr[i]-1]);\n        }\n    }\n    return arr;", "    long sum = 0;\n  \
    \  long temp;\n    for (int i = 0; i < arr.size(); ++i) {\n        temp = arr[i];\n\
    \        sum += temp;\n        arr[i] = sum;\n    }\n    long counter = 0;\n \
    \   long max = -1;\n    for (int i = 0; i < arr.size(); ++i) {\n        temp =\
    \ arr[i];\n        arr[i] = counter;\n        if (temp > max) {\n            max\
    \ = temp;\n        }\n        counter += temp;\n    }\n    for (int i = 0; i <\
    \ arr.size(); ++i) {\n        arr[i] = arr[i] - max;\n    }\n    return arr;",
  "    // sort arr in descending order for same number of ones\n    // use binary_search\
    \ to find index i\n    int i = 0;\n    int last = arr.size() - 1;\n    int numOnes\
    \ = 0;\n    int numOnesLast = 0;\n    while (i < last) {\n        numOnes = arr[i++]\
    \ == 1 ? numOnes + 1 : 0;\n        numOnesLast = arr[last] == 1 ? numOnesLast\
    \ + 1 : 0;\n        if (numOnes == numOnesLast)\n            std::swap(arr[last],\
    \ arr[i]);\n        else\n            i++;\n    }\n    // sort arr in descending\
    \ order for different number of ones\n    // use sort with a custom comparator\n\
    \    arr.erase(std::unique(arr.begin(), arr.end()), arr.end());\n    return arr;",
  "    long long int power = 0;\n    long long int counter = 0;\n    for (long long\
    \ int i : arr) {\n        counter += i;\n        power = counter * 2;\n    }\n\
    \    std::vector<long> ans;\n    long long int temp = 0;\n    long long int power2\
    \ = 0;\n    for (long long int i : arr) {\n        counter += i;\n        power2\
    \ = counter * 2;\n        if (counter <= 1) {\n            temp = i;\n       \
    \ } else {\n            temp = -(power2 - power);\n        }\n        power =\
    \ power2;\n        ans.push_back(temp);\n    }\n    return ans;", "    long temp\
    \ = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1)\
    \ {\n            temp++;\n        }\n    }\n    long count = 0;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] == 1) {\n            count++;\n\
    \        }\n    }\n\n    std::vector<long> arr2 = arr;\n    bool flag = false;\n\
    \    for (long i = 0; i < arr2.size(); i++) {\n        if (arr2[i] != 0) {\n \
    \           if (count == 1) {\n                flag = true;\n                while\
    \ (arr2[i] != 1) {\n                    arr2[i] = 0;\n                    i++;\n\
    \                }\n                arr2[i] = 0;\n            } else if (flag)\
    \ {\n                for (long j = 0; j < arr2[i]; j++) {\n                  \
    \  arr2[i] = 0;\n                    i++;\n                }\n               \
    \ arr2[i] = 0;\n                flag = false;\n            } else {\n        \
    \        arr2[i] = 0;\n                flag = true;\n            }\n        }\n\
    \    }\n    return arr2;", "    std::sort(arr.begin(), arr.end(), [](int a, int\
    \ b) { return (a & b) < 0; });\n    int count = 0, sum = 0;\n    for (auto& el\
    \ : arr) {\n        sum += el;\n        count += el == 1;\n    }\n    return std::vector<long>({sum\
    \ / count, sum % count});", "    long ones = 0L;\n    long d = 0L;\n    std::transform(arr.begin(),\
    \ arr.end(), std::back_inserter(ones), [](long x) {\n        return std::count_bits(x)\
    \ ? 1L - 1L * ones : x; }\n    );\n    for (auto i : arr) {\n        d += i;\n\
    \    }\n    long r = d;\n    std::transform(arr.begin(), arr.end(), arr.begin(),\
    \ [](long x) {\n        long y = std::count_bits(x) ? 1L - 1L * ones : x;\n  \
    \      return r - y;\n    });\n    return arr;", "    std::vector<long> res(arr.size());\n\
    \    std::iota(res.begin(), res.end(), 0);\n    auto it = res.begin();\n    for\
    \ (long k = 1; k * 2 <= arr.size(); k *= 2) {\n        for (auto i : arr) {\n\
    \            std::advance(it, i);\n            long j = 0;\n            long x\
    \ = it;\n            while (x != 0) {\n                if (x % 2 == 0) {\n   \
    \                 j++;\n                }\n                x /= 2;\n         \
    \   }\n            if (j > k) {\n                std::rotate(res.begin(), it,\
    \ res.end());\n                it = res.begin();\n                std::advance(it,\
    \ j);\n            }\n        }\n    }\n    return res;", "  std::vector<long>\
    \ new_arr;\n  long temp, count = 0;\n  for (long &it : arr) {\n    if (it == 0)\
    \ {\n      count++;\n    } else {\n      temp = count;\n      count = 1;\n   \
    \   while ((it & 1) == 1) {\n        count++;\n        it >>= 1;\n      }\n  \
    \    new_arr.push_back(temp * count);\n    }\n  }\n  return new_arr;", "    size_t\
    \ size = arr.size();\n    for (size_t i = 1; i < size; i++) {\n        if (arr[i]\
    \ != 1) {\n            long temp = arr[i];\n            arr[i] = arr[i-1];\n \
    \           arr[i-1] = temp;\n        }\n    }\n    return arr;", "    std::sort(arr.begin(),\
    \ arr.end(), [](long x, long y) -> bool {\n        long z = x ^ y;\n        if\
    \ (z == 0)\n            return true;\n        return (z >> 31) - (z >> 30);\n\
    \    });\n    return arr;", "  assert(arr.size() > 0);\n  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b){return (a % 2 == 0 && b % 2 == 0) ? a > b : a\
    \ < b;});\n  if (arr[0] % 2 == 0)\n    std::sort(arr.begin(), arr.end(), [](long\
    \ a, long b){return (a % 2 == 0) ? a < b : a > b;});\n  return arr;", "    assert(arr.size()\
    \ > 0);\n    auto len = arr.size();\n    std::vector<long> res(len);\n    long\
    \ long cur_val = 0;\n    for (long i = 0; i < len; i++) {\n        long cur_len\
    \ = i;\n        while (cur_len > 0) {\n            long cur_digit = arr[cur_len];\n\
    \            cur_val <<= 1;\n            cur_val |= (cur_digit & 1);\n       \
    \     --cur_len;\n            cur_digit >>= 1;\n        }\n        res[i] = cur_val;\n\
    \    }\n    std::sort(res.begin(), res.end(), [&](long i, long j) {\n        return\
    \ res[i] < res[j];\n    });\n    return res;", "\t// Write your code here\n\t\
    return arr;", "  std::sort(arr.begin(), arr.end(), [&arr](int lhs, int rhs) {\n\
    \    if (lhs == rhs)\n      return lhs;\n    return lhs * 2 + rhs * 2 > rhs *\
    \ 2 + lhs * 2 ? rhs : lhs;\n  });\n  return arr;", "    sort(arr.begin(), arr.end(),\
    \ [](const long& x, const long& y) {\n        return (x == 0) ? 1 : (x == y) ?\
    \ 0 : (x == -1) ? -1 : x > y;\n    });\n    return arr;", "    long ones = 0,\
    \ zeros = 0, temp = 0;\n    for (int i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] == 1) {\n            ones++;\n        } else {\n            zeros++;\n\
    \        }\n    }\n    if (ones > 0) {\n        ones = ones / 2;\n        temp\
    \ = ones;\n        while (temp > 0) {\n            arr[arr.size() - ones - 1]--;\n\
    \            arr.erase(arr.size() - ones);\n            temp--;\n            ones--;\n\
    \        }\n    }\n    if (zeros > 0) {\n        zeros = zeros / 2;\n        temp\
    \ = zeros;\n        while (temp > 0) {\n            arr[arr.size() - zeros - 1]--;\n\
    \            arr.erase(arr.size() - zeros);\n            temp--;\n           \
    \ zeros--;\n        }\n    }\n    for (int i = 0; i < arr.size(); i++) {\n   \
    \     if (arr[i] < 0) {\n            arr[i]--;\n        }\n    }\n    return arr;",
  "    int len = arr.size();\n    assert(len > 0);\n    // count number of ones\n\
    \    int cnt_ones = 0;\n    for (auto e: arr)\n        cnt_ones += __builtin_popcount(static_cast<int>(e));\n\
    \    // sort them based on their decimal value\n    std::vector<long> res;\n \
    \   for (int i = 0; i < len; i++)\n        cnt_ones = 0;\n        for (auto e:\
    \ arr) {\n            if (__builtin_popcount(static_cast<int>(e)) > 1)\n     \
    \           cnt_ones++;\n            else\n                break;\n        }\n\
    \        if (cnt_ones == 0)\n            cnt_ones = 1;\n        long max_val =\
    \ -1;\n        for (int j = 0; j < len; j++)\n            if (arr[j] > max_val)\n\
    \                max_val = arr[j];\n        long diff = max_val - arr[i];\n  \
    \      int cnt_negs = 0;\n        for (int j = 0; j < len; j++)\n            if\
    \ (arr[j] < 0)\n                cnt_negs++;\n        long diff_neg = cnt_negs\
    \ - arr[i];\n        res.push_back(arr[i] + diff);\n        res.push_back(arr[i]\
    \ - diff_neg);\n        // if cnt_ones > 1, we need to sort descending order\n\
    \        if (cnt_ones > 1)\n            res.push_back(arr[i] * -1);\n        assert(cnt_negs\
    \ == 0);\n        assert(cnt_ones == 1);\n        // print in ascending order\n\
    \        for (int k = 0; k < res.size() - 1; k++)\n            std::cout << res[k]\
    \ << ' ';\n        std::cout << res[res.size() - 1] << std::endl;\n    return\
    \ res;", "    std::vector<long> new_arr;\n    long total_ones = 0;\n    std::vector<long>\
    \ arr1 = arr;\n    for (auto i : arr) {\n        total_ones += i;\n    }\n   \
    \ for (auto i = 0; i < arr.size(); i++) {\n        bool found = false;\n     \
    \   long sum = 0;\n        for (auto j = 0; j < arr1.size(); j++) {\n        \
    \    sum += arr1[j];\n            if (sum == total_ones) {\n                arr1[j]\
    \ += 1;\n                found = true;\n                break;\n            }\n\
    \        }\n        if (!found) {\n            long count = 0;\n            sum\
    \ += 1;\n            for (auto j = 0; j < arr1.size(); j++) {\n              \
    \  if (arr1[j] >= sum) {\n                    count++;\n                }\n  \
    \          }\n            arr1.push_back((long)count);\n            arr1.push_back(sum);\n\
    \        }\n    }\n    for (auto i = 0; i < arr1.size(); i++) {\n        new_arr.push_back((long)i);\n\
    \        new_arr.push_back(arr1[i]);\n    }\n    std::sort(new_arr.begin(), new_arr.end());\n\
    \    return new_arr;", "    // Sorting array\n    int n = arr.size();\n    for\
    \ (int i = 0; i < n; i++) {\n        for (int j = 0; j < n - i - 1; j++) {\n \
    \           if (arr[j] & arr[j + 1]) {\n                std::swap(arr[j], arr[j\
    \ + 1]);\n            }\n        }\n    }\n    // Returning the sorted array\n\
    \    return arr;", "  assert(arr.size() > 0);\n  std::vector<bool> flags(arr.size());\n\
    \  std::vector<int> indexs(arr.size());\n  for (size_t i = 0; i < arr.size();\
    \ ++i) {\n    flags[i] = arr[i] == 1;\n    indexs[i] = i;\n  }\n  std::sort(indexs.begin(),\
    \ indexs.end(), [&arr](int i, int j) -> bool {\n    int k = arr[i];\n    if (k\
    \ > 0) {\n      k = arr[j];\n      j = i;\n    }\n    return k < 0;\n  });\n \
    \ for (int i = 0; i < arr.size(); ++i) {\n    int k = indexs[i];\n    arr[k] =\
    \ arr[indexs[i]];\n    arr[indexs[i]] = k;\n  }\n  return arr;", "    if (arr.size()\
    \ < 2)\n        return arr;\n    int max_bit = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        int sum_bits = 0;\n        int curr = arr[i];\n        while\
    \ (curr & 1)\n            sum_bits += 1;\n        max_bit = max(max_bit, sum_bits);\n\
    \    }\n    std::vector<long> new_arr;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        int sum_bits = 0;\n        int curr = arr[i];\n        while (curr\
    \ & 1)\n            sum_bits += 1;\n        new_arr.push_back(sum_bits);\n   \
    \ }\n    for (int i = 0; i < arr.size() - 1; i++) {\n        int min_val = std::numeric_limits<int>::max();\n\
    \        int min_idx = -1;\n        for (int j = 0; j < new_arr.size(); j++) {\n\
    \            int val = arr[i] - new_arr[j];\n            if (val < min_val) {\n\
    \                min_val = val;\n                min_idx = j;\n            }\n\
    \        }\n        if (min_idx != -1) {\n            new_arr.swap(min_idx, i\
    \ + 1);\n        }\n    }\n    return new_arr;", "  std::sort(arr.begin(), arr.end(),\
    \ [](long a, long b) {\n    int count_a_bits = (int)(a);\n    int count_b_bits\
    \ = (int)((unsigned long)b);\n    int min_count = std::min(count_a_bits, count_b_bits);\n\
    \    return min_count < 0;\n  });\n  return arr;", "    long long result = 0;\n\
    \    for (auto i : arr) {\n        assert(i > 0);\n        result += i;\n    }\n\
    \n    auto mod = result % 10;\n    if (mod < 2) {\n        std::sort(arr.begin(),\
    \ arr.end());\n    } else if (mod == 2) {\n        std::sort(arr.begin(), arr.end(),\
    \ [](long long a, long long b) { return a > b; });\n    } else {\n        std::sort(arr.begin(),\
    \ arr.end(), [](long long a, long long b) { return a < b; });\n    }\n    return\
    \ arr;", "    long long num = 0;\n    long long bin = 0;\n    long long dec =\
    \ 0, dec2 = 0, temp;\n    for (const auto &val : arr) {\n        num++;\n    \
    \    temp = val & 1;\n        bin += temp;\n        dec += temp;\n        temp\
    \ >>= 1;\n        dec += temp;\n        temp >>= 1;\n        dec += temp;\n  \
    \      dec2 = 0;\n        for (int i = 0; i < 8; i++) {\n            if (bin %\
    \ 2) {\n                dec2 += dec;\n            }\n            dec /= 2;\n \
    \           dec2 /= 2;\n        }\n        dec += dec2;\n        arr.push_back(num);\n\
    \    }\n    std::stable_sort(arr.begin(), arr.end(), [&arr](long long a, long\
    \ long b) -> bool {\n        return arr[a] < arr[b];\n    });\n    return arr;",
  "    long ans = 0, val = 1;\n    for (auto val : arr) {\n        ans += val * val;\n\
    \    }\n\n    // sort descending\n    std::sort(arr.begin(), arr.end(), [](long\
    \ a, long b) {\n        return b - a;\n    });\n\n    for (auto val : arr) {\n\
    \        val /= ans;\n    }\n    return arr;", "    // Write your code here\n\
    \    long int ones = 0;\n    long int zeros = 0;\n    long long int maxones =\
    \ 0;\n    long long int maxzeros = 0;\n    long long int onescount = 0;\n    long\
    \ long int zeroscount = 0;\n    long long int maxonescount = 0;\n    long long\
    \ int maxzeroscount = 0;\n    long long int onesvalue = 1;\n    long long int\
    \ zerosvalue = 1;\n    long long int maxonesvalue = 1;\n    long long int maxzerosvalue\
    \ = 1;\n    long long int maxonescount = 0;\n    long long int maxzeroscount =\
    \ 0;\n    int size = arr.size();\n    int i = 0, j = 0;\n    std::vector<long>\
    \ arr2;\n    while(i < size) {\n        if((arr[i] == 1)) {\n            onescount++;\n\
    \            onesvalue = onesvalue + arr[i];\n            if(ones > maxonescount)\
    \ {\n                maxonescount = ones;\n                maxonesvalue = onesvalue;\n\
    \            }\n            if(ones < maxonescount) {\n                arr2.push_back(maxonescount);\n\
    \            }\n            if(ones == maxonescount) {\n                arr2.push_back(onesvalue);\n\
    \            }\n        } else {\n            zeroscount++;\n            zerosvalue\
    \ = zerosvalue + arr[i];\n            if(zeros > maxzeroscount) {\n          \
    \      maxzeroscount = zeros;\n                maxzerosvalue = zerosvalue;\n \
    \           }\n            if(zeros < maxzeroscount) {\n                arr2.push_back(maxzeroscount);\n\
    \            }\n            if(zeros == maxzeroscount) {\n                arr2.push_back(zerosvalue);\n\
    \            }\n        }\n        i++;\n    }\n    if(onescount > maxonescount)\
    \ {\n        maxonescount = onescount;\n        maxonesvalue = onesvalue;\n  \
    \  }\n    if(zeroscount > maxzeroscount) {\n        maxzeroscount = zeroscount;\n\
    \        maxzerosvalue = zerosvalue;\n    }\n    if(onescount < maxonescount)\
    \ {\n        arr2.push_back(maxonescount);\n    }\n    if(zeroscount < maxzeroscount)\
    \ {\n        arr2.push_back(maxzeroscount);\n    }\n    arr2.insert(arr2.end(),\
    \ arr2.begin()+1, arr2.end());\n    arr2.insert(arr2.end(), arr2.begin()+1, arr2.end());\n\
    \    arr2.insert(arr2.end(), arr2.begin()+1, arr2.end());\n    arr2.insert(arr2.end(),\
    \ arr2.begin()+1, arr2.end());\n    arr2.insert(arr2.end(), arr2.begin()+1, arr2.end());\n\
    \    arr2.insert(arr2.end(), arr2.begin()+1, arr2.", "    std::sort(arr.begin(),\
    \ arr.end());\n    return arr;", "  int n = arr.size();\n  std::sort(arr.begin(),\
    \ arr.end(), [](long lhs, long rhs) {\n    return lhs <= rhs;\n  });\n  for (int\
    \ i = 0; i < n; i++) {\n    bool ones = arr[i] % 10;\n    if (ones) {\n      arr[i]\
    \ /= 10;\n    } else {\n      arr[i] = arr[i] + 9;\n    }\n  }\n  return arr;",
  "    long long t = 0;\n    long long ans = 0;\n    int cnt = 1;\n    for (long long\
    \ i = 0; i < arr.size(); ++i) {\n        while (cnt > 0) {\n            if (arr[i]\
    \ & 1) {\n                t = arr[i];\n                arr[i] = t;\n         \
    \       ans = t;\n            }\n            cnt >>= 1;\n        }\n        cnt\
    \ *= 2;\n    }\n    return arr;", "    long ret = 0;\n    for (long i : arr) {\n\
    \        ret += i;\n    }\n    std::sort(arr.begin(), arr.end(), [](long a, long\
    \ b) { return (a > b) - (a < b); });\n    return arr;", "    // Write your code\
    \ here.\n    long long int sum = 0;\n    for (long long int i : arr)\n       \
    \ sum += i;\n    std::vector<long> ret;\n    for (long long int i : arr)\n   \
    \     if (sum >= i)\n            ret.push_back(i);\n    return ret;", "    std::vector<long>\
    \ res = arr;\n    std::sort(res.begin(), res.end(), [](long a, long b) {\n   \
    \     return __builtin_popcount(a) < __builtin_popcount(b);\n    });\n    return\
    \ res;", "    long res = 0;\n    for(auto it = arr.begin(); it != arr.end(); ++it)\
    \ {\n        res = (res * 10) + (*it);\n    }\n    std::sort(arr.begin(), arr.end(),\
    \ [](long a, long b) {\n        return a > b;\n    });\n    for(auto it = arr.begin();\
    \ it != arr.end(); ++it) {\n        long mod = res - (*it);\n        if(mod !=\
    \ 0) {\n            long temp = mod;\n            mod = temp - 10 + it;\n    \
    \        return it - mod;\n        }\n    }\n    return arr;", "    // Write your\
    \ code here\n    return 0;", "\tlong n = arr.size();\n\tstd::sort(arr.begin(),\
    \ arr.end());\n\tstd::vector<long> res(n, 0);\n\tint start = 0;\n\tint end = 1;\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] == 1) {\n\t\t\tres[start++] =\
    \ arr[i];\n\t\t\tend++;\n\t\t} else {\n\t\t\tif (arr[i] == 0) {\n\t\t\t\tres[end-1]++;\n\
    \t\t\t} else {\n\t\t\t\tassert(arr[i] > 0);\n\t\t\t\tres[start] = arr[i];\n\t\t\
    \t\tstart++;\n\t\t\t\tend++;\n\t\t\t}\n\t\t}\n\t}\n\treturn res;", "    std::sort(arr.begin(),\
    \ arr.end());\n    return arr;", "    sort(arr.begin(), arr.end());\n    return\
    \ arr;", "    // Your code here\n    std::sort(arr.begin(), arr.end(), [](long\
    \ a, long b) { return a < b; });\n\n    int count = 0;\n    for (long elem : arr)\
    \ {\n        if (count == 0) {\n            std::cout << elem;\n            count++;\n\
    \        } else {\n            if (elem % 2 == 0) {\n                std::cout\
    \ << (elem % 10);\n                count--;\n            } else {\n          \
    \      std::cout << (elem % 10);\n                count++;\n            }\n  \
    \      }\n    }\n\n    return arr;", "    assert(arr.size() > 0);\n    int n =\
    \ arr.size();\n    int min_bit = INT_MAX;\n    std::vector<long> sorted_arr;\n\
    \    long cur_val = arr[0];\n    for (size_t i = 1; i < n; i++) {\n        if\
    \ (arr[i] < cur_val) {\n            sorted_arr.push_back (cur_val);\n        \
    \    cur_val = arr[i];\n        } else {\n            int cur_bits = __builtin_popcount(cur_val);\n\
    \            if (cur_bits < min_bit) {\n                min_bit = cur_bits;\n\
    \                std::vector<long> new_arr;\n                new_arr.assign(sorted_arr.begin(),\
    \ sorted_arr.begin() + min_bit);\n                new_arr.push_back (cur_val);\n\
    \                sorted_arr.swap(new_arr);\n            } else if (cur_bits ==\
    \ min_bit) {\n                sorted_arr.push_back (cur_val);\n            } else\
    \ if (cur_bits > min_bit) {\n                int offset = cur_bits - min_bit;\n\
    \                int j = 0;\n                std::vector<long> new_arr;\n    \
    \            new_arr.assign(sorted_arr.begin(), sorted_arr.begin() + offset);\n\
    \                new_arr.push_back (cur_val);\n                for (size_t k =\
    \ offset + 1; k < min_bit; k++) {\n                    new_arr.push_back (arr[j]);\n\
    \                    j++;\n                }\n                sorted_arr.swap(new_arr);\n\
    \            }\n        }\n    }\n    return sorted_arr;", "    assert(arr.size()\
    \ != 0);\n    std::vector<long> reversed_arr;\n    reversed_arr.reserve(arr.size());\n\
    \    for (long i : arr) {\n        reversed_arr.push_back(reversed(i));\n    }\n\
    \    std::sort(reversed_arr.begin(), reversed_arr.end());\n    return reversed_arr;",
  "\tassert(arr.size() != 0);\n\tlong size = arr.size();\n\tstd::sort(arr.begin(),\
    \ arr.end(), [&](long a, long b)\n\t{\n\t\tlong res = a;\n\t\tif (b != 0) {\n\t\
    \t\twhile (true) {\n\t\t\t\tif (b & 1ULL) {\n\t\t\t\t\tif (a > res) {\n\t\t\t\t\
    \t\tres = a;\n\t\t\t\t\t}\n\t\t\t\t\ta <<= 1;\n\t\t\t\t} else {\n\t\t\t\t\ta >>=\
    \ 1;\n\t\t\t\t\tif (a == 0) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tif (a\
    \ > res) {\n\t\t\t\t\t\tres = a;\n\t\t\t\t\t}\n\t\t\t\t\ta <<= 1;\n\t\t\t\t}\n\
    \t\t\t\tb >>= 1;\n\t\t\t}\n\t\t}\n\t\treturn res;\n\t});\n\treturn arr;", "  \
    \  std::vector<long> sorted_arr(arr.size());\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sorted_arr[i] = arr[i];\n    }\n    std::sort(sorted_arr.begin(),\
    \ sorted_arr.end(), std::greater<long>());\n    return sorted_arr;", "    assert(arr.size()\
    \ > 0);\n    if (arr.size() <= 1) return arr;\n\n    // Get binary representation:\n\
    \    // arr[0] - number of 1s, arr[1] - number of 0s\n    long n_1 = arr[0], n_0\
    \ = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        n_1 += arr[i] & 1;\n\
    \        n_0 += (arr[i] | 1);\n    }\n\n    // Sort by n_1:\n    // - if n_1 >\
    \ n_0, swap with n_1\n    // - if n_1 < n_0, swap with n_0\n    if (n_1 > n_0)\
    \ std::swap(n_1, n_0);\n    if (n_1 < n_0) std::swap(n_1, n_0);\n\n    // Sort\
    \ by n_0 in descending order:\n    // - if n_0 < n_1, swap with n_0\n    // -\
    \ if n_0 > n_1, swap with n_1\n    if (n_0 < n_1) std::swap(n_0, n_1);\n    if\
    \ (n_0 > n_1) std::swap(n_0, n_1);\n\n    // Convert back to decimal representation:\n\
    \    std::vector<long> res(arr.size());\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        res[i] = n_1 * 2 + n_0;\n        n_1 /= 2;\n        n_0 %= 2;\n \
    \   }\n    return res;", "  int size = arr.size();\n  std::vector<bool> sorted_bit(size,\
    \ false);\n  for (int i = 0; i < size; i++) {\n    sorted_bit[i] = (arr[i] ==\
    \ 1);\n  }\n  long max_count = 0;\n  for (int i = size - 1; i >= 0; i--) {\n \
    \   if (sorted_bit[i]) {\n      max_count++;\n      for (int j = size; j > i;\
    \ j--) {\n        sorted_bit[j] = sorted_bit[j - 1];\n      }\n      sorted_bit[i]\
    \ = false;\n    }\n  }\n  std::vector<long> res;\n  for (int i = 0; i < size;\
    \ i++) {\n    if (sorted_bit[i]) {\n      res.push_back(arr[i]);\n    }\n  }\n\
    \  return res;", "    // Write your code here.\n    return arr;", "    std::sort(arr.begin(),\
    \ arr.end(), [](const long& lhs, const long& rhs) {\n        return lhs % 2 ==\
    \ rhs % 2;\n    });\n    return arr;", "    // Fill vector with all ones\n   \
    \ std::vector<long> v(arr.begin(), arr.end());\n    // Make copy and count number\
    \ of ones\n    auto count = std::count(v.begin(), v.end(), 1);\n    // Iterate\
    \ over array, if more than 0, subtract 1 from it, else increment counter\n   \
    \ for (auto i : arr) {\n        auto j = i - 1;\n        if (j < 0) {\n      \
    \      j = j + count;\n        }\n        arr[j] = arr[i];\n    }\n    sort(arr.begin(),\
    \ arr.end());\n    return arr;", "  std::sort(arr.begin(), arr.end(), [](const\
    \ long &a, const long &b) { return (a ^ b) < 0; });\n\n  long prev_ones = 0;\n\
    \  for (size_t i = 0; i < arr.size(); i++)\n    if (arr[i] ^ prev_ones)\n    \
    \  prev_ones = arr[i] ^ prev_ones;\n    else\n      arr.insert(arr.begin() + i,\
    \ prev_ones);\n\n  return arr;", "    assert(arr.size() != 0);\n    std::vector<long>\
    \ res;\n    long cur = 0;\n    for (auto el: arr) {\n        while (el != 0) {\n\
    \            std::swap(cur, el);\n            el >>= 1;\n        }\n        res.push_back(cur);\n\
    \        cur = 0;\n    }\n    return res;", "    long max_ones = 0, max_num =\
    \ 0, min_num = 0, max_int = 0, min_int = 999999999;\n    for (long i : arr) {\n\
    \        long bin = bitset<64>(i).to_string().size();\n        if (bin > max_ones)\
    \ {\n            max_ones = bin;\n        }\n        if (bin > max_num) {\n  \
    \          max_num = bin;\n        }\n        if (bin < min_num) {\n         \
    \   min_num = bin;\n        }\n        long dec = i;\n        long res = 0;\n\
    \        while (dec > 0) {\n            if (dec % 2 == 0) {\n                res++;\n\
    \            }\n            dec /= 2;\n        }\n        if (res > max_int) {\n\
    \            max_int = res;\n        }\n        if (res < min_int) {\n       \
    \     min_int = res;\n        }\n    }\n    long diff = max_int - min_int;\n \
    \   if (diff > 0) {\n        for (long i = max_int; i < min_int; i++) {\n    \
    \        arr.push_back(i);\n        }\n    }\n    std::sort(arr.begin(), arr.end());\n\
    \    return arr;", "  std::sort(arr.begin(), arr.end(), [](long i, long j) {\n\
    \    auto bit_i = (i>>31) & 1;\n    auto bit_j = (j>>31) & 1;\n    return bit_i\
    \ ^ bit_j;\n  });\n  std::reverse(arr.begin(), arr.end());\n  return arr;", " \
    \   // Write your code here\n    std::sort(arr.begin(), arr.end(), [arr](int a,\
    \ int b) -> bool {\n        return count_ones(a)==count_ones(b) ? a < b : count_ones(a)\
    \ < count_ones(b);\n    });\n    return arr;", "    long long int num_ones = 0;\n\
    \    long long int decimal_val = 0;\n    int max_val = 0;\n    for (auto el: arr)\
    \ {\n        decimal_val = (long long)(el);\n        if (decimal_val > max_val)\n\
    \            max_val = decimal_val;\n        num_ones = decimal_val ^ 1;\n   \
    \     if (num_ones > 0) {\n            decimal_val -= num_ones * 1;\n        \
    \    arr.insert(arr.begin(), decimal_val);\n        }\n    }\n    return arr;",
  "    size_t count = 0;\n    std::vector<long> temp;\n    for (auto el : arr) {\n\
    \        count += el;\n    }\n    std::vector<long> ans;\n    for (auto el : arr)\
    \ {\n        if (el >= 0) {\n            temp.push_back(el);\n        } else {\n\
    \            int res = count%10;\n            ans.push_back(temp[res]);\n    \
    \        temp.erase(temp.begin() + res);\n            count -= el;\n        }\n\
    \    }\n    ans.push_back(count);\n    return ans;", "  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b){\n    return count_ones(static_cast<long long>(a))\
    \ - count_ones(static_cast<long long>(b));\n  });\n  return arr;", "  sort(arr.begin(),\
    \ arr.end(), [&](int i, int j) {\n    int count = std::count(arr.begin() + i,\
    \ arr.begin() + j + 1, 1); // count 1 from i to j\n    int base = std::count(arr.begin()\
    \ + i, arr.begin() + j + 1, 0); // count 0 from i to j\n    return count * 10\
    \ + base;\n  });\n  return arr;", "  if(arr.size() == 0) return arr;\n  int one_cnt\
    \ = 0, cmp = arr.front();\n  for (int i = 1; i < arr.size(); ++i) {\n    if (arr[i]\
    \ != cmp) {\n      one_cnt = 1;\n      cmp = arr[i];\n    }\n    else {\n    \
    \  one_cnt++;\n    }\n  }\n  int cmp_res = cmp;\n  long num = 0, val = 0;\n  for(int\
    \ i = 0; i < arr.size(); ++i) {\n    if(one_cnt == 0) {\n      if(arr[i] == cmp_res)\
    \ val++;\n      else val = cmp_res - val;\n    }\n    else {\n      long rem =\
    \ one_cnt - val;\n      one_cnt = val;\n      if(rem == 0) val++;\n      else\n\
    \        val = (rem + val) / 2;\n    }\n    arr[i] = val;\n  }\n  return arr;",
  "  // O(1)\n  for (auto &elem : arr) {\n    // O(1)\n    elem = 0;\n    // O(1)\n\
    \    while ((elem & 1) == 1) {\n      elem >>= 1;\n    }\n    // O(log n)\n  \
    \  std::cout << elem << std::endl;\n  }\n  // O(n)\n  std::reverse(arr.begin(),\
    \ arr.end());\n  return arr;", "    std::sort(arr.begin(), arr.end(), [] (long\
    \ a, long b) {\n        return bincount(a.to_string().begin(), a.to_string().end(),\
    \ 1) + bincount(b.to_string().begin(), b.to_string().end(), 1) - 1;\n    });\n\
    \    sort(arr.begin(), arr.end(), [] (long a, long b) {\n        return a - b;\n\
    \    });\n    return arr;", "    std::vector<long> sorted_arr(arr.size());\n \
    \   long temp = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ != 0) {\n            temp = arr[i];\n            sorted_arr[i] = 1;\n      \
    \      while (arr[i] != 0) {\n                sorted_arr[i] += arr[i] % 10;\n\
    \                arr[i] /= 10;\n            }\n            if (temp < sorted_arr[i])\
    \ {\n                temp = sorted_arr[i];\n            }\n        }\n    }\n\
    \    return sorted_arr;", '    // Your code goes here', "    // TODO: Complete\
    \ this function.\n    std::vector<long> out;\n    long cnt;\n    long max_cnt\
    \ = 0;\n    bool done = false;\n    long pos = 0;\n    for (size_t i = 0; i <\
    \ arr.size(); ++i) {\n        cnt = bin(arr[i])[0] - '0';\n        if (cnt > max_cnt)\
    \ {\n            max_cnt = cnt;\n            pos = i;\n        }\n    }\n    out.push_back((long)pos);\n\
    \    for (size_t i = 0; i < arr.size(); ++i) {\n        cnt = bin(arr[i])[0] -\
    \ '0';\n        if (cnt == max_cnt) {\n            out.push_back(arr[i]);\n  \
    \          arr[i] = arr[(long)out.size() - 1];\n            arr[(long)out.size()\
    \ - 1] = 0;\n            arr[(long)out.size() - 2] = 0;\n            done = true;\n\
    \        }\n    }\n    out.push_back((long)arr[(long)out.size() - 1]);\n    while\
    \ (!done) {\n        out.push_back((long)arr[(long)out.size() - 1]);\n       \
    \ for (size_t i = 0; i < arr.size(); ++i) {\n            cnt = bin(arr[i])[0]\
    \ - '0';\n            if (cnt == max_cnt) {\n                arr[i] = arr[(long)out.size()\
    \ - 1];\n                arr[(long)out.size() - 1] = 0;\n                arr[(long)out.size()\
    \ - 2] = 0;\n                done = true;\n            }\n        }\n    }\n \
    \   return out;", "    // sort based on number of 1s\n    auto count_ones = [&arr]()\
    \ {\n        long sum = 0;\n        for (int i=0; i<arr.size(); i++)\n       \
    \     sum += arr[i];\n        return sum;\n    };\n    auto is_one = [&arr](int\
    \ i) { return arr[i] == 1; };\n    auto cmp = [](int i, int j) {\n        return\
    \ count_ones(arr[i]) < count_ones(arr[j]) ? -1 : count_ones(arr[j]) > count_ones(arr[i])\
    \ ? 1 : 0;\n    };\n    \n    std::sort(arr.begin(), arr.end(), is_one);\n   \
    \ std::sort(arr.begin(), arr.end(), cmp);\n\n    return arr;", "    std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) -> bool {\n        return std::bitset<32>(a).count()\
    \ < std::bitset<32>(b).count();\n    });\n    return arr;", "    std::sort(arr.begin(),\
    \ arr.end(), [&](int a, int b) {\n        return count_ones(a, arr) < count_ones(b,\
    \ arr);\n    });\n    return arr;", "    bool swapped;\n    for (size_t i = 0;\
    \ i < arr.size(); i++) {\n        swapped = false;\n        for (size_t j = i;\
    \ j < arr.size(); j++) {\n            if (arr[j] == 0)\n                break;\n\
    \            if (arr[j] & arr[i]) break;\n            if (arr[j] >> arr[i]) break;\n\
    \            swap(arr[i], arr[j]);\n            swapped = true;\n        }\n \
    \   }\n    return arr;", "    int sum = 0;\n    for(long i: arr)\n        sum\
    \ += i;\n    assert(sum >= 0);\n    long ans = -1;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        int cnt = 0;\n        for(int j = 0; j < arr.size(); j++) {\n\
    \            if(arr[j] == arr[i])\n                cnt++;\n        }\n       \
    \ ans = (arr[i] + cnt*(arr[i]-sum))%sum;\n    }\n    return std::vector<long>({ans,\
    \ ans, ans, ans});", "    // Write your code here\n    int n = arr.size();\n \
    \   long long dp[n] = {0};\n    long long ans = 0;\n    dp[0] = 0;\n    for(int\
    \ i=1; i<n; ++i){\n        long long curr = arr[i]*dp[i - 1];\n        dp[i] =\
    \ std::max(dp[i], curr);\n        if(dp[i] == 0){\n            ans = curr;\n \
    \       }\n    }\n    std::vector<long> res(arr.size());\n    for(int i = 0; i<\
    \ arr.size(); ++i){\n        long long curr = arr[i]*dp[n - 1];\n        res[i]\
    \ = curr;\n    }\n    return res;", "    long n = arr.size();\n    assert(arr.size()\
    \ >= 1);\n    long k = 0;\n    long val = 0;\n    // Sort the array in descending\
    \ order first\n    for (long i = 0; i < n - 1; i++) {\n        val = arr[i];\n\
    \        k = i;\n        while (i < n - 1 && arr[k + 1] == val) k++;\n       \
    \ if (k > i) {\n            std::swap(arr[i], arr[k]);\n        }\n    }\n   \
    \ // After sorting, get the count of ones in binary representation.\n    long\
    \ count = 0, curr = arr[0];\n    for (long i = 0; i < n; i++) {\n        if (arr[i]\
    \ != curr) {\n            curr = arr[i];\n            count++;\n        }\n  \
    \  }\n    // Sort the array in ascending order based on the number of ones.\n\
    \    std::sort(arr.begin(), arr.end(), [&](long i1, long i2) { return count -\
    \ arr[i1] < arr[i2] ? 1 : -1; });\n    return arr;", "    assert(arr.size() >\
    \ 0);\n    // create a vector for result\n    std::vector<long> res(arr.size());\n\
    \n    // sort from 0 to arr.size() - 1 using std::sort and lambdas\n    sort(arr.begin(),\
    \ arr.end(), [](long a, long b) { return (a & b) == (a | b); });\n\n    // count\
    \ number of ones in each position and store result in a vector\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        long cnt = 0;\n        for (long j =\
    \ 0; j < arr[i].size(); j++) {\n            if (arr[i][j] == 1)\n            \
    \    cnt++;\n        }\n        res[i] = cnt;\n    }\n    return res;", "    long\
    \ total = 0;\n    std::vector<long> ret_vec;\n    for (auto i : arr) {\n     \
    \   total += i;\n    }\n    bool swapped;\n    do {\n        swapped = false;\n\
    \        for (size_t i = 0; i < arr.size(); i++) {\n            long current_total\
    \ = total - arr[i];\n            if (current_total < 0) {\n                swap(arr[i],\
    \ arr[i] * -1);\n                swapped++;\n            }\n        }\n    } while\
    \ (swapped);\n    ret_vec.swap(arr);\n    return ret_vec;", "    // your code\
    \ goes here\n    std::sort(arr.begin(), arr.end(), [&arr](int a, int b) {\n  \
    \      int onesA = 0, onesB = 0;\n        for(int i = a; i != 0; i >>= 1)\n  \
    \          onesA++;\n        for(int i = b; i != 0; i >>= 1)\n            onesB++;\n\
    \        return onesA - onesB;\n    });\n    return arr;", "  int num_ones = 0;\n\
    \  for (auto const &i : arr) {\n    num_ones += (i & 1L);\n  }\n  // Sort by number\
    \ of ones\n  std::sort(arr.begin(), arr.end(), [&num_ones](const auto &a, const\
    \ auto &b) -> bool {\n    return num_ones == (b & 1L);\n  });\n  // Sort by decimal\
    \ representation\n  std::sort(arr.begin(), arr.end(), [&num_ones](const auto &a,\
    \ const auto &b) -> bool {\n    // Convert the number to a decimal representation\
    \ as a string\n    std::string str(a);\n    std::stringstream ss_str;\n    ss_str\
    \ << std::dec << a;\n    std::string str_b(ss_str.str());\n    // Check if the\
    \ numbers are equal\n    return str_b == (std::dec << b);\n  });\n  return arr;",
  "\tstd::vector<long> arr1(arr.begin(), arr.end());\n\tstd::sort(arr1.begin(), arr1.end(),\
    \ [&](long l, long r) -> bool {\n\t\treturn std::count(arr1.begin(), arr1.end(),\
    \ l) > std::count(arr1.begin(), arr1.end(), r);\n\t});\n\treturn arr1;", "   \
    \ // Write your code here\n    long ones = 0;\n    long result = 0;\n    for (long\
    \ i : arr) {\n        ones += (long)i;\n    }\n    for (long i : arr) {\n    \
    \    if (i == 1) {\n            result += ones;\n            ones = 0;\n     \
    \   }\n    }\n    for (long i : arr) {\n        if (i == 0) {\n            result\
    \ -= ones;\n            ones = 0;\n        }\n    }\n    return arr;", "    //\
    \ Write your code here\n    return arr;", "    std::vector<long> output(arr.size());\n\
    \    int index = 0;\n    bool flag = false;\n    while (index < arr.size()) {\n\
    \        if (arr[index] == 0) {\n            if (flag)\n                output.emplace_back(arr[index]);\n\
    \            flag = true;\n            continue;\n        }\n        if (flag)\
    \ {\n            output.emplace_back(arr[index]);\n            flag = false;\n\
    \            continue;\n        }\n        long num = arr[index];\n        long\
    \ temp = 1;\n        for (int i = index; i < arr.size(); i++) {\n            if\
    \ (arr[i] != 0) {\n                temp *= arr[i];\n            }\n        }\n\
    \        if (temp > num) {\n            output.emplace_back(arr[index]);\n   \
    \         flag = true;\n        } else if (temp < num) {\n            output.emplace_back(arr[index]);\n\
    \            flag = false;\n        } else {\n            index++;\n        }\n\
    \    }\n    return output;", "    long long n = arr.size();\n    // sort the array\
    \ in ascending order by their binary representation length\n    long long len\
    \ = 0, ones = 0, d = 0;\n    for (long long i = 0; i < n; ++i) {\n        len\
    \ += (long long) arr[i];\n        ones += (long long) arr[i] >> 31;\n        d\
    \    += (long long) (arr[i] >> 63);\n    }\n    if (len > ones)\n        return\
    \ arr;\n    else if (len == ones)\n        return sort_array(sort_array(arr));\n\
    \    else\n        return std::make_pair(d, sort_array(std::stable_partition(arr.begin(),\
    \ arr.end(), [&](long long i) {\n            return (long long) arr[i] - (long\
    \ long) arr[i] >> 31;\n        })));", "  // your code goes here\n  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) -> bool {\n    return a > b ? true : a == b ?\
    \ false : false;\n  });\n  return arr;", "    auto it = arr.begin();\n    long\
    \ n = *it;\n    if (n == 0) return arr;\n    ++it;\n    long m = *it;\n    while\
    \ (n != m) {\n        if (n < m) std::swap(n, m);\n        else {\n          \
    \  while (n != m) ++it;\n            std::swap(m, n);\n        }\n    }\n    while\
    \ (it != arr.end()) ++it;\n    return arr;", "    assert(arr.size() > 0);\n  \
    \  // find number of ones\n    auto f = [](const long& x) -> bool {\n        return\
    \ x != 0;\n    };\n    long n_ones = 0;\n    std::for_each(arr.begin(), arr.end(),\
    \ f);\n    for (long num : arr) {\n        n_ones += num;\n    }\n    std::vector<long>\
    \ res(arr.size());\n    // find number of zeros\n    f = [&n_ones](const long&\
    \ x) -> bool {\n        return n_ones == x;\n    };\n    std::for_each(arr.begin(),\
    \ arr.end(), f);\n    // sort the array by number of ones\n    for (long i = 0;\
    \ i < n_ones; i++) {\n        // if there are more than n_ones\n        if (i\
    \ + n_ones > arr.size()) {\n            int pos = arr.size();\n            while\
    \ (i - n_ones <= 0) {\n                res.push_back(arr[pos--]);\n          \
    \  }\n            while (i - n_ones < arr.size()) {\n                res[pos++]\
    \ = arr[--i];\n            }\n        } else {\n            int pos = 0;\n   \
    \         while (i - n_ones <= 0) {\n                res[pos++] = arr[pos--];\n\
    \            }\n            while (i - n_ones < arr.size()) {\n              \
    \  res[pos++] = arr[--i];\n            }\n        }\n    }\n    return res;",
  "    // Complete this function.\n    // You can think of two ways to implement this\
    \ function:\n    // 1. using sort() function of vector\n    // 2. using std::sort()\
    \ function of STL\n    // The second way is recommended because of its efficiency.\n\
    \    // The function takes a comparator as parameter.\n    // The comparator is\
    \ called for each element in the array. The element\n    // is passed as a parameter\
    \ to the comparator, and the comparator returns\n    // 1 if the first element\
    \ should come before the second, 0 otherwise.\n    // After the call, the array\
    \ is sorted according to the order of the\n    // comparator. The function should\
    \ return arr as an output.\n    return arr;", "  // Write your code here\n  long\
    \ sum = 0;\n  long bin = 0;\n  std::vector<long> result;\n  result.push_back(arr[0]);\n\
    \  for (long i : arr) \n  {\n    bin = i;\n    while (bin)\n    {\n      sum +=\
    \ bin % 2;\n      bin /= 2;\n    }\n    result.push_back(sum);\n    sum = 0;\n\
    \  }\n  return result;", "\tlong ret = 0;\n\tfor (auto x : arr)\n\t\tret |= (x\
    \ & 1);\n\tstd::sort(arr.begin(), arr.end(), [&](auto a, auto b) { \n\t\tauto\
    \ y = ((ret * a) + b) % 10;\n\t\tauto x = ((ret * b) + a) % 10;\n\t\treturn x\
    \ != y;\n\t});\n\treturn arr;", "    if (arr.size() == 0)\n        return arr;\n\
    \    std::vector<long> ret(arr.size());\n    for (long &i : arr) {\n        long\
    \ res = 0;\n        while (i) {\n            res += i & 1;\n            i >>=\
    \ 1;\n        }\n        ret[res - 1] = -i;\n    }\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;", "  long ans = 0;\n  long temp;\n  for (int i\
    \ = 0; i < arr.size(); i++) {\n    temp = arr[i] % 2;\n    ans += temp * pow(10,\
    \ i);\n    arr[i] = arr[i] / 2;\n    arr[i] = arr[i] * temp;\n  }\n  ans = ans\
    \ - arr[0];\n  for (int i = 0; i < arr.size(); i++) {\n    arr[i] = arr[i] + ans;\n\
    \  }\n  return arr;", "    std::vector<long> result(arr.size());\n    std::transform(arr.begin(),\
    \ arr.end(), result.begin(), [](auto value) {\n        long binary = reinterpret_cast<long>(value);\n\
    \        long ones = __builtin_popcount(binary);\n        return ones * value;\n\
    \    });\n    std::sort(result.begin(), result.end());\n    std::transform(result.begin(),\
    \ result.end(), result.begin(), [](auto value) {\n        return value / 2;\n\
    \    });\n    return result;", "    int n = arr.size();\n    std::vector<long>\
    \ res(n);\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n       \
    \ for (int j = 0; j < n; j++) {\n            if ((arr[j] & 1) == 1) {\n      \
    \          count++;\n            }\n        }\n        res[i] = count;\n    }\n\
    \    int m = res[0];\n    for (int i = 1; i < res.size(); i++) {\n        if (res[i]\
    \ < m) {\n            m = res[i];\n        }\n    }\n    for (int i = 0; i < n;\
    \ i++) {\n        std::swap(res[i], res[m % n]);\n        m--;\n    }\n    return\
    \ res;", "    assert(arr.size() >= 1);\n    // Sort based on number of ones in\
    \ their binary representation in ascending order.\n    long long ones = 0;\n \
    \   long long tens = 0;\n    long long hundreds = 0;\n    long long thousands\
    \ = 0;\n    for (auto ele : arr)\n        ones += ele;\n    for (auto ele : arr)\n\
    \        ten += ele;\n    for (auto ele : arr)\n        hundreds += ele;\n   \
    \ for (auto ele : arr)\n        thousands += ele;\n    if (ones <= tens) {\n \
    \       if (ones <= hundreds) {\n            if (ones <= thousands) {\n      \
    \          std::swap(ones, tens);\n                std::swap(hundreds, thousands);\n\
    \                std::swap(ones, tens);\n            } else {\n              \
    \  std::swap(ones, hundreds);\n                std::swap(ones, thousands);\n \
    \           }\n        } else {\n            std::swap(ones, hundreds);\n    \
    \    }\n    } else {\n        std::swap(ones, tens);\n    }\n    return arr;",
  "    // Write your code here\n    long int binary_arr[8], count_of_ones[8];\n  \
    \  for (long int i = 0; i < arr.size(); i++) {\n        long int val = arr[i];\n\
    \        for (long int j = 0; j < 8; j++) {\n            binary_arr[j] = val &\
    \ 1;\n            count_of_ones[j] += 1;\n            val >>= 1;\n        }\n\
    \    }\n    for (long int i = 0; i < 8; i++) {\n        while (count_of_ones[i]\
    \ > 0) {\n            binary_arr[i] ^= 1;\n            count_of_ones[i] -= 1;\n\
    \        }\n    }\n    long int result[8];\n    for (long int i = 0; i < 8; i++)\
    \ {\n        result[i] = binary_arr[i];\n    }\n    std::sort(result, result +\
    \ 8);\n    std::vector<long> ans;\n    for (long int i = 0; i < 8; i++) {\n  \
    \      ans.push_back(arr[i + 8]);\n    }\n    return ans;", "    // Complete this\
    \ function\n    long int sum = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        sum += arr[i];\n    }\n    long int count = (long) sum;\n    for (int\
    \ i = 0; i < arr.size() - 1; i++) {\n        count -= arr[i];\n    }\n    count\
    \ += 1;\n    int i = 0;\n    int j = 0;\n    std::vector<long> temp;\n    while\
    \ (i < arr.size()) {\n        while (j < arr.size() && count >= arr[j]) {\n  \
    \          count -= arr[j];\n            ++j;\n        }\n        temp = arr[i];\n\
    \        arr[i] = arr[j];\n        arr[j] = temp;\n        i++;\n        j++;\n\
    \    }\n    return arr;", "    long long num_ones = 0, temp = 0;\n    for (int\
    \ i = 0; i < arr.size(); ++i) {\n        num_ones += (arr[i] >> 31);\n       \
    \ temp += arr[i] & 1;\n    }\n    std::vector<long> result;\n    int left_index\
    \ = 0;\n    for (int i = 0; i < arr.size(); ++i) {\n        num_ones = std::min(num_ones,\
    \ arr[i] >> 31);\n        result.insert(result.end(), (arr[i] & 1) * (temp - num_ones\
    \ + left_index));\n        temp += arr[i] & 1;\n        left_index++;\n    }\n\
    \    return result;", "  // assert(arr.size() == arr.size());\n  for (std::size_t\
    \ i = 0; i < arr.size(); ++i) {\n    while (arr[i] != 0 && arr[i] < arr[i - 1])\
    \ {\n      arr[i] = arr[i] << 1;\n      arr[i + 1] = arr[i + 1] << 1;\n      arr[i\
    \ + 2] = arr[i + 2] << 1;\n      arr[i + 3] = arr[i + 3] << 1;\n      arr[i +\
    \ 4] = arr[i + 4] << 1;\n      arr[i + 5] = arr[i + 5] << 1;\n      arr[i + 6]\
    \ = arr[i + 6] << 1;\n    }\n  }\n  std::sort(arr.begin(), arr.end());\n  return\
    \ arr;", "    auto compare = [] (long a, long b) { return a > b; };\n    std::sort(arr.begin(),\
    \ arr.end(), compare);\n    return arr;", "    // write your code here\n    int\
    \ m = arr.size();\n    for (int i = 0; i < m; ++i) {\n        long cur = arr[i];\n\
    \        int count = 0;\n        while (cur > 0) {\n            cur /= 2;\n  \
    \          ++count;\n        }\n        long tmp = count * 10 + cur;\n       \
    \ if (tmp > 0) {\n            std::swap(arr[i], arr[tmp]);\n        }\n    }\n\
    \    std::vector<long> out;\n    std::sort(arr.begin(), arr.end(), [](int x, int\
    \ y) {\n        long x_bin = (long long)((x % 2) ? ((long long)x - 1L) : (long\
    \ long)x);\n        long y_bin = (long long)((y % 2) ? ((long long)y - 1L) : (long\
    \ long)y);\n        long x_ones = x_bin / 2;\n        long y_ones = y_bin / 2;\n\
    \        int xx = x_ones * x_ones;\n        int yy = yy * y_ones;\n        int\
    \ a = xx - yy;\n        int b = xx + yy;\n        return a > b ? -1 : a;\n   \
    \ });\n    for (auto i : arr) {\n        out.push_back(i);\n    }\n    return\
    \ out;", "    std::vector<long> res(arr.size());\n    // First sort the array\
    \ in ascending order according to number of ones in their binary representation.\n\
    \    for (auto it = arr.begin(); it != arr.end(); ++it) {\n        auto i = __builtin_popcount(*it);\
    \ // Get the number of 1s in the binary representation of 'it'.\n        res[i]\
    \ = *it;\n    }\n\n    // Next sort them in ascending order according to their\
    \ decimal value.\n    std::stable_sort(res.begin(), res.end(), [](long a, long\
    \ b) { return a > b; });\n    return res;", "    // Complete this function\n \
    \   long long int res = 0; \n    long long int max = 0;\n    long long int min\
    \ = 0;\n    for (long long int i : arr) \n    {\n        \n        if(i==0) \n\
    \        {\n            max = i;\n        }\n        else \n        {\n      \
    \      if (i<min) \n            {\n                min = i;\n            }\n \
    \           if (i>max) \n            {\n                max = i;\n           \
    \ }\n        }\n    }\n    for(long long int i : arr)\n    {\n        \n     \
    \   if(i==max) \n        {\n            res = i;\n            break;\n       \
    \ }\n    }\n    for(long long int i : arr)\n    {\n        \n        if(i==min)\
    \ \n        {\n            res = i;\n            break;\n        }\n    }\n  \
    \  return arr;", "    int n = arr.size();\n    std::vector<long> res(n, 0);\n\
    \    int k = 0;\n    for (int i = 0; i < n; i++) {\n        while (k < n && arr[k]\
    \ == 1) {\n            k++;\n        }\n        if (k == n) {\n            break;\n\
    \        }\n        int j = n;\n        while (j > k) {\n            if (res[j\
    \ - 1] > res[j]) {\n                int temp = res[j - 1];\n                res[j\
    \ - 1] = res[j];\n                res[j] = temp;\n            }\n            j--;\n\
    \        }\n        res[k] = arr[i];\n    }\n    return res;", "    for (auto\
    \ i : arr) {\n        if (i) {\n            i = __builtin_popcount(i);\n     \
    \       arr.erase(std::remove_if(arr.begin(), arr.end(), [&i](long j) {\n    \
    \            return __builtin_popcount(j) < i;\n            }), arr.end());\n\
    \            arr.insert(std::lower_bound(arr.begin(), arr.end(), (long long)i),\
    \ i);\n        }\n    }\n    return arr;", "    // Write your code here\n    long\
    \ long bitCount = 0;\n    for (long long i : arr) {\n        bitCount += __builtin_popcount(i);\n\
    \    }\n    long long two = 1;\n    while (bitCount) {\n        if (bitCount %\
    \ 2 == 1) {\n            two *= 2;\n        }\n        bitCount >>= 1;\n    }\n\
    \    auto maxLength = std::max_element(arr.begin(), arr.end());\n    if (maxLength\
    \ - arr.begin() == 1) {\n        for (long long i : arr) {\n            if (i\
    \ == 1) {\n                auto position = std::upper_bound(arr.begin(), arr.end(),\
    \ 2);\n                std::iter_swap(position, arr.end() - 1);\n            }\n\
    \        }\n    } else {\n        long long base = 1;\n        for (long long\
    \ i : arr) {\n            if (i == 1) {\n                auto position = std::upper_bound(arr.begin(),\
    \ arr.end(), 2);\n                auto temp = arr[position];\n               \
    \ arr[position] = arr[maxLength];\n                arr[maxLength] = temp;\n  \
    \          }\n        }\n    }\n    long long base = 1;\n    for (long long i\
    \ : arr) {\n        if (i == 1) {\n            arr[arr.size() - 1] *= base;\n\
    \        }\n        base <<= 1;\n    }\n    return arr;", "    std::sort(arr.begin(),\
    \ arr.end(), [](const long a, const long b) -> bool {\n        if (a == 0 || b\
    \ == 0) {\n            return a == b;\n        }\n        return a & -b;\n   \
    \ });\n    return arr;", "    // Write your solution here.\n    long sum = 0;\n\
    \    for (auto x: arr) {\n        sum += x;\n    }\n    long res = sum % 10;\n\
    \    while (sum > 0) {\n        sum += 10;\n        res += sum % 10;\n    }\n\
    \    long t = 0;\n    for (auto x: arr) {\n        t = (x + res) % 10;\n    }\n\
    \    return arr;", "    sort(arr.begin(), arr.end());\n    return arr;", "   \
    \ std::vector<long> result;\n    long n = arr.size();\n    for (long i = 0; i\
    \ < n; i++) {\n        if (arr[i] == 1) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    for (long i = 0; i < n; i++) {\n        if (arr[i] == 0)\
    \ {\n            result.push_back(arr[i]);\n        }\n    }\n    long temp, i,\
    \ j;\n    for (long i = n - 1; i > 0; i--) {\n        for (j = i - 1; j >= 0;\
    \ j--) {\n            if (arr[j] < arr[j + 1]) {\n                temp = arr[j\
    \ + 1];\n                arr[j + 1] = arr[j];\n                arr[j] = temp;\n\
    \            }\n        }\n    }\n    for (i = 0; i < n; i++) {\n        result.push_back(arr[i]);\n\
    \    }\n    return result;", "    std::sort(arr.begin(), arr.end(), [](long a,\
    \ long b) { return __builtin_popcount(a) > __builtin_popcount(b); });\n    return\
    \ arr;", "    assert(arr.size() > 0);\n    std::vector<long> ret(arr.begin(),\
    \ arr.end());\n    std::sort(ret.begin(), ret.end(), [&arr](long i, long j) {\
    \ return arr[i] < arr[j] && arr[i] == arr[j] ? i < j : arr[i] < arr[j] ? i : j;\
    \ });\n    return ret;", "    std::vector<long> vec;\n    for (long elem : arr)\
    \ {\n        long n = 1;\n        while (elem > 0) {\n            elem >>= 1;\n\
    \            n *= 2;\n        }\n        vec.push_back(n);\n    }\n    long len\
    \ = vec.size();\n    for (int i = 0; i < len - 1; i++) {\n        for (int j =\
    \ i + 1; j < len; j++) {\n            if (vec[i] > vec[j]) {\n               \
    \ long temp = vec[i];\n                vec[i] = vec[j];\n                vec[j]\
    \ = temp;\n            }\n        }\n    }\n    return vec;", '    // TODO: Complete
    this function', "    std::vector<long> results;\n    int count = 0;\n    for (long\
    \ i : arr) {\n        int num = i;\n        while (num > 0) {\n            int\
    \ digit = num % 10;\n            num /= 10;\n            if (digit != 0) {\n \
    \               results[count++] = digit;\n            }\n        }\n    }\n \
    \   int ones = 0;\n    for (long i : arr) {\n        int num = i;\n        while\
    \ (num > 0) {\n            int digit = num % 10;\n            num /= 10;\n   \
    \         if (digit != 0) {\n                ones++;\n            }\n        }\n\
    \    }\n    int index = 0;\n    for (int i = 1; i < ones; i++) {\n        if (results[index]\
    \ > results[index + 1]) {\n            long temp = results[index];\n         \
    \   results[index] = results[index + 1];\n            results[index + 1] = temp;\n\
    \        }\n        index++;\n    }\n    return results;", "  std::vector<long>\
    \ sorted_arr;\n  for (auto itr = arr.begin(); itr != arr.end(); ++itr) {\n   \
    \ auto bin = itr->to_string();\n    auto bin_num = std::stoul(bin, nullptr, 2);\n\
    \    auto ones = std::count(bin.begin(), bin.end(), '1');\n    if (ones < std::numeric_limits<long>::digits)\
    \ {\n      sorted_arr.emplace_back(bin_num);\n    } else {\n      sorted_arr.emplace_back(std::abs(bin_num));\n\
    \    }\n  }\n  std::sort(sorted_arr.begin(), sorted_arr.end());\n  return sorted_arr;",
  '    // Complete this function', "    long long int zeros = 0;\n    long long int\
    \ ones = 0;\n    for (auto i : arr) {\n        zeros += i;\n        ones += (i\
    \ & 1);\n    }\n    bool swapped;\n    while (!swapped) {\n        swapped = false;\n\
    \        for (long long int i = 1; i < arr.size(); i++) {\n            long long\
    \ int tmp = arr[i];\n            if (arr[i] - arr[i - 1] > 1) {\n            \
    \    arr[i] = arr[i - 1];\n                arr[i-1] = tmp;\n                swapped\
    \ = true;\n            }\n        }\n    }\n    std::vector<long> result;\n  \
    \  for (auto i : arr) {\n        result.push_back((i & 1) ? -(i >> 1) + (i & 1)\
    \ : i >> 1);\n    }\n    sort(result.begin(), result.end());\n    return result;",
  "    // implement your sorting algorithm here\n    for(int i = 0; i<arr.size();\
    \ ++i){\n        auto res = 0;\n        for(int j = i; j<arr.size(); ++j){\n \
    \           if(arr[j]==1)\n                ++res;\n        }\n        if(res>0){\n\
    \            auto ones = std::to_string(i);\n            auto tens = std::to_string(res);\n\
    \            std::swap(ones, tens);\n            std::swap(arr[i], ones);\n  \
    \      }\n    }\n    return arr;", "    // Write your code here\n    long sum\
    \ = 0;\n    for (long i : arr) sum += i;\n    for (long i : arr) sum += (sum >\
    \ i);\n    if (sum > 0) {\n        for (long i : arr) sum += (sum > i) ? i : sum\
    \ - i;\n    }\n    long temp = 0, count = 0;\n    for (long i : arr) {\n     \
    \   if (i == 0) {\n            temp++;\n        } else if (temp == 0) {\n    \
    \        count += i;\n        } else {\n            count += count > i ? i : count\
    \ - i;\n        }\n    }\n    count = (count > sum) ? count : sum;\n    std::vector<long>\
    \ ans;\n    ans.push_back(count);\n    return ans;", "  sort(arr.begin(), arr.end());\n\
    \  std::reverse(arr.begin(), arr.end());\n  return arr;", '    // Your code here',
  "    std::sort(arr.begin(), arr.end(), [](long a, long b) -> bool {\n        long\
    \ bina = to_bin(a);\n        long binb = to_bin(b);\n        // if both have same\
    \ number of 1s, compare based on the number of 0s\n        if (bina == binb) return\
    \ (to_dec(a) - to_dec(b)) < 0;\n        // if number of ones in a's binary representation\
    \ is less than that of b's\n        if (bina.size() < binb.size()) return bina.size()\
    \ < binb.size();\n        // if number of ones in a's binary representation is\
    \ greater than that of b's\n        if (bina.size() > binb.size()) return bina.size()\
    \ > binb.size();\n        // if number of ones in a's binary representation is\
    \ equal to the size of b's\n        return bina == binb;\n    });\n    return\
    \ arr;", "  // Initialize result array\n  std::vector<long> res(arr.size());\n\
    \  // Initialize count array which store the number of ones in binary rep\n  std::unordered_map<long,\
    \ std::size_t> count_arr;\n  count_arr[0] = std::count_if(arr.begin(), arr.end(),\
    \ [](long val) { return val == 0; }) * 2;\n  // Initialize count array which store\
    \ the number of ones in decimal rep\n  std::unordered_map<long, std::size_t> count_dec(arr.size()\
    \ - 1);\n  for (size_t i = 1; i < arr.size(); i++) {\n    count_dec[i - 1] =\n\
    \        std::count_if(\n            arr.begin(), arr.end(), [](long val) { return\
    \ val == 0 || val == i; }) * 2;\n  }\n  // Sort and copy result array\n  for (size_t\
    \ i = 0; i < res.size(); i++) {\n    auto it = count_arr.find(arr[i]);\n    if\
    \ (it != count_arr.end()) {\n      res[i] = count_arr[arr[i]];\n    } else {\n\
    \      res[i] = count_dec[arr[i] - 1];\n    }\n  }\n  return res;", "    std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b){\n        return __builtin_popcount(a) - __builtin_popcount(b);\n\
    \    });\n    if (arr.size() > 1)\n        std::sort(arr.begin(), arr.end(), [](long\
    \ a, long b){\n            return a - b;\n        });\n    return arr;", "   \
    \ std::vector<long> sorted_arr(arr.size());\n    for(auto i : arr)\n        if(i\
    \ != 0)\n            for(auto j = i+1; j < arr.size(); j++)\n                for(int\
    \ k = 0; k < 32; k++)\n                    if(arr[j] & (1ULL<<k))\n          \
    \              break;\n            if(j-i+1 == 1)\n                sorted_arr[i]\
    \ = arr[j];\n            else if(j-i+1 < sorted_arr.size()) {\n              \
    \  if(arr[j] > sorted_arr[sorted_arr.size()-1])\n                    std::swap(sorted_arr[sorted_arr.size()-1],\
    \ sorted_arr[j]);\n                else if(arr[j] < sorted_arr[i])\n         \
    \           std::swap(sorted_arr[i], sorted_arr[j]);\n            }\n    return\
    \ sorted_arr;", "  // write your code here\n  std::vector<long> result;\n  long\
    \ sum = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    sum += arr[i];\n\
    \    result.push_back(sum);\n  }\n  std::sort(result.begin(), result.end());\n\
    \  for (size_t i = 0; i < arr.size(); i++) {\n    result.erase(std::remove(result.begin(),\
    \ result.end(), arr[i]), result.end());\n  }\n  return result;", "  long long\
    \ result = 0;\n  long long bits = 0;\n  for (auto i : arr) {\n    result += i;\n\
    \    bits += i & 1;\n  }\n  std::vector<long> resultVec;\n  long long pow = 1;\n\
    \  while (bits != 0) {\n    if (bits % 2 == 1) {\n      result += pow;\n    }\n\
    \    bits = bits / 2;\n    pow *= 2;\n  }\n  resultVec.push_back(result);\n  return\
    \ resultVec;", "    // do your work here\n    return 0;", "  std::sort(arr.begin(),\
    \ arr.end(), [](long a, long b) {\n    return count_ones(b) < count_ones(a);\n\
    \  });\n  std::sort(arr.begin(), arr.end(), [](long a, long b) {\n    return a\
    \ < b;\n  });\n  return arr;", "    // TODO\n    return arr;", "\tfor (int i =\
    \ 0; i < arr.size(); i++) {\n\t\tlong temp = 0;\n\t\tfor (int j = 0; j < i; j++)\n\
    \t\t\tif (arr[j] == 1)\n\t\t\t\ttemp++;\n\t\tfor (int j = i; j < arr.size(); j++)\n\
    \t\t\tif (arr[j] == 0)\n\t\t\t\ttemp--;\n\t\tif (temp > 0)\n\t\t\tswap(arr[i],\
    \ arr[j]);\n\t}\n\treturn arr;", "    // Your code goes here\n    long long int\
    \ res,max;\n    int temp;\n    max=0;\n    for(int i=0;i<arr.size();i++){\n  \
    \      res=0;\n        for(int j=i;j<arr.size();j++){\n            if (arr[j]%2==1)\n\
    \                res+=arr[j];\n        }\n        if(res>max)\n            max=res;\n\
    \        res=0;\n        for(int j=i;j<arr.size();j++){\n            res+=arr[j];\n\
    \        }\n        if(res>max)\n            max=res;\n    }\n    res=0;\n   \
    \ for(int i=0;i<arr.size();i++){\n        res+=arr[i];\n    }\n    for(int i=0;i<arr.size();i++){\n\
    \        temp=arr[i]/max;\n        arr[i]=max*temp;\n    }\n    for(int i=0;i<arr.size();i++){\n\
    \        temp=arr[i]/max;\n        arr[i]=max*temp;\n    }\n    return arr;",
  "    std::vector<long> sorted_array;\n    for (auto &i : arr) {\n        sorted_array.push_back(i);\n\
    \    }\n    std::sort(sorted_array.begin(), sorted_array.end(), std::greater<long>());\n\
    \    long decimal_value = 0;\n    for (auto &i : sorted_array) {\n        decimal_value\
    \ += i;\n    }\n    for (auto &i : sorted_array) {\n        decimal_value -= i;\n\
    \    }\n    return sorted_array;", "    assert(arr.size() > 0);\n    bool flag\
    \ = true;\n    while (flag) {\n        flag = false;\n        for (long i = 0;\
    \ i < arr.size(); i++) {\n            if ((arr[i] & 1LL) != 0LL) {\n         \
    \       std::swap(arr[i], arr[i + 1]);\n                flag = true;\n       \
    \     }\n        }\n    }\n    return arr;", "    assert(arr.size() >= 1);\n \
    \   long long sum = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        sum\
    \ = sum + arr[i];\n    }\n    long long ones = 0;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        ones = ones + arr[i];\n        if (ones % 2 == 0) {\n      \
    \      arr = std::sort(arr.begin(), arr.end());\n            break;\n        }\n\
    \    }\n    return arr;", "  int n = arr.size();\n  std::sort(arr.begin(), arr.end(),\
    \ [&arr](int a, int b) {\n    return count_ones(arr[a]) - count_ones(arr[b]);\n\
    \  });\n  for (int i = 0; i < n; i++) {\n    auto index = i;\n    arr[index] =\
    \ arr[i];\n  }\n  return arr;", "    // Your code goes here\n    std::vector<long>\
    \ arr2(arr.size());\n    int ones = 0;\n    for (int i = 0; i < arr.size(); i++)\n\
    \    {\n        if(arr[i]>0){\n            ones++;\n            arr2[i]=arr[i];\n\
    \        }else{\n            if(ones>0){\n                ones--;\n          \
    \      arr2[i]=ones;\n            }\n        }\n    }\n    return arr2;", "  \
    \  long ans = INT_MIN;\n    long count = 1;\n    for (long &elem : arr) {\n  \
    \      ans = ans * 10 + (elem == 0 ? 0 : count++);\n    }\n\n    std::vector<long>\
    \ rev_arr;\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        int j = arr.size()\
    \ - 1 - i;\n        if (arr[j] == 0 && arr[j] != 1) {\n            long pos =\
    \ ans / arr[j];\n            rev_arr.push_back(pos);\n            ans %= arr[j];\n\
    \        }\n    }\n\n    rev_arr.push_back(ans);\n    return rev_arr;", "    //\
    \ Your code here\n    auto arr_size = arr.size();\n    std::vector<int> nums(arr_size);\n\
    \    int i = 0;\n    for (auto num: arr) {\n        nums[i] = num;\n        i++;\n\
    \    }\n    std::sort(nums.begin(), nums.end(), [](const long &a, const long &b){\n\
    \        return std::count(a.to_ulong(), a.to_ulong()+8) < std::count(b.to_ulong(),\
    \ b.to_ulong()+8);\n    });\n    std::vector<long> new_nums(arr_size);\n    for\
    \ (auto n: nums) {\n        new_nums[i] = n;\n        i++;\n    }\n    return\
    \ new_nums;", "  std::sort(arr.begin(), arr.end(), [&arr](int a, int b) { return\
    \ count_ones(arr) < count_ones(std::vector<long>({a, b, a + 1, b + 1}).begin());\
    \ });\n  return arr;", "  // Sort array by number of 1's\n  std::sort(arr.begin(),\
    \ arr.end(), [](int a, int b) { return (a & 1) == (b & 1); });\n  // Reverse array\
    \ if number of 1's = 0 at last position\n  if (arr.back() & 1) arr.pop_back();\n\
    \  return arr;", "    std::vector<long> res;\n    auto it = arr.begin();\n   \
    \ auto end = arr.end();\n    for (; it != end; ++it) {\n        int num = *it;\n\
    \        for (; ((num & 1) == 0 && it != end); ++it) {\n            num >>= 1;\n\
    \        }\n        res.push_back(num);\n    }\n    return res;", '    ', "  \
    \  int size = arr.size();\n    for (int i = 0; i < size; ++i) {\n        for (int\
    \ j = size - 1; j > i; j--) {\n            int k = 0;\n            while (arr[j]\
    \ & 1) k++;\n            if (k > i) {\n                int tmp = arr[j];\n   \
    \             arr[j] = arr[i];\n                arr[i] = tmp;\n            }\n\
    \        }\n    }\n    return arr;", "    // do your best here\n    return arr;",
  "    long long ones = 0;\n    for (auto i : arr) {\n        ones += i;\n    }\n\
    \    std::vector<long> temp(arr.size());\n    for (auto i : arr) {\n        temp[i\
    \ / ones] ^= 1 << (i % ones);\n    }\n    return temp;", "  int sz = arr.size();\n\
    \  std::sort(arr.begin(), arr.end(), [&](long a, long b) -> bool {\n    if (a\
    \ > b) {\n      return false;\n    }\n    if (a == 0) {\n      return true;\n\
    \    }\n    // a > 0 and b > 0\n    int a_cnt = 0;\n    while ((a & 1) == 0) {\n\
    \      a >>= 1;\n      a_cnt += 1;\n    }\n    int b_cnt = 0;\n    while ((b &\
    \ 1) == 0) {\n      b >>= 1;\n      b_cnt += 1;\n    }\n    if (a_cnt > b_cnt)\
    \ {\n      return true;\n    }\n    return false;\n  });\n  return arr;", "  std::sort(arr.begin(),\
    \ arr.end(), [](long x, long y){return ((int)x - (int)y)==1;});\n  arr.erase(\n\
    \      std::remove_if(arr.begin(), arr.end(), [](long i){return i<0;}),\n    \
    \  arr.end()\n  );\n  std::stable_sort(arr.begin(), arr.end(), [](long x, long\
    \ y){return (long)x - (long)y});\n  arr.erase(\n      std::remove_if(arr.begin(),\
    \ arr.end(), [](long i){return i<0;}),\n      arr.end()\n  );\n  return arr;",
  "    std::vector<long> sorted_array;\n    long ones_cnt = 0;\n    for (long i :\
    \ arr) {\n        ones_cnt += i;\n    }\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        long val = arr[i];\n        while (val > 0) {\n            long mod\
    \ = val % 10;\n            val /= 10;\n            if (ones_cnt > mod) {\n   \
    \             sorted_array.push_back(ones_cnt - mod);\n            } else {\n\
    \                sorted_array.push_back(mod);\n            }\n            ones_cnt\
    \ -= mod;\n        }\n    }\n    std::sort(arr.begin(), arr.end());\n    sorted_array.insert(sorted_array.begin(),\
    \ 0);\n    return sorted_array;", "  std::vector<long> ans;\n  for (int i = 0;\
    \ i < arr.size(); i++) {\n    int num_ones = 0;\n    for (int j = i; j > -1; j--)\
    \ {\n      if (arr[j] & 1) {\n        num_ones++;\n      }\n      if (num_ones\
    \ == 1) {\n        ans.insert(ans.begin() + j, arr[j]);\n        arr[j] = 0;\n\
    \      }\n      if (num_ones == 2) {\n        ans.insert(ans.begin() + j, arr[j]);\n\
    \        arr[j] = 0;\n        i++;\n        break;\n      }\n    }\n  }\n  return\
    \ ans;", "    assert(arr.size() > 0);\n    // Your code goes here\n    std::vector<long>\
    \ sorted_arr;\n    long max_value = 0;\n    for (long i: arr) {\n        if (i\
    \ == 0) continue;\n        max_value = max(max_value, i);\n    }\n    if (max_value\
    \ > 0) {\n        sorted_arr.reserve(max_value);\n        for (long i: arr) {\n\
    \            if (i == 0) continue;\n            if (max_value == 0) {\n      \
    \          sorted_arr.push_back(i);\n                continue;\n            }\n\
    \            if (max_value == 1) {\n                sorted_arr.push_back(max_value);\n\
    \                continue;\n            }\n            sorted_arr.push_back(max_value\
    \ - i);\n        }\n    }\n    return sorted_arr;", "    int n = arr.size();\n\
    \    std::vector<long> temp;\n    long ones = 0;\n    long max = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        // Number of ones in arr[i]'s binary representation.\n\
    \        ones = __builtin_popcount(arr[i]);\n        if (max < ones) {\n     \
    \       max = ones;\n            temp = arr;\n        }\n        temp[i] = arr[i];\n\
    \    }\n    long reverseMax = max;\n    long reverseOnes = ones;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        // Number of ones in arr[i]'s binary representation.\n\
    \        ones = __builtin_popcount(arr[i]);\n        if (reverseMax < ones) {\n\
    \            reverseMax = ones;\n            reverseOnes = ones;\n        }\n\
    \        long val = arr[i];\n        if (val == 0) {\n            reverseOnes--;\n\
    \        } else {\n            reverseMax--;\n            arr[i] = reverseOnes;\n\
    \        }\n    }\n    return temp;", "    long n = arr.size();\n    for (long\
    \ i = 0; i < n; i++)\n    {\n        long s = __builtin_popcount(arr[i]);\n  \
    \      long d = arr[i] ? __builtin_popcount(arr[i]) - s : n;\n        if (d >\
    \ n)\n            d = n;\n        if (d > 1)\n        {\n            std::sort(arr.begin()\
    \ + i, arr.begin() + i + d);\n        }\n    }\n    return arr;", "    long result\
    \ = 0;\n    for (const auto& num : arr) {\n        result += (num & 1);\n    }\n\
    \    // if result is not zero, sort array in descending order according to\n \
    \   // number of ones in binary representation of result\n    if (result != 0)\
    \ {\n        std::vector<long> result_binary(result.bit_length() + 1);\n     \
    \   result_binary[0] = result;\n        for (int i = 0; i < result_binary.size()\
    \ - 1; ++i) {\n            for (int j = i + 1; j < result_binary.size(); ++j)\
    \ {\n                if (result_binary[i] > result_binary[j]) {\n            \
    \        long temp = result_binary[i];\n                    result_binary[i] =\
    \ result_binary[j];\n                    result_binary[j] = temp;\n          \
    \      }\n            }\n        }\n        return result_binary;\n    }\n   \
    \ return arr;", "    assert(arr.size() != 0);\n    std::vector<long> res(arr.size());\n\
    \    std::iota(res.begin(), res.end(), 0);\n    std::sort(res.begin(), res.end(),\
    \ [](long l, long r){return arr[l] <= arr[r];});\n    return res;", "    // Write\
    \ your code here\n    if (arr.size() < 2) {\n        return arr;\n    }\n    int\
    \ ones = 0, decimal = 0;\n    for (int i = 0; i < arr.size(); i++) {\n       \
    \ ones += arr[i];\n    }\n    for (int i = 0; i < arr.size() - 1; i++) {\n   \
    \     int d = arr[i];\n        while (d > 0) {\n            decimal = (decimal\
    \ + d % 10) * ones;\n            d = d / 10;\n        }\n    }\n    for (int i\
    \ = 0; i < arr.size() - 1; i++) {\n        int d = arr[i];\n        while (d >\
    \ 0) {\n            decimal -= d % 10;\n            d = d / 10;\n        }\n \
    \   }\n    std::vector<long> sorted_arr;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        sorted_arr.push_back(arr[i]);\n    }\n    for (int i = arr.size()\
    \ - 1; i >= 0; i--) {\n        sorted_arr.push_back(arr[i]);\n    }\n    sorted_arr.resize(sorted_arr.size()\
    \ / 2);\n    return sorted_arr;", "    // 1. Convert to string\n    std::string\
    \ binary = to_string(arr);\n\n    // 2. Sort\n    sort(binary.begin(), binary.end());\n\
    \n    // 3. Convert back to number\n    std::vector<long> sorted = from_string(binary);\n\
    \n    // 4. Return the result vector\n    return sorted;", "    std::sort(arr.begin(),\
    \ arr.end(), [&arr](int x, int y){\n        int xBits = x;\n        int yBits\
    \ = y;\n        if (xBits < yBits)\n            return -1;\n        else if (xBits\
    \ == yBits)\n            return 0;\n        else\n            return 1;\n    });\n\
    \    return arr;", "    // write your code here\n    bool ones[8] = {0, 0, 0,\
    \ 0, 0, 0, 0};\n    long max_num = 0, curr_num = 0;\n    long i = 0, j = 0;\n\
    \    int n_ones = 0;\n    for (int i = 0; i < (int)arr.size(); i++) {\n      \
    \  curr_num = arr[i];\n        while (curr_num > 0) {\n            ones[curr_num\
    \ % 10] += 1;\n            curr_num /= 10;\n        }\n    }\n    for (i = 0;\
    \ i < 8; i++) {\n        n_ones += ones[i];\n    }\n    if (n_ones > 0) {\n  \
    \      long min_ones = 0, max_ones = 0;\n        for (int i = 0; i < 8; i++) {\n\
    \            if (ones[i] > max_ones) {\n                max_ones = ones[i];\n\
    \            }\n            if (ones[i] < min_ones) {\n                min_ones\
    \ = ones[i];\n            }\n        }\n        if (max_ones < min_ones) {\n \
    \           max_num = max_ones;\n            for (i = 0; i < 8; i++) {\n     \
    \           ones[i] -= max_ones;\n            }\n        }\n        if (max_ones\
    \ > min_ones) {\n            min_num = min_ones;\n            for (i = 0; i <\
    \ 8; i++) {\n                ones[i] += max_ones;\n            }\n        }\n\
    \        for (i = 1; i < 8; i++) {\n            while (ones[i] > ones[i - 1])\
    \ {\n                ones[i] -= ones[i - 1];\n            }\n        }\n    }\n\
    \    // vector<int> ans(arr.size());\n    // for (size_t i = 0; i < arr.size();\
    \ i++) {\n    //     ans[i] = arr[i];\n    // }\n    // std::sort(ans.begin(),\
    \ ans.end());\n    long ans[8] = {0};\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        ans[arr[i]]++;\n    }\n    for (i = 0; i < 8; i++) {\n     \
    \   while (ans[i] > ans[i - 1]) {\n            ans[i] -= ans[i - 1];\n       \
    \ }\n    }\n    for (i = arr.size() - 1; i >= 0; i--) {\n        arr[i] = ans[arr[i]];\n\
    \    }\n    return arr;", "    // Solution here\n    // Implement this function\n\
    \    \n    \n    \n    \n    ", "    // Write your code here\n    long long int\
    \ size = 0;\n    for (long long int i = 0; i < arr.size(); i++) {\n        size\
    \ += arr[i];\n    }\n    std::vector<long> results;\n    std::vector<long> temp(size);\n\
    \    for (long long int i = 0; i < arr.size(); i++) {\n        temp[arr[i]] =\
    \ i + 1;\n    }\n    long long int ans = 0;\n    for (int i = 0; i < size; i++)\
    \ {\n        ans += temp[i];\n    }\n    for (int i = 0; i < size; i++) {\n  \
    \      if (temp[i] != i) {\n            temp[i] = temp[i] - 1;\n            long\
    \ long int curr = temp[i];\n            temp[curr] = i;\n            while (curr\
    \ != i) {\n                temp[temp[curr]] = temp[curr] - 1;\n              \
    \  curr = temp[curr];\n                temp[curr] = i;\n            }\n      \
    \  }\n    }\n    long long int res = 0;\n    for (int i = 0; i < size; i++) {\n\
    \        res += temp[i];\n    }\n    for (int i = 0; i < size; i++) {\n      \
    \  if (temp[i] != i) {\n            temp[i] = temp[i] - 1;\n            long long\
    \ int curr = temp[i];\n            temp[curr] = i;\n            while (curr !=\
    \ i) {\n                temp[temp[curr]] = temp[curr] - 1;\n                curr\
    \ = temp[curr];\n                temp[curr] = i;\n            }\n        }\n \
    \   }\n    for (int i = 0; i < size; i++) {\n        results[temp[i]] = results[temp[i]]\
    \ + arr[i];\n    }\n    for (int i = 0; i < size; i++) {\n        temp[i] = temp[i]\
    \ - 1;\n    }\n    for (int i = 0; i < size; i++) {\n        results[temp[i]]\
    \ = results[temp[i]] + arr[i];\n    }\n    for (int i = 0; i < size; i++) {\n\
    \        temp[i] = temp[i] - 1;\n    }\n    for (int i = 0; i < size; i++) {\n\
    \        results[temp[i]] = results[temp[i]] + arr[i];\n    }\n    results.sort();\n\
    \    return results;", "    // Complete this function\n    // YOUR CODE HERE\n\
    \    int zero = 0;\n    int negative = 0;\n    int count[256];\n    int count1\
    \ = 0;\n    int count2 = 0;\n    int count3 = 0;\n    int count4 = 0;\n    int\
    \ count5 = 0;\n    int count6 = 0;\n    for (int i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] < 0) {\n            arr[negative] = -arr[i];\n           \
    \ negative++;\n        }\n        if (arr[i] == 0) {\n            zero++;\n  \
    \      }\n        for (int j = 0; j < 256; j++) {\n            if (arr[i] & (1\
    \ << j)) {\n                count[j]++;\n            }\n        }\n    }\n   \
    \ for (int j = 0; j < 256; j++) {\n        if (count[j] > 0) {\n            count1++;\n\
    \        } else if (count[j] == 0) {\n            zero++;\n        }\n    }\n\
    \    for (int j = 0; j < 256; j++) {\n        if (count[j] > 0) {\n          \
    \  count2++;\n        } else if (count[j] == 0) {\n            zero++;\n     \
    \   }\n    }\n    for (int j = 0; j < 256; j++) {\n        if (count[j] > 0) {\n\
    \            count3++;\n        } else if (count[j] == 0) {\n            zero++;\n\
    \        }\n    }\n    for (int j = 0; j < 256; j++) {\n        if (count[j] >\
    \ 0) {\n            count4++;\n        } else if (count[j] == 0) {\n         \
    \   zero++;\n        }\n    }\n    for (int j = 0; j < 256; j++) {\n        if\
    \ (count[j] > 0) {\n            count5++;\n        } else if (count[j] == 0) {\n\
    \            zero++;\n        }\n    }\n    for (int j = 0; j < 256; j++) {\n\
    \        if (count[j] > 0) {\n            count6++;\n        } else if (count[j]\
    \ == 0) {\n            zero++;\n        }\n    }\n    if (count6 > 0) {\n    \
    \    for (int i = 0; i < 256; i++) {\n            if (count6 > 0) {\n        \
    \        count[i] = count6 / count[i];\n                count6 %= count[i];\n\
    \            } else {\n                count[i] = 1;\n            }\n        }\n\
    \    }\n    std::vector<long> ans;\n    std::vector<long> ans1; // for debugging\n\
    \    if (zero > 0) ans.push_back(-zero);\n    if (negative > 0) {\n        ans.push_back(negative);\n\
    \    }\n    long max = 0;\n    int maxVal = -1;\n    for (int i = 0; i < 256;\
    \ i++) {\n        if (count[i] > max) {\n            max = count[i];\n       \
    \     maxVal = i;\n        }\n    }\n    for (int i = 0; i < 256; i++) {\n   \
    \     if (count[i] > max) {\n            ans.push_back(maxVal);\n            count[i]\
    \ = 0;\n        } else {\n            ans.push_back(count[i]);\n        }\n  \
    \  }\n    if (zero > 0) ans.push_back(-zero);\n    if (negative > 0) {\n     \
    \   ans.push_back(negative);\n    }\n    sort(ans.begin(), ans.end());\n    ans.erase(ans.begin()\
    \ + 1);\n    for (int i = 0; i < ans.size(); i++) {\n        ", "    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n    int count_ones = 0;\n    for (long i\
    \ : arr)\n        count_ones += static_cast<int>(i & 1);\n    return std::vector<long>(arr.begin(),\
    \ arr.begin() + count_ones);", "    std::vector<long> res;\n    for (long i :\
    \ arr) {\n        std::bitset<64> bits(i);\n        res.push_back(i); // insert\
    \ i at the beginning\n        for (long j = 0; j < 64; ++j) {\n            if\
    \ (bits[j]) {\n                break;\n            }\n        }\n        if (j\
    \ == 64) {\n            res.insert(res.begin() + j, i);\n        }\n    }\n  \
    \  std::sort(res.begin(), res.end());\n    return res;", "    for (long i = 1;\
    \ i < arr.size(); i++) {\n        int c = count_ones(arr[i]);\n        if (c ==\
    \ 1) {\n            arr[i] ^= arr[0];\n            arr[0] = 0;\n        }\n  \
    \      else if (c > 1) {\n            int temp = arr[i];\n            arr[i] =\
    \ arr[c-1];\n            arr[c-1] = temp;\n        }\n    }\n    return arr;",
  "    std::sort(arr.begin(), arr.end(), comp);\n    return arr;", "  // Write your\
    \ code here\n  std::sort(arr.begin(), arr.end(), [](int x, int y) {\n    return\
    \ x == y ? 0 : x > y ? 1 : -1;\n  });\n  return arr;", "    long num_ones = 0,\
    \ decimal_value = 0;\n    for (long l : arr) {\n        decimal_value *= 10;\n\
    \        decimal_value += l;\n        num_ones += 1;\n    }\n    auto comp = [](long\
    \ l, long r) -> bool {\n        return l > r;\n    };\n    if (num_ones == 0)\n\
    \        return arr;\n    std::vector<long> sorted_arr(arr.begin(), arr.end());\n\
    \    std::sort(sorted_arr.begin(), sorted_arr.end(), comp);\n    if (num_ones\
    \ > 0)\n        std::transform(sorted_arr.begin(), sorted_arr.end(),\n       \
    \               sorted_arr.begin(), [&](long l) -> long {\n                  \
    \      return decimal_value % 10 == 0 ? l : l - decimal_value % 10;\n        \
    \            });\n    return sorted_arr;", "    std::vector<long> output;\n  \
    \  long cnt = 0;\n    long sum = 0;\n    for (long i = 0; i < arr.size(); ++i)\
    \ {\n        if (arr[i] == 1) {\n            ++cnt;\n            sum += i;\n \
    \       }\n    }\n    if (cnt > 1) {\n        for (long i = 0; i < arr.size();\
    \ ++i) {\n            if (arr[i] == 1) {\n                output.push_back(sum\
    \ / cnt);\n                sum += i;\n                cnt--;\n            }\n\
    \        }\n        if (cnt > 0) {\n            output.push_back(sum / cnt);\n\
    \            sum += arr.size() - 1;\n        }\n    } else if (cnt > 0) {\n  \
    \      output.push_back(sum);\n    }\n    return output;", "    // sort on number\
    \ of ones\n    std::sort(arr.begin(), arr.end(), [&](long a, long b) { return\
    \ count(a, 0) - count(b, 0); });\n    // sort on number of zeros\n    std::sort(arr.begin(),\
    \ arr.end(), [&](long a, long b) { return count(0, a) - count(0, b); });\n   \
    \ return arr;", "    if (arr.size() <= 1)\n        return arr;\n    auto it =\
    \ std::unique(arr.begin(), arr.end()); // Sort the array first.\n    if (it ==\
    \ arr.end())\n        return arr;\n    arr.erase(it, arr.end()); // Then remove\
    \ duplicates and sort the new array.\n    // sort based on number of ones in the\
    \ binary string.\n    std::vector<long> sorted_arr;\n    size_t idx = 0;\n   \
    \ for (auto i : arr) {\n        std::size_t cnt = 0;\n        while (i) {\n  \
    \          cnt += i & 1;\n            i >>= 1;\n        }\n        sorted_arr.push_back(cnt);\n\
    \        idx += cnt;\n    }\n    std::sort(sorted_arr.begin(), sorted_arr.end());\n\
    \    // sort based on the decimal value.\n    sorted_arr.erase(std::remove(sorted_arr.begin(),\
    \ sorted_arr.end(), 0), sorted_arr.end());\n    for (size_t i = 0; i < sorted_arr.size();\
    \ i++) {\n        sorted_arr[i] = sorted_arr[i] / idx;\n    }\n    return sorted_arr;",
  "    assert(arr.size() > 0);\n    // Step 1: count number of 0s\n    long n_zeros\
    \ = 0;\n    for (long val : arr) {\n        val & 1;\n        n_zeros += val;\n\
    \    }\n    std::sort(arr.begin(), arr.end(), [n_zeros](long lhs, long rhs) {\n\
    \        return n_zeros - rhs - lhs == 0;\n    });\n    // Step 2: count number\
    \ of ones\n    long n_ones = 0;\n    for (long val : arr) {\n        val & 1;\n\
    \        n_ones += val;\n    }\n    // Step 3: sort based on number of ones\n\
    \    std::sort(arr.begin(), arr.end(), [n_ones](long lhs, long rhs) {\n      \
    \  return lhs - n_ones - rhs == 0;\n    });\n    // Step 4: sort based on number\
    \ of zeros\n    std::sort(arr.begin(), arr.end(), [n_zeros](long lhs, long rhs)\
    \ {\n        return n_zeros - rhs - lhs == 0;\n    });\n    return arr;", '    //
    TODO: implement your sort function here', "    // Write your code here\n    std::vector<long>\
    \ sorted_arr(arr.size());\n    int n = arr.size();\n    int i = 0, j = 0, k =\
    \ 0, l = 0, m = 0, n = 0, m1 = 0, m2 = 0, n1 = 0, n2 = 0;\n    long sum = 0, count=\
    \ 0;\n    vector<int> arr2;\n    arr2.clear();\n    while (i < n) {\n        count\
    \ = sum = 0;\n        while (i < n && arr[i] > 0)\n            count += 1;\n \
    \       sum += count;\n        arr2.push_back(count);\n        ++i;\n    }\n \
    \   int flag = 0;\n    for (int j1 = 0; j1 < n; j1++) {\n        m1 = arr2[j1];\n\
    \        for (int j2 = 0; j2 < n; j2++) {\n            if (j1 != j2) {\n     \
    \           m2 = arr2[j2];\n                if (m1 < m2)\n                   \
    \ continue;\n                else\n                    flag = 1;\n           \
    \ }\n            else {\n                continue;\n            }\n          \
    \  arr2[j1] = arr2[j2];\n            arr2[j2] = arr2[j1];\n        }\n    }\n\
    \    if (flag == 1)\n        return arr;\n    else {\n        j = arr.size() -\
    \ 1;\n        while (j > 0) {\n            sorted_arr[j] = arr[j];\n         \
    \   j--;\n        }\n        return sorted_arr;\n    }", "    long long ans =\
    \ 0;\n    for (long long i = 0; i < arr.size(); i++) {\n        long long temp\
    \ = arr[i];\n        long long count = 0;\n        while (temp > 0) {\n      \
    \      temp = temp / 2;\n            count++;\n        }\n        if (count ==\
    \ 1) ans += (long long)temp;\n        else ans = ans * 10 + (long long)((long\
    \ long)count * 10 + temp);\n    }\n    ans = ans * 10 + std::accumulate(arr.begin(),\
    \ arr.end(), 0);\n    std::vector<long> result;\n    for (long long i = std::max(ans,\
    \ 0); i >= 1; i--) {\n        if (ans == i) result.push_back(i);\n        ans\
    \ /= i;\n    }\n    for (long long i = 0; i < arr.size(); i++) {\n        long\
    \ long temp = arr[i];\n        long long count = 0;\n        while (temp > 0)\
    \ {\n            temp = temp / 2;\n            count++;\n        }\n        if\
    \ (count == 1) {\n            if (result.size() == 0) {\n                result.push_back(temp);\n\
    \            } else {\n                long long x = result[0];\n            \
    \    long long y = temp;\n                while (x > y) {\n                  \
    \  result[0] = y;\n                    y = result[0];\n                }\n   \
    \             result[0] = x;\n                result[1] = temp;\n            }\n\
    \        }\n    }\n    return result;", "    // Write your code here.\n    std::sort(arr.begin(),\
    \ arr.end(), [] (long a, long b) {\n        // Write your code here.\n       \
    \ \n        if (a>b)\n            return true;\n        if (a<b)\n           \
    \ return false;\n        \n        long n = 0, t = 0;\n        while ((n<<1)<a)\n\
    \            n++;\n        while ((t<<1)<b)\n            t++;\n        \n    \
    \    int a = a, b = b;\n        while (n<t) {\n            if (a==b)\n       \
    \         return (a<b) ? 1 : -1;\n            if (a<b)\n                a-=1;\n\
    \            else\n                b+=1;\n            \n        }\n        return\
    \ (a<b) ? 1 : -1;\n    });\n    return arr;", "    std::sort(arr.begin(), arr.end(),\
    \ [&](long lhs, long rhs) {\n        if (lhs == rhs)\n            return lhs;\n\
    \        if (lhs == 0)\n            return rhs;\n        if (rhs == 0)\n     \
    \       return lhs;\n        return std::count_bits(lhs) == std::count_bits(rhs)\
    \ ? lhs - rhs : lhs - rhs;\n    });\n    return arr;", "  // Sorting starts from\
    \ first element in the vector and iteratively checks\n  // if the current element\
    \ is greater than or equal to all the previous\n  // elements. If all the previous\
    \ elements are equal, then compare the\n  // current element with the next element,\
    \ and so on. This comparison is\n  // repeated till we reach the end of the vector.\n\
    \  // An example for illustration purpose: If the vector is {1, 5, 3, 2}, then\n\
    \  // after the first iteration, we compare 1 with 0, the next iteration checks\n\
    \  // 5 > 0, then 3 > 0, the comparison with 2 will result in the comparison with\n\
    \  // 5, and the iteration will repeat until the end of the vector.\n\n  // To\
    \ implement the above comparison, we use an auxiliary stack which stores all\n\
    \  // the elements in the vector except the top most element. After we finish\n\
    \  // the iteration, we pop the top most element and compare the top most element\n\
    \  // with the rest of the stack.\n\n  // After we finish sorting, we swap the\
    \ top most element with the first element in\n  // the vector. This will result\
    \ in unsorted vector.\n\n  // In the end we return the sorted vector.\n  std::vector<long>\
    \ sorted_vec;\n  sorted_vec.push_back(arr.front());\n\n  for (size_t i = 1; i\
    \ < arr.size(); i++) {\n    std::vector<long> aux_vec;\n    aux_vec.push_back(sorted_vec[0]);\n\
    \n    for (size_t j = 0; j < i; j++) {\n      if (arr[j] >= aux_vec[j]) {\n  \
    \      aux_vec.push_back(arr[j]);\n      }\n    }\n\n    sorted_vec.insert(sorted_vec.begin()\
    \ + i, aux_vec.begin(), aux_vec.end());\n  }\n\n  return sorted_vec;", "    //\
    \ std::sort(arr.begin(), arr.end());\n    // std::sort(arr.begin(), arr.end(),\
    \ [](const long &a, const long &b) { return (a&1) < (b&1); });\n    size_t n =\
    \ arr.size();\n    std::vector<long> temp(n);\n    for (size_t i = 0; i < n; i++)\
    \ {\n        auto s = arr[i];\n        while (s != 0) {\n            if (s % 2\
    \ == 1) {\n                temp[i] = s >> 1;\n                arr[i] = s >> 1;\n\
    \                for (size_t j = i; j < n - 1; j++) {\n                    arr[j\
    \ + 1] += arr[j];\n                }\n                arr[n - 1] += temp[i];\n\
    \            } else {\n                arr[i] = s / 2;\n                temp[i]\
    \ = s / 2;\n                for (size_t j = i; j < n - 1; j++) {\n           \
    \         arr[j] += arr[j + 1];\n                }\n                arr[n - 1]\
    \ += temp[i];\n            }\n            s >>= 1;\n        }\n    }\n    return\
    \ arr;", "  std::sort(arr.begin(), arr.end(), [](int i, int j) { return (arr[i]\
    \ & arr[j]) == 0; });\n  auto it = std::max_element(arr.begin(), arr.end(), [](int\
    \ i, int j) { return (arr[i] & arr[j]) < 0; });\n  return arr;", "    // write\
    \ your code here\n    auto n = arr.size();\n    assert(n >= 3);\n    std::sort(arr.begin(),\
    \ arr.end(), [&](long l, long r) -> bool {\n        return count_bits(l) == count_bits(r)\
    \ ? l < r : count_bits(l) > count_bits(r);\n    });\n    \n    int i = 0;\n  \
    \  for (int j = 0; j < n; j++)\n    {\n        if (arr[j] % 2 == 0) arr[j] /=\
    \ 2;\n        else arr[j] /= 2;\n        \n        if (count_bits(arr[j]) < count_bits(arr[j\
    \ + 1]))\n            std::swap(arr[j], arr[j + 1]);\n        i++;\n    }\n\n\
    \    if (i != n) arr.push_back(0);\n    return arr;"]
stop_tokens:
- "\n}"
