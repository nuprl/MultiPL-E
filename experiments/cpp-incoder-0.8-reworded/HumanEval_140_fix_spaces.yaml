name: HumanEval_140_fix_spaces
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string text, replace\
  \ all spaces in it with underscores, \n// and if a string has more than 2 consecutive\
  \ spaces, \n// then replace all consecutive spaces with - \n// >>> fix_spaces((\"\
  \ Example\"))\n// (\"Example\")\n// >>> fix_spaces((\" Example 1\"))\n// (\"Example_1\"\
  )\n// >>> fix_spaces((\" Example 2\"))\n// (\"_Example_2\")\n// >>> fix_spaces((\"\
  \ Example 3\"))\n// (\"_Example-3\")\nstd::string fix_spaces(std::string text) {\n"
tests: "}\nint main() {\n    auto candidate = fix_spaces;\n    assert(candidate((\"\
  Example\")) == (\"Example\"));\n    assert(candidate((\"Mudasir Hanif \")) == (\"\
  Mudasir_Hanif_\"));\n    assert(candidate((\"Yellow Yellow  Dirty  Fellow\")) ==\
  \ (\"Yellow_Yellow__Dirty__Fellow\"));\n    assert(candidate((\"Exa   mple\")) ==\
  \ (\"Exa-mple\"));\n    assert(candidate((\"   Exa 1 2 2 mple\")) == (\"-Exa_1_2_2_mple\"\
  ));\n}\n"
completions: ["    std::string space_rep = \"_\";\n    std::string text_rep;\n   \
    \ std::string prev_space;\n    for (int i = 0; i < text.size(); i++) {\n     \
    \   if (text[i] == ' ') {\n            if (prev_space != \" \")\n            \
    \    text_rep.append(space_rep);\n        } else {\n            text_rep.append(text[i]);\n\
    \        }\n        prev_space = text[i];\n    }\n    return text_rep;", "   \
    \ std::replace( text.begin(), text.end(), ' ', '_');\n    std::size_t spaces_found\
    \ = 0;\n    std::string new_text;\n    for( size_t i = 0; i <= text.size(); i++)\
    \ {\n        if(text[i] == ' ') {\n            spaces_found++;\n        }\n  \
    \      if(text[i] == ' ' && spaces_found > 1) {\n            std::replace( text.begin()\
    \ + i + 1, text.end(), ' ', '_');\n            spaces_found--;\n            i\
    \ += 1;\n        }\n        if(text[i] == ' ' && spaces_found == 2) {\n      \
    \      std::replace( text.begin() + i + 1, text.end(), ' ', '_');\n          \
    \  spaces_found--;\n        }\n        new_text += text[i];\n    }\n    return\
    \ new_text;", "    // Get the length of the string\n    int len = text.size();\n\
    \    // Replace spaces with underscores\n    text = std::regex_replace(text, std::regex(\"\
    \ \"), std::string(\"_\"));\n    // Replace more than one consecutive space with\
    \ a -\n    if (len > 2 && !text.empty() && text[len - 2] == ' ')\n    {\n    \
    \    text = std::regex_replace(text, std::regex(\" {2,}\"), std::string(\"_\"\
    ));\n    }\n    return text;", "    std::string fixed = \"\";\n    std::string\
    \ space = \" \";\n    int count = 0; \n    for(int i = 0;i < text.length(); i++)\
    \ {\n        if(text[i] == space) {\n            fixed += (text.substr(i, 1) !=\
    \ space ? \"_\" : \"\");\n            count++;\n        } else {\n           \
    \ fixed += text[i];\n        }\n    }\n    if(count > 1) fixed += \"-\";\n   \
    \ return fixed;", "    std::replace(text.begin(), text.end(), ' ', '_');\n   \
    \ std::replace(text.begin(), text.end(), '  ', '-');\n    return text;", "  std::string\
    \ fixed_text = text;\n  for (auto &c : fixed_text) {\n    if (c != ' ') {\n  \
    \    fixed_text += '_';\n    }\n  }\n  fixed_text.replace(' ', '_');\n  if (fixed_text.size()\
    \ > 2) {\n    fixed_text.replace(' ', '_');\n  }\n  return fixed_text;", "   \
    \ std::string res = text;\n    std::size_t spaces_count = text.replace(\" \",\
    \ \"_\").length();\n    if (spaces_count > 2) {\n        std::size_t last_space\
    \ = 0;\n        std::size_t i;\n        for (i = 0; i < spaces_count; i++) {\n\
    \            if (text[i] == \" \") {\n                last_space = i;\n      \
    \      }\n        }\n        while (last_space < spaces_count - 1 && text[last_space\
    \ + 1] == \" \") {\n            last_space++;\n        }\n        if (last_space\
    \ < spaces_count - 1) {\n            for (i = 0; i < spaces_count - last_space;\
    \ i++) {\n                res[i] = '_';\n            }\n            for (i = 0;\
    \ i < last_space; i++) {\n                res[i] = text[last_space + 1];\n   \
    \         }\n        }\n    }\n    return res;", "    std::string output = \"\"\
    ;\n    for (char& c : text) {\n        if (c != ' ') {\n            output +=\
    \ c;\n            continue;\n        }\n        output = output.substr(0, output.size()\
    \ - 1);\n        output += '_';\n    }\n    \n    for (int i = 1; i < text.size();\
    \ i++) {\n        if (text[i] == ' ' && text[i-1] == ' ') {\n            output\
    \ = output.substr(0, output.size() - 1);\n            output += '-';\n       \
    \ }\n    }\n    \n    return output;", "    \n    for (auto i : text) {\n    \
    \    if (i==' ') {\n            text = \"_\";\n        }\n    }\n\n    if (text.size()>2&&text.find(\"\
    \  \")!=std::string::npos) {\n        text = text.replace(\"  \",\"_\");\n   \
    \ }\n\n    return text;", "    size_t len = text.length();\n    if (len == 0)\
    \ return text;\n    while (text[len-1] == ' ') len--;\n    text[len] = '_';\n\
    \    while (text[len-1] == ' ') len--;\n    if (len > 2 && text[len-2] == ' ')\
    \ text[len-2] = '_';\n    while (text[len-1] == ' ') len--;\n    if (len > 2 &&\
    \ text[len-2] == ' ') text[len-2] = '_';\n    return text.substr(0,len);", " \
    \   int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            if (count > 2) {\n                text[i] = '-';\n  \
    \          } else {\n                text[i] = '_';\n                count++;\n\
    \            }\n        }\n    }\n    return text;", "    for(auto &c : text)\n\
    \        if(!std::isspace(c))\n            c = '_';\n    for(auto &c : text)\n\
    \        if(std::isspace(c))\n            c += '-';\n    return text;", "    std::string\
    \ text_out;\n    int i = 0;\n    bool prev = false;\n    while(i < text.size())\
    \ {\n        if(text[i] == ' ') {\n            if(prev == false) {\n         \
    \       text_out += text[i];\n                i++;\n                continue;\n\
    \            }\n            \n            text_out += text[i];\n            prev\
    \ = true;\n            i++;\n        } else {\n            prev = false;\n   \
    \         text_out += text[i];\n            i++;\n        }\n    }\n    return\
    \ text_out;", "  int len = text.length();\n  if (len < 2) return text;\n  std::string\
    \ buffer = \"\";\n  bool space = false;\n  for (int i = 1; i < len; i++) {\n \
    \   if (text[i] == ' ') {\n      space = true;\n    } else {\n      if (!space)\
    \ buffer += '_';\n      buffer += text[i];\n    }\n  }\n  if (space) buffer +=\
    \ '-';\n  return buffer;", "    std::string fixed_text;\n    bool space_exists\
    \ = false;\n    for (auto i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            space_exists = true; // if true, then we have a sequence\
    \ of spaces\n        } else {\n            fixed_text += text[i];\n        }\n\
    \    }\n    if (!space_exists) {\n        // if there is no space, add one\n \
    \       fixed_text += \" \";\n    }\n    if (fixed_text != \"\") {\n        std::string\
    \ fixed_text = fix_spaces(fixed_text);\n        fixed_text = fixed_text.replace(\"\
    \ \", \"-\");\n    }\n    return fixed_text;", "    std::string s = text;\n  \
    \  // If there are no spaces, just return \n    // the string unchanged\n    if\
    \ (s.find(\" \") != std::string::npos) {\n        s.replace(\" \", \"_\");\n \
    \   }\n    // If there are more than 2 consecutive spaces, \n    // then replace\
    \ the consecutive spaces with -\n    else if (s.find(\"  \\n\") != std::string::npos)\
    \ {\n        while (s.find(\"  \\n\") != std::string::npos) {\n            s.replace(\"\
    \ \", \"-\");\n        }\n    }\n    return s;", "  for (int i = 0; i < text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      text.insert(i, '_');\n    } else {\n\
    \      text.insert(i, '-');\n    }\n  }\n  return text;", "    for (auto c: text)\
    \ {\n        if (c == ' ') {\n            text.push_back('_');\n        } else\
    \ if (c == ' ' && text.size() > 1) {\n            text.erase(text.end()-1);\n\
    \        } else {\n            text.push_back(c);\n        }\n    }\n    return\
    \ text;", "    for (auto c : text) {\n        if (c == ' ' || c == '\\t' || c\
    \ == '\\n' || c == '\\r') {\n            text = text.replace(c, std::string(2,\
    \ \"_\"));\n        }\n    }\n    return text;", "    int l = text.length();\n\
    \    if (l <= 0)\n        return text;\n    \n    std::string r;\n    for (int\
    \ i = 0; i < l; i++) {\n        if (text[i] == ' ') {\n            if (i != l\
    \ - 1) {\n                r += '_';\n            }\n        } else {\n       \
    \     r += text[i];\n        }\n    }\n    return r;", "    std::replace_if(text.begin(),\
    \ text.end(), ::isspace(), ' ');\n    if (text.size() > 2) {\n        text = text.replace('\
    \ ', '_');\n    }\n    return text;", "  int spaces = 0;\n  for (int i = 0; i\
    \ < text.length(); i++) {\n    if (text[i] == ' ') {\n      spaces++;\n    } else\
    \ {\n      spaces = 0;\n    }\n    if (spaces >= 2) {\n      text = text.replace(i\
    \ + 1, 1, \"-\");\n      spaces = 0;\n    }\n  }\n  return text;", "    // Your\
    \ code here\n    text.erase(std::remove_if(text.begin(), text.end(), [](int ch){\
    \ return !std::isspace(ch); }),\n    text.end());\n    std::string::iterator it\
    \ = text.begin();\n    std::string text2;\n    while(it != text.end()) {\n   \
    \     if(std::isspace(*it)) {\n            text2 += \"_\";\n            ++it;\n\
    \        }\n        else {\n            text2 += *it;\n            ++it;\n   \
    \     }\n    }\n    return text2;", "    // Write your code here\n    int space_count\
    \ = text.size();\n    if(space_count == 0) {\n        return text;\n    }\n  \
    \  if(space_count == 1) {\n        if(text.at(0) == ' ')\n            return text;\n\
    \        if(text.at(0) == ' ' && text.at(1) == ' ')\n            return text;\n\
    \        if(text.at(0) == ' ' && text.at(1) == ' ' && text.at(2) == ' ')\n   \
    \         return text;\n        if(text.at(0) == ' ' && text.at(1) == ' ' && text.at(2)\
    \ == ' ' && text.at(3) == ' ')\n            return text;\n    }\n\n    int start_pos\
    \ = text.find_first_not_of(\" \");\n    int end_pos = text.find_last_not_of(\"\
    \ \");\n    while(start_pos != std::string::npos && end_pos != std::string::npos)\
    \ {\n        if(start_pos > end_pos) {\n            if(start_pos == text.size()\
    \ - end_pos + 1) {\n                text = text.substr(0, start_pos) + \"_\" +\
    \ text.substr(end_pos + 1, text.size() - end_pos + 1);\n            }\n      \
    \      else if(text.at(start_pos) == ' ' && text.at(start_pos - 1) == ' ') {\n\
    \                text = text.substr(0, start_pos) + \"_\" + text.substr(start_pos\
    \ - 1, text.size() - start_pos - 1);\n            }\n            else if(text.at(start_pos)\
    \ == ' ' && text.at(start_pos - 1) == ' ' && text.at(start_pos - 2) == ' ') {\n\
    \                text = text.substr(0, start_pos) + \"_\" + text.substr(start_pos\
    \ - 1, text.size() - start_pos - 1);\n            }\n            else if(text.at(start_pos)\
    \ == ' ' && text.at(start_pos - 1) == ' ' && text.at(start_pos - 2) == ' ' &&\
    \ text.at(start_pos - 3) == ' ') {\n                text = text.substr(0, start_pos)\
    \ + \"_\" + text.substr(start_pos - 1, text.size() - start_pos - 1);\n       \
    \     }\n        }\n        else {\n            if((start_pos - end_pos + 1) ==\
    \ 2) {\n                text = text.substr(0, start_pos) + \"-_\" + text.substr(end_pos\
    \ + 1, text.size() - end_pos + 1);\n            }\n            else if(text.at(start_pos)\
    \ == ' ' && text.at(start_pos - 1) == ' ') {\n                text = text.substr(0,\
    \ start_pos) + \"-_\" + text.substr(start_pos - 1, text.size() - start_pos - 1);\n\
    \            }\n            else if(text.at(start_pos) == ' ' && text.at(start_pos\
    \ - 1) == ' ' && text.at(start_pos - 2) == ' ') {\n                text = text.substr(0,\
    \ start_pos) + \"-_\" + text.substr(start_pos - 1, text.size() - start_pos - 1);\n\
    \            }\n            else if(text.at(start_pos) == ' ' && text.at(start_pos\
    \ - 1) == ' ' && text.at(start_pos - ", "    // Write your code here\n    size_t\
    \ space = text.find_first_of(\" \");\n    while (space != std::string::npos) {\n\
    \        text.erase(space+1);\n        space = text.find_first_of(\" \");\n  \
    \  }\n    return text;", "    if(text.length() <= 2) {\n        return text;\n\
    \    }\n    \n    std::string result = \"\";\n    size_t start = 0;\n    size_t\
    \ end = text.length();\n    \n    while(start < end) {\n        if(text[start]\
    \ == ' ') {\n            while(start < end && text[start] == ' ') {\n        \
    \        start++;\n            }\n        }\n        else {\n            result\
    \ += text[start];\n            while(start < end && text[start] != ' ') {\n  \
    \              start++;\n            }\n        }\n    }\n    \n    while(start\
    \ < end) {\n        if(text[end-1] == ' ') {\n            while(start < end &&\
    \ text[end-1] == ' ') {\n                end--;\n            }\n        }\n  \
    \      else {\n            result += text[end];\n            while(start < end\
    \ && text[end] != ' ') {\n                end--;\n            }\n        }\n \
    \   }\n    \n    return result;", "    std::replace_if(text.begin(), text.end(),\
    \ [](char c) {\n        return std::isspace(c);\n    }, ' ');\n    // Find first\
    \ 2 consecutive spaces\n    auto begin = text.find_first_of(\" \", 2);\n    if\
    \ (begin == text.npos)\n        return text;\n    // Find last 2 consecutive spaces\n\
    \    auto end = text.find_last_of(\" \", 2);\n    if (end == text.npos)\n    \
    \    return text;\n    // If we have more than 2 consecutive spaces, replace them\
    \ with -\n    if (end > begin)\n        text.replace(0, end - begin, \"-\");\n\
    \    return text;", "  text = std::regex_replace(text, \"\\\\s+\", \"_\");\n \
    \ // if more than 2 spaces, replace all consecutive spaces with -\n  size_t pos\
    \ = 0;\n  while ( (pos = text.find(' ', pos)) != text.npos) {\n    text.erase(pos,\
    \ 1);\n    text.insert(pos, '_');\n    pos++;\n  }\n  return text;", "  if(text.size()\
    \ <= 2)\n    return text;\n  std::replace( text.begin(), text.end(), ' ', '_'\
    \ );\n  return std::replace( text.begin(), text.end(), '  ', '-' );", "\tassert(!text.empty());\n\
    \t\n\t// Create a string with spaces replaced with _ \n\tstd::string fixed = text;\n\
    \tsize_t foundCount = 0;\n\tfor (size_t i = 0; i < fixed.size(); i++) {\n\t\t\
    char c = fixed[i];\n\t\tif (c == ' ') {\n\t\t\tif (foundCount == 0)\n\t\t\t\t\
    fixed[i] = '_';\n\t\t\telse {\n\t\t\t\tif (foundCount == 1)\n\t\t\t\t\tfixed[i]\
    \ = '-';\n\t\t\t\telse\n\t\t\t\t\tfixed[i] = '_';\n\t\t\t\tfoundCount = 0;\n\t\
    \t\t}\n\t\t\tfoundCount++;\n\t\t} else\n\t\t\tfoundCount = 0;\n\t}\n\n\t// If\
    \ there are more than 2 consecutive spaces,\n\t// then replace all consecutive\
    \ spaces with -\n\tfoundCount = 0;\n\tfor (int i = 0; i < fixed.size(); i++) {\n\
    \t\tchar c = fixed[i];\n\t\tif (c == '_') {\n\t\t\tif (foundCount == 0)\n\t\t\t\
    \tfixed[i] = '-';\n\t\t\telse {\n\t\t\t\tif (foundCount == 1)\n\t\t\t\t\tfixed[i]\
    \ = '_';\n\t\t\t\telse\n\t\t\t\t\tfixed[i] = '-';\n\t\t\t\tfoundCount = 0;\n\t\
    \t\t}\n\t\t\tfoundCount++;\n\t\t} else\n\t\t\tfoundCount = 0;\n\t}\n\treturn fixed;",
  "    // We don't want to do anything if there are no spaces in the text\n    if\
    \ (std::count(text.begin(), text.end(), ' ') <= 0)\n        return text;\n\n \
    \   // We want to replace all spaces with underscores, but only if the string\
    \ has more than 2 spaces\n    if (std::count(text.begin(), text.end(), ' ') >\
    \ 1)\n        text = text.replace(text.begin(), text.end(), ' ');\n\n    // If\
    \ the string has two spaces, we want to replace all consecutive spaces with -\n\
    \    if (std::count(text.begin(), text.end(), ' ') == 2)\n        text = text.replace(text.begin(),\
    \ text.end(), '-');\n\n    return text;", "    size_t n = text.size();\n    std::string\
    \ ans;\n    for (size_t i = 0; i < n; ++i) {\n        if (text[i] == ' ') {\n\
    \            ans += '_';\n        }\n        else if (i < n-1 && text[i] == '\
    \ ' && text[i+1] == ' ') {\n            ans += '-';\n        }\n        else {\n\
    \            ans += text[i];\n        }\n    }\n    return ans;", "    std::map<char,std::string>\
    \ space_replacements{\n        {' ', '_'},\n        {'\\t', '_'},\n        {'\\\
    n', '_'},\n    };\n    std::string result = text;\n    for (const auto &replacement\
    \ : space_replacements) {\n        result = result.erase(std::remove(result.begin(),\
    \ result.end(), replacement.first), result.end());\n    }\n    if (result.length()\
    \ > 2) {\n        result = result.substr(0, result.length() - 1);\n        for\
    \ (const auto &replacement : space_replacements) {\n            result = result.substr(0,\
    \ result.length() - 1).replace(replacement.first, replacement.second);\n     \
    \   }\n    }\n    return result;", "    text.erase(std::find_if(text.begin(),\
    \ text.end(), [](char c) -> bool { return c == ' '; }));\n    std::string ans\
    \ = text;\n    int counter = 0;\n    for (char c : text) {\n        if (c == '\
    \ ') {\n            ans[counter++] = c;\n        } else if (counter == 2) {\n\
    \            ans[counter - 1] = '_';\n            ans[counter++] = c;\n      \
    \  } else if (counter == 1) {\n            ans[counter - 1] = '_';\n        }\
    \ else {\n            ans[counter - 1] = '_';\n            ans[counter++] = c;\n\
    \        }\n    }\n    return ans;", "    std::string s = text;\n    std::size_t\
    \ pos = 0;\n    while ((pos = s.find_first_of(\" \", pos)) != std::string::npos)\
    \ {\n        s = s.substr(0, pos) + \"_\" + s.substr(pos + 1);\n        pos =\
    \ 0;\n    }\n    if (s.size() > 2 && s.find(\"  \", pos) == std::string::npos)\
    \ {\n        s = s.substr(0, pos) + \"-\" + (s.substr(pos + 1));\n    }\n    return\
    \ s;", "    std::string r;\n    for (auto c: text)\n        if (c == ' ') \n \
    \           r.push_back('_');\n        else\n            r.push_back(c);\n   \
    \ return r;", "    if (text.empty()) return std::string(\"\");\n    bool first_word\
    \ = true; // if we are in the first word\n    bool last_word = false; // if we\
    \ are in the last word\n    std::string space_replacement = \" _\";\n    if (text.find_first_not_of('\
    \ ') != text.npos) space_replacement = \"_\";\n    std::size_t space = text.find_first_of('\
    \ ');\n    while (space != text.npos) {\n        std::string old_space = text.substr(0,\
    \ space);\n        if (old_space == \" \") {\n            space_replacement +=\
    \ std::string(1, old_space);\n            std::size_t new_space = text.find_first_of('\
    \ ', space + 1);\n            if (new_space != text.npos && new_space < space)\
    \ space_replacement += std::string(1, old_space);\n            text = text.substr(space\
    \ + 1, new_space - space - 1);\n            space = text.find_first_of(' ', new_space\
    \ + 1);\n            continue;\n        }\n        if (old_space == std::string(1,\
    \ \" \") && !first_word) {\n            first_word = true;\n            text =\
    \ text.substr(1, text.size() - 1);\n            continue;\n        }\n       \
    \ last_word = true;\n        text = text.substr(0, space);\n    }\n    if (text.find_first_of('\
    \ ') == text.npos) return text;\n    return space_replacement + text;", "\t//\
    \ Your code goes here\n\tsize_t first_space = text.find_first_of(\" \");\n\tsize_t\
    \ last_space = text.find_last_of(\" \");\n\t\n\tif(first_space == std::string::npos\
    \ || last_space == std::string::npos)\n\t\treturn text;\n\n\twhile(first_space\
    \ < last_space){\n\t\tsize_t space_count = 0;\n\t\twhile(first_space < last_space\
    \ && text[first_space] == ' '){\n\t\t\tfirst_space++;\n\t\t\tspace_count++;\n\t\
    \t}\n\n\t\twhile(first_space < last_space && text[last_space] == ' '){\n\t\t\t\
    last_space--;\n\t\t\tspace_count--;\n\t\t}\n\n\t\tif(!space_count)\n\t\t\tbreak;\n\
    \n\t\ttext.erase(first_space, last_space - first_space + 1);\n\t\tfirst_space\
    \ = text.find_first_of(\" \");\n\t\tlast_space = text.find_last_of(\" \");\n\t\
    }\n\n\tif(first_space == std::string::npos)\n\t\treturn text;\n\n\tif(last_space\
    \ == text.size() - 1)\n\t\treturn text;\n\n\tsize_t count = 0;\n\twhile(count\
    \ != 2 && first_space < last_space){\n\t\ttext.erase(first_space, last_space -\
    \ first_space + 1);\n\t\tfirst_space = text.find_first_of(\" \");\n\t\tlast_space\
    \ = text.find_last_of(\" \");\n\t\tcount++;\n\t}\n\n\tif(count != 2)\n\t\treturn\
    \ text;\n\n\ttext.erase(first_space, last_space - first_space + 1);\n\treturn\
    \ text;", "    std::string new_text = \"\";\n    for(auto c: text) {\n       \
    \ if(std::isspace(c)) {\n            if(c == ' ') {\n                if((new_text.size()\
    \ == 0) && (new_text[0] != '-')) {\n                    new_text += '_';\n   \
    \             }\n                new_text += c;\n            }\n        } else\
    \ {\n            new_text += c;\n        }\n    }\n    return new_text;", "  \
    \  int n = text.length();\n    int cnt = 0;\n    std::string result = \"\";\n\
    \    for (int i = 0; i < n; ++i) {\n        result += text[i];\n        if (text[i]\
    \ == ' ') {\n            cnt++;\n        } else if (cnt == 2 && text[i] == ' ')\
    \ {\n            result += '-';\n            cnt = 0;\n        } else {\n    \
    \        result += text[i];\n        }\n    }\n    return result;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    for (auto it = text.begin(); it != text.end(); ++it)\n\
    \        if (*it == ' ' && it + 1 != text.end() && *(it + 1) == ' ')\n       \
    \     *(it + 1) = '-';\n    return text;", "    // your code goes here\n    text.erase(\n\
    \        std::find_if(text.begin(), text.end(), [](char ch) { return isspace(ch);\
    \ }), \n        text.end());\n\n    text.erase(\n        std::find_if(text.rbegin(),\
    \ text.rend(), [](char ch) { return isspace(ch); }), \n        text.end());\n\n\
    \    for (auto it = text.begin(); it != text.end(); ++it) {\n        if (isspace(*it))\n\
    \            text.erase(it);\n        else if (isspace((*it) + 1))\n         \
    \   text.erase(it, text.end());\n        else if (isspace((*it) - 1))\n      \
    \      text.erase(it - 1, text.end());\n        else if (isspace((*it) + 2))\n\
    \            text.erase(it + 1, text.end());\n        else if (isspace((*it) -\
    \ 2))\n            text.erase(it - 1, text.end());\n        else if (isspace((*it)\
    \ + 3))\n            text.erase(it + 1, text.end());\n        else if (isspace((*it)\
    \ - 3))\n            text.erase(it - 1, text.end());\n    }\n\n    return text;",
  "    std::string temp = text;\n    for(size_t i = 0; i<temp.length(); i++){\n  \
    \      if(temp[i] == ' '){\n            temp[i] = '_';\n        }\n        else\
    \ if(temp[i] == ' '){\n            temp[i] = '-';\n        }\n    }\n    return\
    \ temp;", "    int spacesCount = 1;\n    std::string fixedString = text;\n   \
    \ while (fixedString.find(\" \") != std::string::npos) {\n        fixedString.replace(\"\
    \ \", \"_\", spacesCount);\n        spacesCount += 1;\n    }\n    while (fixedString.find(\"\
    \ _\") != std::string::npos) {\n        fixedString.replace(\" _\", \"-\", spacesCount);\n\
    \        spacesCount += 1;\n    }\n    return fixedString;", "    std::string\
    \ fixedText = text;\n    \n    for (int i = 0; i < fixedText.size(); i++) {\n\
    \        if (std::isspace(fixedText[i])) {\n            fixedText[i] = '_';\n\
    \        }\n    }\n    \n    size_t position = 0;\n    \n    while (position <\
    \ fixedText.size()) {\n        if (std::isspace(fixedText[position])) position++;\n\
    \        else break;\n    }\n    \n    while (position < fixedText.size()) {\n\
    \        if (std::isspace(fixedText[position])) position++;\n        else if (position\
    \ == fixedText.size() - 1) {\n            fixedText.erase(position, 1);\n    \
    \    }\n        else break;\n    }\n    \n    return fixedText;", "    // Write\
    \ your code here.\n    std::string s = text;\n    std::replace(s.begin(), s.end(),\
    \ ' ', '_');\n    if (s.find_first_not_of(\" \") != s.npos) {\n        std::replace(s.begin(),\
    \ s.end(), ' ', '-');\n    }\n    return s;", "    std::string res = text;\n \
    \   // If string has more than one space\n    if (res.length() > 1) {\n      \
    \  // Replace spaces with underscores\n        // Replace consecutive spaces with\
    \ -\n        std::replace_if(res.begin(), res.end(), std::isspace(), '_');\n \
    \       // Replace multiple spaces with a single space\n        std::replace_if(res.begin(),\
    \ res.end(), std::not1(std::isspace()), ' ');\n    }\n    return res;", "\tstd::size_t\
    \ found = -1;\n\tstd::size_t next_space = -1;\n\tstd::size_t last_space = -1;\n\
    \tstd::string result = text;\n\twhile (true) {\n\t\tfound = result.find_first_of(\"\
    \ \", found);\n\t\tif (found == std::string::npos)\n\t\t\tbreak;\n\t\tif (next_space\
    \ != -1) {\n\t\t\tif (last_space + 1 == next_space && found < next_space)\n\t\t\
    \t\tresult += \"-\";\n\t\t\telse\n\t\t\t\tresult += \"_\";\n\t\t}\n\t\tnext_space\
    \ = result.find_first_not_of(\" \", found);\n\t\tlast_space = found;\n\t\tresult\
    \ += std::string(found, found + 1);\n\t}\n\treturn result;", "    std::regex spaces_regex(\"\
    \\\\s+\");\n    std::cmatch spaces;\n    if (std::regex_replace(text, spaces,\
    \ \" \", spaces_regex) != text) {\n        std::cerr << \"fix_spaces: regex failed\\\
    n\";\n    }\n    return text;", "    size_t prev = 0;\n    for (size_t pos = 0;\
    \ pos < text.length(); pos++) {\n        char ch = text[pos];\n        if (prev\
    \ != pos && ch == ' ' && text[prev] == ' ')\n            ch = ' ';\n        if\
    \ (pos < text.length() - 1 && ch == ' ' && text[pos+1] == ' ')\n            ch\
    \ = ' ';\n        text.replace(pos, 1, ch);\n        prev = pos+1;\n    }\n  \
    \  return text;", "    text = std::regex_replace(text, std::regex(\" {2,}\"),\
    \ std::string(\" \"));\n    return std::regex_replace(text, std::regex(\" {2,}\"\
    ), std::string(\"-\"));", "    // your code goes here\n    text=text.substr(0,text.find_first_not_of(\"\
    \ \\t\\r\\n\\v\\f\"));\n    text=text.substr(0,text.find_first_of(\" \"));\n \
    \   if(text.size()>1)\n        text=text.substr(0,text.size()-1);\n    text=text+\"\
    -\";\n    \n    for(int i=0;i<text.size()-1;i++)\n    {\n        if(text[i]=='\
    \ ')\n            text[i]='_';\n    }\n    return text;", "  std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n  int flag=0;\n  int i=0;\n  for (auto it=text.begin();it!=text.end();it++,i++){\n\
    \    if (*it==' '){\n      if (flag>1){\n        std::replace(text.begin()+i,\
    \ text.end(), \"_\", \"-\");\n      }\n      flag=1;\n      i=0;\n    }\n    else\
    \ {\n      flag=0;\n    }\n  }\n  return text;", "  // Find all the spaces in\
    \ the text \n  std::regex spaces_regex(\"( +)\");\n  std::smatch spaces;\n  //\
    \ Replace all the spaces with _\n  std::string fixed_text = std::regex_replace(text,\
    \ spaces_regex, \"_\");\n  // If the text has more than 2 consecutive spaces,\
    \ fix the second consecutive space with - \n  if (fixed_text.find(\"  \") != std::string::npos)\n\
    \    fixed_text = fixed_text.replace(\"  \", \"- \");\n  return fixed_text;",
  "    std::string result;\n    for (unsigned int i = 0; i < text.length(); ++i) {\n\
    \        if (text[i] == ' ')\n            result.append(\"_\");\n        else\
    \ if (text[i] == ' ' && result[result.length() - 1] == '_')\n            result[result.length()\
    \ - 1] = '-';\n        else\n            result.push_back(text[i]);\n    }\n \
    \   return result;", "  text.erase(std::remove(text.begin(), text.end(), ' '),\
    \ text.end());\n  return std::regex_replace(text, std::regex(\"\\\\s+\"), std::string(\"\
    _\"));", "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find('\
    \  ') != std::string::npos) {\n        std::string subtext = text;\n        std::replace(subtext.begin(),\
    \ subtext.end(), '  ', '-');\n        text = subtext;\n    }\n    return text;",
  "    text = std::replace_if(text.begin(), text.end(), [](char c) {\n        return\
    \ c == ' ' || c == '\\t' || c == '\\r';\n    }, '_');\n    \n    int len = text.size();\n\
    \    for (int i = 0; i < len; i++) {\n        if (text.at(i) == ' ' && len - 2\
    \ >= i) {\n            for (int j = i+1; j < len-1; j++) {\n                if\
    \ (text.at(j) == ' ') {\n                    text.at(j) = text.at(j-1);\n    \
    \            }\n            }\n            text.at(i-1) = '-';\n        }\n  \
    \  }\n    return text;", "    // Split text into words\n    std::string words\
    \ = text.substr(0, text.find_first_not_of(' ')).\n        replace( \" \", \"_\"\
    );\n    \n    // Count consecutive spaces\n    auto n = std::count(text.begin(),\
    \ text.end(), ' ');\n    \n    // If there are more than 2 consecutive spaces\n\
    \    if (n > 2){\n        // Remove all consecutive spaces and replace them with\
    \ -\n        std::string words2 = words.substr(0, words.size() - n).\n       \
    \     replace( \" \", \"-\");\n        words += words2; // Add the extra space\
    \ back\n    }\n    return words;", "    std::string ret = text;\n    for (auto\
    \ iter = ret.begin(); iter != ret.end(); iter++) {\n        if (*iter == ' ')\
    \ {\n            iter--;\n            while (iter != ret.end() && *iter == ' ')\
    \ iter--;\n            while (iter != ret.end() && *iter != ' ') iter++;\n   \
    \         if (iter == ret.end()) {\n                ret += '_';\n            }\
    \ else {\n                ret += \"-\";\n            }\n        }\n    }\n   \
    \ return ret;", "    // Create a string stream for splitting the input text\n\
    \    std::istringstream ss(text);\n\n    // Store all the words in a list\n  \
    \  std::string word;\n    std::vector<std::string> word_list;\n    while(std::getline(ss,\
    \ word, ' ')) {\n        word_list.push_back(word);\n    }\n\n    // Check how\
    \ many consecutive spaces are there\n    int n_spaces = 0;\n    for(auto i : word_list)\
    \ {\n        if(i == \" \") {\n            ++n_spaces;\n        }\n    }\n\n \
    \   // If number of consecutive spaces is greater than 1, \n    // then replace\
    \ all consecutive spaces with -\n    if(n_spaces > 1) {\n        for(int i = 0;\
    \ i < (n_spaces - 1); ++i) {\n            word_list[i] = \"-\";\n        }\n \
    \   }\n    // Return the joined string with spaces replaced with _\n    return\
    \ word_list.join(\"-\");", "    int len = 0;\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ') {\n            len++;\n            if (len\
    \ > 2) {\n                for (int j = i + 1; j < text.size(); j++) {\n      \
    \              if (text[j] == ' ') {\n                        text[j] = '_';\n\
    \                    }\n                }\n                len = text.length();\n\
    \            }\n        }\n    }\n    return text;", "  std::stringstream ss(text);\n\
    \  std::string result;\n  std::string word;\n  while (getline(ss, word, ' '))\
    \ {\n    result += word;\n    result += ' ';\n  }\n  while (getline(ss, word,\
    \ ' ')) {\n    if (result.back() == ' ') result.pop_back();\n    result += word;\n\
    \    result += ' ';\n  }\n  while (getline(ss, word, ' ')) {\n    if (result.back()\
    \ == '_') {\n      result.pop_back();\n      result += word;\n    }\n  }\n  return\
    \ result;", "    for(std::string::iterator it = text.begin(); it != text.end();\
    \ it++) {\n        if(*it == ' ') *it = '_';\n        if(it + 1 != text.end()\
    \ && *it == ' ' && it+1 != text.end() && \n           it+2 != text.end() && *(it+1)\
    \ == ' ' && *(it+2) == '_') {\n            *(it+1) = '-';\n            *(it+2)\
    \ = '-';\n        }\n    }\n    return text;", "  std::replace_if(text.begin(),\
    \ text.end(), ::isspace, \" \");\n  std::replace_if(text.begin(), text.end(),\
    \ ::isspace, '-');\n  return text;", "    // Only change ' ' space with '_' space,\
    \ \n    // and if length of text is greater than 3, \n    // then replace multiple\
    \ spaces with '_' space - \n    std::string result=text;\n    int len=result.size();\n\
    \    if(len>3) {\n        int i=0,j=0;\n        while(true) {\n            if(i==0)\
    \ i=j;\n            if((result[i]==' ') && (result[i+1]==' '))\n             \
    \   result.erase(i+1,j);\n            else if((result[i]==' ') && (result[i+1]!='\\\
    n'))\n                result.erase(i+1,j);\n            else if((result[i]!='\\\
    n') && (result[i+1]==' '))\n                result.insert(i+1,\"_\");\n      \
    \      else {\n                result.insert(i+1,\"_\");\n                i=0;\n\
    \            }\n            j=i+2;\n        }\n    }\n    return result;", " \
    \ std::replace_if(text.begin(), text.end(), \n                  std::isspace,\
    \ \n                  std::string(\"_\"));\n  std::replace_if(text.begin(), text.end(),\
    \ \n                  [](char c) { return !std::isspace(c); }, '-');\n  if (std::adjacent_find(text.begin(),\
    \ text.end()) != text.end())\n    std::replace_if(text.begin(), text.end(), \n\
    \                    [](char c) { return std::isspace(c); }, '-');\n  return text;",
  "    size_t pos = 0;\n    while (pos < text.size()) {\n        size_t next = text.find('\
    \ ', pos);\n        if (next == std::string::npos) {\n            pos = text.size();\n\
    \        } else {\n            text.erase(pos, next + 1);\n            pos = next\
    \ + 1;\n        }\n    }\n    while (text.find('  ') != std::string::npos) {\n\
    \        text.replace('  ', '-');\n    }\n    return text;", "    std::string\
    \ result = \"\";\n    std::transform(text.begin(), text.end(), std::back_inserter(result),\n\
    \        [](char ch) { return std::isspace(ch) ? \"_\" : ch; });\n    if (result.size()\
    \ == 0 || result[result.size() - 1] == '_') {\n        return result;\n    }\n\
    \    for (auto i : result) {\n        if (i == ' ') {\n            result += '_';\n\
    \        } else {\n            result += '-';\n        }\n    }\n    return result;",
  "\tstd::regex space(\"\\\\s+\");\n\tstd::wregex spacew(\"\\\\s+\");\n\tstd::wstring\
    \ wtext((std::wstring) text);\n\tstd::wstring wtext2 = spacew;\n\tstd::regex newspace(\"\
    _\");\n\tstd::regex spaces(\" \");\n\tstd::regex_replace(wtext.begin(), wtext.end(),\
    \ spaces, newspace);\n\treturn wtext2;", "\tstd::replace_if(text.begin(), text.end(),\
    \ [&](int c) {\n\t\treturn c == ' ' || c == '\\t';\n\t}, ' ');\n\tif (text.size()\
    \ > 2 && text.find('  ') != std::string::npos) {\n\t\tstd::replace_if(text.begin(),\
    \ text.end(), [&](int c) {\n\t\t\treturn c == ' ' || c == '\\t';\n\t\t}, '-');\n\
    \t}\n\treturn text;", "  \n  std::replace(text.begin(), text.end(), ' ', '_');\n\
    \  return text;", "  std::string::size_type prev_index = text.find(' ');\n  while\
    \ (prev_index != std::string::npos) {\n    text = text.substr(0, prev_index) +\
    \ std::to_string(text.find(' ', prev_index + 1)) + text.substr(prev_index + 1);\n\
    \    prev_index = text.find(' ', prev_index + 1);\n  }\n  if (prev_index == std::string::npos)\n\
    \    return text;\n  else\n    text = text.substr(0, prev_index) + std::to_string(text.find('\
    \ ', prev_index)) + text.substr(prev_index);\n  return text;", "    if (text.size()\
    \ > 2) {\n        text = text.replace(text.substr(0, text.size() - 2), \n    \
    \            text.substr(0, text.size() - 2).replace(\" \", \"-\"));\n    }\n\
    \    return text;", "    std::replace(text.begin(), text.end(), ' ', '_');\n \
    \   if (text.find_first_not_of(\" \\n\") != text.end())\n        text.erase(std::find_if(text.rbegin(),\
    \ text.rend(), [](int i){return !(i >= '\\n');}).base(), text.end());\n    return\
    \ text;", "    std::regex reg(\"[ ]+\");\n    text = std::regex_replace(text,\
    \ reg, \"_\");\n    reg(\"[ ]+\");\n    text = std::regex_replace(text, reg, \"\
    -\");\n    return text;", "  int count = 0;\n  for (int i = 0; i < text.size();\
    \ i++) {\n    if (text[i] == ' ') {\n      count++;\n      if (count > 2) {\n\
    \        std::cout << text << \" at \" << i << std::endl;\n        count = text.size()\
    \ - 1;\n      }\n    } else {\n      text[i] = '_';\n      count = text.size()\
    \ - 1;\n    }\n  }\n  return text;", "  for (int i = 0; i < text.length(); i++)\
    \ {\n    if (text[i] == ' ') {\n      text.erase(i, 1);\n      text.insert(i,\
    \ '_');\n    } else if (text[i] == ' ') {\n      text.erase(i, 1);\n      text.insert(i,\
    \ '_');\n      i += 1;\n    }\n  }\n  while (text.find(\"  \") != std::string::npos)\
    \ {\n    text.erase(text.find(\"  \"));\n    text.insert(text.find(\"  \"), \"\
    -\");\n  }\n  return text;", "    int flag = 0;\n    int temp = 0;\n    \n   \
    \ for (int i = 0; i < text.size(); i++) {\n        if (text[i] == ' ') {\n   \
    \         if (flag != 1) {\n                flag = 1;\n                temp =\
    \ i;\n            }\n        } else {\n            if (flag != 0) {\n        \
    \        flag = 0;\n                text[temp] = '_';\n                text[temp\
    \ + 1] = '-';\n                temp = i;\n            }\n        }\n    }\n  \
    \  \n    return text;", "  \n  // Initialize result\n  std::string res = text;\n\
    \n  // Initialize result\n  std::string temp;\n\n  // For each character in string\
    \ text\n  for (size_t i = 0; i < res.size(); i++) {\n    // If character is not\
    \ a space\n    if (res[i] != ' ') {\n      // Append character to result\n   \
    \   res += res[i];\n    } else {\n      // Append \"_\"\n      res += \"_\";\n\
    \    }\n  }\n\n  // If result has more than 2 consecutive spaces\n  if (res.find_first_of(\"\
    \  \") != std::string::npos) {\n    // Find first \"  \"\n    size_t first_space\
    \ = res.find_first_of(\"  \");\n    // Find last \"  \"\n    size_t last_space\
    \ = res.find_last_of(\"  \");\n    // Concatenate result without spaces between\
    \ them\n    res = res.substr(0, first_space) + res.substr(last_space + 1);\n \
    \ }\n\n  return res;", "    std::string s;\n    // iterate over the string\n \
    \   for (int i = 0; i < text.length(); i++) {\n        // check if the current\
    \ character is a space\n        if (text[i] == ' ') {\n            // if the character\
    \ is a space, append underscores to it\n            s += \"_\";\n            //\
    \ replace it with a dash\n        } else if (i + 1 == text.length() || text[i]\
    \ == ' ') {\n            s += \"-\";\n        } else {\n            s += text[i];\n\
    \        }\n    }\n    return s;", "    size_t nSpaces = 0;\n    size_t nExtraSpaces\
    \ = 0;\n\n    for (size_t i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            nSpaces++;\n        } else {\n            if (nSpaces\
    \ > 1 && nExtraSpaces == 0) {\n                text.insert(i, '_');\n        \
    \        nExtraSpaces = 1;\n                nSpaces = 0;\n            } else if\
    \ (nSpaces == 1 && nExtraSpaces == 1) {\n                nExtraSpaces++;\n   \
    \         } else {\n                nSpaces = 0;\n                nExtraSpaces\
    \ = 0;\n            }\n        }\n    }\n\n    return text;", "\t// Step 1: replace\
    \ all spaces with underscores \n\ttext.replace(text.begin(), text.end(), ' ',\
    \ '_');\n\t// Step 2: replace consecutive spaces with - \n\tstd::size_t prev =\
    \ 0, pos = 0;\n\twhile ((pos = text.find(' ', pos)) != std::string::npos) {\n\t\
    \tif (prev == pos - 1)\n\t\t\ttext[pos] = '-';\n\t\tprev = pos + 1;\n\t}\n\treturn\
    \ text;", "\tstd::replace(text.begin(), text.end(), ' ', '_');\n\tif (text.size()\
    \ > 2) {\n\t\tstd::replace_if(text.begin(), text.end(), [&text](int i) {\n\t\t\
    \treturn text[i] == ' ' && text[i + 1] == ' ';\n\t\t}, '-');\n\t}\n\treturn text;",
  "    std::replace( std::begin(text), std::end(text), ' ', '_');\n    // Remove consecutive\
    \ spaces\n    while ( std::adjacent_find(std::begin(text), std::end(text)) !=\
    \ std::end(text) ) {\n        std::replace(std::begin(text), std::end(text), '\
    \ ', '-');\n    }\n    return text;", "    \n    // Iterate over all the characters\
    \ in text\n    for (std::string::iterator it = text.begin(); it != text.end();\
    \ ++it) {\n        \n        // If a space is found, ignore it\n        if (*it\
    \ == ' ') {\n            continue;\n        }\n        \n        // If there are\
    \ more than two consecutive spaces, replace each \n        // consecutive space\
    \ with a -\n        if (it + 1 == text.end() || *(it + 1) == ' ' || *(it + 2)\
    \ == ' ') {\n            *it = '-';\n        }\n        \n        // Return new\
    \ string after replacing the spaces with underscores\n        else {\n       \
    \     return text.substr(0, it) + std::to_string(std::distance(text.begin(), it))\n\
    \                + text.substr(it);\n        }\n    }\n    \n    // If no string\
    \ is returned after iterating over all the characters in \n    // text, then return\
    \ empty string\n    return \"\";", "   \n   for(size_t i = 0; i < text.size();\
    \ i++){\n      if(isspace(text[i]))\n         text[i] = '_';\n      else if(text[i]\
    \ == ' ')\n         text[i] = '_';\n      else if(i != text.size() - 1 && isspace(text[i\
    \ + 1]) && isspace(text[i + 2]))\n         text[i] = '-';\n   }\n   return text;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::string new_text\
    \ = \"\";\n    \n    for(int i = 0; i < text.size(); i++) {\n        if(text[i]\
    \ == ' ') {\n            new_text += '_';\n        }\n        \n        else if\
    \ (text[i] == ' ' && text[i+1] == ' ') {\n            new_text += '-';\n     \
    \   }\n        else {\n            new_text += text[i];\n        }\n    }\n  \
    \  \n    return new_text;", "    text.erase(std::remove(text.begin(), text.end(),\
    \ ' '), text.end());\n    if (text.find_first_not_of(\" \\t\\n\") != std::string::npos)\
    \ {\n        text = text.replace(text.find_first_not_of(\" \\t\\n\"), 1, \" \"\
    );\n    }\n    std::string s = text;\n    s.replace(s.begin(), s.end(), \" \"\
    );\n    s.replace(s.begin(), s.end(), \" _\");\n    return s;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    size_t last_space = text.find_last_of(\" \");\n\
    \    while (last_space != std::string::npos) {\n        if (last_space + 1 ==\
    \ text.size()) {\n            text += \"-\";\n        } else {\n            text.erase(last_space\
    \ + 1, text.size());\n        }\n        last_space = text.find_last_of(\" \"\
    );\n    }\n    return text;", "    int i = 0;\n    while (i != text.length())\
    \ {\n        if(text[i] == ' '){\n            i = text.length();\n        } else\
    \ {\n            text.insert(i, '_');\n            i = i + 1;\n        }\n   \
    \ }\n    return text;", "    // your code here\n    std::stringstream sstr;\n\
    \    std::string aText;\n    sstr << text;\n    sstr >> aText;\n    for(int i=0;\
    \ i<aText.size(); i++) {\n        if(text[i]==' ') {\n            aText[i] = '_';\n\
    \        }\n    }\n    std::string::size_type lastSpace = aText.find_last_of(\"\
    \ \");\n    if(lastSpace!=std::string::npos) {\n        while(aText[lastSpace+1]=='\
    \ ') {\n            ++lastSpace;\n        }\n    }\n    return aText;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    for (size_t i = 0; i < text.length()-1; ++i)\n \
    \       if (text[i] == ' ' && text[i+1] == ' ') {\n            text[i] = '_';\n\
    \            text[i+1] = '-';\n        }\n    return text;", "\t// Your code goes\
    \ here\n\ttext.replace(text.begin(), text.end(), ' ', '_');\n\tif (text.find(\"\
    \ \", text.end() - 2) > text.end() - 1)\n\t\ttext.replace(text.end() - 2, text.end(),\
    \ ' ', '_');\n\treturn text;", "    \n    // Create a map of spaces to replace\
    \ them with \n    unordered_map<char, char> space_map;\n    space_map[' '] = '_';\n\
    \    space_map['\\t'] = '_';\n    space_map['\\n'] = '_';\n    space_map['\\r']\
    \ = '_';\n    space_map[' '] = '-';\n    space_map['\\t'] = '-';\n    space_map['\\\
    n'] = '-';\n    space_map['\\r'] = '-';\n\n    // Create a string in which all\
    \ spaces are replaced with underscores \n    std::string space_string = \"_\"\
    ;\n    size_t pos = 0;\n    \n    while(pos < text.length()) {\n        if(space_map[text[pos]]\
    \ != space_map['_']) {\n            space_string += text[pos];\n        }\n  \
    \      pos++;\n    }\n    \n    // Replace all consecutive underscores with one\
    \ dash \n    // >>> fix_spaces(\"_Example__1\")\n    // \"Example-1\"\n    pos\
    \ = 0;\n    while(pos < space_string.length()) {\n        if(space_map[space_string[pos]]\
    \ != '_') {\n            space_string[pos] = '-';\n        }\n        pos++;\n\
    \    }\n    \n    return space_string;", "  // Convert spaces to underscores\n\
    \  for (auto &it : text) {\n    if (it == ' ') {\n      text.replace(0, text.size()\
    \ - 1, std::to_string(static_cast<unsigned char>(it)));\n    }\n  }\n  // Replace\
    \ consecutive spaces with -\n  int space_count = text.find_first_of(' ');\n  for\
    \ (int i = 0; i < space_count + 2; i++) {\n    text.replace(0, space_count, \"\
    -\");\n  }\n  return text;", "    std::string fixed_text = text;\n    for (int\
    \ i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ' && text[i + 1] ==\
    \ ' ' && text[i + 2] == ' ') {\n            fixed_text[i] = '_';\n           \
    \ fixed_text.erase(i + 1, 2);\n        }\n    }\n    return fixed_text;", "  \
    \  auto it = std::find_if(text.begin(), text.end(), [](char c) {return std::isspace(c);});\n\
    \    text.erase(it, text.end());\n    while(text.find(\" \") != std::string::npos)\
    \ {\n        auto it = text.find(\" \");\n        text.erase(it, text.end());\
    \ \n    }\n    while(text.find(\"  \") != std::string::npos) {\n        auto it\
    \ = text.find(\"  \");\n        text.erase(it, text.end()); \n    }\n    while(text.find(\"\
    \  \") != std::string::npos) {\n        auto it = text.find(\"  \");\n       \
    \ text.erase(it, text.end()); \n    }\n    return text;", "    int count = 0;\n\
    \    int len = text.length();\n    bool last_space = false;\n    for (int i =\
    \ 0; i < len; i++) {\n        if (text[i] == ' ') {\n            last_space =\
    \ true;\n            count++;\n        } else {\n            last_space = false;\n\
    \            count = 1;\n        }\n        if (count > 2) {\n            count\
    \ = 1;\n            while (count > 1) {\n                text.insert(i, ' ');\n\
    \                i += len;\n                count--;\n            }\n        }\n\
    \    }\n    return text;", "    std::size_t pos = 0;\n    bool flag = false;\n\
    \    while(pos < text.size()) {\n        if(text[pos] == ' ' && !flag) {\n   \
    \         flag = true;\n            text.insert(pos, \"_\");\n        } else if(text[pos]\
    \ == ' ' && flag) {\n            flag = false;\n            text.insert(pos, \"\
    -\");\n        }\n        pos += 1;\n    }\n    return text;", "    std::map<char,\
    \ char> space_map{' ', '_'};\n    for (auto i : text) {\n        if (space_map.count(i)\
    \ == 0) {\n            space_map[i] = '_';\n        }\n    }\n    std::string\
    \ result;\n    for (int i = 0; i < text.size(); i++) {\n        char c = text[i];\n\
    \        if (space_map.count(c) == 0) {\n            result += c;\n          \
    \  continue;\n        }\n        if (i == text.size() - 1) {\n            result\
    \ += c;\n        } else {\n            result += space_map[c];\n        }\n  \
    \  }\n    return result;", "    for (auto c : text) {\n        if (c != ' ') {\n\
    \            text += \"_\";\n        }\n    }\n    return text;", "    // Replace\
    \ all spaces with underscores\n    size_t len = text.length();\n    std::string::size_type\
    \ pos = 0;\n    while (pos < len) {\n        size_t prev = pos;\n        pos =\
    \ text.find_first_of(' ', pos + 1);\n        if (pos == std::string::npos)\n \
    \           break;\n        text.erase(prev, pos);\n        pos = text.find_first_of('\
    \ ', pos + 1);\n        if (pos == std::string::npos)\n            break;\n  \
    \      text.replace(pos, 1, \" \");\n    }\n    // Replace all consecutive spaces\
    \ with -\n    pos = 0;\n    while (pos < text.length()) {\n        size_t prev\
    \ = pos;\n        pos = text.find_first_not_of(' ', pos + 1);\n        if (pos\
    \ == std::string::npos)\n            break;\n        text.erase(prev, pos);\n\
    \        pos = text.find_first_not_of(' ', pos + 1);\n        if (pos == std::string::npos)\n\
    \            break;\n        text.replace(pos, 1, \"-\");\n    }\n    return text;",
  "    std::string space_pattern = \" \";\n    std::string double_space_pattern =\
    \ \" \";\n    std::string new_text = \"\";\n    for (auto c : text) {\n      \
    \  if (c == space_pattern) {\n            new_text += \"_\";\n        } else if\
    \ (c == double_space_pattern) {\n            new_text += \"-\";\n        }\n \
    \       new_text += c;\n    }\n    return new_text;", "    size_t start = 0, end\
    \ = text.length();\n    while (end > start && text[end-1] == ' ') {\n        end--;\n\
    \    }\n    while (end > start && text[start] == ' ') {\n        start++;\n  \
    \  }\n    std::string s = text.substr(start, end - start);\n    size_t prev =\
    \ 0;\n    for (size_t i = 1; i < s.length(); i++) {\n        if (s[i] != ' ')\
    \ {\n            s.insert(prev, s[i], s.end());\n            prev = i;\n     \
    \   }\n    }\n    s.insert(prev, ' ', s.end());\n    return s;", "    for (auto\
    \ &c : text) {\n        if (std::isspace(c)) {\n            c = '_';\n       \
    \ }\n        if (std::isspace(c - 1)) {\n            c = '_';\n        }\n   \
    \ }\n    return text;", "    // If string has less than 2 spaces \n    if (text.size()\
    \ <= 2) return text;\n    // Replace all spaces with underscores \n    size_t\
    \ index = 0;\n    while (index < text.size() && isspace(text[index])){\n     \
    \   index++;\n    }\n    return std::string(text, index);", "  \n  // count how\
    \ many consecutive spaces there are\n  int spaces = 0;\n  for (char &c : text)\
    \ {\n    if (c == ' ') {\n      spaces++;\n    } else {\n      spaces = 0;\n \
    \   }\n  }\n\n  // replace spaces with dashes\n  for (char &c : text) {\n    if\
    \ (c == ' ') {\n      if (spaces > 1) {\n        c = '_';\n      }\n    } else\
    \ {\n      c = ' ';\n    }\n  }\n  return text;", "    \n    bool is_space = false;\n\
    \    \n    for (size_t i = 0; i < text.length(); i++) {\n        if (text[i] ==\
    \ ' ')\n            is_space = true;\n        else if (is_space) {\n         \
    \   is_space = false;\n            text.push_back('_');\n        }\n        else\
    \ if (text[i] == ' ' && i + 1 < text.length()) {\n            text.erase(i, 1);\n\
    \        }\n    }\n    \n    return text;", "  std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n  std::replace(text.begin(), text.end(), ' ', '_');\n  std::replace(text.begin(),\
    \ text.end(), ' ', '-');\n  \n  while(text.find(\" \") != std::string::npos){\n\
    \      text.replace(text.find(\" \"), 2, \"\");\n  }\n  \n  return text;", " \
    \   std::string result = \"\";\n    for (int i = 0; i < text.length(); i++) {\n\
    \        if (text[i] == ' ') \n            result += ('_');\n        else if (i\
    \ > 0 && (text[i-1] == ' ' || text[i-1] == '_') && \n                 i != text.length()\
    \ - 1)\n            result += ('_');\n        else \n            result += text[i];\n\
    \    }\n    return result;", "    // your code goes here\n    \n    int last_space=0;\n\
    \    \n    for(int i=0;i<text.length();i++) {\n        if(text[i]==' ') {\n  \
    \          text.erase(i, 1);\n            i--;\n            last_space=i;\n  \
    \      }\n        else {\n            if(last_space>i && last_space+1>i && last_space<i)\
    \ {\n                text.erase(last_space, 1);\n                text.insert(i,\
    \ \"-\");\n                i--;\n            }\n            last_space=0;\n  \
    \      }\n    }\n    return text;", "    std::string fixed_text = text;\n    for\
    \ (int i = 0; i < fixed_text.size(); i++) {\n        if (fixed_text[i] == ' ')\
    \ {\n            fixed_text[i] = '_';\n        }\n        if (i < fixed_text.size()\
    \ - 1 && fixed_text[i] == ' ' && fixed_text[i + 1] == ' ') {\n            fixed_text[i]\
    \ = '_';\n            i++;\n        }\n    }\n    return fixed_text;", "  for\
    \ (auto &c : text)\n    if (c==' ') c='_';\n  std::string result(\"\");\n  for\
    \ (auto &c : text)\n    if (c!='_')\n      result+=c;\n  return result;", "  \
    \  for (auto i = 0; i < text.length(); i++) {\n        if (text[i] == ' ')\n \
    \           text += \"_\";\n        else if (text[i] == ' ' && text[i - 1] ==\
    \ ' ')\n            text += \"_\";\n        else if (text[i] == ' ' && text[i\
    \ - 2] == ' ')\n            text += \"-\";\n    }\n    return text;", "    if\
    \ (text.empty()) return \"\";\n    \n    text.erase(std::remove_if(text.begin(),\
    \ text.end(), isspace), text.end());\n    \n    while(text.find(\"  \") != std::string::npos)\n\
    \    {\n        text.replace(text.find(\"  \"), 2, \"_\");\n    }\n    \n    return\
    \ text;", "  int i = 0;\n  int j = 0;\n  int count = 0;\n  while (i < text.length())\
    \ {\n    if (text[i] == ' ') {\n      if (count == 0 || count > 1) {\n       \
    \ text.replace(i, i + 1, \"-\");\n      }\n      count++;\n    } else {\n    \
    \  count = 0;\n      i++;\n    }\n  }\n  return text;", "  std::string cleaned;\n\
    \  text.replace(\" \", \"_\");\n  if (text.size() > 2) {\n    for (size_t i =\
    \ 0; i < text.size() - 2; i++) {\n      if (text[i] == ' ' && text[i + 1] == '\
    \ ') {\n        cleaned += '-';\n      } else {\n        cleaned += text[i];\n\
    \      }\n    }\n  }\n  return cleaned;", "    // your code goes here\n    int\
    \ n = text.size();\n    \n    for(int i = 0; i < n; i++){\n        if(text[i]\
    \ == ' ')\n            text[i] = '_';\n        if(text[i] == ' ')\n          \
    \  text[i] = '-';\n    }\n    return text;", "    std::replace(text.begin(), text.end(),\
    \ ' ', '_');\n    std::size_t pos = 0;\n    while(pos < text.size()) {\n     \
    \   if(text[pos] == ' ' && pos+1 < text.size() && text[pos+1] == ' ') {\n    \
    \        text.erase(pos++, text.end()-1);\n            continue;\n        }\n\
    \        else if(text[pos] == ' ' && pos+2 < text.size() && text[pos+1] == ' '\
    \ && text[pos+2] == ' ') {\n            text.erase(pos++, text.end()-1);\n   \
    \         text.erase(pos++, text.end()-1);\n            continue;\n        }\n\
    \        else if(text[pos] == ' ' && pos+3 < text.size() && text[pos+1] == ' '\
    \ && text[pos+2] == ' ' && text[pos+3] == ' ') {\n            text.erase(pos++,\
    \ text.end()-1);\n            text.erase(pos++, text.end()-1);\n            text.erase(pos++,\
    \ text.end()-1);\n            continue;\n        }\n        pos += 3;\n    }\n\
    \    return text;", "  // Your code here\n  int i = 0;\n  std::string res;\n \
    \ for(i = 0; i <= text.size(); i++) {\n    if (text[i] == ' ') {\n      char c\
    \ = text[i + 1];\n      if(c == ' ') {\n        res += '_';\n      } else {\n\
    \        res += c;\n      }\n      i++;\n    } else {\n      res += text[i];\n\
    \    }\n  }\n  return res;", "    std::string s = text;\n    size_t len = s.length();\n\
    \    for(size_t i = 0; i < len; i++) {\n        if(s[i] == ' ') {\n          \
    \  s.replace(i,i+1,\"_\");\n            i += 1;\n        }\n        else if(i\
    \ >= 1 && s[i-1] == ' ' && \n                        (i + 1 == len || \n     \
    \                    (s[i+1] == ' ' && \n                          (i + 2 == len\
    \ || \n                           (s[i+2] == ' ' && \n                       \
    \    s[i+3] == ' '))))) {\n            s.replace(i,i+2,\"-\");\n            i\
    \ += 2;\n        }\n    }\n    return s;", "    int spaces = 0;\n    for (char\
    \ c : text) {\n        if (c != ' ') {\n            text += \"_\";\n         \
    \   spaces++;\n        }\n    }\n    if (spaces > 1) {\n        text += \"-\"\
    ;\n        spaces = 1;\n    }\n    for (int i = 0; i < spaces - 1; i++) {\n  \
    \      text += \"-\";\n    }\n    return text;", "\tfor (auto &c : text) {\n\t\
    \tif (c == ' ') {\n\t\t\tc = '_';\n\t\t}\n\t}\n\tfor (auto &c : text) {\n\t\t\
    if (c == ' ' && text[i + 1] == ' ') {\n\t\t\tc = text[i + 2] = '-';\n\t\t}\n\t\
    }\n\treturn text;", "\t// Your code here\n\tsize_t len = text.length();\n\tstd::string\
    \ res;\n\tfor (size_t i = 0; i < len; i++) {\n\t\tif (text[i] == ' ') {\n\t\t\t\
    if (i + 1 < len && text[i + 1] == ' ') {\n\t\t\t\tres += \"_\";\n\t\t\t\ti +=\
    \ 2;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tres += \"-\";\n\t\t\t}\n\t\t}\n\t\telse {\n\
    \t\t\tres += text[i];\n\t\t}\n\t}\n\treturn res;", "    std::string out = text;\n\
    \    int spaces = 0;\n    for(int i=0;i<out.size();i++) {\n        if(out[i]=='\
    \ ') spaces++;\n        else {\n            if(spaces>0) out[i]='_';\n       \
    \     out.append(1,out[i]);\n            spaces = 0;\n        }\n    }\n    if(spaces>0)\
    \ out.resize(out.size()-1);\n    return out;", "    size_t pos = 0;\n    size_t\
    \ len = text.length();\n    std::string result = \"\";\n    while (pos < len)\
    \ {\n        pos = text.find_first_not_of(\" \", pos);\n        if (pos != std::string::npos)\
    \ {\n            result += std::string(pos, text.find_first_of(\" \", pos));\n\
    \        }\n        result += std::string(pos, text.find_first_of(\" \", pos +\
    \ 1));\n        pos = text.find_first_not_of(\" \", pos + 1);\n    }\n    return\
    \ result;", "    std::replace(text.begin(), text.end(), ' ', '_');\n    text.erase(\n\
    \        std::find_if(text.begin(), text.end(), [](char c){ return c == ' '; }),\
    \ \n        text.end());\n    if (text.size() > 2) {\n        std::replace(text.begin(),\
    \ text.end(), '  ', '-');\n        text.erase(\n            std::find_if(text.begin(),\
    \ text.end(), [](char c){ return c == ' '; }), \n            text.end());\n  \
    \  }\n    return text;", "    std::string result;\n    std::string temp;\n   \
    \ int counter = 0;\n    for (int i = 0; i < text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            temp = text[i];\n            if (i + 1 < text.size())\
    \ {\n                if (text[i + 1] == ' ') {\n                    result +=\
    \ temp;\n                    counter++;\n                    i = i + 2;\n    \
    \            } else {\n                    result += temp;\n                 \
    \   counter++;\n                    i = i + 1;\n                }\n          \
    \  } else {\n                result += temp;\n                counter++;\n   \
    \             i = i + 1;\n            }\n        } else {\n            result\
    \ += text[i];\n            counter++;\n        }\n    }\n    while (counter >\
    \ 0) {\n        temp = '_';\n        result += temp;\n        counter--;\n   \
    \ }\n    return result;", "  int space_cnt = 0;\n  for (int i = 0; i < text.length();\
    \ i++) {\n    if (text[i] == ' ') {\n      space_cnt++;\n    } else {\n      if\
    \ (space_cnt > 1) {\n        text = text.substr(0, i) + \"_\" + text.substr(i\
    \ + 1);\n      }\n      space_cnt = 0;\n    }\n  }\n  return text;", "    text\
    \ = text.replace(\" \", \"_\");\n    size_t prev = 0, next = 0, index = 0;\n \
    \   while (index < text.size()) {\n        if (text[index] == ' ') {\n       \
    \     prev = index;\n            while (prev < text.size() && text[prev] == '\
    \ ') ++prev;\n            if (prev == 0 || prev + 1 == text.size()) {\n      \
    \          while (next < text.size() && text[next] == ' ') ++next;\n         \
    \       ++next;\n                if (next >= text.size()) {\n                \
    \    text[next] = '-';\n                    ++index;\n                } else {\n\
    \                    text[next] = '.';\n                }\n            } else\
    \ {\n                while (next < text.size() && text[next] == ' ') ++next;\n\
    \                ++next;\n                while (next < text.size() && text[next]\
    \ == ' ') ++next;\n                ++next;\n                while (next < text.size()\
    \ && text[next] == ' ') ++next;\n                ++next;\n                text[next]\
    \ = '-';\n                ++index;\n            }\n        }\n        ++index;\n\
    \    }\n    return text;", "    auto text_lower = text;\n    for (auto &c : text)\
    \ {\n        if (c != ' ') {\n            text_lower = text_lower.replace(c, '_');\n\
    \        }\n    }\n    if (text_lower.find(' ') == std::string::npos) {\n    \
    \    return text;\n    } else {\n        size_t spaces = 0;\n        for (auto\
    \ &c : text_lower) {\n            if (c == '_') {\n                ++spaces;\n\
    \            } else {\n                spaces = 0;\n            }\n        }\n\
    \        if (spaces > 1) {\n            std::string final_text;\n            for\
    \ (auto &c : text) {\n                if (c == '_') {\n                    final_text\
    \ += '-';\n                } else {\n                    final_text += c;\n  \
    \              }\n            }\n            return final_text;\n        } else\
    \ {\n            return text;\n        }\n    }", "  std::string res;\n  for(int\
    \ i=0; i<text.size(); ++i){\n    if(text[i]==' '){\n      res+='_';\n    }\n \
    \   else if(text[i]==' ')\n      res+='-';\n    else\n      res+=text[i];\n  }\n\
    \  return res;", "    \n    \n    text = text.substr(0, text.find_first_of(' ')).c_str();\n\
    \    for (int i = text.find_first_of(' '); i != std::string::npos; i = text.find_first_of('\
    \ ', i + 1)) {\n        if (text[i] != ' ') {\n            text.insert(i, static_cast<char>(tolower(text[i])));\n\
    \        } else {\n            text.erase(i, i + 1);\n        }\n    }\n    \n\
    \    text = text.substr(0, text.find_last_of(' ')).c_str();\n    for (int i =\
    \ text.find_last_of(' '); i != std::string::npos; i = text.find_last_of(' ', i\
    \ - 1)) {\n        if (text[i] != ' ') {\n            text.insert(i, static_cast<char>(tolower(text[i])));\n\
    \        } else {\n            text.erase(i, i - 1);\n        }\n    }\n    \n\
    \    for (int i = 0; i < text.size(); ++i) {\n        if (text[i] == ' ')\n  \
    \          text[i] = '_';\n    }\n    \n    return text;", "    std::string result\
    \ = text;\n    for(std::string::iterator it = text.begin(); it != text.end();\
    \ it++) {\n        if (*it == ' ') {\n            result.append(\"_\");\n    \
    \    }\n        else if (result.size() > 1) {\n            if (result.back() ==\
    \ ' ' && it != text.begin()) {\n                result.pop_back();\n         \
    \   }\n            if (result.back() == ' ' && (it == text.end() - 1 || text[it\
    \ + 1] != ' ')) {\n                result.pop_back();\n            }\n       \
    \ }\n    }\n    return result;", "  for(size_t i = 0; i < text.length(); i++)\
    \ {\n    if(text.at(i) == ' ') {\n      text.at(i) = std::to_string(text.size());\n\
    \    }\n  }\n  std::string result = text;\n  std::replace_if(text.begin(), text.end(),\
    \ ' ', '_');\n  for(size_t i = 0; i < text.length(); i++) {\n    if(text.at(i)\
    \ != '_' &&\n       text.at(i) != '_') {\n      if(text.at(i) != ' ' &&\n    \
    \     text.at(i) != '_') {\n        text.at(i) = std::to_string(text.size());\n\
    \      }\n    }\n  }\n  return result;", "    auto begin = text.find(' ');\n \
    \   while (begin != std::string::npos)\n    {\n        auto end = text.find('\
    \ ', begin + 1);\n        if (end != std::string::npos)\n        {\n         \
    \   text = text.substr(0, begin) + \"_\" + text.substr(end + 1);\n        }\n\
    \        else\n        {\n            text = text.substr(0, begin);\n        }\n\
    \        begin = text.find(' ');\n    }\n    return text;", "    std::map<char,\
    \ char> space_map = {' ', '_', '-'};\n    for (auto & c: text) {\n        c =\
    \ space_map[c];\n    }\n    if (text.size() > 2 && text[text.size()-2] == ' '\
    \ \n            && text[text.size()-1] == ' ')\n    {\n        text = text.substr(0,\
    \ text.size()-2) + \"-\" + \n            text.substr(text.size()-1);\n    }\n\
    \    return text;", "    for (int i = 0, len = text.length(); i < len; i++) {\n\
    \        if (text[i] == ' ') {\n            while (i < len - 1 && text[i + 1]\
    \ == ' ')\n                i++;\n            if (i < len - 1 && text[i + 1] ==\
    \ ' ')\n                text.erase(i + 1, len - 1);\n            else\n      \
    \          text.erase(i, len);\n        }\n    }\n    return text;", "\t// Complete\
    \ this function\n    std::string::iterator it = text.begin();\n    while (it !=\
    \ text.end()) {\n        if (*it == ' ' && *(it+1) != ' ') *it = '_';\n      \
    \  if (it == text.end() - 1 || *(it+1) == ' ') *it = '-';\n        ++it;\n   \
    \ }\n    return text;", "  assert(text != \"\");\n  int count = 0;\n  for (auto\
    \ c : text) {\n    if (c == ' ') {\n      if (count > 0) {\n        text.insert(count,\
    \ '_');\n        count = 0;\n      } else {\n        text.insert(count, '_');\n\
    \      }\n    } else {\n      count++;\n    }\n  }\n  // If there is more than\
    \ 2 consecutive spaces, \n  // then replace all consecutive spaces with -\n  if\
    \ (count > 1) {\n    text.insert(count, '-');\n  }\n  return text;", "  // your\
    \ code goes here\n  // Do not return empty string, only string that has 2 or less\n\
    \  // consecutive spaces, otherwise return empty string\n  if (text.empty())\n\
    \    return text;\n  std::string ret;\n  for (size_t i = 0; i < text.length();\
    \ i++) {\n    if (text[i] == ' ')\n      ret += \"_\";\n    else if (i + 1 >=\
    \ text.length())\n      ret += text[i];\n    else\n      ret += text[i]; \n  }\n\
    \  return ret;", "    \n    for (size_t i = 0; i < text.size(); i++) {\n     \
    \   if (text[i] == ' ') {\n            text[i] = '_';\n        }\n        else\
    \ if (text.size() <= 2) {\n            if (text[i] == ' ' && text[i + 1] == '\
    \ ') {\n                text[i] = '-';\n            }\n        }\n    }\n    return\
    \ text;", "    std::string res = text;\n    std::size_t spaces_count = text.find_first_not_of(\"\
    \ \");\n    while (spaces_count != std::string::npos) {\n        res = res.substr(0,\
    \ spaces_count);\n        res = res.substr(0, spaces_count) + \"_\" + res.substr(spaces_count,\
    \ text.length());\n        spaces_count = res.find_first_not_of(\" \");\n    }\n\
    \    return res;", "    std::string out = text;\n    for(auto &c: out)\n     \
    \   if(std::isspace(c))\n            c = '_';\n        if(std::isspace(out[out.size()-2])\n\
    \            && !std::isspace(out[out.size()-1]))\n            out[out.size()-2]\
    \ = '-';\n    return out;", "    // replace all spaces with underscores\n    text\
    \ = std::regex_replace(text, std::regex(\" \"), std::string(\"_\"));\n    // if\
    \ there's more than 2 consecutive spaces, replace all \n    // consecutive spaces\
    \ with -\n    if (std::regex_search(text, std::regex(\"\\\\s{2,}\")))\n      \
    \  text = std::regex_replace(text, std::regex(\"\\\\s{2,}\"), std::string(\"-\"\
    ));\n    return text;", "    if (text.empty()) return text;\n    std::string result;\n\
    \    result.reserve(text.size());\n    for (std::string::iterator it = text.begin();\
    \ it != text.end(); ++it) {\n        if (*it == ' ') {\n            result +=\
    \ '_';\n        }\n        else if (*it == ' ')\n            result += '-';\n\
    \        else\n            result += *it;\n    }\n    return result;", "    std::string\
    \ result;\n    auto first_space = true;\n    for (auto c : text) {\n        if\
    \ (c == ' ') {\n            if (!first_space) {\n                result += '_';\n\
    \                first_space = true;\n            } else {\n                first_space\
    \ = false;\n            }\n        } else {\n            result += c;\n      \
    \  }\n    }\n    return std::move(result);", "  text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n  if (text.find(\"  \") != text.end())\
    \ {\n    std::string::size_type pos = 0;\n    while (true) {\n      if (text.find(\"\
    \  \", pos) != text.end()) {\n        text.erase(text.begin() + pos, text.begin()\
    \ + text.find(\"  \", pos + 2));\n        pos = text.find(\"  \", pos + 2);\n\
    \      } else {\n        break;\n      }\n    }\n  }\n  return text;", "    \n\
    \    for(auto &c : text) {\n        if(c == ' ') {\n            c = '_';\n   \
    \     }\n    }\n    return text;", "    std::string result;\n    int i = 0, len\
    \ = text.length();\n    while (i < len) {\n        if (text[i] == ' ')\n     \
    \       result += ' ';\n        else if (i != 0 && text[i-1] == ' ')\n       \
    \     result += '-';\n        else\n            result += text[i++];\n    }\n\
    \    return result;", "    \n    std::string temp = \"\";\n    for (auto it =\
    \ text.begin(); it != text.end(); ++it) {\n        if (it != text.begin()) {\n\
    \            if (*it == ' ') {\n                temp += \"_\";\n            }\
    \ else {\n                temp += *it;\n            }\n        } else {\n    \
    \        temp += *it;\n        }\n    }\n\n    while (temp.find('  ') != std::string::npos)\
    \ {\n        temp.replace(0, temp.find('  '), '_');\n    }\n    return temp;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    std::string::size_type\
    \ prev = 0, pos = text.find(' ', prev);\n    while (pos != std::string::npos)\
    \ {\n        std::string::size_type next = pos + 1;\n        if (next != text.size()\
    \ && text[next] == ' ')\n            ++next;\n        text = text.substr(0, pos)\
    \ + text.substr(next, text.size() - next);\n        pos = text.find(' ', prev);\n\
    \        prev = pos + 1;\n    }\n    return text;", "  std::string out = text;\n\
    \  \n  size_t space_pos = out.find(\" \");\n  while (space_pos != std::string::npos)\
    \ {\n    out = out.substr(0, space_pos) + \"_\" + out.substr(space_pos+1, std::string::npos);\n\
    \    space_pos = out.find(\" \");\n  }\n  \n  size_t consecutive_space_pos = out.find_first_of(\"\
    \  \");\n  while (consecutive_space_pos != std::string::npos) {\n    out = out.substr(0,\
    \ consecutive_space_pos) + \"-\"  + out.substr(consecutive_space_pos+1, std::string::npos);\n\
    \    consecutive_space_pos = out.find_first_of(\"  \");\n  }\n  \n  return out;",
  "    std::string ans = text;\n    for(int i=0;i<ans.length();i++) {\n        if(ans[i]\
    \ == ' ') {\n            ans[i] = '_'; \n        }\n        if(ans.substr(i,2)\
    \ == \" \") {\n            ans[i+2] = '-';\n        }\n    }\n    return ans;",
  "    // get length in characters\n    int len = text.length();\n    for(int i=0;i<len;++i)\
    \ {\n        // get current character \n        char c = text[i];\n        //\
    \ if space, change to underscore\n        if(c == ' ') text[i] = '_';\n      \
    \  // if more than two consecutive spaces, change to dash\n        else if(c ==\
    \ '  ' && i+1 < len && text[i+1] == ' ') {\n            text[i] = '-';\n     \
    \       ++i;\n        }\n    }\n    // return string with spaces fixed\n    return\
    \ text;", "    std::string fixed_text = text;\n    int index = fixed_text.find(\"\
    \ \");\n    while (index != std::string::npos) {\n        fixed_text.replace(index,\
    \ 1, std::to_string(\" _\").c_str());\n        index = fixed_text.find(\" \",\
    \ index + 1);\n    }\n    return fixed_text;", "    // Code here\n    std::string\
    \ new_string;\n    int count = 0;\n    for (int i = 0; i < text.size(); i++) {\n\
    \        if (text[i] == ' ') {\n            new_string += \"_\";\n           \
    \ count++;\n        } else {\n            new_string += text[i];\n        }\n\
    \        if (count == 2) {\n            new_string += \"-\";\n            count\
    \ = 0;\n        }\n    }\n    return new_string;", "    \n    // Initialize a\
    \ stack of bools to keep track of the \n    // number of consecutive spaces found\n\
    \    std::stack<int> spaces;\n\n    // Loop through the text until we get to the\
    \ end\n    for (size_t i = 0; i < text.length(); i++) {\n        // If current\
    \ char is a space, push it to stack\n        if (text[i] == ' ') {\n         \
    \   spaces.push(1);\n        }\n        // If current char is not space, \n  \
    \      // check if the current number of spaces \n        // is more than 2 and\
    \ pops stack \n        else if (spaces.size() > 0) {\n            int numSpaces\
    \ = spaces.size();\n            while (numSpaces > 1 && spaces.top() == 1) {\n\
    \                spaces.pop();\n                numSpaces--;\n            }\n\
    \        }\n        // If current number of spaces is equal to 2\n        // and\
    \ the current char is not a space, \n        // replace all spaces with _\n  \
    \      else if (spaces.size() == 2 && text[i] != ' ') {\n            text[i] =\
    \ '_';\n        }\n    }\n\n    return text;", "    text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n    if(text.size()>2) {\n        text.erase(std::remove_if(text.begin(),\
    \ text.end(), ::isspace), text.end());\n        text.erase(std::remove_if(text.rbegin(),\
    \ text.rend(), ::isspace), text.end());\n    }\n    return text;", "    std::string\
    \ temp(text); \n    for (int i = 0; i < temp.length(); ++i) {\n        if (temp[i]\
    \ == ' ')\n            temp[i] = '_';\n        else if (temp[i] == '\\t')\n  \
    \          temp[i] = '-';\n    }\n    return temp;", "    std::replace(text.begin(),\
    \ text.end(), ' ', '_');\n    std::replace(text.begin(), text.end(), ' ', '_');\n\
    \    std::replace(text.begin(), text.end(), ' ', '-');\n\n    return text;", " \
    \   // Create a vector of strings to be returned \n    std::vector<std::string>\
    \ result;\n    // Initialize a boolean variable \n    bool space = false;\n  \
    \  // Iterate over each character in the input string \n    for (char ch : text)\
    \ {\n        // If the character is a space\n        if (ch == ' ') {\n      \
    \      // Make space true\n            space = true;\n            // If space\
    \ is true but result not empty, \n            // then add underscore to result\n\
    \            if (result.size() > 0) {\n                result.back() = ch + '_';\n\
    \                result.push_back(ch);\n            } else {\n               \
    \ result.push_back(ch);\n            }\n        } else {\n            // Make\
    \ space false\n            space = false;\n            // If space is false and\
    \ result not empty, \n            // then append ch to result\n            if\
    \ (result.size() > 0) {\n                result.back() = ch + ch;\n          \
    \      result.push_back(ch);\n            } else {\n                result.push_back(ch);\n\
    \            }\n        }\n    }\n    // If result is not empty, \n    // then\
    \ append '-' to the end\n    if (result.size() > 0) {\n        result.back() =\
    \ '-';\n        result.push_back('\\0');\n    }\n    // Return result\n    return\
    \ std::string(result.begin(), result.end());", "   const auto is_space = [&](int\
    \ n) {\n      return std::isspace(static_cast<unsigned char>(n));\n   };\n   for\
    \ (auto n : text) {\n      if (!is_space(n)) {\n         text = std::string(text.begin(),\
    \ n) + '_';\n         break;\n      }\n   }\n   while (text.size() > 2 && is_space(text[text.size()\
    \ - 2])) {\n      text = text.substr(0, text.size() - 2) + \"_\";\n   }\n   return\
    \ text;", "    std::size_t found = text.find_first_of(' ');\n    while (found\
    \ != std::string::npos) {\n        text = text.substr(0, found) + text.substr(found\
    \ + 1).replace(\" \", \"_\") + text.substr(found + 2);\n        found = text.find_first_of('\
    \ ');\n    }\n    return text;", "    std::string result;\n    size_t start =\
    \ 0;\n    size_t end = 0;\n    bool found = false;\n    while (end < text.size())\
    \ {\n        // Find the space\n        end = text.find(' ', start);\n       \
    \ if (end == std::string::npos) {\n            end = text.size();\n        }\n\
    \        // Find the end of the space\n        size_t space_length = end - start;\n\
    \        // Replace spaces\n        std::string space = text.substr(start, space_length);\n\
    \        result += \"_\";\n        result += space;\n        if (text.size() -\
    \ end < 3)\n            result += \"-\";\n        // Find the next space\n   \
    \     start = end + 1;\n        found = false;\n        while (!found && start\
    \ < text.size()) {\n            end = text.find(' ', start);\n            if (end\
    \ == std::string::npos) {\n                end = text.size();\n            }\n\
    \            if (end - start == space_length) {\n                found = true;\n\
    \            }\n            result += \"-\";\n            result += text.substr(start,\
    \ end - start);\n            start = end + 1;\n        }\n    }\n    return result;",
  "    std::replace(text.begin(), text.end(), ' ', '_');\n    if (text.find(\"  \"\
    ) != std::string::npos) {\n        std::replace(text.begin(), text.end(), '  ',\
    \ '-');\n    }\n    return text;", "    std::string res;\n    for (int i = 0;\
    \ i < text.size(); i++) {\n        char c = text[i];\n        if (isspace(c))\
    \ {\n            res += \"_\";\n        } else {\n            res += c;\n    \
    \    }\n    }\n    int size = res.size();\n    if (size > 2) {\n        size =\
    \ size - 2;\n        for (int i = 0; i < size; i++) {\n            if (res[i]\
    \ == '_' && res[i + 1] == '_') {\n                res[i] = '-';\n            }\n\
    \        }\n    }\n    return res;", "    for(int i = 0; i<text.length(); i++){\n\
    \        if(isspace(text[i])){\n            if(i == 0)\n                text[i]\
    \ = '_';\n            else if(i == (text.length() - 1))\n                text[i]\
    \ = '_';\n            else if((text[i+1] == ' ') || (text[i-1] == ' '))\n    \
    \            text[i] = '-';\n        }\n    }\n    return text;", "    std::replace_if(text.begin(),\
    \ text.end(), isspace(), ' ');\n    // remove consecutive spaces\n    const auto\
    \ last = std::unique(text.begin(), text.end());\n    if (last != text.begin())\
    \ {\n        text.erase(last - text.begin(), text.end());\n    }\n    return text;",
  "    for(int i = 0; i < text.size(); i++) {\n        if(text[i] == ' ') {\n    \
    \        text[i] = '_';\n        }\n        if(text[i] == ' ' && text[i+1] ==\
    \ ' ') {\n            text[i] = '-';\n        }\n    }\n    return text;", " \
    \   std::size_t found = text.find(\" \");\n    if (found != std::string::npos)\
    \ {\n        while (found != std::string::npos) {\n            found = text.find(\"\
    \ \", found + 1);\n            if (found != std::string::npos) {\n           \
    \     text.replace(found, 1, \"_\");\n                found = text.find(\" \"\
    , found + 1);\n            } else {\n                found = std::string::npos;\n\
    \            }\n        }\n    }\n    return text;", "    // your code goes here\n\
    \    text.erase(std::remove_if(text.begin(), text.end(), \n        [&](char c)\
    \ {return !std::isspace(c);}),\n        text.end());\n    if (text.size() > 2)\
    \ {\n        text.erase(std::remove_if(text.begin(), text.end(),\n           \
    \ [&](char c) {return std::isspace(c);}),\n            text.end());\n        text.insert(text.begin(),\
    \ 1, ' ');\n        text.insert(text.begin(), text.end()-2, ' ');\n        text.insert(text.end(),\
    \ 1, '-');\n    }\n    return text;", "    int i, j, k;\n    for(i = 0; i < text.length();\
    \ i++) {\n        if(text[i] == ' ') {\n            j = i - 1;\n            while\
    \ (text[j] == ' ') {\n                j--;\n            }\n            k = j;\n\
    \            while (text[k] == ' ') {\n                k++;\n            }\n \
    \           if (i != j)\n                text.replace(j, k, \"-\");\n        }\n\
    \    }\n    return text;", "  std::string res = text;\n  for (size_t i = 0; i\
    \ < res.size(); ++i) {\n    char ch = res[i];\n    if (ch == ' ')\n      res[i]\
    \ = '_';\n    else if (i > 0 && res[i - 1] == ' ')\n      res[i] = '-';\n  }\n\
    \  return res;", "    // Write your code here\n    int flag = 0;\n    std::string\
    \ fixedText = \"\";\n    int i = 0;\n    int j = text.length();\n    while (flag\
    \ == 0 && i < j) {\n        if (text[i] == ' ') {\n            fixedText = fixedText\
    \ + \"-\";\n            i++;\n            flag = 1;\n        }\n        else if\
    \ (text[i] == \" \" && text[i+1] == \" \") {\n            fixedText = fixedText\
    \ + \"_\";\n            i++;\n            flag = 1;\n        }\n        else {\n\
    \            fixedText = fixedText + text[i];\n            i++;\n        }\n \
    \   }\n    return fixedText;", "\t// remove spaces\n\ttext.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end()); \n\t// check if there are more than two spaces\n\
    \tbool twoSpaces = false;\n\tfor (auto c : text) {\n\t\tif (c == ' ') {\n\t\t\t\
    twoSpaces = true;\n\t\t}\n\t}\n\tstd::string result = text;\n\tif (twoSpaces)\
    \ result = std::to_string(text.find_first_not_of(\" \")).c_str();\n\treturn result;",
  "    std::string out;\n    for (size_t i=0; i<text.size(); i++) {\n        if (text[i]\
    \ == ' ') {\n            // Replace the space with _\n            out += std::string(text.begin(),\
    \ text.begin()+i)+\n                    \"_\";\n        } else {\n           \
    \ out += text[i];\n        }\n    }\n    // If there are more than 2 consecutive\
    \ spaces,\n    // then replace all consecutive spaces with _\n    while (out.find(\"\
    __\") != std::string::npos) {\n        out = out.replace(\"__\", \"_\");\n   \
    \ }\n    return out;", "    \n    \n    text.erase(std::remove(text.begin(), text.end(),\
    \ ' '), text.end());\n    \n    if(text.size()<2){\n        \n        return text;\n\
    \    }\n    \n    int len = text.size()-1;\n    \n    for(int i=0;i<len-1;i++){\n\
    \        if(text[i] == ' '){\n            \n            std::string temp = (std::string)text[i+1];\n\
    \            \n            if(i+2 < len){\n                text[i] = temp;\n \
    \               text[i+1] = (std::string)text[i+2];\n                text[i+2]\
    \ = ' ';\n            }\n            else{\n                text[i] = temp;\n\
    \            }\n            \n        }\n    }\n    \n    return text;\n    ",
  "    auto it = text.begin();\n    while (it != text.end()) {\n        if (*it ==\
    \ ' ') {\n            ++it;\n        }\n        else {\n            it++;\n  \
    \          break;\n        }\n    }\n    text = std::string(it,text.end());\n\
    \    it = text.begin();\n    while (it != text.end()) {\n        if (*it == '\
    \ ') {\n            *it = '_';\n            ++it;\n        }\n        else {\n\
    \            it++;\n        }\n    }\n    return text;", "  std::string out(text);\n\
    \  std::size_t pos = 0;\n  while (pos < out.size()) {\n    pos = out.find(' ',\
    \ pos);\n    if (pos == std::string::npos)\n      break;\n    size_t len = pos\
    \ - pos + 1;\n    out.replace(pos, len, ' ');\n  }\n  while ((pos = out.find('_',\
    \ pos)) != std::string::npos) {\n    out.insert(pos, '_');\n    ++pos;\n  }\n\
    \  return out;", "    std::string ans = text;\n    for(char c : ans) \n      \
    \  if(c == ' ') \n            c = '_';\n    for(std::size_t i = 0; i < ans.size();\
    \ ++i)\n        if(ans[i] == ' ' && i+1 < ans.size() && ans[i+1] == ' ')\n   \
    \         ans[i] = '-';\n    return ans;", "    int len = text.length();\n   \
    \ std::string result = text;\n    for(int i = 0; i < len; i++) {\n        if(!isspace(text[i]))\
    \ {\n            if(result.length() > 1) {\n                result += \" \";\n\
    \                result += text[i];\n            } else {\n                result\
    \ += text[i];\n            }\n        }\n    }\n    return fix_spaces(result);",
  "    if (text.empty()) {\n        return text;\n    }\n    size_t start = 0;\n \
    \   size_t end = 0;\n    while (end < text.size()) {\n        start = end;\n \
    \       while (end < text.size() && text[end] == ' ') {\n            end++;\n\
    \        }\n        if (end >= text.size()) {\n            break;\n        }\n\
    \        end = find_first_not_of(\" \\t\\r\\n\", end);\n        text.insert(start,\
    \ end - start, ' ');\n    }\n    return text;", "    std::regex space_regex(\"\
    \\\\s+\");\n    std::smatch sm;\n    std::string s = text;\n    while (std::regex_search(s,\
    \ sm, space_regex)) {\n        s = s.substr(0, sm.start()) + \"_\" + s.substr(sm.end());\n\
    \    }\n    std::string s1 = s;\n    std::regex spaces_regex(\"\\\\s\");\n   \
    \ while (std::regex_search(s1, spaces_regex, sm)) {\n        s1 = s1.substr(0,\
    \ sm.start()) + \"-\";\n    }\n    return s1;", "    \n    // Create result string\
    \ \n    std::string result_str = std::string(\"\");\n    \n    // Get string length\n\
    \    int str_length = text.size();\n    \n    // Traverse through string \n  \
    \  int i = 0;\n    while (i < str_length) {\n        \n        // Replace spaces\
    \ with underscores \n        if (text[i] == ' ') {\n            result_str +=\
    \ \"_\";\n        }\n        else {\n            result_str += text[i];\n    \
    \    }\n        \n        i++;\n    }\n    \n    // If string has more than 2\
    \ consecutive underscores\n    int start_index = result_str.find(\"___\");\n \
    \   if (start_index > 0) {\n        \n        // Get string between first and\
    \ second underscores\n        int end_index = result_str.find(\"___\", start_index+2);\n\
    \        \n        // Remove underscores \n        result_str.replace(start_index,\
    \ end_index, \"_\");\n    }\n    \n    return result_str;", "    std::map<char,\
    \ int> map;\n    for(int i = 0; i < text.size(); i++) {\n        map[text[i]]++;\n\
    \    }\n    std::string res = \"\";\n    for(int i = 0; i < text.size(); i++)\
    \ {\n        if(!map.count(text[i])) {\n            res += text[i];\n        \
    \    continue;\n        }\n        if(map.at(text[i]) == 1) {\n            res\
    \ += \"_\";\n        }\n        if(map.at(text[i]) == 2) {\n            res +=\
    \ \"-\";\n        }\n    }\n    return res;", "    std::map<char,std::string>\
    \ map = {\n        {' ','_'}, \n        {' ','_'}, \n        {' ','_'}, \n   \
    \     {' ','_'}, \n        {' ','_'}\n    };\n    std::string res = text;\n  \
    \  std::for_each(std::begin(text), std::end(text), \n            [&map,&res](char\
    \ c) {\n                if (map.count(c)) {\n                    res = res.replace(map.find(c)->second,\
    \ map.find(c)->first);\n                }\n            });\n    return res;",
  "    std::string output;\n    for ( int i = 0; i < text.length(); i++) {\n     \
    \   if ( text[i] == ' ') {\n            output += '_';\n        } else {\n   \
    \         output += text[i];\n        }\n    }\n    return output;", "  std::replace(\
    \ text.begin(), text.end(), ' ', '_');\n  auto new_end = std::unique(text.begin(),\
    \ text.end());\n  text.erase(new_end, text.end());\n  if(text.back() == ' ')\n\
    \    text.back() = '_';\n  if(text.size() > 2) {\n    text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end());\n    text.insert(text.begin(), '-');\n    text.erase(std::remove(text.begin(),\
    \ text.end(), ' '), text.end());\n  }\n  return text;", "  \n  // Check for an\
    \ empty string\n  if (text.empty()) return text;\n  \n  // Replace all spaces\
    \ with underscores\n  text.resize(text.find_first_not_of(\" \"));\n  text.resize(text.find_last_not_of(\"\
    \ \"));\n  text.push_back(' ');\n  \n  // Replace multiple spaces with single\
    \ dash\n  while (text.size() > 2 && text.back() == ' ') {\n    text.pop_back();\n\
    \    text.push_back('-');\n  }\n  \n  return text;", "    std::string fixed_text\
    \ = \"\";\n    // Iterate through the string, \n    // replacing all spaces with\
    \ underscores, \n    // and if a string has more than 2 consecutive spaces, \n\
    \    // then replace all consecutive spaces with -\n    for (int i = 0; i < text.size();\
    \ i++) {\n        if (text[i] == ' ')\n            fixed_text += \"_\";\n    \
    \    else if (text[i] == ' ' && text.size() > i + 1 && text[i + 1] == ' ')\n \
    \           fixed_text += \"_\";\n        else\n            fixed_text += text[i];\n\
    \    }\n    return fixed_text;", "    // Create a vector to hold our new text\
    \ \n    std::vector<std::string> new_text;\n    // Iterate through the original\
    \ text\n    for(std::size_t i = 0; i < text.size(); ++i){\n        // If the current\
    \ character is a space\n        if(text[i] == ' '){\n            // Push the underscore\
    \ into the vector\n            new_text.push_back('_');\n        }\n        //\
    \ Otherwise, if the current character is not a space\n        else if(text[i]\
    \ != ' '){\n            // Push the current character into the vector\n      \
    \      new_text.push_back(text[i]);\n        }\n    }\n\n    // If the original\
    \ text was just spaces \n    // then append a dash to the end\n    if(new_text.empty()){\n\
    \        new_text.push_back('-');\n    }\n\n    // Return our new text\n    return\
    \ new_text;", "    std::regex space_regex(\"\\\\s+\");\n    std::string no_space\
    \ = std::regex_replace(text, space_regex, \"_\");\n    return std::regex_replace(no_space,\
    \ std::regex(\"_{2,}\"), \"\");", "  if(text.size() > 2) {\n    std::string res\
    \ = text;\n    std::size_t pos = 0;\n    while(true) {\n      pos = res.find_first_of(\"\
    \ \", pos);\n      if(pos == std::string::npos) return res;\n      res.replace(pos,\
    \ 2, \" - \");\n      pos += 2;\n    }\n  } else {\n    return text;\n  }", " \
    \   std::string result = text;\n    std::replace(std::begin(result), std::end(result),\
    \ ' ', '_');\n    if (result.find_first_of(\"  \") != std::string::npos) {\n \
    \       result.replace(result.find_first_of(\"  \") + 2, result.find_last_not_of(\"\
    \  \") - 1, \"-\");\n    }\n    return result;", "    bool flag = false;\n   \
    \ int count_spaces = 0;\n    for (int i = 0; i < text.size(); i++) {\n       \
    \ if (text[i] == ' ') {\n            count_spaces++;\n        } else {\n     \
    \       if (count_spaces > 1) {\n                text[i] = '_';\n            }\
    \ else {\n                text[i] = text[i];\n            }\n        }\n    }\n\
    \    return text;", "    int len = text.length();\n    if(len == 0) return text;\n\
    \n    for(unsigned int i = 0; i < len; ++i) {\n        char c = text[i];\n\n \
    \       if(c == ' ') {\n            text.push_back('_');\n            text.push_back('_');\n\
    \        }\n        else if(text.size() > 2 && c == ' ' && text[i-1] == ' ' &&\
    \ text[i+1] == ' ') {\n            text.erase(i+1, i+2);\n        }\n    }\n \
    \   return text;", "   std::string::size_type pos = 0;\n   while ((pos = text.find(\"\
    \ \", pos)) != std::string::npos) {\n       text.erase(pos, 1);\n       text.insert(pos,\
    \ \"_\");\n       pos = 0;\n   }\n   if(text.length() > 2){\n       while ((pos\
    \ = text.find(\" \", pos)) != std::string::npos) {\n           text.insert(pos,\
    \ '-');\n           pos = 0;\n       }\n   }\n   return text;", "    // TODO:\
    \ Complete this function\n    \n    // Your code here\n    \n    return text;"]
stop_tokens:
- "\n}"
