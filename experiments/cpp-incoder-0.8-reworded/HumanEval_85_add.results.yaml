language: cpp
name: HumanEval_85_add
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    std::vector<bool> even_odd(lst.size());\n\
    \    for(long i = 0; i < lst.size(); i++){\n        if(i % 2 == 0){\n        \
    \    even_odd[i] = true;\n        }else{\n            even_odd[i] = false;\n \
    \       }\n    }\n    int cnt = 0;\n    int pos = 0;\n    int size = lst.size();\n\
    \    for(long i = 0; i < size; i++){\n        if(even_odd[i]){\n            cnt\
    \ += lst[pos];\n            pos++;\n        }\n    }\n    return cnt;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp15g_z79m: /tmp/tmp15g_z79m.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i=0; i<lst.size();\
    \ i=i+2) {\n        ans = ans + lst[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp92zdnurg: /tmp/tmp92zdnurg.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::vector<long>::iterator it;\n  for (it\
    \ = lst.begin() + 1; it != lst.end(); ++it) {\n    if (*it % 2 == 0) {\n     \
    \ return std::accumulate(lst.begin(), it, [&](auto acc, long x){return acc + x;});\n\
    \    }\n  }\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwp0ut6_4.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpwp0ut6_4.cpp:11:29: error: cannot convert \u2018add(std::vector<long\
    \ int>)::<lambda(auto:22, long int)>\u2019 to \u2018long int\u2019 in return\n\
    \   11 |       return std::accumulate(lst.begin(), it, [&](auto acc, long x){return\
    \ acc + x;});\n      |              ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                             |\n      |                             add(std::vector<long\
    \ int>)::<lambda(auto:22, long int)>\nIn file included from /usr/include/c++/9/numeric:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n\
    \                 from /tmp/tmpwp0ut6_4.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h:\
    \ In instantiation of \u2018_Tp std::accumulate(_InputIterator, _InputIterator,\
    \ _Tp) [with _InputIterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Tp = add(std::vector<long int>)::<lambda(auto:22, long int)>]\u2019\
    :\n/tmp/tmpwp0ut6_4.cpp:11:85:   required from here\n/usr/include/c++/9/bits/stl_numeric.h:139:39:\
    \ error: no match for \u2018operator+\u2019 (operand types are \u2018add(std::vector<long\
    \ int>)::<lambda(auto:22, long int)>\u2019 and \u2018long int\u2019)\n  139 |\
    \  __init = _GLIBCXX_MOVE_IF_20(__init) + *__first;\n      |                 \
    \                      ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpwp0ut6_4.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argume"
  stdout: ''
  timestamp: 1660132574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    long sum = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        sum+= lst[i];\n        if (i %\
    \ 2 == 1) {\n            sum+=lst[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsduavntu: /tmp/tmpsduavntu.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::vector<long> evens;\n    std::vector<long>\
    \ odds;\n    long result = 0;\n    for (auto it=lst.begin(); it!=lst.end(); ++it)\
    \ {\n        if (*it % 2 != 0) {\n            evens.push_back(*it);\n        }\
    \ else {\n            odds.push_back(*it);\n        }\n    }\n\n    for (auto\
    \ it=evens.begin(); it!=evens.end(); ++it) {\n        result += *it;\n    }\n\n\
    \    for (auto it=odds.begin(); it!=odds.end(); ++it) {\n        result -= *it;\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpm_04__6_: /tmp/tmpm_04__6_.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long count = 0;\n  \
    \  // for loop should start from 0\n    for (size_t i = 0; i < lst.size(); i++)\
    \ {\n        // if even index add and increment count\n        if (i % 2 == 0)\
    \ {\n            sum += lst[i];\n            count += 1;\n        } else {\n \
    \           // if odd index only increment count\n            count += 1;\n  \
    \      }\n    }\n    \n    // return sum if even count else return sum/count\n\
    \    return count % 2 == 0 ? sum : sum / count;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp8q50lhsg: /tmp/tmp8q50lhsg.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    return lst.size() % 2 == 1 ? 0 : (lst.at(lst.size()-1)\
    \ + lst.at(lst.size()-2))/2;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdsd35d3_: /tmp/tmpdsd35d3_.cpp:12: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (size_t i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpjbasybdl: /tmp/tmpjbasybdl.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    assert(lst.size() >\
    \ 0);\n    for (long &it : lst) {\n        if (it % 2 == 1) {\n            sum\
    \ += it;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpyjtox2jv: /tmp/tmpyjtox2jv.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long result = 0;\n\
    \    long n = lst.size();\n    for ( long i = 0 ; i <n ; ++i ){\n        if( lst[i]\
    \ % 2 == 0 ){\n            result += lst[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ve522ls: /tmp/tmp1ve522ls.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  std::stack<long>\
    \ st;\n  for (size_t i = 0; i < lst.size(); i += 2) {\n    st.push(lst[i]);\n\
    \  }\n  long res = 0;\n  while (!st.empty()) {\n    res += st.top();\n    st.pop();\n\
    \  }\n  return res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp286l4t_c: /tmp/tmp286l4t_c.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    std::sort(lst.begin(),\
    \ lst.end());\n    long even = std::count_if(lst.begin(), lst.end(), [](long i)\
    \ { return (i % 2) == 0; });\n    long odd = std::count_if(lst.begin(), lst.end(),\
    \ [](long i) { return (i % 2) != 0; });\n    return even + odd;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0ic1rokp: /tmp/tmp0ic1rokp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132576
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::set<long> s;\n    for (auto elem :\
    \ lst) {\n        if (s.find(elem) != s.end())\n            return s.find(elem)\
    \ + 1;\n        s.insert(elem);\n    }\n    return -1;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfcmtk6_9.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpfcmtk6_9.cpp:11:33: error: no match for \u2018operator+\u2019 (operand\
    \ types are \u2018std::set<long int>::iterator\u2019 {aka \u2018std::_Rb_tree_const_iterator<long\
    \ int>\u2019} and \u2018int\u2019)\n   11 |             return s.find(elem) +\
    \ 1;\n      |                    ~~~~~~~~~~~~ ^ ~\n      |                   \
    \       |        |\n      |                          |        int\n      |   \
    \                       std::set<long int>::iterator {aka std::_Rb_tree_const_iterator<long\
    \ int>}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n  \
    \               from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfcmtk6_9.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:423:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::reverse_iterator<_Iterator>\
    \ std::operator+(typename std::reverse_iterator<_Iterator>::difference_type, const\
    \ std::reverse_iterator<_Iterator>&)\u2019\n  423 |     operator+(typename reverse_iterator<_Iterator>::difference_type\
    \ __n,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:423:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpfcmtk6_9.cpp:11:35:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018int\u2019\n   11 |             return s.find(elem) + 1;\n      | \
    \                                  ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpfcmtk6_9.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1216:5:\
    \ note: candidate: \u2018template<class _Iterator> constexpr std::move_iterator<_IteratorL>\
    \ std::operator+(typename std::move_iterator<_IteratorL>::difference_type, const\
    \ std::move_iterator<_Iterator"
  stdout: ''
  timestamp: 1660132575
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    auto it = lst.begin() + 1;\n    long even\
    \ = 0;\n    for (; it != lst.end(); ++it) {\n        even += *it;\n    }\n   \
    \ for (; it != lst.begin(); ++it) {\n        even += *it;\n    }\n    return even;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n        long even = 0, odd = 0;\n        for\
    \ (int i = 0; i < lst.size(); i++) {\n                if (lst[i] % 2 != 0) {\n\
    \                        even = even + lst[i];\n                } else {\n   \
    \                     odd = odd + lst[i];\n                }\n        }\n    \
    \    return even + odd;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpve9ryiyw: /tmp/tmpve9ryiyw.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Write your code here.\n    std::sort(lst.begin(),\
    \ lst.end());\n    long result = 0;\n    long size = lst.size();\n    for (int\
    \ i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n            result += lst[i];\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3ihji0az: /tmp/tmp3ihji0az.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  if (lst.size()\
    \ == 1) {\n    return lst[0];\n  }\n  long even = add((std::vector<long>()));\
    \ // 0\n  long odd = add(lst);              // 2\n  return even * 2 +\n      \
    \   std::find(lst.begin(), lst.end(), odd + 1) == lst.end()\n             ? odd\n\
    \             : even;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp999j5yyi: /tmp/tmp999j5yyi.cpp:8: long int add(std::vector<long int>):
    Assertion `lst.size() > 0'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int n = lst.size();\n    long ans = 0;\n\
    \    // O(n) loop\n    for (int i = 0; i < n; i++) {\n        if (i % 2 != 0)\n\
    \            ans += lst[i];\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpskh9b3bi: /tmp/tmpskh9b3bi.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::vector<long> even_indices;\n    even_indices.reserve(lst.size());\n\
    \    for (long i = 0; i < lst.size(); ++i) {\n        if (i & 1) {\n         \
    \   even_indices.push_back(i);\n        }\n    }\n    long evensum = std::accumulate(even_indices.begin(),\
    \ even_indices.end(), 0);\n    return evensum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmph9y8zekj: /tmp/tmph9y8zekj.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i%2==0) {\n            ans += i;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmptagsut1u: /tmp/tmptagsut1u.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n  auto\
    \ it = lst.begin();\n  long ans = 0;\n  while (it != lst.end()) {\n    if (*it\
    \ % 2 == 0) {\n      ans += *it;\n      ++it;\n    } else {\n      ++it;\n   \
    \ }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmplvr43nae: /tmp/tmplvr43nae.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    assert(lst.size() !=\
    \ 0);\n    assert(lst.size() % 2 == 0);\n\n    for (size_t i = 0; i < lst.size();\
    \ i = i + 2) {\n        ans += lst[i];\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpakdv43gp: /tmp/tmpakdv43gp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long mid = (lst.size()\
    \ / 2) + 1;\n    // if lst is empty\n    if (lst.size() == 0) {\n        return\
    \ sum;\n    }\n    // if mid element is even\n    else if (lst[mid] % 2 == 0)\
    \ {\n        // check if mid is last element\n        if (mid == lst.size() -\
    \ 1) {\n            sum += lst[mid];\n        }\n        // if mid is last element\
    \ and next is even\n        else if (lst[mid+1] % 2 == 0) {\n            sum +=\
    \ lst[mid];\n            sum += lst[mid+1];\n        }\n        // if mid is last\
    \ element and next is odd\n        else {\n            sum += lst[mid];\n    \
    \        sum += lst[mid+1];\n            sum += lst[mid+2];\n        }\n    }\n\
    \    // if mid is last element and next is even\n    else if (lst[mid] % 2 !=\
    \ 0) {\n        sum += lst[mid];\n    }\n    // if mid is last element and next\
    \ is odd\n    else {\n        sum += lst[mid];\n        sum += lst[mid+1];\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpjsuosj2c: /tmp/tmpjsuosj2c.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (auto val : lst)\
    \ {\n        if (val & 1) {\n            sum += val;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpq80o_1fc: /tmp/tmpq80o_1fc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.empty())\n        throw std::runtime_error(\"\
    No elements provided\");\n    long res = 0;\n    long size = lst.size();\n   \
    \ assert(size > 0);\n    for (size_t i = 0; i < size; ++i) {\n        // The elements\
    \ at odd indices\n        if (i % 2 == 1)\n            res += lst[i];\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpamg206e4: /tmp/tmpamg206e4.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    long sum = 0;\n    for\
    \ (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n           \
    \ sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0q99u1sp: /tmp/tmp0q99u1sp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n  auto\
    \ p = std::partition(lst.begin(), lst.end(), [](long &l, long &r){ return l %\
    \ 2 == 0; });\n  assert(lst.size() > p);\n  return p == lst.end()? 0: lst[p-1]+1;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmp7bgyp615.cpp:2:\n/tmp/tmp7bgyp615.cpp: In function \u2018long\
    \ int add(std::vector<long int>)\u2019:\n/tmp/tmp7bgyp615.cpp:10:21: error: no\
    \ match for \u2018operator>\u2019 (operand types are \u2018std::vector<long int>::size_type\u2019\
    \ {aka \u2018long unsigned int\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   10 |   assert(lst.size() > p);\n  \
    \    |          ~~~~~~~~~~ ^ ~\n      |                  |    |\n      |     \
    \             |    __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\n      |                  std::vector<long int>::size_type {aka long unsigned\
    \ int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n   \
    \              from /usr/include/c++/9/bits/specfun.h:45,\n                 from\
    \ /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp7bgyp615.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:926:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  926 |\
    \     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:   template\
    \ argument deduction/substitution failed:\nIn file included from /usr/include/c++/9/cassert:44,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp7bgyp615.cpp:2:\n/tmp/tmp7bgyp615.cpp:10:23: note:\
    \   mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   10 |   assert(lst.size() > p);\n      |                       ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                "
  stdout: ''
  timestamp: 1660132574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long ans = lst[0]; \n  for (int i = 1; i\
    \ < lst.size(); i++) {\n    if (lst[i] % 2 == 0) {\n      ans += lst[i];\n   \
    \ }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp9ywpgycm: /tmp/tmp9ywpgycm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // code here\n  assert(lst.size() > 0);\n\
    \  long ans = 0;\n  for (long i = 1; i < lst.size(); i++)\n    if (lst[i - 1]\
    \ % 2 == 0 && lst[i] % 2 != 0)\n      ans += lst[i - 1] + lst[i]; // + lst[i];\n\
    \  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxhe2_9l0: /tmp/tmpxhe2_9l0.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() == 0) {\n        std::cout<<\"\
    The length of the list is 0\\n\";\n        exit(-1);\n    }\n    assert(lst.size()\
    \ > 0);\n    std::vector<long> res;\n    for (auto &i : lst) {\n        if (i\
    \ % 2 == 0)\n            res.push_back(i);\n    }\n    if (res.size() == 0)\n\
    \        std::cout<<\"The list is empty\\n\";\n    else\n        std::cout<<res.size()<<\"\
    \\n\";\n    assert(res.size() != 0);\n    return res.size();\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpu9kjjeqi: /tmp/tmpu9kjjeqi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    long ans =\
    \ 0;\n    int n = lst.size() - 1;\n    for (int i = 0; i < n; i++) {\n       \
    \ if (i % 2 == 0)\n            ans += lst[i];\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0k8_5xke: /tmp/tmp0k8_5xke.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // Your code here\n  int even = 0;\n  for\
    \ (int i = 0; i < lst.size(); i++) {\n    if (lst[i] % 2 == 0) {\n      even++;\n\
    \    }\n  }\n  return (even);\n}\nint main() {\n    auto candidate = add;\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpjm4iehaz: /tmp/tmpjm4iehaz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ret = 0;\n    for (size_t i = 0; i\
    \ < lst.size(); ++i)\n        ret += lst[i] % 2;\n    return ret;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpc588w8t5: /tmp/tmpc588w8t5.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end());\n  \
    \  long ans = lst[0] + lst[1];\n    for (size_t i = 2; i < lst.size(); i++) {\n\
    \        ans += lst[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqzwdwwwj: /tmp/tmpqzwdwwwj.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // Your code here\n  long ans = 0;\n  for\
    \ (size_t i = 0; i < lst.size(); i += 2) {\n    ans += lst[i];\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0u0kpjam: /tmp/tmp0u0kpjam.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    long even\
    \ = 0;\n    for (long i = 0; i < lst.size(); i += 2) {\n        even += lst[i];\n\
    \    }\n    return even;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmppzntrdxf: /tmp/tmppzntrdxf.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long & i : lst)\
    \ {\n        if (i % 2 == 0)\n            sum += i;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbg5ai8w6: /tmp/tmpbg5ai8w6.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long result = 0;\n  assert(lst.size() >=\
    \ 1);\n  for (long i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n    \
    \  result += lst[i];\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2417v2y5: /tmp/tmp2417v2y5.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    int n = lst.size();\n\
    \    long sum = 0;\n    \n    for(int i = 0; i < n; i++) {\n        if(i%2 ==\
    \ 0) {\n            sum += lst[i];\n        }\n    }\n    \n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpztn41pup: /tmp/tmpztn41pup.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int N=lst.size();\n    long even_sum=0;\n\
    \    long odd_sum=0;\n    for(int i=0;i<N;i++){\n        if(lst[i]%2==0) even_sum+=lst[i];\n\
    \        else{\n            odd_sum+=lst[i];\n        }\n    }\n    return (even_sum\
    \ + odd_sum);\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpe18788_p: /tmp/tmpe18788_p.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (auto x: lst) {\n\
    \        if ((x % 2) == 0)\n            ans += x;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwgv5t6u7: /tmp/tmpwgv5t6u7.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if(lst.size() == 0) return 0;\n    long\
    \ res = 0;\n    int size = lst.size();\n    for(int i = 0; i < size; i++) {\n\
    \        if(lst[i] % 2 == 0) {\n            res += lst[i];\n        }\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpjkwdwnpi: /tmp/tmpjkwdwnpi.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132576
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    assert(lst.size() >=\
    \ 3);\n    for (long i : lst) {\n        if (i % 2 == 1)\n            ans += i;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpx3h3uly2: /tmp/tmpx3h3uly2.cpp:9: long int add(std::vector<long int>):
    Assertion `lst.size() >= 3'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    if (lst.size()\
    \ == 1)\n        return lst[0];\n    long sum = 0;\n    long sumOfEven = 0;\n\
    \    int i = 0;\n    for (; i < lst.size(); i++) {\n        if (lst[i] % 2 !=\
    \ 0)\n            sum += lst[i];\n        else\n            sumOfEven += lst[i];\n\
    \    }\n    return sumOfEven == sum ? sum : sum + sumOfEven;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp05dzqkwa: /tmp/tmp05dzqkwa.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132575
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int n = lst.size();\n    long ans = 0;\n\
    \    if (n % 2 == 1)\n        ans = lst[n / 2];\n    for (int i = 1; i < n; i\
    \ += 2) {\n        if (lst[i] % 2 == 0)\n            ans += lst[i];\n    }\n \
    \   return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660132574
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::vector<long>::iterator it;\n  std::set_intersection(lst.begin(),\
    \ lst.end(), lst.begin(), lst.end(),\n    [](long l, long r) { return l & r; });\n\
    \  return lst.size() - std::count(lst.begin(), lst.end(), 1);\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/algorithm:62,\n              \
    \   from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpgxgwvbc8.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h: In instantiation\
    \ of \u2018_OutputIterator std::__set_intersection(_InputIterator1, _InputIterator1,\
    \ _InputIterator2, _InputIterator2, _OutputIterator, _Compare) [with _InputIterator1\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _InputIterator2\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; _OutputIterator\
    \ = add(std::vector<long int>)::<lambda(long int, long int)>; _Compare = __gnu_cxx::__ops::_Iter_less_iter]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:5313:48:   required from \u2018_OIter std::set_intersection(_IIter1,\
    \ _IIter1, _IIter2, _IIter2, _OIter) [with _IIter1 = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _IIter2 = __gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >; _OIter = add(std::vector<long int>)::<lambda(long int,\
    \ long int)>]\u2019\n/tmp/tmpgxgwvbc8.cpp:10:41:   required from here\n/usr/include/c++/9/bits/stl_algo.h:5264:16:\
    \ error: assignment of read-only location \u2018* __result.add(std::vector<long\
    \ int>)::<lambda(long int, long int)>::operator long int (*)(long int, long int)()\u2019\
    \n 5264 |      *__result = *__first1;\n      |      ~~~~~~~~~~^~~~~~~~~~~\n/usr/include/c++/9/bits/stl_algo.h:5267:6:\
    \ error: no match for \u2018operator++\u2019 (operand type is \u2018add(std::vector<long\
    \ int>)::<lambda(long int, long int)>\u2019)\n 5267 |      ++__result;\n     \
    \ |      ^~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132574
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  int n = lst.size();\n  long ans = 0, sum\
    \ = 0;\n  for (int i = 0; i < n; i += 2) {\n    sum += lst[i];\n  }\n  ans = sum;\n\
    \  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpo48mbyt7: /tmp/tmpo48mbyt7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum=0;\n    long j=lst[0]/2;\n   \
    \ long k=lst[0]%2;\n    for (long i : lst) {\n        if ((i+j)%2==0) {\n    \
    \        sum+=i;\n        }\n        else {\n            sum+=j;\n        }\n\
    \        j=(i+k)%2;\n        k=(i+k)%2;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp6d2htbep: /tmp/tmp6d2htbep.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132577
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code goes here\n    \n    long\
    \ evenSum = 0;\n    \n    if(lst.size() % 2 == 0) {\n        return 0;\n    }\n\
    \    \n    for(size_t i = 0; i + 1 < lst.size(); i+=2) {\n        evenSum += lst[i];\n\
    \    }\n    \n    return evenSum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsruvy8jh: /tmp/tmpsruvy8jh.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp245cvtdw: /tmp/tmp245cvtdw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long evenSum = 0;\n  for (long i = 0; i <\
    \ lst.size(); i++) {\n    if (i % 2 == 0) {\n      evenSum += lst[i];\n    }\n\
    \  }\n  return evenSum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0_q45evd: /tmp/tmp0_q45evd.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long sum=0;\n  \
    \  for(int i=0; i<lst.size(); ++i)\n    {\n        if(i%2==0)\n            sum+=lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpfa1gpn9s: /tmp/tmpfa1gpn9s.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long result = lst.front();\n    lst.erase(lst.begin(),\
    \ lst.begin() + 1);\n    for (auto i = lst.begin(); i != lst.end(); i++) {\n \
    \       if (*i % 2 == 0) {\n            result += *i;\n            lst.erase(lst.begin());\n\
    \        }\n    }\n    return result;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size();\
    \ i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpw_u42sga: /tmp/tmpw_u42sga.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  int cnt = 0;\n  for (long val : lst) {\n\
    \    if (val & 1)\n      cnt += 1;\n  }\n  return cnt;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmprpxw00xx: /tmp/tmprpxw00xx.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int sum = 0;\n    for (auto i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpy6w6z9j1: /tmp/tmpy6w6z9j1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long sum=0;\n  \
    \  for(size_t i=0;i<lst.size();i+=2){\n        sum+=lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpqh11gc4t: /tmp/tmpqh11gc4t.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long size = 0;\n   \
    \ for (auto i : lst) {\n        if (i % 2 == 0) {\n            sum += i;\n   \
    \         ++size;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1wbrcxfp: /tmp/tmp1wbrcxfp.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long size = lst.size();\n\
    \    for (long i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n          \
    \  sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmphrwzrf8x: /tmp/tmphrwzrf8x.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if(lst.size() <= 1) {\n        return 0;\n\
    \    }\n    long ans  = 0;\n    long mid = lst.size()/2;\n    for(long i = 0;\
    \ i < mid; i++) {\n        if((lst[i] & 1) == 0) {\n            ans++;\n     \
    \   }\n    }\n    for(long i = mid; i < lst.size(); i++) {\n        if((lst[i]\
    \ & 1) == 1) {\n            ans++;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbr3huys9: /tmp/tmpbr3huys9.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // your code here\n  std::sort(lst.begin(),\
    \ lst.end());\n  for (int i=1; i<lst.size(); i++) {\n    if (lst[i] % 2 == 0)\n\
    \      lst.insert(lst.begin()+i,lst[i] + lst[i-1]);\n  }\n  return *std::max_element(lst.begin(),\
    \ lst.end()); // return max\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (long i = 0; i < n; i++) {\n        long temp = lst[i];\n        sum\
    \ += (i % 2 != 0) ? temp : 0;\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp31d1hqj_: /tmp/tmp31d1hqj_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // Your code here\n  long sum=0;\n  for (long\
    \ i=0;i<lst.size();i++){\n    sum+=lst[i];\n  }\n  return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpplzyvxxt: /tmp/tmpplzyvxxt.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Write your code here\n    long sum=0;\n\
    \    for(auto i:lst){\n        if(i%2==0){\n            sum+=i;\n        }\n \
    \   }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp_5jzm2al: /tmp/tmp_5jzm2al.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -8
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() != 0);\n    if (lst.size()\
    \ == 1) {\n        return lst[0];\n    }\n    std::vector<long> odd_indices_of_all_elements;\n\
    \    std::vector<long> even_indices_of_all_elements;\n    long odd_number = 0;\n\
    \    long even_number = 0;\n    for (long i = 0; i < lst.size(); ++i) {\n    \
    \    odd_indices_of_all_elements.push_back(i);\n        even_indices_of_all_elements.push_back(i);\n\
    \        if (i % 2 == 1) {\n            odd_number += lst[i];\n        }\n   \
    \ }\n    for (long i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0) {\n\
    \            even_indices_of_all_elements.push_back(i);\n        }\n    }\n  \
    \  long even_indicator = 1;\n    for (long i = 0; i < even_indices_of_all_elements.size();\
    \ ++i) {\n        even_indicator *= even_indices_of_all_elements[i];\n    }\n\
    \    for (long i = 0; i < odd_indices_of_all_elements.size(); ++i) {\n       \
    \ even_indicator /= odd_indices_of_all_elements[i];\n    }\n    return even_indicator\
    \ + odd_number;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    long n=lst.size();\n\
    \    long ans=0;\n    for(int i=0;i<n;i++){\n        if(lst[i]%2==0){\n      \
    \      ans+=lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpobq16crh: /tmp/tmpobq16crh.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    if (lst.empty()) return\
    \ ans;\n    for (size_t i = 0; i < lst.size(); i++)\n        if (i % 2 == 0)\n\
    \            ans += lst[i];\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3uo3ce7o: /tmp/tmp3uo3ce7o.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  long ans = 0;\n\
    \  for (int i = 1; i < lst.size(); i++) {\n    long a = lst[i] % 2 == 0 ? lst[i]\
    \ : lst[i] - 1;\n    long b = lst[i - 1] % 2 == 0 ? lst[i - 1] : lst[i - 1] -\
    \ 1;\n    long c = a + b;\n    if (c % 2 == 0) {\n      ans += c;\n    }\n  }\n\
    \  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpi1budwtf: /tmp/tmpi1budwtf.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    auto it = lst.begin();\n    long n = lst.size();\n\
    \    long sum = 0;\n    while (it != lst.end()) {\n        if (*it & 1)\n    \
    \        sum += *it;\n        ++it;\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp45xz1bgc: /tmp/tmp45xz1bgc.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    for (auto i : lst)\n\
    \        res += (i%2==0);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp8_yxm351: /tmp/tmp8_yxm351.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() != 0);\n    long sum\
    \ = 0;\n    long size = lst.size();\n    for (long i = 0; i < size; i++) {\n \
    \       sum += lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7s9op0a_: /tmp/tmp7s9op0a_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long a = 0;\n  \
    \  for (int i = 0; i < lst.size(); i+= 2) {\n        a+=lst[i];\n    }\n    return\
    \ a;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp6de_rlvl: /tmp/tmp6de_rlvl.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n\t// Write your code here.\n\treturn 0;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp2is6d9jn: /tmp/tmp2is6d9jn.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int sum = 0;\n    long ans = 0;\n    //\
    \ This loop will traverse the vector and sum up\n    // the even elements at odd\
    \ indices.\n    for (int i = 0; i < lst.size(); ++i) {\n        if (i%2==1) {\n\
    \            sum += lst[i];\n        }\n    }\n    ans = sum;\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0aa2f9nw: /tmp/tmp0aa2f9nw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    // iterate over the\
    \ vector\n    for (auto elem : lst) {\n        // if index is odd, add it to the\
    \ result\n        if (elem % 2 != 0) {\n            res += elem;\n        }\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp_kg9t6kn: /tmp/tmp_kg9t6kn.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long sum = 0;\n\
    \    for (size_t i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n  \
    \          sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpj60kajk9: /tmp/tmpj60kajk9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int size = lst.size();\n    long sum =\
    \ 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n      \
    \      sum += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n  \
    \  auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzpshgcmf: /tmp/tmpzpshgcmf.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    long sum =\
    \ 0;\n    for (long i = 1; i < lst.size(); i++) {\n        if (lst[i - 1] % 2\
    \ == 0 && lst[i] % 2 != 0) {\n            sum += lst[i];\n        }\n    }\n \
    \   return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmps1fk4u65: /tmp/tmps1fk4u65.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (auto it = lst.begin();\
    \ it != lst.end(); ++it)\n    if (it%2 == 0)\n      sum += *it;\n  return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ujmozu_.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmp9ujmozu_.cpp:10:11: error: no match for \u2018operator%\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 and \u2018int\u2019)\n   10 |     if (it%2 == 0)\n      |         ~~^~\n\
    \      |         |  |\n      |         |  int\n      |         __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\nIn file included from /usr/include/c++/9/valarray:603,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp9ujmozu_.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp9ujmozu_.cpp:10:12: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   10 |     if (it%2 == 0)\n      |     \
    \       ^\nIn file included from /usr/include/c++/9/valarray:603,\n          \
    \       from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n         \
    \        from /tmp/tmp9ujmozu_.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      "
  stdout: ''
  timestamp: 1660132578
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (auto i = lst.begin()\
    \ + 1; i!= lst.end(); i+= 2) {\n        ans += *i;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code goes here\n    \n    return\
    \ lst.size();\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpg0skjvt9: /tmp/tmpg0skjvt9.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  long ans = 0;\n\
    \  // for even index\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2\
    \ == 0) {\n      ans += lst[i];\n    }\n  }\n  // for odd index\n  for (int i\
    \ = lst.size() - 1; i >= 0; i--) {\n    if (i % 2 == 1) {\n      ans += lst[i];\n\
    \    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp8vm7uk_e: /tmp/tmp8vm7uk_e.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n\tassert(lst.size() > 0);\n\tlong sum = 0;\n\
    \tfor (auto i : lst) {\n\t\tif (i % 2 == 0) {\n\t\t\tsum += i;\n\t\t}\n\t}\n\t\
    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpfvdadome: /tmp/tmpfvdadome.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n\tassert(lst.size() > 0);\n\tlong sum = 0;\n\
    \tfor (long i = 0; i < lst.size(); i++) {\n\t\tif ((i&1) == 0) {\n\t\t\tsum +=\
    \ lst[i];\n\t\t}\n\t}\n\treturn sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbla_of64: /tmp/tmpbla_of64.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int size = lst.size();\n    long ans =\
    \ 0;\n    // O(sqrt(N)) - O(N)\n    for (int i = 0; i < size; ++i) {\n       \
    \ long a = lst[i];\n        int count = 0;\n        for (int j = i + 1; j < size;\
    \ ++j) {\n            if (lst[j] % 2 == 0) {\n                ++count;\n     \
    \       }\n        }\n        ans += count * a;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp6bcuqet1: /tmp/tmp6bcuqet1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long result = 0;\n    for (size_t i = 1;\
    \ i < lst.size(); i++) {\n        result += lst[i];\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbnhmvim0: /tmp/tmpbnhmvim0.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132578
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() == 0) return 0;\n    long\
    \ sum = 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 ==\
    \ 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpmq_sc7_a: /tmp/tmpmq_sc7_a.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    for (size_t i = 1; i\
    \ < lst.size(); i++) {\n        if (lst[i] % 2 != 0) {\n            res += lst[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsvbk8gox: /tmp/tmpsvbk8gox.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int n = 0;\n    for (size_t i = 0; i <\
    \ lst.size(); i++) {\n        if (lst[i] % 2 == 0) {\n            n++;\n     \
    \   }\n    }\n    return n;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpefatc_p_: /tmp/tmpefatc_p_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    long sum =\
    \ 0;\n    long odd_index = lst.size() - 1;\n    std::vector<long> odd_elements;\n\
    \    odd_elements.insert(odd_elements.end(), lst.begin() + odd_index, lst.end());\n\
    \n    for (auto &it : odd_elements) {\n        if (it % 2 == 1) {\n          \
    \  sum += it;\n        }\n    }\n\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpw53t6m4r: /tmp/tmpw53t6m4r.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long & i : lst)\
    \ sum += i;\n    return sum;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpc2s04yx0: /tmp/tmpc2s04yx0.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    auto it = lst.begin();\n\
    \    auto end = lst.end();\n    for (long i = 0; i < end; i++) {\n        if (i\
    \ % 2 == 0) {\n            ans += *it;\n            it++;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpze_l6nof.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpze_l6nof.cpp:11:24: error: no match for \u2018operator<\u2019 (operand\
    \ types are \u2018long int\u2019 and \u2018__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >\u2019)\n   11 |     for (long i = 0; i < end; i++) {\n\
    \      |                      ~ ^ ~~~\n      |                      |   |\n  \
    \    |                      |   __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n      |                      long int\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpze_l6nof.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:912:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator<(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  912 |\
    \     operator<(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:912:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpze_l6nof.cpp:11:26: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   11 |     for (long i = 0; i < end; i++) {\n   \
    \   |                          ^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpze_l6nof.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:919:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator<(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Co"
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::vector<long>::const_iterator it = lst.begin();\n\
    \  std::vector<long>::const_iterator it2 = lst.begin();\n  long evenSum = 0;\n\
    \  for (size_t index = 0; index < lst.size(); ++index) {\n    if (index & 1) {\n\
    \      evenSum += *it;\n      ++it;\n    } else {\n      evenSum += *it2;\n  \
    \    ++it2;\n    }\n  }\n  return evenSum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpswngz9oq: /tmp/tmpswngz9oq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132579
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    assert(lst.size() >\
    \ 0);\n    for (long i : lst) {\n        if (i % 2 == 1) {\n            ans +=\
    \ i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp1ksskjnz: /tmp/tmp1ksskjnz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long i = 0;\n    int\
    \ j = 0;\n    while(i < lst.size() && j < lst.size()){\n        if(i%2==0 && j%2!=0){\n\
    \            sum+=lst[i]; \n            i++;\n            j++;\n        }\n  \
    \      else if(i%2!=0 && j%2==0){\n            sum+=lst[j];\n            j++;\n\
    \        }\n        else if(i%2==0 && j%2==0){\n            i++;\n           \
    \ j++;\n        }\n        else if(i%2==0 && j%2!=0){\n            i++;\n    \
    \        j++;\n        }\n        else if(i%2!=0 && j%2==0){\n            j++;\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    std::vector<long>::const_iterator\
    \ it;\n    for ( it = lst.begin() ; it != lst.end() ; ++it ) {\n        if ( (*it)\
    \ % 2 == 0 ) {\n            res += *it;\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7fkx7ua4: /tmp/tmp7fkx7ua4.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132580
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() >= 1);\n  long ans = 0;\n\
    \  for (int i = 1; i < lst.size(); ++i) {\n    if (lst[i] % 2 == 1) {\n      ans\
    \ += lst[i];\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp40rijvt9: /tmp/tmp40rijvt9.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp5g3bdqm7: /tmp/tmp5g3bdqm7.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132507
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int n = lst.size();\n    for (int i = 1;\
    \ i < n; ++i) {\n        if (lst[i] % 2 == 0) {\n            lst[i] += lst[i -\
    \ 1];\n        }\n    }\n    return lst[n-1];\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp9dnnf6z1: /tmp/tmp9dnnf6z1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long even = 0, odd = 0;\n  // iterate through\
    \ the list to add even elements\n  for (int i = 0; i < lst.size(); i = i + 2)\
    \ {\n    even = even + lst[i];\n  }\n  // iterate through the list to add the\
    \ odd elements\n  for (int i = 1; i < lst.size(); i = i + 2) {\n    odd = odd\
    \ + lst[i];\n  }\n  return even + odd;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpkxj4wyk_: /tmp/tmpkxj4wyk_.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    return 0;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpr6gemu9a: /tmp/tmpr6gemu9a.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  int sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i++) {\n    if (i % 2 == 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpy5_r0sgm: /tmp/tmpy5_r0sgm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i = 0; i != lst.size(); ++i) {\n        if (lst[i] % 2 != 0) {\n     \
    \       ans += lst[i];\n            sum += lst[i];\n        }\n    }\n    long\
    \ result = sum - ans;\n    return result;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0lin95xt: /tmp/tmp0lin95xt.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  long evenSum =\
    \ 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n     \
    \ evenSum += lst[i];\n    }\n  }\n  return evenSum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp5f5g2gb6: /tmp/tmp5f5g2gb6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long len = lst.size();\n\
    \    assert(len > 0);\n\n    for (long i = 0; i < len; i++) {\n        if (i %\
    \ 2 == 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpnehn7y9g: /tmp/tmpnehn7y9g.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long n : lst) {\n\
    \        sum += n;\n    }\n    return sum % 2 == 0 ? 1 : 0;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpq6zgp3ec: /tmp/tmpq6zgp3ec.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if ((i % 2) == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpahbd0vkm: /tmp/tmpahbd0vkm.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() < 2)\n        return 0;\n\
    \    long result = lst[0];\n    for (int i = 1; i < lst.size(); i++) {\n     \
    \   if (lst[i] % 2 == 0) {\n            result += lst[i];\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpmcqt_idq: /tmp/tmpmcqt_idq.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() == 0) return 0;\n    std::vector<bool>\
    \ is_odd(lst.size(), false);\n    std::vector<bool> is_even(2 * lst.size(), false);\n\
    \    for (auto i : lst) {\n        if (is_odd[i]) {\n            is_even[i / 2]=true;\n\
    \        }\n    }\n    int ans = 1;\n    for (auto i : lst) ans *= i;\n    for\
    \ (auto i : is_odd) ans -= i;\n    for (auto i : is_even) ans += i;\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp_0jlvg9s: /tmp/tmp_0jlvg9s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Write your code here\n    long count=0;\n\
    \    for(long i=0;i<lst.size();i+=2){\n        count+=2;\n    }\n    return count;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwcleug72: /tmp/tmpwcleug72.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Write your code here\n    int n = lst.size();\n\
    \    long ans = 0;\n    for (int i = 0; i < n; ++i) {\n        if (i % 2 == 1)\
    \ {\n            ans += lst[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3449xj7y: /tmp/tmp3449xj7y.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++)\n    {\n        if ((i % 2) == 0)\n            ans += lst[i];\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpizndgnhz: /tmp/tmpizndgnhz.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    std::vector<bool> check(lst.size(),false);\n\
    \    for(long i = 0;i<lst.size();++i)\n        check[i] = ((lst[i] % 2)==1);\n\
    \    for(long i = 0;i<lst.size();++i)\n        if(!check[i])\n            ans+=lst[i];\n\
    \    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpgdd9ugu8: /tmp/tmpgdd9ugu8.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() != 0);\n  long sum = 0;\n\
    \  for (size_t i = 0; i < lst.size(); ++i) {\n    if (i % 2 == 0) {\n      sum\
    \ += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpft7_b1wq: /tmp/tmpft7_b1wq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  int sizes = lst.size();\n  int evenSizes\
    \ = sizes / 2;\n  std::vector<long> evenLst = lst.begin() + (evenSizes - 1), oddLst\
    \ = lst.begin() + evenSizes;\n  int sumEven = 0;\n  int sumOdd = 0;\n  for (int\
    \ i = 0; i < evenSizes; i++) {\n    sumEven += lst[evenLst[i]];\n  }\n  for (int\
    \ i = evenSizes; i < sizes; i++) {\n    sumOdd += lst[oddLst[i]];\n  }\n  return\
    \ sumEven + sumOdd;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmr4bu8_.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmprmr4bu8_.cpp:10:43: error: conversion from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to non-scalar type \u2018std::vector<long\
    \ int>\u2019 requested\n   10 |   std::vector<long> evenLst = lst.begin() + (evenSizes\
    \ - 1), oddLst = lst.begin() + evenSizes;\n      |                           \
    \    ~~~~~~~~~~~~^~~~~~~~~~~~~~~~~\n/tmp/tmprmr4bu8_.cpp:10:83: error: conversion\
    \ from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to non-scalar type \u2018std::vector<long int>\u2019 requested\n   10 |   std::vector<long>\
    \ evenLst = lst.begin() + (evenSizes - 1), oddLst = lst.begin() + evenSizes;\n\
    \      |                                                                     \
    \  ~~~~~~~~~~~~^~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    size_t size = lst.size();\n\
    \    for (size_t i = 0; i < size; i++) {\n        if (i % 2 != 0) sum += lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpy8fich_k: /tmp/tmpy8fich_k.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    std::sort(lst.begin(),\
    \ lst.end());\n    long sum = 0;\n    for (int i = 0; i != lst.size(); i += 2)\
    \ {\n        sum += lst[i];\n    }\n    return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsb24vtqv: /tmp/tmpsb24vtqv.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.empty()) return 0;\n    if (lst.size()\
    \ == 1) return lst[0];\n    long result = 0;\n    for (int i = 0; i < (int)lst.size();\
    \ i++) {\n        if (i % 2 == 0) {\n            result += lst[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwdqru1d4: /tmp/tmpwdqru1d4.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long res = 0;\n  for (size_t i = 0; i < lst.size();\
    \ i++) {\n    if (lst[i] % 2 != 0) {\n      res += lst[i];\n    }\n  }\n  return\
    \ res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7mdmp2qr: /tmp/tmp7mdmp2qr.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long sum=0;\n  \
    \  for(long i=0;i<lst.size();i++){\n        if((i+1)%2==0){\n            sum+=lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp_6u7u95q: /tmp/tmp_6u7u95q.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long even = 0;\n    long odd = 0;\n   \
    \ for (auto e : lst)\n    {\n        odd += e;\n    }\n    for (auto e : lst)\n\
    \    {\n        if (e % 2 == 0)\n        {\n            even += e;\n        }\n\
    \    }\n    return even+odd;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpenmri7wf: /tmp/tmpenmri7wf.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long cnt = 0;\n    for\
    \ (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n            cnt++;\n        }\n    }\n    if (cnt > 0) {\n     \
    \   return sum / cnt;\n    } else {\n        return 0;\n    }\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdon5vool: /tmp/tmpdon5vool.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long evenSum = 0;\n  long oddSum = 0;\n \
    \ for (int i = 0; i < lst.size(); i++) {\n    evenSum = (evenSum * 2) + lst[i];\n\
    \  }\n  for (int i = lst.size() - 1; i >= 0; i--) {\n    oddSum = (oddSum * 2)\
    \ + lst[i];\n  }\n  return evenSum + oddSum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwzb4pgdk: /tmp/tmpwzb4pgdk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ += lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzlm5y70x: /tmp/tmpzlm5y70x.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans=0;\n    for(auto i:lst) if (i%2==1)\
    \ ans+=i; return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxl0pvq32: /tmp/tmpxl0pvq32.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (size_t i = 0; i\
    \ < lst.size(); ++i) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpj78wfnix: /tmp/tmpj78wfnix.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Write your code here.\n    int len =\
    \ lst.size();\n    long sum = 0;\n    for (int i = 0; i < len/2; i++)\n    {\n\
    \        sum += lst[i];\n    }\n    sum += sum / 2;\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpt1z97804: /tmp/tmpt1z97804.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::pair<long, long> min;\n  if (lst.empty())\n\
    \    return 0;\n  if (lst.size() == 1)\n    return lst[0];\n  if (lst.size() ==\
    \ 2)\n    return lst[0] + lst[1];\n  min.first = std::min(lst[0], lst[1]);\n \
    \ min.second = std::max(lst[0], lst[1]);\n  return add(lst.begin() + 2, lst.end()\
    \ - 1, min);\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps11wqm__.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmps11wqm__.cpp:17:26: error: could not convert \u2018lst.std::vector<long\
    \ int>::begin().__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator+(2)\u2019 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>\u2019\n   17 |   return add(lst.begin()\
    \ + 2, lst.end() - 1, min);\n      |              ~~~~~~~~~~~~^~~\n      |   \
    \                       |\n      |                          __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    for (int i = lst.size()\
    \ - 1; i >= 0; --i) {\n        if (lst.at(i) % 2 != 0)\n            res += lst.at(i);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpc8ni5c_w: /tmp/tmpc8ni5c_w.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // code here\n  auto x = lst.begin();\n \
    \ auto y = lst.begin() + 1;\n  for (; y != lst.end(); x++, y++)\n    if (*x %\
    \ 2 == 0) *y = *x;\n  return lst.size() - y;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcj1jcq7b.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpcj1jcq7b.cpp:13:21: error: no match for \u2018operator-\u2019 (operand\
    \ types are \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned\
    \ int\u2019} and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019)\n   13 |   return lst.size() - y;\n      |          ~~~~~~~~~~\
    \ ^ ~\n      |                  |    |\n      |                  |    __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n      |                  std::vector<long int>::size_type\
    \ {aka long unsigned int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcj1jcq7b.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:974:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ decltype ((__lhs.base() - __rhs.base())) __gnu_cxx::operator-(const __gnu_cxx::__normal_iterator<_IteratorL,\
    \ _Container>&, const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\
    \n  974 |     operator-(const __normal_iterator<_IteratorL, _Container>& __lhs,\n\
    \      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:974:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpcj1jcq7b.cpp:13:23: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018std::vector<long int>::size_type\u2019 {aka \u2018long unsigned int\u2019\
    }\n   13 |   return lst.size() - y;\n      |                       ^\nIn file\
    \ included from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from\
    \ /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpcj1jcq7b.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:986:5:\
    \ note: candidate: \u2018template<class _Iterator, class"
  stdout: ''
  timestamp: 1660132581
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    if(lst.size() <=\
    \ 1) return 0;\n    long evensum = 0;\n    long evenindex = 0, oddindex = 1, even\
    \ = lst[evenindex];\n    long odd = lst[oddindex];\n    for(auto iter = lst.begin()\
    \ + 1; iter != lst.end(); iter++) {\n        even = lst[evenindex];\n        evensum\
    \ += even;\n        evenindex %= 2;\n        evensum += odd;\n        oddindex\
    \ %= 2;\n        odd += lst[oddindex];\n    }\n    return evensum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp8lbx0ki3: /tmp/tmp8lbx0ki3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long result = 0;\n    for(int i=0; i< lst.size();\
    \ i++){\n        if(lst[i]%2 != 0){\n            result += lst[i];\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdvjqs1q4: /tmp/tmpdvjqs1q4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    long ans =\
    \ 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n        if (i % 2 == 0) {\n\
    \            ans += lst[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp8jwo0wh0: /tmp/tmp8jwo0wh0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0 && lst.size() % 2\
    \ == 0);\n    int odd_size = lst.size() / 2;\n    long sum = 0;\n    for (int\
    \ i = 0; i < odd_size; i++) {\n        sum += lst[i];\n    }\n    for (int i =\
    \ odd_size; i < lst.size(); i++) {\n        sum += lst[i];\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmphrsx5aau: /tmp/tmphrsx5aau.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132581
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::set<long> s;\n  for (auto i : lst)\n\
    \    if (s.count(i) > 0)\n      return s.count(i);\n    s.insert(i);\n    return\
    \ s.count(i);\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gy9at4b.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmp1gy9at4b.cpp:12:14: error: \u2018i\u2019 was not declared in this scope\n\
    \   12 |     s.insert(i);\n      |              ^\n"
  stdout: ''
  timestamp: 1660132582
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n  std::vector<long>\
    \ evens;\n  long ans = 0;\n  for (size_t i = 0; i < lst.size(); i += 2) {\n  \
    \  ans += lst[i];\n    evens.push_back(lst[i]);\n  }\n  for (auto it = evens.begin();\
    \ it != evens.end(); it++)\n    lst.erase(*it);\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqe39kgo6.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpqe39kgo6.cpp:16:18: error: no matching function for call to \u2018\
    std::vector<long int>::erase(long int&)\u2019\n   16 |     lst.erase(*it);\n \
    \     |                  ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqe39kgo6.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1427:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator) [with _Tp = long int; _Alloc = std::allocator<long\
    \ int>; std::vector<_Tp, _Alloc>::iterator = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; typename std::_Vector_base<_Tp, _Alloc>::pointer\
    \ = long int*; std::vector<_Tp, _Alloc>::const_iterator = __gnu_cxx::__normal_iterator<const\
    \ long int*, std::vector<long int> >; typename __gnu_cxx::__alloc_traits<typename\
    \ std::_Vector_base<_Tp, _Alloc>::_Tp_alloc_type>::const_pointer = const long\
    \ int*]\u2019\n 1427 |       erase(const_iterator __position)\n      |       ^~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1427:28: note:   no known conversion for\
    \ argument 1 from \u2018long int\u2019 to \u2018std::vector<long int>::const_iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<const long int*, std::vector<long int>\
    \ >\u2019}\n 1427 |       erase(const_iterator __position)\n      |          \
    \   ~~~~~~~~~~~~~~~^~~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1454:7: note:\
    \ candidate: \u2018std::vector<_Tp, _Alloc>::iterator std::vector<_Tp, _Alloc>::erase(std::vector<_Tp,\
    \ _Alloc>::const_iterator, std::vector<_Tp, _Alloc>::const_iterator) [with _Tp\
    \ = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::iterator\
    \ = __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >; typename\
    \ std::_Vector_base<_Tp, _A"
  stdout: ''
  timestamp: 1660132582
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    assert(lst.size()\
    \ > 0);\n    long res = 0;\n    for (size_t i = 0; i < lst.size(); ++i) {\n  \
    \      if (i%2 != 0) {\n            long a = lst[i];\n            res += a;\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp535h9ngy: /tmp/tmp535h9ngy.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if(lst.size() < 2)\n        return 0;\n\
    \    long sum = 0;\n    long sum1 = lst[0] % 2;\n    for(auto elem : lst){\n \
    \       if(elem % 2 == 0)\n            sum += elem % 2 == 0 ? sum1 : elem % 2\
    \ == 1 ? sum1 : sum;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmprc0uhqp5: /tmp/tmprc0uhqp5.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwn2y22c6: /tmp/tmpwn2y22c6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    return 0;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpgr2awzp1: /tmp/tmpgr2awzp1.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n\t// Your code here\n\t// vector<long> arr;\n\
    \t// for (int i = 0; i < (int)lst.size(); i++) {\n\t// \tif (i%2 != 0) {\n\t//\
    \ \t\tarr.push_back(lst.at(i));\n\t// \t}\n\t// }\n\t// long sum = 0;\n\t// for\
    \ (int i = 0; i < (int)arr.size(); i++) {\n\t// \tsum += arr[i];\n\t// }\n\t\n\
    \t// return sum;\n\t\n\tint size = lst.size();\n\t\n\tlong sum = 0;\n\t\n\tfor\
    \ (int i = 0; i < size; i++) {\n\t\tsum += lst.at(i);\n\t}\n\t\n\tfor (int i =\
    \ size; i < (int)lst.size(); i++) {\n\t\tif (i%2 != 0) {\n\t\t\tsum += lst.at(i);\n\
    \t\t}\n\t}\n\t\n\treturn sum;\n}\nint main() {\n    auto candidate = add;\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpk0xt49cz: /tmp/tmpk0xt49cz.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long sum=0;\n  \
    \  for(int i=0;i<lst.size();i++){\n        if(lst.at(i)%2==0){\n            sum+=lst.at(i);\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzorvk2lp: /tmp/tmpzorvk2lp.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    for (size_t i = 0; i\
    \ < lst.size(); i++) {\n        res += lst[i];\n        if (i % 2 == 0)\n    \
    \        res += lst[(i + 1)];\n    }\n    return res;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpjg_z25a1: /tmp/tmpjg_z25a1.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // Your code here\n  assert(lst.size() >\
    \ 0);\n  long sum = 0;\n  for (long i = 0; i < lst.size(); i++) {\n    if (i %\
    \ 2 == 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n}\nint main() {\n\
    \    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpstkdhkyg: /tmp/tmpstkdhkyg.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    assert(lst.size() >\
    \ 0);\n    for (long i : lst) {\n        if (i % 2 == 1) {\n            sum +=\
    \ i;\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate =\
    \ add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpa96o_9qt: /tmp/tmpa96o_9qt.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwn2y22c6: /tmp/tmpwn2y22c6.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132583
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long count = 0;\n  \
    \  for (long i : lst) {\n        if (i % 2 != 0) {\n            sum += i;\n  \
    \          count++;\n        }\n    }\n    return count;\n}\nint main() {\n  \
    \  auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdjvtma1o: /tmp/tmpdjvtma1o.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    int n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpocpgs5ci: /tmp/tmpocpgs5ci.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() >= 2);\n    long even\
    \ = 0;\n    for (long i = 0; i < lst.size() - 1; i++) {\n        if (i % 2 ==\
    \ 0) {\n            even += lst[i];\n        }\n    }\n    return even;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpap2p8fp0: /tmp/tmpap2p8fp0.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  assert(lst.size() > 0);\n  long res = 0;\n\
    \  for (int i = 0; i < lst.size(); i++)\n    if (lst[i] % 2 != 0)\n      res +=\
    \ lst[i];\n  return res;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsq79vvlh: /tmp/tmpsq79vvlh.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // your code here\n    long sum = 0;\n  for\
    \ (long i : lst) {\n    if (i % 2 == 1)\n      sum += i;\n  }\n  return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpisyzee6q: /tmp/tmpisyzee6q.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int size = lst.size();\n    long total\
    \ = 0;\n    for (int i = 0; i < size; i++) {\n        if (i % 2 == 0) {\n    \
    \        total += lst[i];\n        }\n    }\n    return total;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpyjt1spzl: /tmp/tmpyjt1spzl.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long count = 0;\n    for (auto i = lst.begin();\
    \ i != lst.end(); ++i) {\n        if (i%2==1) {\n            count += *i;\n  \
    \      }\n    }\n    return count;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx9h6udvv.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpx9h6udvv.cpp:10:14: error: no match for \u2018operator%\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 and \u2018int\u2019)\n   10 |         if (i%2==1) {\n      |       \
    \      ~^~\n      |             | |\n      |             | int\n      |      \
    \       __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\nIn file\
    \ included from /usr/include/c++/9/valarray:603,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmpx9h6udvv.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpx9h6udvv.cpp:10:15: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   10 |         if (i%2==1) {\n      |  \
    \             ^\nIn file included from /usr/include/c++/9/valarray:603,\n    \
    \             from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n   \
    \              from /tmp/tmpx9h6udvv.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINARY_OPERATO"
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = lst[0];\n    for (long i = 1;\
    \ i < lst.size(); ++i) {\n        if (lst[i] % 2 == 0) ans += lst[i];\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpofocgtdp: /tmp/tmpofocgtdp.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    long ans = 0;\n\
    \    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 != 0)\n      \
    \      ans += lst[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp8s0c0_tr: /tmp/tmp8s0c0_tr.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() == 0) {\n        return\
    \ 0;\n    }\n    long ans = lst[0];\n    for (long i : lst) {\n        ans +=\
    \ i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3f0g9irv: /tmp/tmp3f0g9irv.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if ((i & 1L) != 0)\n            ans += i;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzkqim336: /tmp/tmpzkqim336.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if ((i & 1) == 1)\n            ans += i;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpp06rxthj: /tmp/tmpp06rxthj.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (int i = 0; i <\
    \ lst.size(); i++) {\n        sum += lst[i] % 2;\n    }\n    return sum;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp0usiysfl: /tmp/tmp0usiysfl.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    int sum = 0;\n    for(auto elem : lst)\
    \ {\n        if(elem%2 != 0)\n            sum += elem;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp5ov1calq: /tmp/tmp5ov1calq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // code here\n    long sum = 0;\n    for(int\
    \ i = 0; i < lst.size(); i++){\n        if(i % 2 == 1){\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp542uxnk7: /tmp/tmp542uxnk7.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if(lst.size() == 0) return 0;\n    long\
    \ even = 0;\n    for(auto x : lst) {\n        if(x % 2 == 0) even += x;\n    }\n\
    \    return even;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpixuk6uzo: /tmp/tmpixuk6uzo.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long even=0;\n    long odd=0;\n    long\
    \ cnt=0;\n    for(auto it=lst.begin(); it!=lst.end();) {\n        if(((*it&1)==1))\n\
    \            cnt++;\n        else if(it==lst.end()) break;\n        else if(it==lst.begin())\
    \ it++;\n        else\n            it++;\n    }\n    for(auto it=lst.begin();\
    \ it!=lst.end();)\n        if(((*it&1)==1))\n            even+=cnt;\n        else\
    \ if(it==lst.end()) break;\n        else if(it==lst.begin()) it++;\n        else\n\
    \            it++;\n    return even+cnt;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzcq7kqt2: /tmp/tmpzcq7kqt2.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() == 0) {\n        std::cout<<\"\
    Cannot add the empty vector\"<<std::endl;\n        return -1;\n    }\n    auto\
    \ it = lst.begin();\n    long result = it->size();\n    for (std::size_t i = 1;\
    \ i < lst.size(); i++) {\n        if (it->at(i) % 2 == 0) {\n            result\
    \ += it->at(i);\n        }\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeqp9eu4g.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpeqp9eu4g.cpp:13:23: error: request for member \u2018size\u2019 in \u2018\
    * it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator->()\u2019\
    , which is of non-class type \u2018long int\u2019\n   13 |     long result = it->size();\n\
    \      |                       ^~~~\n/tmp/tmpeqp9eu4g.cpp:15:17: error: request\
    \ for member \u2018at\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> >::operator->()\u2019, which is of non-class type \u2018\
    long int\u2019\n   15 |         if (it->at(i) % 2 == 0) {\n      |           \
    \      ^~\n/tmp/tmpeqp9eu4g.cpp:16:27: error: request for member \u2018at\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   16\
    \ |             result += it->at(i);\n      |                           ^~\n"
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long res = 0;\n    for (long &i : lst)\n\
    \        if (i%2)\n            res += i;\n    return res;\n}\nint main() {\n \
    \   auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp_jf9dsos: /tmp/tmp_jf9dsos.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::set<long> setOdd;\n    for (long i\
    \ : lst) {\n        if (i % 2 == 0) setEven.insert(i);\n        else setOdd.insert(i);\n\
    \    }\n    return setOdd.size();\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo42vabck.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmpo42vabck.cpp:10:25: error: \u2018setEven\u2019 was not declared in\
    \ this scope\n   10 |         if (i % 2 == 0) setEven.insert(i);\n      |    \
    \                     ^~~~~~~\n"
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // code here\n  long sum = 0;\n  for (long\
    \ i = 0; i < lst.size(); i++) {\n    sum += (lst[i] % 2 == 0) ? lst[i] : -std::abs(lst[i]);\n\
    \  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpt8agw9iv: /tmp/tmpt8agw9iv.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132584
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::vector<long> vv(lst.size());\n   \
    \ for (size_t i = 0; i < lst.size(); i++) {\n        vv[i] = lst[i] + lst[i %\
    \ 2];\n    }\n    assert(lst.size() != 0);\n    return vv[(int)lst.size() / 2];\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp80s7uj2m: /tmp/tmp80s7uj2m.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if(lst.size() == 0) return 0;\n    long\
    \ sum = 0;\n    for(auto it = lst.begin(); it != lst.end(); ++it) {\n        if(*it\
    \ & 1) {\n            sum += *it;\n        }\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpk6p5obfz: /tmp/tmpk6p5obfz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() != 0);\n    long ans\
    \ = 0;\n    for (auto itlst : lst) {\n        if (itlst % 2 == 0)\n          \
    \  ans += itlst;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpzms8g54k: /tmp/tmpzms8g54k.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // Your code here\n    std::vector<long>\
    \ new_lst;\n    int len = lst.size();\n    for (int i = 0; i < len; i++) {\n \
    \       if (i % 2 == 0) {\n            new_lst.push_back(lst[i]);\n        }\n\
    \    }\n    return new_lst.size();\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpx1nz0lwe: /tmp/tmpx1nz0lwe.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (int i = 0; i < lst.size();\
    \ i = i + 2) {\n    sum += lst[i];\n  }\n  return sum;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7cpa_ozj: /tmp/tmp7cpa_ozj.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    assert(lst.size() > 0);\n    long ans =\
    \ 0;\n    for (long i = 0; i < lst.size(); i++) {\n        if (i % 2 == 1) {\n\
    \            ans += lst[i];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpdrtd58rs: /tmp/tmpdrtd58rs.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    std::vector<long> res;\n\
    \    if (lst.size() % 2 == 0) {\n        for (long i = 0; i < lst.size(); i +=\
    \ 2) {\n            sum += lst[i];\n        }\n        res.push_back(sum);\n \
    \   } else {\n        for (long i = 0; i < lst.size(); i += 2) {\n           \
    \ sum += lst[i];\n        }\n        res.push_back(sum);\n        res.push_back(0);\n\
    \    }\n    return res.front();\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpnvii51tu: /tmp/tmpnvii51tu.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // Your code here\n  std::unordered_map<long,\
    \ long> m;\n  for (int i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n\
    \      m[lst[i]]++;\n    }\n  }\n  long ans = 0;\n  for (auto it = m.begin();\
    \ it != m.end(); it++) {\n    ans += it->second;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmppl43cr2k: /tmp/tmppl43cr2k.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for(long i:lst) if(i%2==0)\
    \ sum += i;\n    return sum;\n}\nint main() {\n    auto candidate = add;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpsoyotj6j: /tmp/tmpsoyotj6j.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n\tassert(lst.size() > 0);\n\tlong ans = 0;\n\
    \tfor (long i = 0; i < lst.size(); i++) {\n\t\tif (i % 2 == 0)\n\t\t\tans += lst[i];\n\
    \t}\n\treturn ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpciiozlk0: /tmp/tmpciiozlk0.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // write your code here\n    long evenSum\
    \ = 0;\n    long oddSum = 0;\n    long size = lst.size();\n    for (long i = 0;\
    \ i < size; i++) {\n        if ((i & 1) == 1) {\n            evenSum = evenSum\
    \ + lst[i];\n        } else {\n            oddSum = oddSum + lst[i];\n       \
    \ }\n    }\n    return evenSum + oddSum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwzkb_rms: /tmp/tmpwzkb_rms.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // write your code here\n    long sum=0;\n\
    \    long index=0;\n    for(int i=0;i<lst.size();i++){\n        if(index%2==0){\n\
    \            sum+=lst[i];\n        }\n        index+=1;\n    }\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpvxzmjmu0: /tmp/tmpvxzmjmu0.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (size_t i = 0; i\
    \ < lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpaevlhruc: /tmp/tmpaevlhruc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long ans = 0;\n  for (size_t i = 0; i < lst.size();\
    \ i += 2) {\n    ans += lst[i];\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpp0y3gvqt: /tmp/tmpp0y3gvqt.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132585
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  if (lst.empty())\n    return -1;\n  long\
    \ res = 0;\n  for (int i = 0; i < lst.size() - 1; i++) {\n    if (lst[i] % 2 ==\
    \ 0 && lst[i + 1] % 2 == 1)\n      res += lst[i];\n  }\n  return res;\n}\nint\
    \ main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp4x2a6iwc: /tmp/tmp4x2a6iwc.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n        long ans = 0, even = 0;\n        for\
    \ (long elem : lst) {\n            if (elem % 2 == 0)\n                even +=\
    \ elem;\n            else {\n                ans += even;\n                even\
    \ = 0;\n            }\n        }\n        return ans;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpxvtcmkwo: /tmp/tmpxvtcmkwo.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = lst[0];\n    for(auto i : lst)\
    \ {\n        if(i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpmmc_ym94: /tmp/tmpmmc_ym94.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  std::sort(lst.begin(), lst.end());\n  long\
    \ cnt = 0;\n  for (auto it = lst.begin(); it != lst.end(); it++) {\n    if (*it\
    \ % 2 != 0)\n      cnt++;\n  }\n  return cnt;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp4zb81582: /tmp/tmp4zb81582.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long sum = 0;\n  for (long i : lst) {\n \
    \   sum += i & 1;\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpaiw14vm_: /tmp/tmpaiw14vm_.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (int i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] % 2 == 1)\n            sum += lst[i];\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpt97oiqaq: /tmp/tmpt97oiqaq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    auto it = lst.begin();\n    auto last =\
    \ lst.end();\n    long evens = 0;\n    for (; it != last; ++it) {\n        if\
    \ (it%2 == 0) {\n            evens += *it;\n        }\n    }\n    return evens;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4bmaqy02.cpp: In function \u2018long int add(std::vector<long int>)\u2019\
    :\n/tmp/tmp4bmaqy02.cpp:12:15: error: no match for \u2018operator%\u2019 (operand\
    \ types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >\u2019 and \u2018int\u2019)\n   12 |         if (it%2 == 0) {\n      |    \
    \         ~~^~\n      |             |  |\n      |             |  int\n      |\
    \             __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    In file included from /usr/include/c++/9/valarray:603,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n                 from\
    \ /tmp/tmp4bmaqy02.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5: note:\
    \ candidate: \u2018template<class _Dom1, class _Dom2> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Expr, _Dom1, _Dom2>, typename std::__fun<std::__modulus, typename\
    \ _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1, typename\
    \ _Dom1::value_type>&, const std::_Expr<_Dom2, typename _Dom2::value_type>&)\u2019\
    \n  409 |     _DEFINE_EXPR_BINARY_OPERATOR(%, __modulus)\n      |     ^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /usr/include/c++/9/bits/valarray_after.h:409:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp4bmaqy02.cpp:12:16: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>\u2019\n   12 |         if (it%2 == 0) {\n      |\
    \                ^\nIn file included from /usr/include/c++/9/valarray:603,\n \
    \                from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:95,\n\
    \                 from /tmp/tmp4bmaqy02.cpp:2:\n/usr/include/c++/9/bits/valarray_after.h:409:5:\
    \ note: candidate: \u2018template<class _Dom> std::_Expr<std::__detail::_BinClos<std::__modulus,\
    \ std::_Expr, std::_Constant, _Dom, typename _Dom::value_type>, typename std::__fun<std::__modulus,\
    \ typename _Dom1::value_type>::result_type> std::operator%(const std::_Expr<_Dom1,\
    \ typename _Dom1::value_type>&, const typename _Dom::value_type&)\u2019\n  409\
    \ |     _DEFINE_EXPR_BINA"
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  int n = lst.size();\n  long ans = 0;\n  for\
    \ (int i = 0; i < (n-1); i++) {\n    if (lst[i] % 2 != 0)\n      ans += lst[i];\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp3zl7rr3a: /tmp/tmp3zl7rr3a.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    // write your code here\n   assert(lst.size()\
    \ > 0);\n   long sum = 0;\n   for(std::size_t i = 0 ; i < lst.size(); ++i){\n\
    \      if(((i+1)%2)==0){\n         sum += lst[i];\n      }\n   }\n   return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpwa1rp3hi: /tmp/tmpwa1rp3hi.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (int i = 1; i <\
    \ lst.size(); i++) {\n        if (lst[i] % 2 == 0 && lst[i] != lst[i - 1]) {\n\
    \            ans += lst[i - 1];\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpn_61nauc: /tmp/tmpn_61nauc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if(lst.size() <= 1) return 0;\n    std::vector<long>\
    \ even_indices;\n    std::vector<long> odd_indices;\n    for(long i = 0; i < lst.size();\
    \ i += 2) {\n        even_indices.push_back(i);\n    }\n    for(long i = lst.size();\
    \ i > 0; i -= 2) {\n        odd_indices.push_back(i-1);\n    }\n    long sum =\
    \ 0;\n    long even_sum = 0, odd_sum = 0;\n    for(auto i : even_indices) {\n\
    \        even_sum += lst[i];\n    }\n    for(auto i : odd_indices) {\n       \
    \ odd_sum += lst[i];\n    }\n    sum += even_sum - odd_sum;\n    return sum;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpteanzdwk: /tmp/tmpteanzdwk.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    auto it = lst.begin();\n    long sum =\
    \ 0;\n    auto end = lst.end();\n    for (; it != end && (*it & 1) == 0; ++it)\
    \ {\n        sum += *it;\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpg11tlf60: /tmp/tmpg11tlf60.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  long ans = 0;\n  for (long i : lst) {\n \
    \   ans += i;\n    if (i%2==1) ans -= (long)1;\n  }\n  return ans;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpriia1rbm: /tmp/tmpriia1rbm.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long count = 0;\n  \
    \  for (auto i : lst)\n        if (i % 2 == 0)\n            sum += i;\n      \
    \      count++;\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpeps85y4_: /tmp/tmpeps85y4_.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // O(n^2) since we first traverse the vector\
    \ once.\n  for (long i = 0; i < lst.size(); i++) {\n    if (i % 2 == 1) {\n  \
    \    lst[i] += lst[i / 2];\n      lst[i / 2] = 0;\n    }\n  }\n  return lst[0];\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpkc4ojq0p: /tmp/tmpkc4ojq0p.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans=0;\n    for (int i=0;i<lst.size();i++)\
    \ {\n        if ((i%2)==1) {\n            ans+=lst[i];\n        }\n    }\n   \
    \ return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpbktneshq: /tmp/tmpbktneshq.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    if (lst.size() <= 1) return 0;\n    long\
    \ ans = 0;\n    for (size_t i = 1; i < lst.size(); i++) {\n        if (lst[i]\
    \ % 2 == 0) ans++;\n        if (lst[i] % 2 != 0) ans--;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmp7rtuy5vc: /tmp/tmp7rtuy5vc.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    std::sort(lst.begin(), lst.end(), std::greater<>());\n\
    \    long result = 0;\n    for (long i : lst)\n        result += i;\n    return\
    \ result % 2;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpvw6h7s9y: /tmp/tmpvw6h7s9y.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty vector\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n  // code here\n  long sum = 0;\n  for (int\
    \ i = 0; i < lst.size(); i++) {\n    if (i % 2 == 0) {\n      sum += lst[i];\n\
    \    }\n  }\n  return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: Exception
  stderr: 'tmpleph558v: /tmp/tmpleph558v.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)88}))) == (88)'' failed.

    '
  stdout: ''
  timestamp: 1660132586
