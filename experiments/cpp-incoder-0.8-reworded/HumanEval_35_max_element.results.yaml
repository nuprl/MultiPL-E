language: cpp
name: HumanEval_35_max_element
results:
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::vector<long>::iterator it=std::max_element(l.begin(),l.end());\n\
    \    assert(it != l.end());\n    return *it;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] > max_val)\n            max_val\
    \ = l[i];\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::pair<long, long> max = std::max_element(l.begin(),\
    \ l.end());\n  return max.first;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zttss9k.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9zttss9k.cpp:9:47: error: conversion from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to non-scalar type \u2018std::pair<long\
    \ int, long int>\u2019 requested\n    9 |   std::pair<long, long> max = std::max_element(l.begin(),\
    \ l.end());\n      |                               ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660092458
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  return *max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int i = l.size() - 1;\n    for (;\
    \ i >= 0; --i) {\n        if (l[i] > l[i + 1]) return l[i + 1];\n    }\n    return\
    \ l[i];\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp0u3sk59d: /tmp/tmp0u3sk59d.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092460
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long largest_value = 0;\n    long\
    \ largest_index = 0;\n    for (long i = 0; i < l.size(); i++) {\n        if (l[i]\
    \ > largest_value) {\n            largest_value = l[i];\n            largest_index\
    \ = i;\n        }\n    }\n    return largest_value;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(!l.empty());\n    long max_val\
    \ = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n        if (l[i] > max_val)\n\
    \            max_val = l[i];\n    }\n    return max_val;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  return\
    \ l.back();\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Write your code here\n    return\
    \ *std::max_element(l.begin(), l.end());\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Complete this line. Use the function\
    \ below.\n    return max_element(l.begin(),l.end());\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw08szx22.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw08szx22.cpp:10:23: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in return\n   10\
    \ |     return max_element(l.begin(),l.end());\n      |            ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~\n\
    \      |                       |\n      |                       __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for(long &i :\
    \ l)\n        if (i > max) {\n            max = i;\n        }\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tstd::pair<long, long> ret = *std::max_element(l.begin(),\
    \ l.end());\n\treturn ret.first;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0j2zglio.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0j2zglio.cpp:9:30: error: conversion from \u2018long int\u2019\
    \ to non-scalar type \u2018std::pair<long int, long int>\u2019 requested\n   \
    \ 9 |  std::pair<long, long> ret = *std::max_element(l.begin(), l.end());\n  \
    \    |                              ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long maximum = -1000000;\n  for (long\
    \ i = 0; i < l.size(); i++)\n    if (l[i] > maximum)\n      maximum = l[i];\n\
    \  return maximum;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long max=-LONG_MAX;\n  for (auto x:l){\n\
    \    if (x>max) max=x;\n  }\n  return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long res = 0;\n    for (auto x :\
    \ l) {\n        if (x > res)\n            res = x;\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (auto it =\
    \ l.begin(); it != l.end(); ++it) {\n        long value = *it;\n        if (value\
    \ > max) {\n            max = value;\n        }\n    }\n    return max;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Sort the vector.\n    std::sort(l.begin(),\
    \ l.end());\n    // Get the max element.\n    long max_val = l.front();\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_val) max_val = l[i];\n\
    \    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.empty()) {\n        std::cerr\
    \ << \"vector is empty.\\n\";\n        exit(-1);\n    }\n    long ans = 0;\n \
    \   for (long i = 0; i < l.size(); i++) {\n        if (l[i] > ans)\n         \
    \   ans = l[i];\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  auto max_val = l[0];\n  for (auto&\
    \ ele : l) {\n    if (ele > max_val) {\n      max_val = ele;\n    }\n  }\n  return\
    \ max_val;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  return\
    \ l[l.size()-1];\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto max_val = l[0];\n    auto max_idx\
    \ = l.size() - 1;\n    for (auto i = 1; i < l.size(); ++i) {\n        if (l[i]\
    \ > max_val) {\n            max_val = l[i];\n            max_idx = i;\n      \
    \  }\n    }\n    return max_idx;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmpf2_wosbv: /tmp/tmpf2_wosbv.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092460
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Your code goes here\n    long\
    \ max = l[0];\n    for(long i = 1; i < l.size(); i++) {\n        if(l[i] > max)\
    \ {\n            max = l[i];\n        }\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if(l.size() == 0)\n        return\
    \ 0;\n    auto it = l.begin();\n    auto end = l.end();\n    long maxval = *it;\n\
    \    for(; it != end; ++it) {\n        if(maxval < *it)\n            maxval =\
    \ *it;\n    }\n    return maxval;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::sort(l.begin(),\
    \ l.end());\n  return l.back();\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (size_t\
    \ i = 0; i < l.size(); ++i) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Return minimum element in the\
    \ vector.\n    // >>> min_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    \    // (1)\n    // >>> min_element((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n\
    \    // (10)\n    if (l.size() == 0) {\n        throw std::runtime_error(\"No\
    \ element to find!\");\n    }\n    auto it = std::max_element(l.begin(), l.end());\n\
    \    return *it;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tassert(l.size() > 0);\n\tlong ans =\
    \ l[0];\n\tfor (long i = 1; i < l.size(); i++)\n\t\tif (l[i] > ans) ans = l[i];\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto itr = std::max_element(l.begin(),\
    \ l.end());\n    return itr == l.end()? std::numeric_limits<long>::max() : *itr;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Write your code here\n    long\
    \ max = l[0];\n    for (long i : l) {\n        if (i > max) {\n            max\
    \ = i;\n        }\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int n = l.size();\n    long max =\
    \ l[0];\n    long maxidx = 1;\n\n    for (int i=1; i<n; i++) {\n        if (l[i]\
    \ > max) {\n            max = l[i];\n            maxidx = i;\n        }\n    }\n\
    \    return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tlong n = l.size();\n\tif (n <= 0) {\n\
    \t\tthrow std::logic_error(\"Vector must contain atleast one element\");\n\t}\n\
    \tlong max_ele = l[0];\n\tfor (long i = 1; i < n; ++i) {\n\t\tif (l[i] > max_ele)\
    \ {\n\t\t\tmax_ele = l[i];\n\t\t}\n\t}\n\treturn max_ele;\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val = -long_MAX;\n    auto\
    \ it = std::max_element(l.begin(), l.end());\n    return max_val = *it;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz95u7akn.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz95u7akn.cpp:9:21: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long max_val = -long_MAX;\n      |     \
    \                ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() >= 1);\n    long\
    \ max_element = l[0];\n    for (size_t i = 1; i < l.size(); ++i) {\n        if\
    \ (l[i] > max_element) {\n            max_element = l[i];\n        }\n    }\n\
    \    return max_element;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end()); // C++11 std::max_element\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  int n = l.size();\n  assert(n != 0);\n\
    \  long max_ele = 0;\n  for (int i = 0; i < n; ++i) {\n    max_ele = max(max_ele,\
    \ l[i]);\n  }\n  return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8klhd7z1.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8klhd7z1.cpp:13:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |     max_ele = max(max_ele,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8klhd7z1.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0)\n        return\
    \ 0;\n    long min_val = l[0];\n    for (long i = 1; i < l.size(); i++)\n    \
    \    min_val = l[i] < min_val ? l[i] : min_val;\n    return min_val;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp7itu4ts5: /tmp/tmp7itu4ts5.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092460
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(std::begin(l),\
    \ std::end(l));\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092458
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return l.back();\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  assert(l.size() > 0);\n  long res =\
    \ l[0];\n  for (size_t i = 1; i < l.size(); ++i) {\n    if (l[i] > res)\n    \
    \  res = l[i];\n  }\n  return res;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    if (it != l.end()) {\n        return *it;\n    }\n    throw std::domain_error(\"\
    max_element failed\");\n}\nint main() {\n    auto candidate = max_element;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tassert(l.size() > 0);\n\tlong max =\
    \ l[0];\n\tfor (int i = 1; i < l.size(); i++) {\n\t\tmax = std::max(max, l[i]);\n\
    \t}\n\treturn max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *(max_element(l.begin(), l.end()));\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n   long max = 0;\n   int pos = 0;\n \
    \  for (auto e : l) {\n      if (e > max) {\n         max = e;\n         pos =\
    \ 0;\n      } else if (e == max) {\n         ++pos;\n      }\n   }\n   return\
    \ pos;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp6dzcgbcn: /tmp/tmp6dzcgbcn.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092460
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  if (l.size() == 0) {\n    throw std::out_of_range(\"\
    Vector is empty.\");\n  }\n  auto it = std::max_element(l.begin(), l.end());\n\
    \  return *it;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto x = l.rbegin();\n    return\
    \ *x;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpl00u8ajb: /tmp/tmpl00u8ajb.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,
    (long)-10}))) == (124)'' failed.

    '
  stdout: ''
  timestamp: 1660092461
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    auto it\
    \ = l.begin();\n    while (it != l.end() && it > l.begin())\n        it--;\n \
    \   assert(it != l.end());\n    return *it;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmpthfjsefw: /tmp/tmpthfjsefw.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092461
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0)\n        return\
    \ 0;\n    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092461
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (size_t i\
    \ = 0; i < l.size(); ++i)\n        max = std::max(max, l[i]);\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092461
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Declare and initialize a vector\
    \ v.\n    std::vector<long> v (l);\n    // Declare and initialize a iterator begin.\n\
    \    std::vector<long>::iterator begin;\n    // Declare and initialize a iterator\
    \ end (use iterator begin for initialization).\n    std::vector<long>::iterator\
    \ end;\n    // Declare and initialize a variable max.\n    long max;\n    // Initialize\
    \ begin and end with vector v.\n    begin = v.begin();\n    end = v.end();\n \
    \   // For each element e in v, increment begin (use end for initialization).\n\
    \    for ( ; begin != end; ++begin) {\n        // If e is greater than max, update\
    \ max.\n        if (*begin > *max)\n            max = *begin;\n    }\n    // Return\
    \ max.\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp46exu4hx.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp46exu4hx.cpp:23:23: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018long int\u2019)\n   23 |         if (*begin > *max)\n\
    \      |                       ^~~\n"
  stdout: ''
  timestamp: 1660092461
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_num\
    \ = -l[0];\n    auto it = l.begin();\n    for (auto e = l.end() - 1; e > it; --e)\
    \ {\n        long x = *e;\n        if (x > max_num) {\n            max_num = x;\n\
    \        }\n    }\n    return max_num;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092461
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = INT_MIN;\n    for (long\
    \ i : l) {\n        max = std::max(max, i);\n    }\n    return max;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092461
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto max_value = std::numeric_limits<long>::max();\n\
    \    for (auto itr = l.begin(); itr != l.end(); ++itr) {\n        auto current\
    \ = *itr;\n        if (current > max_value) {\n            max_value = current;\n\
    \        }\n    }\n    return max_value;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmpsbjl45f8: /tmp/tmpsbjl45f8.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_val;\n    long max_index\
    \ = -1;\n    // Find the maximum.\n    for (long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > max_val) {\n            max_val = l[i];\n            max_index\
    \ = i;\n        }\n    }\n    return max_index;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmp7905jugd: /tmp/tmp7905jugd.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long long max = 0;\n    for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        max = std::max(*it, max);\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphtwsemid.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphtwsemid.cpp:11:32: error: no matching function for call\
    \ to \u2018max(long int&, long long int&)\u2019\n   11 |         max = std::max(*it,\
    \ max);\n      |                                ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphtwsemid.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmphtwsemid.cpp:11:32: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long int\u2019\
    \ and \u2018long long int\u2019)\n   11 |         max = std::max(*it, max);\n\
    \      |                                ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmphtwsemid.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmphtwsemid.cpp:11:32:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018long long int\u2019)\n   11 |         max = std::max(*it,\
    \ max);\n      |                                ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphtwsemid.cpp:2:\n/usr/include/c++/9/bits/stl_algo."
  stdout: ''
  timestamp: 1660092461
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int res = -1;\n    for (size_t i\
    \ = 0; i < l.size(); i++) {\n        if (res<l[i]) {\n            res = l[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092461
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long n = l.size();\n    if (n ==\
    \ 0) return 0;\n    long max = l[0];\n    for (long i = 1; i < n; i++)\n     \
    \   if (l[i] > max) max = l[i];\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long res = 0;\n    long long max\
    \ = 0;\n    for (long long i : l) {\n        if (i > max)\n            max = i;\n\
    \        if (i == max)\n            res = i;\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Write your code here\n    long\
    \ max_element = l[0];\n    for (size_t i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] > max_element) {\n            max_element = l[i];\n        }\n    }\n\
    \    return max_element;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int max = INT_MIN;\n    for (long\
    \ ele : l) {\n        if (ele > max) {\n            max = ele;\n        }\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::map<long, long>::iterator it\
    \ = l.begin();\n    while (it != l.end()) {\n        if (it->second > it->first)\n\
    \            it = l.erase(it);\n        else\n            ++it;\n    }\n    return\
    \ l.rbegin()->first;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp6clbistx.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6clbistx.cpp:9:48: error: conversion from \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019} to non-scalar type \u2018std::map<long int, long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_iterator<std::pair<const long int, long int> >\u2019\
    } requested\n    9 |     std::map<long, long>::iterator it = l.begin();\n    \
    \  |                                         ~~~~~~~^~\n/tmp/tmp6clbistx.cpp:10:15:\
    \ error: no match for \u2018operator!=\u2019 (operand types are \u2018std::map<long\
    \ int, long int>::iterator\u2019 {aka \u2018std::_Rb_tree_iterator<std::pair<const\
    \ long int, long int> >\u2019} and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   10 |     while (it != l.end()) {\n      |            ~~ ^~ ~~~~~~~\n  \
    \    |            |          |\n      |            |          std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\n      |            std::map<long int, long int>::iterator {aka std::_Rb_tree_iterator<std::pair<const\
    \ long int, long int> >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp6clbistx.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp6clbistx.cpp:10:24: note: \
    \  \u2018std::map<long int, long int>::ite"
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    return\
    \ *std::max_element(l.begin(), l.end());\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    assert(it != l.end());\n    return *it;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long minVal = -long_MAX;\n    long\
    \ maxVal = long_MAX;\n    for (size_t i = 0; i < l.size(); ++i) {\n        maxVal\
    \ = (maxVal < l[i]) ? (l[i]) : maxVal;\n        minVal = (minVal > l[i]) ? (l[i])\
    \ : minVal;\n    }\n    return maxVal;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9owleivo.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9owleivo.cpp:9:20: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long minVal = -long_MAX;\n      |      \
    \              ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  return *max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Your code here\n    if (l.size()\
    \ == 0) {\n        throw (\"Cannot find the max element of empty vector\");\n\
    \    }\n    long result = *std::max_element(l.begin(), l.end()); // C++17 onwards,\
    \ can do std::min_element instead.\n    if (l.size() > 1) {\n        std::vector<long>::iterator\
    \ itr = l.begin();\n        for (std::vector<long>::iterator itr2 = l.begin()\
    \ + 1; itr2 != l.end(); ++itr2)\n            if (*itr2 > result)\n           \
    \     itr = itr2;\n        result = *itr;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpfdqva58u: /tmp/tmpfdqva58u.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_so_far = l.front();\n  \
    \  for (long i = 1; i < l.size(); ++i) {\n        if (l[i] > max_so_far) {\n \
    \           max_so_far = l[i];\n        }\n    }\n    return max_so_far;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto max_element_itr = max_element(l.begin(),\
    \ l.end());\n    return *max_element_itr;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0)\n        return\
    \ std::numeric_limits<long>::min();\n    long max_val = l[0];\n    for (size_t\
    \ i = 0; i < l.size(); ++i) {\n        if (max_val < l[i]) {\n            max_val\
    \ = l[i];\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Use a map to store position of\
    \ each element\n    std::map<long, long> pos;\n    for (long i : l) {\n      \
    \  pos.emplace(i, 0);\n    }\n\n    std::vector<long>::iterator it;\n    for (it\
    \ = l.begin(); it != l.end(); ++it) {\n        auto pos = pos[*it];\n        if\
    \ (pos.second > it->second) {\n            pos.second = it->second;\n        }\n\
    \    }\n    return *std::max_element(pos.begin(), pos.end());\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj5cmbfrk.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpj5cmbfrk.cpp:17:20: error: use of \u2018pos\u2019 before\
    \ deduction of \u2018auto\u2019\n   17 |         auto pos = pos[*it];\n      |\
    \                    ^~~\n/tmp/tmpj5cmbfrk.cpp:18:30: error: request for member\
    \ \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   18 |         if (pos.second > it->second) {\n      |                     \
    \         ^~~~~~\n/tmp/tmpj5cmbfrk.cpp:19:30: error: request for member \u2018\
    second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   19 |             pos.second = it->second;\n      |                       \
    \       ^~~~~~\n/tmp/tmpj5cmbfrk.cpp:22:12: error: cannot convert \u2018std::pair<const\
    \ long int, long int>\u2019 to \u2018long int\u2019 in return\n   22 |     return\
    \ *std::max_element(pos.begin(), pos.end());\n      |            ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |            |\n      |            std::pair<const long int, long int>\n"
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() != 0);\n    std::sort(l.begin(),\
    \ l.end());\n    return l.back();\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::max_element(l.begin(), l.end());\n\
    \  return std::distance(l.begin(), l.end());\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmp10nhjq61: /tmp/tmp10nhjq61.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,
    (long)-10}))) == (124)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tassert(l.size() != 0);\n\tlong ans\
    \ = l[0];\n\tfor (size_t i = 1; i < l.size(); i++) {\n\t\tif (l[i] > ans) {\n\t\
    \t\tans = l[i];\n\t\t}\n\t}\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092461
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Get max element from vector and\
    \ save it in result variable\n    long result;\n    \n    // Iterate over each\
    \ element in the vector\n    for(long i = 0; i < l.size(); ++i){\n        // If\
    \ current element is not the biggest element found so far\n        // Then, update\
    \ the biggest element found so far\n        if(l[i] > result){\n            result\
    \ = l[i];\n        }\n    }\n    \n    // Return result of the function\n    return\
    \ result;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp_02cc8d0: /tmp/tmp_02cc8d0.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tlong max = l[0];\n\tfor (size_t i =\
    \ 1; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\t\t}\n\t\
    }\n\treturn max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long res = 0;\n    for (auto &e :\
    \ l) {\n        if (e > res) res = e;\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tlong max = l[0];\n\tlong index = 0;\n\
    \tfor (long i = 0; i < l.size(); i++) {\n\t\tif (l[i] > max) {\n\t\t\tmax = l[i];\n\
    \t\t\tindex = i;\n\t\t}\n\t}\n\treturn index;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmpaxczednu: /tmp/tmpaxczednu.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0) {\n        return\
    \ 0;\n    }\n    if (l.size() == 1) {\n        return l[0];\n    }\n    long max_value\
    \ = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > max_value)\
    \ {\n            max_value = l[i];\n        }\n    }\n    return max_value;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int n = l.size();\n    assert(n >\
    \ 0);\n    return *std::max_element(l.begin(), l.begin() + n);\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long res = 0;\n    // TODO: Optimize\
    \ by sorting and binary search\n    for (auto i = 0; i < l.size(); i++) {\n  \
    \      if (l[i] > res) {\n            res = l[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return (it == l.end() ? 0 : *it);\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  // Initialize two indexes for loop.\n\
    \  size_t i = 0;\n  size_t j = 0;\n  // Find the highest element among the first\
    \ i elements.\n  while (i < l.size()) {\n    if (l[i] > l[j]) {\n      i = i +\
    \ 1;\n    } else {\n      j = j + 1;\n    }\n  }\n  // Return the highest element.\n\
    \  return l[j];\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpo5khvb11: /tmp/tmpo5khvb11.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0) return l.size();\n\
    \    long max = 0;\n    for (long i : l)\n        max = max(max, i);\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjolmj43c.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjolmj43c.cpp:12:25: error: \u2018max\u2019 cannot be used\
    \ as a function\n   12 |         max = max(max, i);\n      |                 \
    \        ^\n"
  stdout: ''
  timestamp: 1660092461
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long maxval = 0;\n  for (long i = 0;\
    \ i < l.size(); i++)\n    maxval = max(maxval, l[i]);\n  return maxval;\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1qy60sla.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1qy60sla.cpp:11:14: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   11 |     maxval = max(maxval,\
    \ l[i]);\n      |              ^~~\n      |              std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1qy60sla.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = l.begin();\n    long maxval\
    \ = *it;\n    ++it;\n    while (it != l.end()) {\n        if (*it > maxval)\n\
    \            maxval = *it;\n        ++it;\n    }\n    return maxval;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  return\
    \ l.front();\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpkjicxcto: /tmp/tmpkjicxcto.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if(l.size()<1) return 0;\n    long\
    \ long maxV = std::accumulate(l.begin(), l.end(), 0);\n    for(long long i = 0;\
    \ i < l.size(); i++) {\n        if(maxV<l[i])\n            maxV = l[i];\n    }\n\
    \    return maxV;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpudb9rv03: /tmp/tmpudb9rv03.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0) return 0;\n  \
    \  long max = l[0];\n    for (size_t i = 1; i < l.size(); i++) {\n        if (l[i]\
    \ > max) max = l[i];\n    }\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = INT_MIN;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int size = l.size();\n    assert(size\
    \ > 0); //to make sure it is initialized\n    long max = l[0];\n    for (int i\
    \ = 1; i < size; i++) {\n        if (l[i] > max)\n            max = l[i];\n  \
    \  }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    auto result\
    \ = l[0];\n    for (auto i : l) {\n        if (result > i) {\n            result\
    \ = i;\n        }\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmph73vbekv: /tmp/tmph73vbekv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  if (l.empty())\n    return -1;\n  long\
    \ max = 0;\n  for (int i = 0; i < l.size(); i++)\n    if (l[i] > max)\n      max\
    \ = l[i];\n  return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long ans = -long_MAX;\n    auto it\
    \ = l.begin();\n    while (it != l.end()) {\n        if (*it > ans) {\n      \
    \      ans = *it;\n        }\n        ++it;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn2pl_sgk.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn2pl_sgk.cpp:9:17: error: \u2018long_MAX\u2019 was not\
    \ declared in this scope\n    9 |     long ans = -long_MAX;\n      |         \
    \        ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660092463
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int n = l.size();\n    assert(n >\
    \ 0);\n    std::pair<long, long> max = l[0];\n    for (int i = 1; i < n; ++i)\
    \ {\n        if (l[i] > max.first) {\n            max = l[i];\n        }\n   \
    \ }\n    return max.first;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpyzz89gwp.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpyzz89gwp.cpp:11:36: error: conversion from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to non-scalar type\
    \ \u2018std::pair<long int, long int>\u2019 requested\n   11 |     std::pair<long,\
    \ long> max = l[0];\n      |                                    ^\n/tmp/tmpyzz89gwp.cpp:14:22:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::pair<long\
    \ int, long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   14 |     \
    \        max = l[i];\n      |                      ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:64,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpyzz89gwp.cpp:2:\n/usr/include/c++/9/bits/stl_pair.h:378:7:\
    \ note: candidate: \u2018std::pair<_T1, _T2>& std::pair<_T1, _T2>::operator=(typename\
    \ std::conditional<std::__and_<std::is_copy_assignable<_T1>, std::is_copy_assignable<_T2>\
    \ >::value, const std::pair<_T1, _T2>&, const std::__nonesuch_no_braces&>::type)\
    \ [with _T1 = long int; _T2 = long int; typename std::conditional<std::__and_<std::is_copy_assignable<_T1>,\
    \ std::is_copy_assignable<_T2> >::value, const std::pair<_T1, _T2>&, const std::__nonesuch_no_braces&>::type\
    \ = const std::pair<long int, long int>&]\u2019\n  378 |       operator=(typename\
    \ conditional<\n      |       ^~~~~~~~\n/usr/include/c++/9/bits/stl_pair.h:381:51:\
    \ note:   no known conversion for argument 1 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::conditional<true,\
    \ const std::pair<long int, long int>&, const std::__nonesuch_no_braces&>::type\u2019\
    \ {aka \u2018const std::pair<long int, long int>&\u2019}\n  378 |       operator=(typename\
    \ conditional<\n      |                 ~~~~~~~~~~~~~~~~~~~~~          "
  stdout: ''
  timestamp: 1660092463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long ans = -INFINITY;\n    for (long\
    \ i : l) {\n        if (i > 0) {\n            ans = i;\n            break;\n \
    \       }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmphkup5f46: /tmp/tmphkup5f46.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return *(std::max_element(l.begin(), l.end()));\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  // Initialize maximum to infinity\n\
    \  long mx = LONG_MAX;\n  // Initialize minimum to negative infinity\n  long mn\
    \ = 0;\n  // Check each value in the vector\n  for (int i = 0; i < l.size(); ++i)\
    \ {\n    // If current value is greater than maximum\n    if (l[i] > mx) {\n \
    \     // Update maximum\n      mx = l[i];\n    }\n    // If current value is less\
    \ than minimum\n    else if (l[i] < mn) {\n      // Update minimum\n      mn =\
    \ l[i];\n    }\n  }\n  // Return maximum\n  return mx;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpl8routyz: /tmp/tmpl8routyz.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l[0];\n    for (long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (auto e :\
    \ l) {\n        if (e > max) {\n            max = e;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = l.begin();\n    auto last\
    \ = l.end();\n    assert(it != last);\n    long max_element = *it;\n    auto i\
    \ = ++it;\n    for (; (i != last) && max_element < *i; ++i)\n        max_element\
    \ = *i;\n    return max_element;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmpqfv0uyxw: /tmp/tmpqfv0uyxw.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,
    (long)-10}))) == (124)'' failed.

    '
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    assert(it != l.end()); // make sure it's sorted\n    return *it;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    assert(it != l.end());\n    return *it;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0)\n        return\
    \ 0;\n\n    long cur = l[0];\n    for (long i = 1; i < l.size(); i++) {\n    \
    \    if (l[i] > cur) {\n            cur = l[i];\n        }\n    }\n    return\
    \ cur;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // initialize max\n    long max =\
    \ l[0];\n    // iterate and update\n    for (long i : l) {\n        if (i > max)\
    \ {\n            max = i;\n        }\n    }\n    // return max\n    return max;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max;\n    for (auto i = l.begin();\
    \ i != l.end(); ++i) {\n        if (*i == 0) continue;\n        if ((*i) > max)\
    \ max = *i;\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmpche_g5vy: /tmp/tmpche_g5vy.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  int res = std::numeric_limits<long>::min();\n\
    \  for (int i = 0; i < l.size(); i++)\n    res = std::max(res, l[i]);\n  return\
    \ res;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc4pyvco0.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpc4pyvco0.cpp:9:43: warning: overflow in conversion from\
    \ \u2018long int\u2019 to \u2018int\u2019 changes value from \u2018-9223372036854775808\u2019\
    \ to \u20180\u2019 [-Woverflow]\n    9 |   int res = std::numeric_limits<long>::min();\n\
    \      |             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^~\n/tmp/tmpc4pyvco0.cpp:11:29:\
    \ error: no matching function for call to \u2018max(int&, __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type&)\u2019\n   11 |     res = std::max(res, l[i]);\n\
    \      |                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc4pyvco0.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpc4pyvco0.cpp:11:29: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   11 |     res = std::max(res, l[i]);\n      |\
    \                             ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpc4pyvco0.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpc4pyvco0.cpp:11:29:\
    \ note:   de"
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if (l.size() == 0) {\n        throw\
    \ std::runtime_error(\"The given vector is empty.\");\n    }\n    long maxv =\
    \ l[0];\n    for (long i = 1, len = l.size(); i < len; i++) {\n        if (l[i]\
    \ > maxv) {\n            maxv = l[i];\n        }\n    }\n    return maxv;\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max_v\
    \ = *std::max_element(l.begin(), l.end());\n    assert(max_v == *std::max_element(l.begin(),\
    \ l.end()));\n    return max_v;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(!l.empty());\n    std::bitset<64>\
    \ bits = *std::max_element(l.begin(), l.end());\n    return bits.to_ulong();\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto max_val = l[0];\n    for (const\
    \ auto &x : l) {\n        if (x>max_val) {\n            max_val = x;\n       \
    \ }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  assert(l.size() > 0);\n  std::stable_sort(l.begin(),\
    \ l.end());\n  return l[l.size()-1];\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::vector<long>::iterator it;\n\
    \    it = std::max_element(l.begin(), l.end());\n    assert(it != l.end());\n\
    \    return *it;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto max = std::numeric_limits<long>::max();\n\
    \    for (auto& i : l) {\n        if(i > max)\n            max = i;\n    }\n \
    \   return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpx0998gv6: /tmp/tmpx0998gv6.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto iter = std::max_element(l.begin(),\
    \ l.end());\n    assert(iter != l.end());\n    return (long)std::distance(l.begin(),\
    \ iter);\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp90ejmacn: /tmp/tmp90ejmacn.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  // Initialize max and min to first\
    \ and second elements.\n  long min1 = l[0];\n  long min2 = l[1];\n  // Iterate\
    \ through all the elements\n  for (long i = 2; i < l.size(); i++) {\n    long\
    \ cur1 = l[i];\n    long cur2 = l[i - 1];\n    if (cur2 < cur1) {\n      min2\
    \ = cur2;\n    }\n    if (min1 < min2) {\n      min1 = min2;\n    }\n  }\n  return\
    \ min1;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpjxqdjh_v: /tmp/tmpjxqdjh_v.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long min = l[0];\n    long max =\
    \ l[0];\n\n    for (long elem : l) {\n        if (elem < min) min = elem;\n  \
    \      if (elem > max) max = elem;\n    }\n\n    return max;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return std::distance(l.begin(), it);\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpk0t4j7aj: /tmp/tmpk0t4j7aj.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long largest\
    \ = l[0];\n    for (auto i : l) {\n        if (i > largest)\n            largest\
    \ = i;\n    }\n    return largest;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long maxVal = 0, i = l.size() - 1;\n\
    \    for (; i >= 0; i--) {\n        if (l[i] > maxVal) maxVal = l[i];\n    }\n\
    \    return maxVal;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long min = std::numeric_limits<long>::max();\n\
    \    long max = std::numeric_limits<long>::min();\n    for (auto el : l) {\n \
    \       if (el < min) min = el;\n        if (el > max) max = el;\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    if (it == l.end()) {\n        return -1L;\n    }\n    return\
    \ *it;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    if(l.size() == 0)\n        return\
    \ 0;\n    if(l.size() == 1)\n        return l[0];\n    long max = l[0];\n    for(long\
    \ i = 1; i < l.size(); i++) {\n        if(l[i] > max)\n            max = l[i];\n\
    \    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return std::max_element(l.begin(),\
    \ l.end()) - l.begin();\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmp8awel8qz: /tmp/tmp8awel8qz.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max\
    \ = l[0];\n    for (int i = 1; i < l.size(); i++)\n        if (max < l[i])\n \
    \           max = l[i];\n    return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = (long)0;\n    for (auto\
    \ e : l)\n        max = std::max(max, e);\n    return max;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Return largest element in the\
    \ vector.\n    long res = INT_MIN;\n    for (long i : l) {\n        res = std::max(res,\
    \ i);\n    }\n    return res;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    assert(it != l.end());\n    return *it;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  auto max_value = [](auto a, auto b)\
    \ { return (a > b) ? a : b; };\n  return max_element(l.begin(), l.end(), max_value);\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5ku7k1c.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe5ku7k1c.cpp:10:21: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in return\n   10\
    \ |   return max_element(l.begin(), l.end(), max_value);\n      |          ~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                     |\n      |                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660092464
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long max = l[0];\n  for (long i = 0;\
    \ i < l.size(); i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n\
    \  return max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = l.begin();\n    auto end\
    \ = l.end();\n    long res = 0;\n    while (it != end && *it > res)\n        ++it;\n\
    \    if (it == end)\n        return res;\n    for (; it != end; ++it)\n      \
    \  if (*it > res)\n            res = *it;\n    return res;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpm0ds96rp: /tmp/tmpm0ds96rp.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (long i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() <= 100000); // to\
    \ avoid runtime error for large inputs.\n    auto it = max_element(cbegin(l),\
    \ cend(l));\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    // Sort\
    \ first.\n    std::sort(l.begin(), l.end());\n\n    // Find maximum\n    long\
    \ maximum = l.back();\n    for (long &i : l)\n        if (i > maximum)\n     \
    \       maximum = i;\n    return maximum;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  return\
    \ l.front();\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpkjicxcto: /tmp/tmpkjicxcto.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    if (it == l.end()) return 0;\n    return *it;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return *it;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for (size_t i\
    \ = 0; i < l.size(); ++i) {\n        max = std::max(max, l[i]);\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long result = -99999999;\n    for\
    \ (auto i : l)\n        if (result < i)\n            result = i;\n    return result;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return it == l.end()? it: it->second;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuy7epaax.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuy7epaax.cpp:10:35: error: request for member \u2018second\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   10\
    \ |     return it == l.end()? it: it->second;\n      |                       \
    \            ^~~~~~\n"
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return l.back();\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto f = [](long x, long y){return\
    \ x >  y ? x : y;};\n    return *std::max_element(l.begin(), l.end(), f);\n}\n\
    int main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp7eanes4v: /tmp/tmp7eanes4v.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,
    (long)-10}))) == (124)'' failed.

    '
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int n = l.size();\n    assert(n !=\
    \ 0);\n    assert(n > 0);\n    long max_elem = l[0];\n    for (int i = 1; i <\
    \ n; ++i) {\n        if (l[i] > max_elem) {\n            max_elem = l[i];\n  \
    \      }\n    }\n    return max_elem;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    int size = l.size();\n    if (size\
    \ > 0) {\n        long long maximum = l[0];\n        for (int i = 1; i < size;\
    \ ++i) {\n            if (l[i] > maximum) {\n                maximum = l[i];\n\
    \            }\n        }\n        return maximum;\n    }\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092466
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto max_it=std::max_element(l.begin(),l.end());\n\
    \    return *max_it;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092466
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::cout << \"max_element of \" <<\
    \ l.size() << \" elements\" << std::endl;\n  // return std::accumulate(l.begin(),\
    \ l.end(), (long long int)0, [](long long int a, long long int b) { return (a\
    \ > b)? a : b; });\n  // return std::max(l.begin(), l.end());\n  return l.back();\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp_re75ydq: /tmp/tmp_re75ydq.cpp:17: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1,
    (long)-10}))) == (124)'' failed.

    '
  stdout: 'max_element of 3 elements

    max_element of 11 elements

    '
  timestamp: 1660092466
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max_element = 0;\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] > max_element) {\n           \
    \ max_element = l[i];\n        }\n    }\n    return max_element;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092466
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    for (long i = 0; i < l.size(); i++)\n\
    \    {\n        if (l[i] > l[(i+1)%l.size()])\n        {\n            long temp\
    \ = l[i];\n            l[i] = l[(i+1)%l.size()];\n            l[(i+1)%l.size()]\
    \ = temp;\n        }\n    }\n    return l[0];\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092466
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  auto it = std::max_element(l.begin(),\
    \ l.end());\n  return it == l.end() ? 0 : *it;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092466
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Code here\n    long max_val =\
    \ l[0];\n    for (long i : l) {\n        if (i > max_val) {\n            max_val\
    \ = i;\n        }\n    }\n    return max_val;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092466
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto end = std::max_element(l.begin(),\
    \ l.end()); \n    return *end;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return l[l.size() - 1];\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  assert(l.size() > 0);\n  // Find the\
    \ maximum value of a long variable\n  long max_val = l.front();\n  long min_val\
    \ = l.back();\n  for (long i : l) {\n    if (max_val < i) {\n      max_val = i;\n\
    \    }\n    if (min_val > i) {\n      min_val = i;\n    }\n  }\n  return max_val;\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = 0;\n    for(auto i : l)\
    \ {\n        if(i < max) {\n            max = i;\n        }\n    }\n    return\
    \ max;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmpehz489lz: /tmp/tmpehz489lz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092467
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Create a map of input values\n\
    \    std::unordered_map<long, std::pair<int, bool> > m;\n    // Add each value\
    \ to the map\n    for (long x : l) {\n        m[x] = std::make_pair(0, false);\
    \ //std::pair<long, bool> m;\n    }\n    std::vector<long> res;\n    // Sort the\
    \ map and output the maximum value\n    for (auto it = m.begin(); it != m.end();\
    \ ++it) {\n        if (it->second.second) {\n            res.push_back(it->first);\n\
    \        }\n    }\n    return res[0];\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long ans = -1;\n    for (long i =\
    \ 0; i < l.size(); i++) {\n        ans = std::max(ans, l[i]);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return *std::max_element(l.begin(), l.end());\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  assert(l.size() != 0);\n  auto max_element\
    \ = *std::max_element(l.begin(), l.end());\n  return max_element;\n}\nint main()\
    \ {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return l[l.size() - 1];\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = l.back();\n    for (long\
    \ i = 0; i < l.size(); i++) {\n        if (max < l[i]) {\n            max = l[i];\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  if (l.size() <= 1) return l.front();\n\
    \  long m = l.front();\n  for (long i = 1; i < l.size(); ++i)\n    if (l[i] >\
    \ m)\n      m = l[i];\n  return m;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tlong maximum = l[0];\n\tfor (std::vector<long>::size_type\
    \ i = 1; i < l.size(); i++)\n\t\tif (l[i] > maximum)\n\t\t\tmaximum = l[i];\n\t\
    return maximum;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long max = -(LONG_MAX);\n    long\
    \ curr = 0;\n    long i = 0;\n    for (i = 0; i < l.size(); i++) {\n        curr\
    \ = curr > l[i] ? curr : l[i];\n        if (max < curr) {\n            max = curr;\n\
    \        }\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n\tassert(!l.empty());\n\tstd::sort(l.begin(),\
    \ l.end());\n\tlong first = *l.begin();\n\treturn *std::max_element(l.begin(),\
    \ l.end()) + first - first > first ? first : *std::max_element(l.begin(), l.end())\
    \ - first - first;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp_fut_hmq: /tmp/tmp_fut_hmq.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long ans = l[0];\n  for (long i = 0;\
    \ i < l.size(); ++i) {\n    if (l[i] > ans)\n      ans = l[i];\n  }\n  return\
    \ ans;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Write your code here.\n    long\
    \ max = l[0];\n    for (auto i : l) {\n        if (i > max)\n            max =\
    \ i;\n    }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::max_element(l.begin(), l.end());\n\
    }\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: Exception
  stderr: 'tmp6mnv755z: /tmp/tmp6mnv755z.cpp:13: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    if (l.size()\
    \ == 1) return l[0];\n    long maxv = l[0];\n    for (long i = 1, j = 1; i < l.size();\
    \ i++, j++) {\n        if (l[i] > maxv) {\n            maxv = l[i];\n        }\n\
    \    }\n    return maxv;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() >= 1);\n    auto\
    \ it = l.begin();\n    if (l.size() == 1) return *it;\n    long max = *it;\n \
    \   for (++it; it != l.end(); ++it) {\n        if (*it > max) max = *it;\n   \
    \ }\n    return max;\n}\nint main() {\n    auto candidate = max_element;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long a = 0;\n    for (int i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] > a) {\n            a = l[i];\n     \
    \   }\n    }\n    return a;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return l.back();\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() >= 1);\n    long\
    \ maxv = -l[0];\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] >\
    \ maxv)\n            maxv = l[i];\n    }\n    return maxv;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  int n = l.size();\n  int mx = -1;\n\
    \  for (int i = 0; i < n; i++) {\n    long elem = l[i];\n    if (elem > mx) {\n\
    \      mx = elem;\n    }\n  }\n  return mx;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // Initialize max value\n    long\
    \ mx = INT_MIN;\n    // Search for the max in the vector and update max if necessary\n\
    \    for (long i = 0; i < (int)l.size(); i++) {\n        if (l[i] > mx) {\n  \
    \          mx = l[i];\n        }\n    }\n    return mx;\n}\nint main() {\n   \
    \ auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long mx = -1, mx2 = 0, mx3 = 0, mx\
    \ = 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n    long cnt = 0;\n    for (long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] > mx) {\n            mx = l[i];\n\
    \        }\n        if (l[i] > mx2) {\n            mx2 = l[i];\n        }\n  \
    \      if (l[i] > mx3) {\n            mx3 = l[i];\n        }\n        cnt += 1;\n\
    \        if (mx > mx2) {\n            mx = mx2;\n        }\n        if (mx > mx3)\
    \ {\n            mx = mx3;\n        }\n    }\n    return mx;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplsw74ll8.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplsw74ll8.cpp:9:37: error: redeclaration of \u2018long\
    \ int mx\u2019\n    9 |     long mx = -1, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3\
    \ = 0, mx = 0, mx2 = 0;\n      |                                     ^~\n/tmp/tmplsw74ll8.cpp:9:10:\
    \ note: \u2018long int mx\u2019 previously declared here\n    9 |     long mx\
    \ = -1, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n      |\
    \          ^~\n/tmp/tmplsw74ll8.cpp:9:45: error: redeclaration of \u2018long int\
    \ mx2\u2019\n    9 |     long mx = -1, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3\
    \ = 0, mx = 0, mx2 = 0;\n      |                                             ^~~\n\
    /tmp/tmplsw74ll8.cpp:9:19: note: \u2018long int mx2\u2019 previously declared\
    \ here\n    9 |     long mx = -1, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3 = 0,\
    \ mx = 0, mx2 = 0;\n      |                   ^~~\n/tmp/tmplsw74ll8.cpp:9:54:\
    \ error: redeclaration of \u2018long int mx3\u2019\n    9 |     long mx = -1,\
    \ mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n      |      \
    \                                                ^~~\n/tmp/tmplsw74ll8.cpp:9:28:\
    \ note: \u2018long int mx3\u2019 previously declared here\n    9 |     long mx\
    \ = -1, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n      |\
    \                            ^~~\n/tmp/tmplsw74ll8.cpp:9:63: error: redeclaration\
    \ of \u2018long int mx\u2019\n    9 |     long mx = -1, mx2 = 0, mx3 = 0, mx =\
    \ 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n      |                             \
    \                                  ^~\n/tmp/tmplsw74ll8.cpp:9:10: note: \u2018\
    long int mx\u2019 previously declared here\n    9 |     long mx = -1, mx2 = 0,\
    \ mx3 = 0, mx = 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n      |          ^~\n/tmp/tmplsw74ll8.cpp:9:71:\
    \ error: redeclaration of \u2018long int mx2\u2019\n    9 |     long mx = -1,\
    \ mx2 = 0, mx3 = 0, mx = 0, mx2 = 0, mx3 = 0, mx = 0, mx2 = 0;\n      |      \
    \                                                                 ^~~\n/tmp/tmplsw74ll8.cpp:9:19:\
    \ note: \u2018long int mx2\u2019 previously declared here\n    9 |     long "
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long m = 0;\n    for(int i = 0; i\
    \ < l.size(); i++) {\n        if(l[i] > m)\n            m = l[i];\n    }\n   \
    \ return m;\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    assert(it != l.end());\n    return *it;\n}\nint main() {\n  \
    \  auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092462
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long max = 0;\n  for (long x : l)\n\
    \    if (x > max)\n      max = x;\n  return max;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end());\n\
    \    return l.back();\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  std::sort(l.begin(), l.end());\n  return\
    \ l.back();\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  long min_element = LONG_MAX;\n  for\
    \ (long i = 0; i < l.size(); i++)\n    if (l[i] < min_element) {\n      min_element\
    \ = l[i];\n    }\n  return min_element;\n}\nint main() {\n    auto candidate =\
    \ max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: Exception
  stderr: 'tmperj_w7h0: /tmp/tmperj_w7h0.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() != 0);\n    long\
    \ res = l[0];\n    for (long i = 0; i < l.size(); ++i) {\n        if (l[i] > res)\n\
    \            res = l[i];\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = max_element;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (3));\n    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5,\
    \ (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10})))\
    \ == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    return it->second;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpv4dwgflq.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv4dwgflq.cpp:10:16: error: request for member \u2018second\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   10\
    \ |     return it->second;\n      |                ^~~~~~\n"
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::vector<long>::iterator it =\
    \ std::max_element(l.begin(), l.end());\n    return *(it);\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    long max\
    \ = 0;\n    long index = 0;\n    long max = l[0];\n    for (long i = 1, n = l.size();\
    \ i < n; i++) {\n        if (max < l[i]) {\n            max = l[i];\n        \
    \    index = i;\n        }\n    }\n    return index;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp738yexu2.cpp: In function \u2018long int max_element(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp738yexu2.cpp:12:10: error: redeclaration of \u2018long\
    \ int max\u2019\n   12 |     long max = l[0];\n      |          ^~~\n/tmp/tmp738yexu2.cpp:10:10:\
    \ note: \u2018long int max\u2019 previously declared here\n   10 |     long max\
    \ = 0;\n      |          ^~~\n"
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n  assert(l.size() != 0);\n  long max_ele\
    \ = l[0];\n  for (int i = 1; i < l.size(); i++)\n    max_ele = std::max(max_ele,\
    \ l[i]);\n  return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n   long result = -1L;\n   for(auto &x:\
    \ l)\n      if(x > result) result = x;\n   return result;\n}\nint main() {\n \
    \   auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    return *std::max_element(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092459
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    assert(l.size() > 0);\n    auto begin\
    \ = std::max_element(l.begin(), l.end());\n    if (begin == l.end()) {\n     \
    \   return l.back();\n    }\n    else {\n        return *begin;\n    }\n}\nint\
    \ main() {\n    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    long long max_ele = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        max_ele = (max_ele > l[i]) ? max_ele\
    \ : l[i];\n    }\n    return max_ele;\n}\nint main() {\n    auto candidate = max_element;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    // find index of max element\n  \
    \  long max = 0;\n    for (long i = 0; i< l.size(); i++){\n        if (max<l[i]){\n\
    \            max = l[i];\n        }\n    }\n    return max;\n}\nint main() {\n\
    \    auto candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \    return l.back();\n}\nint main() {\n    auto candidate = max_element;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)2, (long)3}))) == (3));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)124, (long)1, (long)-10}))) == (124));\n\
    }\n"
  status: Exception
  stderr: 'tmphtoer5v1: /tmp/tmphtoer5v1.cpp:14: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (3)'' failed.

    '
  stdout: ''
  timestamp: 1660092468
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto it = std::max_element(l.begin(),\
    \ l.end());\n    long max_v = *it;\n    return max_v;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return maximum element\
    \ in the vector.\n// >>> max_element((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (3)\n// >>> max_element((std::vector<long>({(long)5, (long)3, (long)-5, (long)2,\
    \ (long)-3, (long)3, (long)9, (long)0, (long)123, (long)1, (long)-10})))\n// (123)\n\
    long max_element(std::vector<long> l) {\n    auto begin = l.begin();\n    auto\
    \ end = l.end();\n    auto max_element = *begin;\n\n    for (auto it = begin;\
    \ it != end; ++it) {\n        if (*it > max_element) {\n            max_element\
    \ = *it;\n        }\n    }\n    return max_element;\n}\nint main() {\n    auto\
    \ candidate = max_element;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (3));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)3, (long)-5, (long)2, (long)-3, (long)3, (long)9, (long)0, (long)124,\
    \ (long)1, (long)-10}))) == (124));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660092467
