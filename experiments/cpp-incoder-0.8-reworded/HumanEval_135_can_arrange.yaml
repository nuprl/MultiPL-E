name: HumanEval_135_can_arrange
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which returns\
  \ the largest index of an element which\n// is not greater than or equal to the\
  \ element immediately preceding it. If\n// no such element exists then return -1.\
  \ The given vector will not contain\n// duplicate values.\n// Examples:\n// >>>\
  \ can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
  // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n//\
  \ (-1)\nlong can_arrange(std::vector<long> arr) {\n"
tests: "}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10}))) ==\
  \ (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5, (long)7,\
  \ (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) == (-1));\n\
  }\n"
completions: ["  long ans = -1;\n  for (size_t i = 0; i < arr.size(); ++i) {\n   \
    \ if (arr[i] < arr[i - 1]) {\n      ans = i;\n      break;\n    }\n  }\n  return\
    \ ans;", "  // Your code here\n  long ret = 0;\n  for (int i = 1; i < arr.size();\
    \ i++) {\n    if (arr[i - 1] >= arr[i]) {\n      ret = i;\n      break;\n    }\n\
    \  }\n  return ret;", "  int n = arr.size();\n  long ans = INT_MIN;\n  for (int\
    \ i = 0; i < n - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      ans = std::max(ans,\
    \ i + 1);\n    }\n  }\n  return ans == INT_MIN ? -1 : ans;", "    // Your code\
    \ here\n    return -1;", "    // Use map to keep track of which number has already\
    \ been seen.\n    std::map<long, bool> seen;\n    // Keep track of the first number\
    \ seen as we will be iterating through the\n    // array.\n    long first = -1LL;\n\
    \    // Iterate through array and compare with previous.\n    for (long i = 0;\
    \ i != arr.size(); ++i) {\n        // If we have seen the number before, return\
    \ this index.\n        if (seen.find(arr[i]) != seen.end()) {\n            return\
    \ i;\n        }\n        // If the current number is not greater than or equal\
    \ to the previous\n        // number then this number cannot be arranged.\n  \
    \      if (arr[i] > first) {\n            return -1;\n        }\n        // Mark\
    \ this number as seen and keep track of the first seen number.\n        seen[arr[i]]\
    \ = true;\n        first = arr[i];\n    }\n    return -1LL;", "    int lo = -1,\
    \ hi = arr.size() - 1;\n    while (hi >= lo) {\n        int mid = (lo + hi) /\
    \ 2;\n        if (arr[mid] >= arr[lo] && arr[mid] <= arr[hi])\n            hi\
    \ = mid - 1;\n        else if (arr[mid] >= arr[hi])\n            lo = mid + 1;\n\
    \        else // (arr[mid] > arr[lo] && arr[mid] < arr[hi])\n            return\
    \ mid;\n    }\n    return lo;", "  long largest_index = 0;\n  for (size_t i =\
    \ 1; i < arr.size(); ++i) {\n    if (arr[i] >= arr[i-1]) {\n      largest_index\
    \ = i;\n    }\n  }\n  return largest_index;", "    long max = -1, index = 0;\n\
    \    for(auto it = arr.cbegin(); it < arr.cend(); ++it) {\n        if (*it > max)\
    \ {\n            max = *it;\n            index = it;\n        }\n    }\n    return\
    \ index;", "    // code here\n    assert(arr.size() > 0);\n    auto it = arr.begin();\n\
    \    auto prev = *it;\n    auto res = -1;\n    if (it == arr.begin()) {\n    \
    \    return -1;\n    }\n    for (auto i = it + 1; i < arr.begin(); i++) {\n  \
    \      if (arr[i] <= prev) {\n            return res;\n        }\n        prev\
    \ = arr[i];\n        res = i;\n    }\n    return res;", "  std::vector<long>::iterator\
    \ itr = arr.begin();\n  long res = std::numeric_limits<long>::max();\n  while\
    \ (itr != arr.end()) {\n    long temp = *itr;\n    while (*itr == temp) {\n  \
    \    itr++;\n      if (itr == arr.end()) {\n        return -1;\n      }\n    \
    \  temp = *itr;\n    }\n    res = std::max(temp, res);\n  }\n  return res;", " \
    \   if (arr.size() == 0) return -1;\n    if (arr.size() == 1) return 0;\n    long\
    \ maxVal = arr[0];\n    long index = 0;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] >= maxVal) break;\n        index = i;\n        maxVal\
    \ = arr[i];\n    }\n    return index;", "  // Write your code here\n  return -1;",
  "  int count = 0;\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] >=\
    \ arr[count - 1]) {\n      count++;\n    }\n  }\n  return count;", "    // Complete\
    \ the code here.\n    long k = 0;\n    long l = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] > arr[k]) {\n            l = i;\n            k++;\n\
    \        }\n    }\n    return l;", "    // code here\n    return 0;", "\tint n\
    \ = arr.size();\n\tint i;\n\tlong ans = -1;\n\tfor (i = 1; i < n; i++) {\n\t\t\
    if (arr[i] > arr[i - 1]) {\n\t\t\tans = i;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ ans;", "    long maxIndex = -1;\n    for (long i = 0; i < arr.size(); ++i) {\n\
    \        long current = arr[i];\n        if (current >= maxIndex && i != 0) {\n\
    \            current++;\n            maxIndex = current;\n        }\n    }\n \
    \   return maxIndex;", "  // Your code here\n  long ans = 0;\n  for (long i =\
    \ 1; i < arr.size(); i++) {\n    if (arr[i] <= arr[i-1]) ans = i;\n  }\n  return\
    \ ans;", "  if (arr.size() == 0) {\n    return -1;\n  }\n  if (arr.size() == 1)\
    \ {\n    return arr[0];\n  }\n  if (arr.size() == 2) {\n    return max(arr[0],\
    \ arr[1]);\n  }\n  if (arr.size() == 3) {\n    if (arr[0] > arr[1]) {\n      return\
    \ arr[0];\n    } else {\n      return arr[1];\n    }\n  }\n  if (arr.size() ==\
    \ 4) {\n    if (arr[0] > arr[1]) {\n      if (arr[0] > arr[2]) {\n        return\
    \ arr[0];\n      } else {\n        return arr[2];\n      }\n    } else {\n   \
    \   if (arr[1] > arr[2]) {\n        return arr[1];\n      } else {\n        return\
    \ arr[2];\n      }\n    }\n  }\n  if (arr.size() == 5) {\n    if (arr[0] > arr[1])\
    \ {\n      if (arr[0] > arr[2]) {\n        if (arr[0] > arr[3]) {\n          return\
    \ arr[0];\n        } else {\n          return arr[3];\n        }\n      } else\
    \ {\n        return arr[2];\n      }\n    } else {\n      if (arr[1] > arr[2])\
    \ {\n        if (arr[1] > arr[3]) {\n          return arr[1];\n        } else\
    \ {\n          return arr[3];\n        }\n      } else {\n        if (arr[2] >\
    \ arr[3]) {\n          return arr[2];\n        } else {\n          return arr[3];\n\
    \        }\n      }\n    }\n  }\n  if (arr.size() == 6) {\n    if (arr[0] > arr[1])\
    \ {\n      if (arr[0] > arr[2]) {\n        if (arr[0] > arr[3]) {\n          if\
    \ (arr[0] > arr[4]) {\n            return arr[0];\n          } else {\n      \
    \      return arr[4];\n          }\n        } else {\n          return arr[3];\n\
    \        }\n      } else {\n        return arr[2];\n      }\n    } else {\n  \
    \    if (arr[1] > arr[2]) {\n        if (arr[1] > arr[3]) {\n          if (arr[1]\
    \ > arr[4]) {\n            return arr[1];\n          } else {\n            return\
    \ arr[4];\n          }\n        } else {\n          return arr[3];\n        }\n\
    \      } else {\n        if (arr[2] > arr[3]) {\n          if (arr[2] > arr[4])\
    \ {\n            return arr[2];\n          } else {\n            return arr[4];\n\
    \          }\n        } else {\n          if (arr[3] > arr[4]) {\n           \
    \ return arr[3];\n          } else {\n            return arr[4];\n          }\n\
    \        }\n      }\n    }\n  }\n  if (arr.size() == 7) {\n    if (arr[0] > arr[1])\
    \ {\n      if (arr[0] > arr[2]) {\n        if (arr[0] > arr[3]) {\n          if\
    \ (arr[0] > arr[4]) {\n            if (arr[0] > arr[5]) {\n              if (arr[0]\
    \ > arr[6]) {\n                return arr[0];\n              } else {\n      \
    \          return arr[6];\n              }\n            } else {\n           \
    \   return arr[5];\n            }\n          } else {\n            return arr[4];\n\
    \          }\n        } else {\n          return arr[3];\n        }\n      } else\
    \ {\n        return ", "    std::sort(arr.begin(), arr.end());\n    auto prev\
    \ = arr.begin();\n    long max_index = prev - arr.begin();\n    for (auto it =\
    \ prev; it != arr.begin(); it++) {\n        if (*it <= prev)\n            break;\n\
    \        max_index--;\n    }\n    if (max_index == -1)\n        return -1;\n \
    \   return max_index;", "    long largest = -2;\n    for (long i = 0; i != arr.size()\
    \ - 1; i++) {\n        long left = arr[i];\n        long right = arr[i + 1];\n\
    \        if (left > right) {\n            continue;\n        }\n        if (left\
    \ == right) {\n            largest = i;\n        }\n        if (right > largest)\
    \ {\n            largest = i;\n        }\n    }\n    return largest;", "    //\
    \ code here\n    int first = 0;\n    int last = arr.size() - 1;\n    long res\
    \ = -1;\n    while (first <= last) {\n        if (arr[first] <= arr[last])\n \
    \           first++;\n        else\n            last--;\n    }\n    return res;",
  "    if (arr.size() == 0) return -1;\n    long ans = INT_MAX;\n    for (auto i :\
    \ arr) {\n        if (i == 0) continue;\n        ans = max(ans, i + 1);\n    }\n\
    \    return ans;", "    // Write your code here\n    int n = arr.size();\n   \
    \ long largestIndex = 0;\n    for (int i = 0; i < n; i++) {\n        int j = 0;\n\
    \        for (j = i + 1; j < n; j++)\n            if (arr[i] >= arr[j])\n    \
    \            break;\n        if (j != n) largestIndex = j;\n    }\n    return\
    \ largestIndex;", "\tlong max_val = 0;\n\tlong last_index = -1;\n\tfor(long i\
    \ = 0; i < arr.size(); i++) {\n\t\tif(arr[i] >= max_val) {\n\t\t\tlast_index =\
    \ i;\n\t\t\tmax_val = arr[i];\n\t\t}\n\t}\n\treturn (last_index > -1 ? last_index\
    \ : -1);", "    // Write your code here\n    long n = arr.size();\n    long ans\
    \ = 0;\n    for (long i = 0; i < n - 1; i++) {\n        if (arr[i] < arr[i + 1])\n\
    \            ans++;\n    }\n    return ans;", '  // code here', "    // Code here\n\
    \    // Solution here\n    return 0;", "  // Write your code here\n  long n =\
    \ arr.size();\n  long maxval = arr[0]; // Initialize with first element\n  int\
    \ minindex = -1; // Initialize with first element\n  \n  for(long i = 0; i < n;\
    \ ++i) {\n    // Check if the value at the index is greater than or equal to the\n\
    \    // current maxval then update maxval accordingly\n    if(arr[i] > maxval)\
    \ {\n      maxval = arr[i];\n    }\n    // If current maxval is equal to the previous\
    \ minindex then it's\n    // the first element and maxindex is set to 0\n    if(maxval\
    \ == arr[i]) {\n      minindex = i;\n      maxindex = 0;\n    }\n    // If current\
    \ maxval is not equal to the previous minindex then it is\n    // the first element\
    \ and maxindex is set to previous maxindex + 1\n    // and we continue from the\
    \ next element\n    if(maxval != arr[i]) {\n      maxindex = maxindex + 1;\n \
    \     minindex = i;\n    }\n  }\n\n  // If maxval is greater than arr[n-1], then\
    \ maxindex is n-1\n  return maxval > arr[n-1] ? maxindex : -1;", "    long max_pos\
    \ = -1L;\n    long max_val = arr[0];\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] <= max_val) {\n            max_val = arr[i];\n       \
    \ } else {\n            if (max_pos == -1 || max_val < max_pos) {\n          \
    \      max_pos = i;\n            }\n        }\n    }\n    return max_pos;", " \
    \ // Do not write main() function.\n  // Do not read input, instead use the arguments\
    \ to the function.\n  // Do not print the output, instead return values as specified\n\
    \  // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for\
    \ more details\n  // Example :\n  // int arrange_elements(std::vector<long> arr)\
    \ {\n  //     return can_arrange(arr);\n  // }\n  long index = -1;\n  for (long\
    \ i = 0; i < arr.size(); i++) {\n    for (long j = i+1; j < arr.size(); j++) {\n\
    \      if (arr[i] <= arr[j]) {\n        index = i;\n        break;\n      }\n\
    \    }\n  }\n  return index;", "    // Write your code here\n    long arr_size\
    \ = 0;\n    for (auto item : arr) {\n        arr_size++;\n    }\n    return arr_size;",
  "  int k = 0;\n  for (int i = 0; i < arr.size() - 1; i++) {\n    int j = i + 1;\n\
    \    while (j < arr.size() && arr[j] <= arr[i]) {\n      j++;\n    }\n    if (j\
    \ == arr.size()) {\n      k = i;\n      break;\n    }\n    if (arr[j] > arr[i])\
    \ {\n      k = j;\n    }\n  }\n  return k;", "    long ans = -1;\n    long maxVal\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (maxVal >=\
    \ arr[i]) {\n            ans = i;\n            maxVal = arr[i];\n        }\n \
    \   }\n    return ans;", "    // Write your code here\n    long leftMax = -1,\
    \ rightMax = -1, leftMaxIndex = 0, rightMaxIndex = 0, res = -1;\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] >= rightMax) {\n         \
    \   rightMax = arr[i];\n            rightMaxIndex = i;\n        }\n        if\
    \ (arr[i] < leftMax) {\n            leftMax = arr[i];\n            leftMaxIndex\
    \ = i;\n        }\n    }\n\n    if (leftMaxIndex < rightMaxIndex) {\n        res\
    \ = leftMaxIndex;\n    }\n    else if (leftMaxIndex == rightMaxIndex) {\n    \
    \    res = -1;\n    }\n\n    return res;", "    auto it = std::lower_bound(arr.cbegin(),\
    \ arr.cend(), arr.front());\n    if (it == arr.cend())\n        return -1;\n \
    \   return std::distance(arr.cbegin(), it);", "    long maxindex = -1, value =\
    \ arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] >=\
    \ value) {\n            maxindex = i;\n            value = arr[i];\n        }\n\
    \    }\n    return maxindex;", "  // Your code goes here\n  long res = -1;\n \
    \ for (long i = 0; i < arr.size() - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n\
    \      res = i;\n      break;\n    }\n  }\n  return res;", "    // Code here\n\
    \    long maxIndex = -1;\n    long largestNumber = arr[0];\n    long previousNumber\
    \ = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] >\
    \ largestNumber) {\n            maxIndex = i;\n            largestNumber = arr[i];\n\
    \        } else if (arr[i] == largestNumber) {\n            if (previousNumber\
    \ == largestNumber) {\n                maxIndex = i;\n            }\n        }\n\
    \        previousNumber = largestNumber;\n    }\n    return maxIndex;", "    if(arr.size()\
    \ == 0) return -1;\n    long max_idx = -1, max_val = arr[0];\n    for(size_t i\
    \ = 1; i < arr.size(); i++) {\n        if(arr[i] <= max_val)\n            return\
    \ -1;\n        max_idx = i;\n        max_val = arr[i];\n    }\n    return max_idx;",
  "  int size = arr.size();\n  long ans = -1;\n  for (int i = 1; i < size; i++) {\n\
    \    if (arr[i - 1] + 1 != arr[i]) {\n      ans = i;\n      break;\n    }\n  }\n\
    \  return ans;", "    // Your code goes here\n    long max = -1;\n    for (long\
    \ i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n   \
    \         if (arr[i] > max) {\n                max = arr[i];\n            }\n\
    \        }\n    }\n    return max;", "  // Your code here\n  assert(arr.size()\
    \ > 0);\n  if (arr.size() == 1) {\n    return -1;\n  }\n  long max = arr[0];\n\
    \  long min = arr[0];\n  for (auto i : arr) {\n    if (i < max) {\n      return\
    \ -1;\n    }\n    if (i > max) {\n      max = i;\n    }\n    if (i >= min) {\n\
    \      min = i;\n    }\n  }\n  return max;", "  std::sort(arr.begin(), arr.end());\n\
    \  for (auto it = arr.begin(); it != arr.end(); it++) {\n    if (it != arr.begin())\
    \ {\n      if (*it == *(it - 1)) {\n        return -1;\n      }\n    }\n  }\n\
    \  return arr.size() - 1;", "    // Sort array in descending order\n    std::sort(arr.begin(),\
    \ arr.end(), std::greater<long>());\n\n    // Check all elements for presence\
    \ of an element that isn't greater than\n    // the element immediately before\
    \ it\n    long i = arr.size() - 1;\n    while (i > 0) {\n        if (arr[i] <\
    \ arr[i-1])\n            return -1;\n        i -= 1;\n    }\n    return arr.size()\
    \ - 1;", "    // Create a map from element to index.\n    std::map<long, size_t>\
    \ m;\n    for (long i = 0; i < arr.size(); i++) {\n        // Get the element\
    \ to its index.\n        m[arr[i]] = i;\n    }\n    // Find the maximum index\
    \ which isn't greater than the index\n    // before it.\n    for (long i = 1;\
    \ i < arr.size(); i++) {\n        if (!m.count(arr[i]) && arr[i - 1] >= arr[i])\
    \ {\n            return i;\n        }\n    }\n    return -1;", "    if (arr.size()\
    \ < 2) return -1;\n    long l = arr[0];\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > arr[l]) l = i;\n    }\n    return l;", "    auto cmp\
    \ = [](long left, long right) { return (left <= right); };\n    for (long i =\
    \ 1; i < arr.size(); ++i) {\n        if (!cmp(arr[i], arr[0])) {\n           \
    \ return i;\n        }\n    }\n    return -1;", "    // code here\n    if (arr.empty())\n\
    \        return -1;\n    int l = 1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        int r = i;\n        while (l < arr.size() && r >= 0) {\n        \
    \    if (arr[i] < arr[r]) {\n                ++l;\n                r--;\n    \
    \        } else if (arr[i] == arr[r])\n                --r;\n        }\n    }\n\
    \    return r;", "    // Your code here\n    long res = -1;\n    int cnt = arr.size();\n\
    \    for (int i = 0; i < cnt; i++) {\n        int j = i + 1;\n        while (j\
    \ < cnt) {\n            if (arr[i] <= arr[j]) {\n                cnt--;\n    \
    \            res = j;\n            } else {\n                break;\n        \
    \    }\n            ++j;\n        }\n    }\n    return res;", "  // Your code\
    \ goes here\n  long arr_size = arr.size();\n  long max_index = -1;\n  for (int\
    \ i = 0; i < arr_size; i++) {\n    if (max_index == -1 || arr[i] <= arr[max_index])\n\
    \      max_index = i;\n  }\n  return max_index;", "    // Your code here\n   \
    \ int max_indx = -1;\n    int curr_max = arr[0];\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > curr_max) {\n            max_indx = i;\n      \
    \      curr_max = arr[i];\n        }\n    }\n    if (max_indx == -1) {\n     \
    \   max_indx = arr.size() - 1;\n    }\n    return max_indx;", "  if (arr.size()\
    \ == 0)\n    return -1;\n  std::set<long> st;\n  for (long i : arr)\n    if (st.find(i)\
    \ != st.end())\n      return i - 1;\n  st.insert(arr[0]);\n  return arr.size();",
  "    // Find largest value that is not greater than or equal to the\n    // previous\
    \ element. If there is no such value then return -1\n    long maxValue = -1;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (maxValue <= arr[i] &&\
    \ maxValue != -1) {\n            return maxValue;\n        }\n        maxValue\
    \ = arr[i];\n    }\n    return -1;", "  long largest = -1, smallest = arr[0];\n\
    \  for (long i = 1; i < arr.size(); ++i) {\n    if (arr[i] < smallest) {\n   \
    \   largest = i;\n      smallest = arr[i];\n    } else if (arr[i] > largest) {\n\
    \      largest = i;\n    }\n  }\n  return largest;", "    auto it = std::upper_bound(arr.begin(),\
    \ arr.end(), arr.front());\n    return (it != arr.end()) ? (it - arr.begin())\
    \ : 0;", "    long largest_index = -1;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] < arr[largest_index]) {\n            largest_index = i;\n\
    \        }\n    }\n    if (largest_index == -1) {\n        return -1;\n    }\n\
    \    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] >= arr[largest_index])\
    \ {\n            return -1;\n        }\n    }\n    return largest_index;", " \
    \   long ans = -1;\n    long l = 0;\n    long r = arr.size()-1;\n    for(; l <=\
    \ r; l++){\n        if(arr[l] >= arr[l+1]){\n            ans = l;\n          \
    \  break;\n        }\n    }\n    return ans;", "  // Complete this function\n\
    \  // You don't need to use std::max_element or any other algorithm as this\n\
    \  // will be solved efficiently\n\n  // Solution part one\n  auto f = [&arr](long\
    \ n){\n      for(int i=0;i<arr.size()-1;++i){\n        if(arr[i]>arr[i+1]){\n\
    \          return i;\n        }\n      }\n      return -1;\n    };\n\n  // Solution\
    \ part two\n  long max_val = 0;\n  long max_idx = -1;\n  for(int i=0;i<arr.size();++i){\n\
    \    max_val = max(arr[i],max_val);\n    max_idx = f(i);\n  }\n\n  return max_idx;",
  "    // Code here.\n    long result = -1;\n    auto it = arr.begin();\n    long\
    \ index = 0;\n    long maxValue = *it;\n    while (it != arr.end()) {\n      \
    \  if (*it > maxValue) {\n            result = index;\n            index = maxValue;\n\
    \            maxValue = *it;\n        }\n        it++;\n    }\n    if (index !=\
    \ maxValue) {\n        result = -1;\n    }\n    return result;", "    long result\
    \ = -1;\n    long previous = -1;\n    for (long i : arr) {\n        previous =\
    \ i;\n    }\n    for (long i : arr) {\n        if (i <= previous) {\n        \
    \    previous = i;\n            result = i;\n            break;\n        }\n \
    \   }\n    return result;", "  // Code here\n  long min;\n  long max = -1;\n \
    \ for (long i = 0; i < arr.size(); i++) {\n    if (max <= arr[i]) {\n      max\
    \ = arr[i];\n      min = i;\n    } else {\n      if (arr[i] > max) {\n       \
    \ max = arr[i];\n      }\n    }\n  }\n  return min;", "    long maxIndex = -1;\n\
    \    long prev = arr[0];\n    for (int i = 1; i < arr.size(); i++) {\n       \
    \ if (arr[i] >= prev) {\n            maxIndex = i;\n        }\n        prev =\
    \ arr[i];\n    }\n    return maxIndex;", "  // Your code goes here\n  long l =\
    \ -1, r = 0, i = 0, j = arr.size() - 1;\n  while(i <= j) {\n    while(arr[i] <=\
    \ arr[j]) {\n      i++;\n    }\n    while(arr[j] <= arr[i]) {\n      j--;\n  \
    \  }\n    if (i < j) {\n      l = i;\n      r = j;\n    }\n    i++;\n    j--;\n\
    \  }\n  return l;", "    long ans = -1;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        for (long j = i + 1; j < arr.size(); j++) {\n            if\
    \ (arr[j] <= arr[i]) {\n                if (ans == -1) {\n                   \
    \ ans = i;\n                } else {\n                    ans = -1;\n        \
    \            break;\n                }\n            } else {\n               \
    \ if (ans != -1) {\n                    break;\n                }\n          \
    \  }\n        }\n    }\n    return ans;", "    // your code goes here\n    int\
    \ large = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ > arr[large])\n            large = i;\n    }\n    return large;", "  assert(arr.size()\
    \ >= 2);\n  long ans = -1;\n  for (int i = 1; i < arr.size(); i++) {\n    if (arr[i]\
    \ <= arr[i - 1]) {\n      return -1;\n    }\n    ans = max(ans, i);\n  }\n  return\
    \ ans;", "    long max_idx = -1;\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] >= arr[max_idx]) max_idx = i;\n    }\n    return max_idx;",
  "    long maxIndex = -1;\n    long index = -1;\n    long temp = arr[0];\n    //\
    \ For each element in the vector\n    for (size_t i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] < temp) {\n            // If the current element is less\
    \ than the previous element\n            // then ignore that element\n       \
    \     continue;\n        } else {\n            // If the current element is greater\
    \ than or equal to the\n            // previous element then update the last index\
    \ found\n            index = i;\n            temp = arr[i];\n        }\n    }\n\
    \    // If a match was found then return the current index\n    if (maxIndex ==\
    \ -1) {\n        maxIndex = index;\n    }\n    return maxIndex;", "    auto it\
    \ = arr.begin();\n    auto end = arr.end();\n    return std::distance(it, std::max_element(it,\
    \ end, [&](long a, long b) { return a <= b; }));", "    if (arr.empty()) return\
    \ -1;\n\n    long res = arr.front();\n    long max_idx = 1;\n    for (auto x :\
    \ arr) {\n        // printf(\"max_idx = %ld, x = %ld\\n\", max_idx, x);\n    \
    \    // printf(\"res = %ld\\n\", res);\n        if (max_idx < x) max_idx = x;\n\
    \    }\n    return max_idx;", "    // Your code here\n    int n = arr.size();\n\
    \    long largest = 0;\n    for (int i = 1; i < n; i++) {\n        if (arr[largest]\
    \ >= arr[i]) {\n            largest = i;\n        }\n    }\n    return largest;",
  "  // Create a pointer which will point to the first element in the array.\n  long\
    \ *ptr = &arr[0];\n  // Create a long which will contain the maximum index of\
    \ the element not\n  // greater than or equal to the element at which we search.\n\
    \  long maxIndex = -1;\n  // Create a long which will be set to the first element\
    \ of the array.\n  long minIndex = 0;\n  // Create a long which will contain the\
    \ maximum value of the element not\n  // greater than or equal to the element\
    \ at which we search.\n  long maxVal = arr[0];\n  // Create a long which will\
    \ contain the minimum value of the element not\n  // greater than or equal to\
    \ the element at which we search.\n  long minVal = arr[0];\n  // Loop through\
    \ the array.\n  for (int i = 1; i < arr.size(); i++) {\n    // If the current\
    \ element is not greater than or equal to the maximum\n    // value then update\
    \ this element as the minimum value\n    if (arr[i] > maxVal) {\n      maxVal\
    \ = arr[i];\n      minIndex = i;\n    }\n    // If the current element is not\
    \ less than or equal to the minimum\n    // value then update this element as\
    \ the maximum value\n    if (arr[i] < minVal) {\n      maxVal = arr[i];\n    \
    \  minIndex = i;\n    }\n  }\n  // If the element is not greater than or equal\
    \ to the minimum value then\n  // return -1.\n  if (maxVal >= minVal) {\n    return\
    \ minIndex;\n  }\n  // Otherwise, we have no element of the array not greater\
    \ than or equal to\n  // the minimum value.\n  return -1;", "  std::sort(arr.begin(),\
    \ arr.end());\n  auto index = std::upper_bound(arr.begin(), arr.end(), 0) - arr.begin();\n\
    \  if (index < arr.size() && arr[index] != 0) {\n    return index;\n  }\n  return\
    \ -1;", "    // Write your code here.\n    return -1;", "\tint n = arr.size();\n\
    \tlong ans = -1;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] <= arr[i + 1])\n\
    \t\t\tcontinue;\n\t\tans = arr[i];\n\t\tbreak;\n\t}\n\treturn ans;", "    long\
    \ max_index = -1;\n    for (long index = 0; index < arr.size(); index++) {\n \
    \       if (index < arr.size() - 1) {\n            if (arr[index] > arr[index\
    \ + 1]) {\n                max_index = index;\n                break;\n      \
    \      }\n        }\n    }\n    return max_index;", "    // Your code here\n \
    \   long ans = -1;\n    long index = 0;\n    long maxi = -1;\n    int n = arr.size();\n\
    \    for(long i = 0; i < n - 1; i++){\n        for(long j = i + 1; j < n; j++){\n\
    \            if(arr[i] < arr[j]){\n                maxi = arr[i];\n          \
    \      index = i;\n            }\n        }\n    }\n    if(maxi != -1){\n    \
    \    for(long i = 0; i < n - 1; i++){\n            if(arr[i] <= maxi){\n     \
    \           ans = i;\n                break;\n            }\n        }\n    }\n\
    \    return ans;", "    // your code here\n    long max_val = -1LL;\n    for (int\
    \ i = 0; i < arr.size(); ++i) {\n        if (arr[i] <= max_val) {\n          \
    \  max_val = arr[i];\n        }\n    }\n    return max_val;", "    long ans =\
    \ -1;\n    // If there are less than two elements, then return -1\n    if (arr.size()\
    \ < 2) {\n        return -1;\n    }\n    // Initialize min and max variables\n\
    \    long min = arr[0], max = arr[0];\n    // Go through all elements and update\
    \ min and max variables as necessary\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n     \
    \   if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n    // If\
    \ there are no elements in the vector, then return -1\n    if (min == max) {\n\
    \        return -1;\n    }\n    // If there is only one element in the vector,\
    \ then return it\n    if (arr.size() == 1) {\n        return arr[0];\n    }\n\
    \    // Initialize middle variable\n    long middle = min;\n    // If middle is\
    \ less than or equal to half the size of the vector, then\n    // return -1\n\
    \    if (middle <= arr.size() / 2) {\n        return -1;\n    }\n    // Go through\
    \ all elements and compare middle to the current maximum\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max) {\n            ans = i;\n\
    \            max = arr[i];\n        }\n    }\n    return ans;", "    long ans\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++)\n        if (arr[i] < arr[i-1])\n\
    \            ans = i;\n    return ans;", "    // Write your code here.\n    if(arr.size()==0)\n\
    \        return -1;\n    long maxidx = arr[0];\n    for(long i=1;i<arr.size();i++)\n\
    \    {\n        if(maxidx<=arr[i])\n        {\n            maxidx = arr[i];\n\
    \        }\n    }\n    return maxidx;", "    int N = arr.size();\n    long max_idx\
    \ = -1;\n    long max_val = arr[0];\n    for (int i = 1; i < N; i++) {\n     \
    \   if (arr[i] > max_val) {\n            max_idx = i;\n            max_val = arr[i];\n\
    \        }\n    }\n    return max_idx;", "    long res = INT_MIN;\n    bool flag\
    \ = false;\n\n    for (auto &val : arr) {\n        if (val > res) {\n        \
    \    res = val;\n            flag = true;\n        }\n    }\n    if (flag) {\n\
    \        return res;\n    }\n    return -1;", "    assert(arr.size() > 0);\n \
    \   auto iter = arr.begin();\n    auto last = iter;\n    while (iter != arr.end()\
    \ && iter->first <= last->first) last = iter++;\n    return std::distance(arr.begin(),\
    \ last);", "  long max_idx = -1;\n  long curr_idx = 0;\n  while (max_idx < arr.size()\
    \ && arr[curr_idx] < arr[max_idx]) {\n    max_idx = curr_idx;\n    curr_idx++;\n\
    \  }\n  return max_idx;", "  // Initialize a temporary int variable which will\
    \ hold the index of the\n  // element to be found. Initialize it to be an invalid\
    \ index.\n  long index = -1;\n  long curr_value = 0;\n  for (size_t i = 1; i <\
    \ arr.size(); i++) {\n    curr_value = arr[i];\n    // If curr_value is greater\
    \ than the element to be found then change the\n    // value of index to be the\
    \ index of this element.\n    if (curr_value > arr[index]) {\n      index = i;\n\
    \    }\n  }\n  return index;", "    int n = arr.size();\n    long ans = -1LL;\n\
    \    for (int i = 0; i < n; i++) {\n        if (arr[i] < arr[i + 1])\n       \
    \     continue;\n        long idx = (i + n) >> 1;\n        while (i != idx) {\n\
    \            if (arr[i] > arr[idx + 1])\n                idx = (idx + n) >> 1;\n\
    \            else\n                break;\n        }\n        if (idx != i)\n\
    \            ans = i;\n    }\n    return ans;", "    // Your code here\n    long\
    \ max_val = INT_MIN;\n    long curr_val = INT_MIN;\n    long index_val = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        curr_val = arr[i];\n    \
    \    for (int j = i + 1; j < arr.size(); j++) {\n            if (curr_val == arr[j])\
    \ {\n                curr_val = INT_MIN;\n                break;\n           \
    \ }\n        }\n        if (curr_val > max_val && curr_val != INT_MIN) {\n   \
    \         max_val = curr_val;\n            index_val = i;\n        }\n    }\n\
    \    return index_val;", "    auto ii = arr.end() - 1;\n    while (arr[ii] < arr[ii\
    \ - 1]) {\n        --ii;\n    }\n    return ii;", "    if (arr.size() == 1) {\n\
    \        return -1;\n    }\n    // Find the index for the first number >= arr[0]\n\
    \    auto max_index = [&arr](int i) {\n        return *std::max_element(arr.begin()\
    \ + i, arr.begin() + i + 1);\n    };\n    // If there are no elements bigger than\
    \ arr[0] then return -1\n    if (max_index(0) > 0) {\n        return -1;\n   \
    \ }\n    // For all elements greater than arr[0] we find if there are any numbers\n\
    \    // smaller than the previous biggest number such that they would not be\n\
    \    // greater than arr[0]\n    for (auto i = 1; i < arr.size(); i++) {\n   \
    \     if (max_index(i) < max_index(i-1)) {\n            return i;\n        }\n\
    \    }\n    // If there are no such elements then return -1\n    return -1;",
  "    // code here\n    // ans is the maximum index which is not greater than or\
    \ equal to its\n    // previous element.\n    long ans = -1;\n\n    // Start with\
    \ first element and check to see if it can be arranged at all.\n    int i = 0;\n\
    \    while (i < arr.size()) {\n        // If current element is not greater than\
    \ its previous element and\n        // the previous element is less than or equal\
    \ to current element then\n        // the current element can't be arranged at\
    \ all.\n        if (arr[i] <= arr[i - 1] && arr[i] >= arr[i + 1]) {\n        \
    \    ans = i;\n            break;\n        }\n        i++;\n    }\n    return\
    \ ans;", "  // Initialize our result to -1 as this is our first element.\n  long\
    \ res = -1;\n  int size = arr.size();\n  assert(size > 0);\n\n  // Find the minimum\
    \ element in the array. Initialize this value\n  // to the first element in the\
    \ array. This will also serve\n  // as our previous element because we'll be moving\
    \ backwards\n  // through to find the next value that is smaller.\n  long cur\
    \ = arr[0];\n  long prev = arr[0];\n\n  // Iterate through the entire array checking\
    \ if we find a value\n  // that is smaller than the current smallest value. We\
    \ also need to\n  // compare the previous value with the current value because\
    \ we need\n  // to find the next smallest value in the array.\n  for (int i =\
    \ 1; i < size; ++i) {\n    if (arr[i] < cur) {\n      // If our current value\
    \ is smaller than the previous smallest value\n      // then we need to update\
    \ the current smallest value to the\n      // new value from the array.\n    \
    \  if (res == -1) res = i;\n      cur = arr[i];\n    }\n    if (arr[i] < prev)\
    \ {\n      // If our current value is smaller than the previous smallest value\n\
    \      // then we need to update the previous smallest value to the\n      //\
    \ new value from the array.\n      prev = arr[i];\n    }\n  }\n\n  return res;",
  "  assert(arr.size() == arr.front());\n  long maxIndex = 0;\n  for (auto element\
    \ : arr) {\n    if (element <= arr[maxIndex]) {\n      maxIndex = maxIndex + 1;\n\
    \    } else {\n      break;\n    }\n  }\n  return maxIndex;", "    std::vector<long>::iterator\
    \ it1 = arr.begin();\n    std::vector<long>::iterator it2 = it1;\n    for (it2\
    \ = it1++; it2 != arr.end(); ++it2) {\n        if (*it2 > *it1) {\n          \
    \  return it2 - it1;\n        }\n    }\n    return -1;", "  // Your code here\n\
    \  int largest = INT_MAX;\n  int ans = -1;\n  for (int i = 0; i < arr.size() -\
    \ 1; i++) {\n    long curr = arr[i];\n    if (curr > largest) {\n      largest\
    \ = curr;\n      ans = i;\n    }\n  }\n  return ans;", '  // code here', "   \
    \ assert(arr.size() > 1);\n    long ans = 0;\n    long long last = arr[0];\n \
    \   for (long i = 2; i < arr.size(); ++i) {\n        if (arr[i] > last) {\n  \
    \          ans = i;\n            last = arr[i];\n        }\n    }\n    return\
    \ ans;", "  long result = -1, count = 0;\n  std::sort(arr.begin(), arr.end());\n\
    \  for (auto i : arr) {\n    if (i == arr[0]) {\n      result = i;\n      break;\n\
    \    } else {\n      ++count;\n      if (count == arr.size()) {\n        result\
    \ = -1;\n        break;\n      }\n    }\n  }\n  return result;", "  int max_val\
    \ = INT_MIN;\n  int curr_val = INT_MIN;\n  for (int i = 0; i < arr.size() - 1;\
    \ i++) {\n    if (arr[i] >= arr[i + 1]) {\n      curr_val = arr[i];\n    }\n \
    \   if (curr_val > max_val) {\n      max_val = curr_val;\n    }\n  }\n  return\
    \ max_val;", "    if (arr.size() == 0) return -1;\n    long largest = arr[0];\n\
    \    long index = 1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] >= largest) {\n            index = i;\n            largest = arr[i];\n\
    \        }\n    }\n    return index;", "    // Your code goes here\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    assert(arr.size() != 0);\n    long res\
    \ = arr[0];\n    long prev = 0;\n    long min = 0;\n    long max = 0;\n    for\
    \ (int i = 1; i < arr.size(); i++) {\n        if (arr[i] > prev) {\n         \
    \   max = i;\n        }\n        if (arr[i] < prev) {\n            min = i;\n\
    \        }\n        prev = arr[i];\n    }\n    if (min >= max) {\n        return\
    \ -1;\n    }\n    while (max > min) {\n        long mid = (max + min) / 2;\n \
    \       long cur_pos = arr[mid];\n        if (cur_pos < arr[min]) {\n        \
    \    min = mid;\n        } else if (cur_pos > arr[max]) {\n            max = mid;\n\
    \        } else {\n            return mid;\n        }\n    }\n    return min;",
  "  // Write your code here\n  long ans=0;\n  for(int i=0;i<arr.size()-1;i++)\n \
    \ {\n    if(arr[i]>=arr[i+1])\n    {\n      ans=i;\n      break;\n    }\n  }\n\
    \  return ans;", "  if (arr.size() <= 1)\n    return -1;\n  int max_val = INT_MIN;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (max_val < arr[i]) {\n     \
    \ max_val = arr[i];\n    }\n  }\n  return max_val;", "    long result = -1;\n\
    \    int i = 0;\n    while (i < arr.size()) {\n        if (i == 0) {\n       \
    \     result += arr[i];\n        } else {\n            int next_val = arr[i];\n\
    \            if (next_val < arr[i-1])\n                result += 1;\n        \
    \    else\n                result -= 1;\n        }\n        ++i;\n    }\n    return\
    \ result;", "    int k = arr.size() - 1;\n    for (int i = arr.size() - 1; i >\
    \ 0; i--) {\n        if (arr[i] >= arr[k]) {\n            k = i;\n        }\n\
    \    }\n    return (k == -1) ? -1 : k;", "  long ans = 0;\n  long ans1 = 0;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    long j = i;\n    long maxVal =\
    \ arr[i];\n    while (j > 0) {\n      if (arr[j-1] > maxVal) {\n        maxVal\
    \ = arr[j-1];\n      }\n      j--;\n    }\n    if (maxVal <= arr[ans1]) {\n  \
    \    ans = ans1;\n      ans1 = i;\n    }\n  }\n  return ans;", "  long largest\
    \ = arr.size();\n  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] >=\
    \ arr[i - 1]) {\n      largest = i;\n    }\n  }\n  return largest;", "    // Write\
    \ your code here.\n    int j = 0;\n    long largest = -1;\n    int i = 0;\n  \
    \  while (j < arr.size()) {\n        if (arr[j] >= arr[j - 1]) {\n           \
    \ j++;\n        } else {\n            largest = arr[j];\n            j = i;\n\
    \        }\n        i++;\n    }\n    return largest;", "    long i, largest_index\
    \ = -1, largest_value = 0, largest;\n    // Iterate through the given array and\
    \ keep track of the largest and \n    // second-largest value\n    for(i = 0;\
    \ i < arr.size(); i++){\n        if (arr[i] <= largest_value) {\n            largest_index\
    \ = i;\n            largest_value = arr[i];\n        }\n    }\n    // If the largest\
    \ value is not greater than or equal to the second-largest\n    // value then\
    \ return\n    if (largest_value <= largest_value) {\n        return -1;\n    }\n\
    \    // If there is no such value return the largest index \n    if (largest_index\
    \ >= arr.size() - 1) {\n        return largest_index;\n    }\n    // Get the value\
    \ of the second largest\n    largest = arr[largest_index];\n    // Loop through\
    \ the array again and check if the next value is the largest\n    for(i = largest_index\
    \ + 1; i < arr.size(); i++){\n        if (arr[i] > largest){\n            largest\
    \ = arr[i];\n        }\n    }\n    // If the second largest value is greater than\
    \ the largest then return\n    if (largest >= largest_value) {\n        return\
    \ largest_index;\n    }\n    // Otherwise return the second-largest index\n  \
    \  return largest_index + 1;", "    long retval = -1;\n    long max_idx = -1;\n\
    \    for (long idx = 0; idx < arr.size(); idx++) {\n        if (arr[idx] > arr[max_idx])\n\
    \            max_idx = idx;\n    }\n    if (max_idx != -1) {\n        for (long\
    \ idx = 0; idx < arr.size(); idx++) {\n            if (idx != max_idx && arr[idx]\
    \ > arr[max_idx])\n                retval = idx;\n        }\n    }\n    return\
    \ retval;", "    if (arr.size() == 0)\n        return -1;\n    std::sort(arr.begin(),\
    \ arr.end());\n    for (long i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i]\
    \ != (long)i + 1)\n            return i;\n    }\n    return -1;", "\tlong res\
    \ = -1;\n\tlong pos = 0;\n\tfor (auto el : arr) {\n\t\tif (res > 0 && el > arr[pos\
    \ - 1]) res = -1;\n\t\telse res = max(res, el);\n\t\tpos++;\n\t}\n\treturn res;",
  "    long size = arr.size();\n    long largest = 0;\n    for (int i = 0; i < size;\
    \ i++) {\n        if (arr[i] > largest) {\n            largest = arr[i];\n   \
    \     }\n        if (arr[i] != largest) {\n            largest = i;\n        }\n\
    \    }\n    if (largest != arr.back()) {\n        return -1;\n    }\n    return\
    \ largest;", "  // Your code goes here\n  long x = INT_MIN;\n  for (long i = 0;\
    \ i < arr.size(); i++) {\n    if (arr[i] >= x) {\n      x = arr[i];\n    }\n \
    \ }\n  return x;", "    assert(arr.size() == arr.back());\n    long ans = -1;\n\
    \    for (long i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] < arr[i +\
    \ 1]) {\n            if (ans == -1 || arr[i] > ans) {\n                ans = i;\n\
    \            }\n        }\n    }\n    return ans;", "    int len = arr.size();\n\
    \    int ans = 0;\n    for (int i = 0; i < len; i++) {\n        for (int j = i\
    \ + 1; j < len; j++) {\n            if (arr[i] <= arr[j]) {\n                ans\
    \ = max(ans, j - i);\n                break;\n            }\n        }\n    }\n\
    \    return ans;", "    int n = arr.size();\n    // Loop through all elements.\n\
    \    for (int i = 0; i < n; i++) {\n        // If element at index i is not greater\
    \ than or equal to element at\n        // index i - 1 then return i.\n       \
    \ // Else check if (i - 1 > 0) then return i-1 else return -1.\n        if (arr[i]\
    \ > arr[i - 1]) {\n            if (i - 1 > 0) return i - 1;\n            else\
    \ return -1;\n        }\n    }\n\n    // No such element exists.\n    return -1;",
  "\tlong l = 0, r = 0; // We will store the index of the element in the given arr\
    \ which is not greater than r index\n\tlong curr = 0;\n\tlong last = 0;\n\tfor(auto\
    \ it1 = arr.begin(); it1 != arr.end(); ++it1) {\n\t\tlast = curr;\n\t\tcurr =\
    \ std::upper_bound(it1, arr.end(), *it1, [](long a, long b)->bool{return a <=\
    \ b; });\n\t\tl = std::min(last, curr);\n\t\tr = std::max(l, curr);\n\t}\n\treturn\
    \ std::max(l, r);", "    // Write your code here.\n    // Do not modify arr\n\
    \    if (arr.size() == 0) {\n        return -1;\n    }\n    auto it = arr.begin();\n\
    \    if (*it == 0) {\n        return -1;\n    }\n    auto begin = it;\n    it\
    \ = std::find(it + 1, arr.end(), *it);\n    if (it != arr.end()) {\n        return\
    \ std::distance(begin, it);\n    }\n    return -1;", "    long res = 0;\n    int\
    \ len = arr.size();\n    for (int i = 0; i < len-1; i++) {\n        int j = i+1;\n\
    \        while (j < len && arr[j] < arr[i]) {\n            j++;\n        }\n \
    \       if (j < len && arr[i] > arr[j]) {\n            res = j;\n            i\
    \ = j;\n        }\n    }\n    return res == -1 ? -1 : res;", "    // Complete\
    \ the function.\n    // Note: The solution below is simple, but is not the best\
    \ in terms of time\n    // complexity. Try with vectors of length 1 to see.\n\
    \    // Solution: Sort the vector and return the index of the element which is\n\
    \    // greater than or equal to the current element.\n    sort(arr.begin(), arr.end());\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= arr[i-1])\n\
    \            return i;\n    }\n    return -1;", "    long ans = 0;\n    for(int\
    \ i=0; i<arr.size(); i++) {\n        if((arr.at(i) >= arr.at(i-1)))\n        \
    \    ans = i;\n    }\n    return ans;", "    long ans = -1;\n    for (auto it\
    \ = arr.rbegin(); it != arr.rend(); ++it) {\n        for (long x = *it; x < *(it\
    \ - 1); ++x) {\n            if (x == *it - 1) return it;\n        }\n    }\n \
    \   return ans;", "    if (arr.size() == 1)\n        return arr[0];\n    // Create\
    \ a map to store the index of element\n    unordered_map<long, long> map;\n  \
    \  for (long i = 0; i < arr.size(); i++) {\n        if (map.find(arr[i]) != map.end())\n\
    \            return i;\n        map[arr[i]] = i;\n    }\n    return -1;", "  if\
    \ (arr.size() == 0) return -1;\n  long largest = -1;\n  for (long i = 0; i < arr.size();\
    \ i++) {\n    if (largest<0) largest = i;\n    if (arr[i] <= arr[largest])\n \
    \     largest = i;\n  }\n  return largest;", "    // Your code here\n    long\
    \ ans = -1;\n    long i = 0;\n    long max = arr[0];\n    for (i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n\
    \    }\n    if (max >= arr[arr.size() - 1]) {\n        return ans;\n    }\n  \
    \  for (; i < arr.size() - 1; i++) {\n        if (arr[i] > max) {\n          \
    \  max = arr[i];\n        }\n    }\n    if (max >= arr[arr.size() - 1]) {\n  \
    \      return ans;\n    }\n    for (; i < arr.size() - 1; i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n        }\n    }\n    if (max >= arr[arr.size()\
    \ - 1]) {\n        return ans;\n    }\n    for (; i < arr.size() - 1; i++) {\n\
    \        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n  \
    \  if (max >= arr[arr.size() - 1]) {\n        return ans;\n    }\n    return i;",
  "    long l = 0, r = arr.size() - 1, m = 0;\n    while (l < r) {\n        int m1\
    \ = (l + (r - l) / 2); // middle index\n        if (arr[m1] >= arr[m]) {\n   \
    \         l = m1 + 1;\n        } else {\n            r = m1 - 1;\n        }\n\
    \    }\n    return m; // Found an element which is greater than or equal to the\n\
    \              // element before it or -1 if none exists.", "    // Your code\
    \ goes here\n    long maxValue = arr.back();\n    for(int i = 0; i< arr.size();\
    \ i++) {\n        if(arr[i] <= maxValue) {\n            maxValue = arr[i];\n \
    \       }\n    }\n    return maxValue;", "    assert(arr.size() >= 2);\n    long\
    \ res = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] <=\
    \ arr[i - 1]) {\n            res = i;\n            break;\n        }\n    }\n\
    \    return res;", "    long maxval = -1, curval = -1;\n    for (long &cur : arr)\
    \ {\n        curval = cur;\n        while(curval > cur) curval--;\n        if\
    \ (curval > maxval)\n            maxval = curval;\n    }\n    return maxval;",
  "    int n = arr.size();\n    long largest = n; // initialize with first element\
    \ of array\n    long index = -1; // initialize with -1 as no such element exists\n\
    \    long count = 0;\n    long ans = n; // initialize with first element of array\n\
    \    long t = 0;\n    // check for duplicate elements\n    for (int i = 0; i <\
    \ n; i++)\n    {\n        if (arr[i] != largest)\n        {\n            count++;\n\
    \            if (count > 1)\n            {\n                largest = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    \n    // if\
    \ largest is greater than the last element of the array then return -1\n    if\
    \ (largest > arr[index])\n    {\n        return -1;\n    }\n    // if the given\
    \ array has only one element then return -1\n    if (n == 1)\n    {\n        return\
    \ -1;\n    }\n    // if the largest element is greater than the last element of\
    \ the array then\n    // return the last index of the array else return the index\
    \ of first element\n    if (largest > arr[n - 1])\n    {\n        return arr.size()\
    \ - 1;\n    }\n    // return index of first element in the array\n    return index;",
  "  std::sort(arr.begin(), arr.end());\n  long ans = -1;\n  for (long i = 0; i +\
    \ 1 < arr.size(); i++)\n    if (arr[i] >= arr[i + 1])\n      ans = i;\n  return\
    \ ans;", "    auto it = arr.begin();\n    for (; it != arr.end() - 1; ++it) {\n\
    \        // if (*it <= *it + 1) {\n        if (*it + 1 != *it) {\n           \
    \ return *it + 1;\n        }\n    }\n    return -1;", "  int l = 0;\n  for (auto\
    \ i = arr.rbegin(); i != arr.rend(); i++) {\n    long k = *i;\n    if (arr.size()\
    \ - l <= 1) {\n      return l;\n    }\n    long ki = arr.back();\n    if (ki <\
    \ k) {\n      l = i;\n    } else {\n      if (ki == k) {\n        continue;\n\
    \      } else {\n        return -1;\n      }\n    }\n  }\n  return -1;", "  //\
    \ Write your code here\n  long maxium = -1;\n  for (long i = 1; i < arr.size();\
    \ i++) {\n    if (arr[i] < arr[i - 1]) {\n      maxium = i;\n    }\n  }\n  return\
    \ maxium;", "  int n = arr.size();\n  long largest_indx = -1;\n  for (int i =\
    \ 1; i < n; i++) {\n    long val = arr[i];\n    for (int j = 0; j < i; j++) {\n\
    \      if (val < arr[j]) {\n        largest_indx = j;\n      }\n    }\n  }\n \
    \ return largest_indx;", "    // write your code here\n    long ans = -1;\n  \
    \  long maxval = arr[0];\n    for(long i=1; i<arr.size(); i++){\n        if(arr[i]\
    \ > maxval){\n            maxval = arr[i];\n        }\n    }\n    for(long i=0;\
    \ i<arr.size(); i++){\n        if(arr[i] <= maxval){\n            ans = i;\n \
    \       }\n    }\n    return ans;", "    // Write your code here\n    int size\
    \ = arr.size();\n    for(int i=0;i<size;i++)\n    {\n        for(int j=i+1;j<size;j++)\n\
    \        {\n            if(arr[i]<arr[j])\n            {\n                return\
    \ j;\n            }\n        }\n    }\n    return -1;", "    // code here\n  \
    \  \n    long ans = 0;\n    \n    for(long i = 1; i < arr.size(); i++){\n    \
    \    if(arr[i] <= arr[i-1]){\n            ans = i;\n            break;\n     \
    \   }\n    }\n    return ans;\n    ", "    if (arr.size() == 0) return -1;\n \
    \   long highest_so_far = arr[0];\n    int idx = 1;\n    // traverse array from\
    \ second element\n    for (; idx < arr.size(); ++idx) {\n        // if the element\
    \ is not greater than the previous highest element\n        if (arr[idx] < highest_so_far)\n\
    \            return -1;\n        // if the element greater than the previous highest\
    \ element\n        if (arr[idx] > highest_so_far) {\n            highest_so_far\
    \ = arr[idx];\n        }\n    }\n    return idx;", "    // Your code here\n  \
    \  ", "    // code here\n    // Your code here\n    std::sort(arr.begin(), arr.end());\n\
    \    long l=0;\n    long r=arr.size()-1;\n    long k=0;\n    while(l<=r){\n  \
    \      if(arr[l]<=arr[k]){\n            l++;\n        }\n        else{\n     \
    \       k++;\n        }\n    }\n    return k;", "    if (arr.size() == 0) return\
    \ -1;\n    long ans = arr[0];\n    long index = 1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] <= ans)\n            break;\n        ans = arr[i];\n\
    \        index = i;\n    }\n    return index;", "    long ans = -1;\n    long\
    \ prev = 0;\n    for (int i = 0; i < arr.size() - 1; i++) {\n        prev = arr[i];\n\
    \        for (int j = i + 1; j < arr.size(); j++) {\n            if (arr[j] >\
    \ prev) {\n                ans = j;\n                break;\n            }\n \
    \       }\n    }\n    return ans;", "    // Your code goes here\n    int k = 0;\n\
    \    long max = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ < arr[k]) {\n            max = i;\n        }\n    }\n    return max;", "   \
    \ // Your code here\n    return -1;", "    if(arr.size() <= 1) return -1;\n  \
    \  long ans = arr[0];\n    for(auto i : arr) {\n        if(i > ans) ans = i;\n\
    \    }\n    return ans;", "    long ans = -1;\n    long max = arr[0];\n    for\
    \ (int i = 0; i < arr.size(); i++) {\n        if (max < arr[i]) {\n          \
    \  ans = i;\n        }\n        max = arr[i];\n    }\n    return ans;", "\t//\
    \ Your code goes here\n\tassert(arr.size() >= 2);\n\tlong ans = 0;\n\tfor (int\
    \ i = 1; i < arr.size(); i++) {\n\t\tif (arr[i - 1] >= arr[i])\n\t\t\tans++;\n\
    \t}\n\treturn ans;", "    int n = arr.size();\n    // If array is empty then return\
    \ -1\n    if (n == 0)\n        return -1;\n    // If only 1 element in the array\
    \ then return 0\n    if (n == 1)\n        return 0;\n    // Initialize maximum\
    \ and minimum indices\n    int max_idx = 0;\n    int min_idx = 0;\n    // Find\
    \ the maximum index\n    for (int i = 0; i < n; i++) {\n        // If the element\
    \ is greater than the current maximum index\n        if (arr[i] >= arr[max_idx])\
    \ {\n            max_idx = i;\n        } else {\n            // If this element\
    \ is the maximum and is not greater than the\n            // element immediately\
    \ preceding it then this element is the\n            // maximum\n            if\
    \ (arr[i] > arr[max_idx] && arr[max_idx] != arr[min_idx]) {\n                max_idx\
    \ = i;\n            }\n        }\n    }\n    // Find minimum index\n    for (int\
    \ i = 0; i < n; i++) {\n        if (arr[i] >= arr[min_idx]) {\n            min_idx\
    \ = i;\n        }\n    }\n    // If there is no such element in the array then\
    \ return -1\n    if (max_idx == min_idx)\n        return -1;\n    // If the minimum\
    \ index is not greater than the maximum then return -1\n    if (min_idx != max_idx)\
    \ {\n        if (arr[min_idx] > arr[max_idx])\n            return -1;\n    }\n\
    \    // If all the elements in the array are less than each other then return\n\
    \    // -1\n    if (arr[0] != arr[1])\n        return -1;\n    // If all the elements\
    \ in the array are equal to each other return -1\n    if (arr[0] == arr[1])\n\
    \        return -1;\n    // If all the elements in the array are greater than\
    \ each other then\n    // return 1\n    return 1;", "    // Your code here\n \
    \   long ans = 0;\n    long prev = 0;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > arr[prev])\n            ans = i;\n        else\n   \
    \         prev = i;\n    }\n    return ans;", "  // Declare and initialize variables.\n\
    \  long ans = -1;\n  long i = 0; // Index\n  // Use a for loop to traverse the\
    \ given vector.\n  for (; i < arr.size(); i++) {\n    // If a value is not greater\
    \ than or equal to the value before it in\n    // the given vector then update\
    \ ans with the index value.\n    if (arr[i] >= arr[i-1])\n      ans = i;\n  }\n\
    \  // Return the ans.\n  return ans;", "  long ans = INT_MAX;\n  for (long i =\
    \ 0; i < arr.size(); i++) {\n    for (long j = i; j < arr.size(); j++) {\n   \
    \   if (arr[i] >= arr[j] && arr[j] >= arr[j - 1]) break;\n      if (ans < arr[j])\
    \ ans = arr[j];\n    }\n  }\n  return ans == INT_MAX ? -1 : ans;", "    // Use\
    \ an unordered_map of long -> int to count number of occurrences.\n    unordered_map<long,\
    \ int> umap;\n    for (long i : arr) {\n        umap[i] = umap.count(i) + 1;\n\
    \    }\n    // Find the first element that is not greater than or equal to the\
    \ element immediately preceding it.\n    for (long i = 0; i < arr.size() - 1;\
    \ i++) {\n        if (umap[arr[i]] > umap[arr[i + 1]]) {\n            return i;\n\
    \        }\n    }\n    return -1;", "  // code here\n  if (arr.size() < 2) return\
    \ -1;\n  long minIdx = arr[0];\n  long minDiff = arr[0] - arr[arr.size()-1];\n\
    \  for (long i = 1; i < arr.size(); i++) {\n    long diff = arr[i] - arr[i-1];\n\
    \    if (diff >= minDiff) {\n      if (diff < minDiff) {\n        minIdx = arr[i];\n\
    \        minDiff = diff;\n      } else {\n        return i;\n      }\n    }\n\
    \  }\n  return -1;", "  int start=0;\n  long max_index=0;\n  // Traverse through\
    \ all elements\n  for(int i=0;i<arr.size();i++) {\n    // Store starting index\
    \ of the largest element and index\n    // of current element\n    if(arr[i]>arr[max_index])\
    \ {\n      max_index=i;\n      start=max_index;\n    }\n  }\n  // Return -1 if\
    \ there is no such element\n  if(max_index==-1) {\n    return -1;\n  }\n  return\
    \ max_index-start;", "  // Your code goes here\n  int n = arr.size();\n  int k\
    \ = 0;\n  long ans = -1;\n  for (int i = 1; i < n; i++) {\n    if (arr[i] > arr[k])\
    \ {\n      ans = i;\n    }\n    k++;\n  }\n  return ans;", "  // Your code here\n\
    \  long ans = 0;\n  for (size_t i = 0; i < arr.size(); i++) {\n    if (i + 1 <\
    \ arr.size() && arr[i] >= arr[i + 1]) {\n      continue;\n    }\n    ans = max(ans,\
    \ i);\n  }\n  return ans;", "    std::sort(arr.begin(), arr.end());\n    long\
    \ max = -1, ans = -1;\n    for (long i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] > max) {\n            max = arr[i];\n            ans = i;\n        }\n\
    \    }\n    return ans;", "    // code here\n    long ans = -1;\n    long maxval\
    \ = arr[0];\n    long minval = arr[0];\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > maxval) {\n            maxval = arr[i];\n        }\n\
    \        else if (arr[i] < minval) {\n            minval = arr[i];\n        }\n\
    \    }\n    if (minval > maxval) {\n        for (long i = 1; i < arr.size(); i++)\
    \ {\n            if (arr[i] > maxval) {\n                maxval = arr[i];\n  \
    \          }\n        }\n        if (maxval == arr[arr.size()-1]) {\n        \
    \    ans = arr.size();\n        }\n    }\n    return ans;", "  long ans = INT_MAX;\n\
    \  for (long i = 1; i < arr.size() - 1; ++i) {\n    if (arr[i] >= arr[i-1]) continue;\n\
    \    ans = i;\n    break;\n  }\n  return ans;", "  if (arr.size() == 0 || arr.size()\
    \ == 1) { \n    return -1; \n  }\n  long max_index = -1, current_index = 1;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    current_index = current_index *\
    \ arr[i];\n    if (max_index < current_index) {\n      max_index = current_index;\n\
    \    }\n  }\n  return max_index;", "\tlong i = 0, j = 0, max = 0, max = -1;\n\t\
    for (; i < arr.size(); i++, j++) {\n\t\tif (arr[i] <= arr[j]) {\n\t\t\tmax = i;\n\
    \t\t\tbreak;\n\t\t} else if (arr[i] >= arr[j]) {\n\t\t\tmax = j;\n\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn max;", "    // code here\n    long largest = arr[0];\n  \
    \  for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] <= largest) {\n\
    \            return i;\n        } else {\n            largest = arr[i];\n    \
    \    }\n    }\n    return -1;", "\tint len = arr.size();\n\tlong int max_index\
    \ = -1;\n\tlong int index = -1;\n\tfor (long int i = 0; i <= len; i++) {\n\t\t\
    // if arr[0] is less than arr[i] then arr[i] is greater than arr[0].\n\t\tif (arr[i]\
    \ < arr[index]) {\n\t\t\tmax_index = index;\n\t\t}\n\t\tindex = i;\n\t}\n\treturn\
    \ max_index;", "    long max_index = 0;\n    long max_val = arr[0];\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n           \
    \ max_val = arr[i];\n            max_index = i;\n        }\n    }\n    return\
    \ max_index;", "  // Initialize an empty maximum size array for the results.\n\
    \  long maxVal = -1;\n  // Initialize two temporary variables to hold values from\
    \ the given array and\n  // the two largest values encountered so far.\n  long\
    \ firstVal = arr[0];\n  long secondVal = arr[0];\n  long maxVal2 = -1;\n  // Initialize\
    \ the minimum size array for the results.\n  long minVal = 1;\n  for (long i =\
    \ 1; i < arr.size(); i++) {\n    // If current value is larger than the largest\
    \ value found so far,\n    // update the largest value found so far and the corresponding\
    \ index\n    // with the current value.\n    if (arr[i] > maxVal) {\n      maxVal\
    \ = arr[i];\n      maxVal2 = i;\n    }\n    // If current value is smaller than\
    \ the smallest value found so far,\n    // update the smallest value found so\
    \ far and the corresponding index\n    // with the current value.\n    else if\
    \ (arr[i] < minVal) {\n      minVal = arr[i];\n      minVal = i;\n    }\n    //\
    \ If current value is equal to the largest value found so far,\n    // update\
    \ the second largest value found so far and the corresponding\n    // index with\
    \ the current value.\n    else if (arr[i] == maxVal) {\n      if (arr[i] > maxVal2)\
    \ {\n        maxVal2 = arr[i];\n        maxVal2 = i;\n      }\n    }\n  }\n  //\
    \ Return the largest value found.\n  return maxVal2;", "  int n = arr.size();\n\
    \  long maxval = arr[0];\n  int largestidx = -1;\n  for (int i = 1; i < n; i++)\
    \ {\n    if (arr[i] >= maxval) {\n      maxval = arr[i];\n      largestidx = i;\n\
    \    }\n  }\n  return largestidx;", "    // Write your code here\n    \n    long\
    \ prev=arr[0];\n    long i=1;\n    while(i<arr.size()) {\n        if(prev>=arr[i])\
    \ {\n            return i;\n        }\n        prev = arr[i];\n        i++;\n\
    \    }\n    return -1;", "    if(arr.empty()) return -1;\n    long max_ix = -1,\
    \ max_val = arr[0];\n    for(long i = 1; i < arr.size(); i++)\n    {\n       \
    \ if(arr[i] > max_val)\n        {\n            max_ix = i;\n            max_val\
    \ = arr[i];\n        }\n    }\n    return max_ix;", "    long ans = -1;\n\n  \
    \  for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] < arr[i - 1]) {\n\
    \            break;\n        }\n        if (arr[i] > arr[i]) {\n            ans\
    \ = i;\n            break;\n        }\n    }\n    return ans;", "    int n = arr.size();\n\
    \    long ans = -1;\n    for (auto it = arr.begin() + 1; it != arr.end(); it++)\
    \ {\n        if (*it > arr[0]) {\n            return -1;\n        }\n    }\n \
    \   return ans;", "    long left_idx = 0;\n    long right_idx = 0;\n    long idx\
    \ = 0;\n    long l = 0;\n    long r = arr.size() - 1;\n\n    while ((r - l) >\
    \ 1) {\n        idx = r + l - 1;\n\n        if (arr[idx] == arr[idx - 1]) {\n\
    \            l = idx;\n        } else {\n            r = idx;\n        }\n   \
    \ }\n\n    if (arr[l] <= arr[left_idx]) {\n        left_idx++;\n    }\n\n    return\
    \ left_idx;", "    long max_val = INT_MIN, index = -1;\n    for (int i = 0; i\
    \ < arr.size() - 1; i++) {\n        if (arr[i] >= arr[i + 1]) {\n            long\
    \ val = arr[i];\n            arr[i] = arr[i + 1];\n            arr[i + 1] = val;\n\
    \        }\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n \
    \           index = i;\n        }\n    }\n    return index;", "  std::vector<long>::const_iterator\
    \ it;\n  long max_val = -1LL;\n  for (it = arr.begin() + 1; it != arr.end(); ++it)\
    \ {\n    if (*it > max_val) {\n      max_val = *it;\n    }\n  }\n  return max_val;",
  "  int i;\n  long max = INT_MIN;\n  long ans = -1;\n  for (i = 0; i < arr.size();\
    \ i++) {\n    if (arr[i] > max) {\n      ans = i;\n      max = arr[i];\n    }\n\
    \  }\n  return ans;", "  long max_val = INT_MIN;\n  for (long i = 0; i < arr.size()\
    \ - 1; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      continue;\n    }\n    if\
    \ (arr[i] < max_val) {\n      max_val = arr[i];\n    }\n  }\n  return max_val;",
  "    long largest = arr[0];\n    long i = 0;\n    for (; i < arr.size(); i++) {\n\
    \        if (arr[i] >= largest) {\n            break;\n        }\n        largest\
    \ = arr[i];\n    }\n    if (i == arr.size()) {\n        return -1;\n    }\n  \
    \  return i;", "    // Your code here\n    if (arr.size() <= 1 || arr.size() >\
    \ arr.size() - 1) {\n        return -1;\n    }\n    long max_val = arr[0];\n \
    \   for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] >= max_val) {\n\
    \            max_val = arr[i];\n        } else {\n            return i;\n    \
    \    }\n    }\n    return -1;", "    if (arr.size() == 0) {\n        return -1;\n\
    \    }\n    long ans = -1;\n    long last = arr[0];\n    for (long i = 1; i <\
    \ arr.size(); i++) {\n        if (arr[i] < last) {\n            ans = i;\n   \
    \         last = arr[i];\n        }\n    }\n    return ans;", "    // Your code\
    \ here\n    if(arr.size()<=1)\n    {\n        return -1;\n    }\n    long largest_index=0;\n\
    \    long index_to_check;\n    for(long i=0;i<arr.size();i++)\n    {\n       \
    \ index_to_check = arr[i];\n        if(index_to_check>largest_index)\n       \
    \ {\n            largest_index=index_to_check;\n        }\n    }\n    return largest_index;",
  '    // code here ...', "    // Your code here\n    long cnt = 0;\n    int prev_elem\
    \ = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i - 1] >=\
    \ arr[i]) {\n            cnt += 1;\n            if (prev_elem >= arr[i]) {\n \
    \               prev_elem = i;\n            }\n        }\n    }\n    return cnt;",
  "    long large = -1;\n    long start = 0;\n    long index = 0;\n    for(auto it\
    \ = arr.rbegin(); it != arr.rend(); ++it) {\n        if(*it > large) {\n     \
    \       index = start;\n            large = *it;\n        }\n        if(*it ==\
    \ large) {\n            index = start;\n            large = *it;\n           \
    \ ++start;\n        }\n    }\n    return index;", "    // Write your code here.\n\
    \    if (arr.size() <= 0) {\n        return -1;\n    }\n    long result = 0;\n\
    \    long max = 0;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ <= max) {\n            result = i;\n        }\n        max = arr[i];\n    }\n\
    \    return result;", "\t// code here\n\tlong l = 0;\n\tlong r = arr.size() -\
    \ 1;\n\tif (arr[l] <= arr[r]) {\n\t\tlong index = r + 1;\n\t\twhile (index > 0\
    \ && arr[index] < arr[index-1]) {\n\t\t\tindex--;\n\t\t}\n\t\treturn index;\n\t\
    } else {\n\t\treturn -1;\n\t}", "    // Your code here\n    \n    // Your code\
    \ here\n    \n    return -1;", "  // Write your code here\n  long ans=INT_MAX;\n\
    \  for(long i=0;i<arr.size();i++){\n    long temp=arr[i];\n    for(long j=i+1;j<arr.size();j++){\n\
    \      if(arr[j]>=temp){\n        arr[j]=temp;\n        if(temp>ans){\n      \
    \    ans=temp;\n        }\n      }\n    }\n  }\n  return ans;", "    long i =\
    \ 0;\n    for (auto &elem : arr) {\n        if (i > elem) {\n            return\
    \ i;\n        }\n        ++i;\n    }\n    return -1;", "    int len = arr.size();\n\
    \    long ret = -1;\n    for (long i = len - 1; i > 0; i--) {\n        if (arr[i]\
    \ >= arr[i - 1]) {\n            ret = i;\n            break;\n        }\n    }\n\
    \    return ret;", "    std::sort(arr.begin(), arr.end(), [&](long a, long b)\
    \ {\n        return a > b;\n    });\n    if (arr.size() == 1)\n        return\
    \ -1;\n    if (arr.front() >= arr.back())\n        return arr.size() - 1;\n  \
    \  return arr.size() - 2;", "    // Write your code here.\n    return -1;", " \
    \   // Write your code here\n    long max_val = -1L;\n    long prev_index = -1L;\n\
    \n    for(long i = 0; i < arr.size(); i++)\n    {\n        if(max_val < arr[i])\
    \ {\n            max_val = arr[i];\n            prev_index = i;\n        }\n \
    \   }\n    if(max_val == -1L) {\n        return -1;\n    }\n    return prev_index;",
  "    long maxIndex = -1;\n    long largestIdx = 0;\n    long sizeArr = arr.size();\n\
    \    long curIdx = 0;\n    for (long i = 0; i < sizeArr; i++) {\n        if (curIdx\
    \ + 1 < sizeArr && arr[curIdx + 1] < arr[i]) {\n            largestIdx = i;\n\
    \            ++curIdx;\n        }\n    }\n    if (maxIndex < 0 || maxIndex + 1\
    \ != largestIdx) {\n        maxIndex = largestIdx;\n    }\n    return maxIndex;",
  "  // Create an array to store the result in\n  long ans = -1;\n  long max = arr[0];\n\
    \  for (long i = 1; i < arr.size(); i++) {\n    if (arr[i] > max) {\n      ans\
    \ = i;\n      max = arr[i];\n    }\n  }\n  return ans;", "    auto max = arr[0];\n\
    \    long i = 0;\n    for (i = 0; i < arr.size(); i++) {\n        if (arr[i] <=\
    \ max) {\n            max = arr[i];\n        } else {\n            break;\n  \
    \      }\n    }\n    return i;", "    long largest_index = 0;\n    for (long i\
    \ = 1; i < arr.size(); i++) {\n        if (arr[i] >= arr[i-1]) {\n           \
    \ largest_index = i;\n        }\n    }\n    return largest_index;", "    long\
    \ ans = 0;\n    int sz = arr.size();\n    for (int i = 0; i < sz - 1; i++) {\n\
    \        if (arr[i] > arr[i + 1])\n            ans++;\n    }\n    if (sz > 0)\
    \ {\n        long cur = arr[0];\n        for (int i = 0; i < sz - 1; i++) {\n\
    \            if (arr[i] > cur)\n                ans++;\n        }\n    }\n   \
    \ return ans > 0 ? ans : -1;"]
stop_tokens:
- "\n}"
