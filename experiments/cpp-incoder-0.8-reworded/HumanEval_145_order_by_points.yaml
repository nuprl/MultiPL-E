name: HumanEval_145_order_by_points
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function which sorts\
  \ the given vector of integers\n// in ascending order according to the sum of their\
  \ digits.\n// Note: if there are several items with similar sum of their digits,\n\
  // order them based on their index in original vector.\n// For example:\n// >>>\
  \ order_by_points((std::vector<long>({(long)1, (long)11, (long)-1, (long)-11, (long)-12})))\n\
  // (std::vector<long>({(long)-1, (long)-11, (long)1, (long)-12, (long)11}))\n//\
  \ >>> order_by_points((std::vector<long>()))\n// (std::vector<long>())\nstd::vector<long>\
  \ order_by_points(std::vector<long> nums) {\n"
tests: "}\nint main() {\n    auto candidate = order_by_points;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)11, (long)-1, (long)-11, (long)-12}))) == (std::vector<long>({(long)-1,\
  \ (long)-11, (long)1, (long)-12, (long)11})));\n    assert(candidate((std::vector<long>({(long)1234,\
  \ (long)423, (long)463, (long)145, (long)2, (long)423, (long)423, (long)53, (long)6,\
  \ (long)37, (long)3457, (long)3, (long)56, (long)0, (long)46}))) == (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)6, (long)53, (long)423, (long)423, (long)423, (long)1234,\
  \ (long)145, (long)37, (long)46, (long)56, (long)463, (long)3457})));\n    assert(candidate((std::vector<long>()))\
  \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)-11, (long)-32, (long)43, (long)54, (long)-98, (long)2, (long)-3}))) ==\
  \ (std::vector<long>({(long)-3, (long)-32, (long)-98, (long)-11, (long)1, (long)2,\
  \ (long)43, (long)54})));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3, (long)4, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10, (long)11})))\
  \ == (std::vector<long>({(long)1, (long)10, (long)2, (long)11, (long)3, (long)4,\
  \ (long)5, (long)6, (long)7, (long)8, (long)9})));\n    assert(candidate((std::vector<long>({(long)0,\
  \ (long)6, (long)6, (long)-76, (long)-21, (long)23, (long)4}))) == (std::vector<long>({(long)-76,\
  \ (long)-21, (long)0, (long)4, (long)23, (long)6, (long)6})));\n}\n"
completions: ["    // code here\n    long sum = 0;\n    for (auto itr = nums.begin();\
    \ itr != nums.end(); itr++) {\n        long digit = *itr;\n        sum += digit;\n\
    \    }\n    if (sum < 0)\n        sum = 0;\n    std::vector<long> res;\n    for\
    \ (auto itr = nums.begin(); itr != nums.end(); itr++) {\n        long digit =\
    \ *itr;\n        if (sum - digit >= 0) {\n            sum -= digit;\n        \
    \    res.push_back(*itr);\n        }\n    }\n    return res;", "    // base case\n\
    \    if (nums.empty()) return nums;\n    \n    // sort by sum of digits in descending\
    \ order\n    std::vector<long> nums_sorted(nums.begin(), nums.end());\n    std::sort(nums_sorted.begin(),\
    \ nums_sorted.end(),\n        [](long a, long b)->bool {return a+b < 0; });\n\n\
    \    // sort by indexes in original vector\n    std::sort(nums_sorted.begin(),\
    \ nums_sorted.end(),\n        [&nums](long a, long b) {\n            return nums.at(a)\
    \ < nums.at(b);\n        });\n    return nums_sorted;", "    assert(!nums.empty());\n\
    \    // Use a set to store already sorted points and an iterator to iterate over\
    \ them\n    std::set<long> sorted;\n    std::vector<long>::iterator sortedIterator;\n\
    \    // Initialize sortedIterator with first element of nums\n    sortedIterator\
    \ = nums.begin();\n    // Add the first element to sorted\n    sorted.insert(sortedIterator);\n\
    \    // Add the rest of nums to sorted\n    for (std::vector<long>::iterator num\
    \ = nums.end(); num != nums.begin(); num++) {\n        long curr = *num;\n   \
    \     // Remove all elements that satisfy curr <= curr.digit\n        for (sortedIterator\
    \ = sorted.begin(); sortedIterator != sorted.end(); sortedIterator++) {\n    \
    \        if (*sortedIterator <= curr && curr < 0 && *num < 0)\n              \
    \  break;\n        }\n        sorted.insert(sortedIterator);\n    }\n    // Return\
    \ the sorted vector with its elements\n    return sorted;", "    std::map<long,\
    \ int> idx;\n    for (auto &i : nums)\n        idx[i] += nums.size() * i;\n  \
    \  return std::vector<long>(std::begin(idx), std::end(idx));", "  // Write your\
    \ code here.\n  int n = nums.size();\n  std::vector<int> dp(n + 1);\n  std::iota(dp.begin(),\
    \ dp.end(), 0);\n  std::partial_sum(dp.begin(), dp.end(), dp.begin(), std::plus<long>());\n\
    \  std::sort(dp.begin(), dp.end());\n  for (int i = 0; i < n; i++)\n    ;\n  int\
    \ j = 0, k = n - 1;\n  while (k < j) {\n    while (k >= 0 && dp[j] > dp[k + 1])\n\
    \      k--;\n    if (k < j) {\n      swap(dp[j], dp[k]);\n      j++;\n      k--;\n\
    \    }\n  }\n  std::vector<long> ans;\n  ans.reserve(dp.size());\n  for (int i\
    \ = 0; i < n; i++)\n    ans.push_back(dp[i]);\n  return ans;", "    std::vector<long>\
    \ ret;\n    long sum = 0;\n    // For each element in the vector, sum its digits\
    \ then find the index\n    // of the element with the smallest sum\n    for (long\
    \ element : nums) {\n        int index = 0;\n        while (element != 0) {\n\
    \            index += (element % 10);\n            element /= 10;\n        }\n\
    \        // If the index of a similar sum is found, add the number to the result\
    \ vector\n        if (ret.size() > 0 && ret[ret.size() - 1] + index == sum) {\n\
    \            ret.push_back(sum);\n        } else {\n            ret.push_back(index);\n\
    \        }\n        sum += index;\n    }\n    std::sort(ret.begin(), ret.end());\n\
    \    return ret;", "    long digits[10] = {0};\n    for (long i : nums) digits[i]\
    \ += i % 10;\n    for (long i = 0; i < 10; i++) {\n        for (int j = 0; j <\
    \ 10; j++) {\n            if (digits[j] > digits[i]) std::swap(digits[j], digits[i]);\n\
    \        }\n    }\n    return nums;", "  assert(nums.size());\n  std::vector<long>\
    \ ret(nums.size());\n  for (size_t i = 0; i < nums.size(); i++) {\n    ret[i]\
    \ = 0;\n    for (size_t j = 0; j < nums[i].size(); j++) {\n      ret[i] += nums[i][j];\n\
    \    }\n    ret[i] %= 10;\n  }\n  std::sort(ret.begin(), ret.end(), [&nums] (long\
    \ l, long r) { return l < r;});\n  return ret;", "    std::vector<long> ret;\n\
    \    // write your code here\n    int max_val = 0;\n    int min_val = INT_MAX;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        int curr = nums[i];\n  \
    \      max_val = max(curr, max_val);\n        min_val = min(curr, min_val);\n\
    \    }\n    std::vector<int> num_vec(max_val - min_val + 1);\n    int curr = 0;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        int curr = nums[i];\n  \
    \      num_vec[curr - min_val] = 1;\n    }\n    for (int i = 0; i < num_vec.size();\
    \ i++) {\n        for (int j = 0; j < num_vec.size(); j++) {\n            if (num_vec[j]\
    \ * num_vec[i] > 0)\n                ret.push_back(j);\n        }\n    }\n   \
    \ return ret;", "    std::map<long, int> m;\n    for(auto n : nums)\n        m[n]++;\n\
    \    std::map<long, int>::iterator it;\n    for(it = m.begin(); it != m.end();\
    \ ++it) {\n        if(it->second > 0)\n            continue;\n        for(auto\
    \ i = it->second-1; i >= 0; --i) {\n            if(nums[i] > nums[i+1])\n    \
    \            std::swap(nums[i], nums[i+1]);\n        }\n    }\n    return nums;",
  "    std::vector<long> order;\n    std::vector<int> digits;\n    // Traverse from\
    \ left to right and count number of digits\n    for (size_t i = nums.size() -\
    \ 1; i >= 0; --i) {\n        long n = nums[i];\n        int count = 0;\n     \
    \   while (n > 0) {\n            n /= 10;\n            ++count;\n        }\n \
    \       digits.push_back(count);\n    }\n    // Sort digits using quick sort.\n\
    \    sort(std::begin(digits), std::end(digits));\n    for (size_t i = 0; i < nums.size();\
    \ ++i) {\n        // Insert index to original nums vector to keep original order.\n\
    \        int pos = i;\n        for (size_t j = 0; j < digits[i]; ++j) {\n    \
    \        pos = nums[pos];\n        }\n        order.push_back(pos);\n    }\n \
    \   return order;", "    // Write your code here\n    long long s = 0;\n    int\
    \ n = nums.size();\n    for (int i = 0; i < n; ++i) {\n        s = s + nums[i];\n\
    \        std::cout << s << std::endl;\n    }\n    std::cout << std::endl;\n  \
    \  std::vector<long> nums2;\n    for (int i = 0; i < n; ++i) {\n        if (nums[i]\
    \ < 0)\n            nums2.push_back(nums[i]);\n        else if (nums[i] == 0)\n\
    \            nums2.push_back(i);\n        else if (nums[i] > 0)\n            nums2.push_back(nums[i]\
    \ - 10 + nums2[nums2.size() - 1]);\n    }\n    return nums2;", "    std::vector<long>\
    \ order(nums.size());\n    long long sum = 0;\n    for(long long i = 0; i < nums.size();\
    \ i++){\n        sum += nums[i];\n        std::cout << \"sum: \" << sum << std::endl;\n\
    \        std::cout << \"i: \" << i << std::endl;\n        if(order[i] != -1){\n\
    \            long long tmp_sum = sum;\n            for(int j = 0; j < i; j++){\n\
    \                tmp_sum -= nums[j];\n            }\n            order[i] = tmp_sum;\n\
    \        }else{\n            order[i] = sum;\n        }\n    }\n    return order;",
  "    std::vector<long> nums_ordered;\n    \n    int digits_sum = 0;\n    for (long\
    \ n : nums) {\n        digits_sum += (n%10);\n    }\n    int last_digit = digits_sum;\n\
    \    for (int i = 0; i < nums.size(); i++) {\n        digits_sum += nums[i]%10;\n\
    \        if (digits_sum != last_digit) {\n            nums_ordered.push_back(nums[i]);\n\
    \            last_digit = digits_sum;\n        }\n    }\n    return nums_ordered;",
  "  std::sort(nums.begin(), nums.end(), [](long a, long b) {\n    long sum = a;\n\
    \    while (sum < b) {\n      sum += b;\n    }\n    return sum < 0;\n  });\n \
    \ return nums;", "  std::sort(nums.begin(), nums.end(), [](long a, long b){\n\
    \    return std::accumulate(std::begin(nums), std::end(nums), b, std::greater<long>());\n\
    \  });\n  return nums;", "    // Write your code here\n    std::vector<long> results;\n\
    \    for (auto it = nums.begin(); it != nums.end(); ++it) {\n        long s =\
    \ 0;\n        for (int i = 0; i < 9; i++) {\n            s += (*it) % (i == 0\
    \ ? 9 : 10);\n            (*it) = (*it) / 10;\n        }\n        if (s != 0)\
    \ {\n            results.push_back(*it);\n        }\n    }\n    std::sort(results.begin(),\
    \ results.end());\n    return std::move(results);", "  int n = nums.size();\n\
    \  std::vector<long> vec(n);\n  for (int i = 0; i < n; i++) {\n    long long val\
    \ = nums[i];\n    long long sum = 0;\n    while (val != 0) {\n      sum += val\
    \ % 10;\n      val = val / 10;\n    }\n    vec[i] = sum;\n  }\n  std::sort(vec.begin(),\
    \ vec.end(), [&nums](long long a, long long b) { return a > b; });\n  std::vector<long>\
    \ rev_vec(vec.rbegin(), vec.rend());\n  std::reverse(vec.begin(), vec.end());\n\
    \  std::reverse(vec.rbegin(), vec.rend());\n  return std::move(std::move(rev_vec));",
  "  std::map<long, long> di;\n  for (long &n : nums)\n    di[di[n]] = di[n]++;\n\
    \  std::vector<long> ans;\n  long cur;\n  for (long &n : nums)\n    if (di[cur]\
    \ - di[n] > 0)\n      ans.push_back(cur);\n    else\n      ans.push_back(n);\n\
    \  return ans;", "    int n = nums.size();\n    std::vector<long> ans;\n    for(int\
    \ i=0; i<n; i++) {\n        long cur_sum = 0;\n        for(int j=0; j<n; j++)\
    \ {\n            if(j==i) continue;\n            if(nums[j] >= nums[i]) continue;\n\
    \            cur_sum += nums[j];\n        }\n        if(cur_sum != 0) {\n    \
    \        ans.push_back(cur_sum);\n        }\n    }\n    return ans;", "  // Create\
    \ a map to count sum of digits.\n  std::map<int, std::pair<int, int>> count_by_sum;\n\
    \  for (int i = 0; i < nums.size(); ++i) {\n    if (count_by_sum.find(nums[i]->digit())\
    \ != count_by_sum.end()) {\n      count_by_sum[nums[i]->digit()].second += 1;\n\
    \    } else {\n      count_by_sum[nums[i]->digit()] = {nums[i]->digit(), 1};\n\
    \    }\n  }\n  std::vector<long> results;\n  for (int i = 0; i < 10; ++i) {\n\
    \    results.push_back(count_by_sum[i].first);\n  }\n  std::sort(results.begin(),\
    \ results.end());\n  return results;", "\t// Your code here\n\tlong min_sum =\
    \ INT_MAX;\n\tlong min_idx = -1;\n\tfor (long num : nums) {\n\t\tlong cur_sum\
    \ = num;\n\t\twhile (cur_sum > 0) {\n\t\t\tcur_sum -= num % 10;\n\t\t\tnum/= 10;\n\
    \t\t}\n\t\tif (cur_sum > min_sum) {\n\t\t\tmin_sum = cur_sum;\n\t\t\tmin_idx =\
    \ num;\n\t\t}\n\t}\n\tnums.erase(std::remove(nums.begin(), nums.end(), min_idx),\
    \ nums.end());\n\treturn nums;", "    // code here\n    std::vector<long> result;\n\
    \    for (long i = 0; i < nums.size(); ++i) {\n        long digitSum = 0;\n  \
    \      for (int j = 0; j < nums.size(); ++j) {\n            if (i != j) {\n  \
    \              digitSum += nums[j];\n            }\n        }\n        long numWithSameDigit\
    \ = i + 1;\n        long numWithSmallerDigit = nums.size() - 1;\n        long\
    \ digit = nums[i];\n        while (digitSum != 0) {\n            if (digitSum\
    \ % 10 == 0 && digitSum % 100 != 0) {\n                numWithSameDigit = digit;\n\
    \                break;\n            } else if (digitSum % 10 > 0 && digitSum\
    \ % 10 < digit) {\n                numWithSmallerDigit = digit;\n            \
    \    break;\n            }\n            ++digit;\n            --digitSum;\n  \
    \      }\n        bool firstTime = true;\n        if (numWithSameDigit != i +\
    \ 1) {\n            if (firstTime) {\n                result.push_back(numWithSameDigit);\n\
    \                firstTime = false;\n            } else {\n                result.push_back(numWithSmallerDigit);\n\
    \            }\n        }\n    }\n    return result;", "    std::vector<long>\
    \ sorted_nums;\n    long long sum = 0;\n    for (long long num : nums)\n     \
    \   sum += num;\n    // sort nums based on sum\n    for (long long i = 0; i <\
    \ nums.size(); ++i) {\n        long long diff = nums[i] - sum;\n        if (diff\
    \ > 0) {\n            sorted_nums.push_back(nums[i]);\n        } else {\n    \
    \        long long index = std::min(i, static_cast<long long>(sorted_nums.size())\
    \ - 1);\n            sorted_nums.insert(sorted_nums.begin() + index, nums[i]);\n\
    \        }\n    }\n    return sorted_nums;", "  long sum = 0;\n  // Write your\
    \ code here\n  for(auto x: nums)\n    sum += x;\n  std::vector<long> result;\n\
    \  result.push_back(nums[0]);\n  for(auto x: nums){\n    if(sum > x){\n      result.push_back(x);\n\
    \      sum -= x;\n    }\n  }\n  return result;", "    long s = 0;\n    for (long\
    \ n : nums) {\n        s += n % 10;\n    }\n    if (s == 0)\n        return nums;\n\
    \n    std::vector<long> new_nums(nums.size());\n    for (long i = 0; i < nums.size();\
    \ i++) {\n        long temp = nums[i];\n        new_nums[i] = temp / 10;\n   \
    \     long sum = 0;\n        for (long j = 0; j < i; j++) {\n            sum +=\
    \ new_nums[j] * nums[j];\n        }\n        if (sum > s) {\n            long\
    \ temp = new_nums[i];\n            new_nums[i] = temp % 10;\n            new_nums[j]\
    \ = temp / 10;\n        }\n    }\n\n    return new_nums;", "    // TODO: implement\
    \ a solution\n    std::vector<long> nums_sort(nums);\n    std::sort(nums_sort.begin(),\
    \ nums_sort.end(), sort_by_num());\n    return nums_sort;", "    // Your code\
    \ goes here\n    \n    std::vector<long> v(n);\n    for(auto &i : nums){\n   \
    \     int l = i;\n        while(l){\n            v [l % 10] += 1;\n          \
    \  l /= 10;\n        }\n    }\n    for(auto &i : v){\n        if(i > 1){\n   \
    \         for(int j = 1; j <= i; j++){\n                v.insert(v.begin()+j,\
    \ 0);\n            }\n        }\n    }\n    std::vector<long> ret;\n    for(auto\
    \ &i : v){\n        ret.push_back(i);\n    }\n    std::sort(ret.begin(), ret.end(),\
    \ std::greater<long>());\n    return ret;", "    std::vector<long> numsCopy;\n\
    \    if (nums.size() == 0)\n        return numsCopy;\n    // get the sum of each\
    \ digit\n    // and find its index\n    int sum = 0;\n    for (int i = 0; i !=\
    \ nums.size(); ++i) {\n        sum += nums[i];\n        // if its a repeating\
    \ sum, just put the index\n        // of the repeating sum\n        if (numsCopy.size()\
    \ == 0) {\n            numsCopy.push_back(i);\n        } else if (numsCopy.back()\
    \ + 1 == sum) {\n            numsCopy.push_back(i);\n        }\n    }\n    //\
    \ sort according to sum\n    std::sort(numsCopy.begin(), numsCopy.end(), [](long\
    \ &x, long &y) {\n        return x < y;\n    });\n    return numsCopy;", "\t//\
    \ TODO: You have a bug in this function\n\tassert(nums.size() != 0);\n\tstd::vector<long>\
    \ sorted_nums = nums;\n\tstd::sort(sorted_nums.begin(), sorted_nums.end(), [&nums]\
    \ (long a, long b) -> bool {\n\t\tif (a > b) return true;\n\t\tif (a < b) return\
    \ false;\n\t\treturn nums[a] - nums[b] >= 0;\n\t});\n\treturn sorted_nums;", " \
    \ std::sort(nums.begin(), nums.end(), [](long a, long b) {\n    int sum = (int)(a)\
    \ + (int)(b);\n    return sum > 0 ? sum : -sum;\n  });\n  return nums;", "   \
    \ int n = nums.size();\n    long long sum = 0;\n    for (int i = 0; i != n; ++i)\
    \ {\n        sum += nums[i];\n    }\n    std::vector<long> result;\n    long long\
    \ min_sum = sum;\n    long long min_index = -1;\n    for (int i = 0; i != n; ++i)\
    \ {\n        long long cur = nums[i];\n        while (i != n && cur % 10 == nums[--i]\
    \ / 10)\n            ;\n        if (i != n) {\n            long long cur_sum =\
    \ cur + nums[i];\n            if (cur_sum < min_sum) {\n                min_sum\
    \ = cur_sum;\n                min_index = i;\n            }\n        }\n    }\n\
    \    for (int i = 0; i != n; ++i) {\n        long long cur = nums[min_index];\n\
    \        while (i != n && cur % 10 == nums[--min_index] / 10)\n            ;\n\
    \        result.push_back(cur + nums[min_index]);\n    }\n    return result;",
  "    // write your code here\n    long sum = 0;\n    long maxSum = 0;\n    for(long\
    \ n : nums) {\n        sum += n;\n        maxSum = max(sum, maxSum);\n    }\n\
    \    std::vector<long> ret;\n    long j = 0;\n    for(long i : nums) {\n     \
    \   if(sum - i == 0) {\n            ret.push_back(j);\n        }\n        j++;\n\
    \    }\n    for(long i : ret) {\n        nums.insert(nums.begin() + i, nums.begin()\
    \ + i + 1);\n    }\n    return nums;", "    auto sum = nums.front();\n    int\
    \ index = 0;\n    for (auto &num : nums) {\n        sum += num;\n        if (sum\
    \ > 10) {\n            index = sum - 10;\n        }\n    }\n    auto ret = nums;\n\
    \    std::sort(ret.begin(), ret.end(), [&index](long a, long b) { return index\
    \ == a - b; });\n    return ret;", "  std::vector<long> res;\n  for (int i = 0;\
    \ i < nums.size(); i++)\n  {\n    long digitSum = 0;\n    for (int j = 0; j <\
    \ nums.size(); j++)\n    {\n      digitSum += nums[j] % 10;\n    }\n    if (digitSum\
    \ == 0)\n      digitSum = 1;\n    if (digitSum > res)\n    {\n      res = digitSum;\n\
    \      long temp = nums[i];\n      nums[i] = nums[res];\n      nums[res] = temp;\n\
    \    }\n  }\n  return res;", "    long s = 0;\n    for (auto i : nums) {\n   \
    \     s += i;\n    }\n    std::vector<long> ret;\n    std::sort(nums.begin(),\
    \ nums.end(), [&](long a, long b) -> bool {\n        return a > b ? true : a <\
    \ b ? false : a == b ? s : a+b == s ? 0 : a < 0 ? 1 : -1;\n    });\n    for (auto\
    \ i : nums) {\n        ret.push_back(i);\n    }\n    return ret;", "    // Write\
    \ your code here\n    long sum = 0;\n    for(long i : nums)\n        sum += i;\n\
    \    std::sort(nums.begin(), nums.end(),\n              [&sum](long l, long r)\
    \ { return sum - l < sum - r; });\n    return nums;", "  std::vector<long> nums_copy(nums);\n\
    \  sort(nums_copy.begin(), nums_copy.end(), [](long a, long b) {\n    long a_digits\
    \ = a % 10;\n    long b_digits = b % 10;\n    if (a_digits == b_digits) {\n  \
    \    return a - b;\n    } else {\n      return a_digits - b_digits;\n    }\n \
    \ });\n  return nums_copy;", "    if(nums.empty()){\n        return nums;\n  \
    \  }\n    std::unordered_map<long, std::pair<int, int>> map;\n    // Calculate\
    \ the sum\n    for (auto &num : nums) {\n        auto it = map.find(num);\n  \
    \      if (it != map.end()) {\n            map[num].first += 1;\n            map[num].second\
    \ += 1;\n        }else {\n            map[num] = {1, 1};\n        }\n    }\n \
    \   // Sort the map\n    for(auto &item : map) {\n        item.second.first *=\
    \ 10;\n        item.second.second *= 10;\n    }\n    std::vector<long> res;\n\
    \    for (auto &num : nums) {\n        res.push_back(num);\n    }\n    for (auto\
    \ &item : map) {\n        int sum = item.second.first + item.second.second;\n\
    \        auto it = res.find(sum);\n        if (it != res.end()) {\n          \
    \  res[it] = nums[std::distance(std::begin(numbers), it)]; \n        }\n    }\n\
    \    return res;", "    if(nums.empty())\n        return nums;\n    \n    std::vector<long>\
    \ sorted_nums = nums;\n    std::sort(sorted_nums.begin(), sorted_nums.end(), sort_by_digits);\n\
    \    return sorted_nums;", "    if (nums.empty()) {\n        return nums;\n  \
    \  }\n    // Use a map to store the sum of the digits\n    std::vector<int> digits;\n\
    \    for (long n : nums) {\n        int sum = 0;\n        while (n > 0) {\n  \
    \          sum += n % 10;\n            n /= 10;\n        }\n        digits.push_back(sum);\n\
    \    }\n    std::vector<long> newnums(nums.size());\n    std::iota(newnums.begin(),\
    \ newnums.end(), 0);\n    std::sort(newnums.begin(), newnums.end(), [&digits](long\
    \ a, long b) {\n        return digits[a] - digits[b];\n    });\n    return newnums;",
  "    assert(nums.size()>0);\n    std::vector<long> ans;\n    long sum = 0;\n   \
    \ long max_val = nums[0]>0?nums[0]:0;\n    for(auto i:nums)\n    {\n        if(i<0)\n\
    \        {\n            i = -i;\n        }\n        sum += i;\n        if(sum>max_val)\n\
    \        {\n            max_val = sum;\n        }\n    }\n    ans.push_back(-max_val);\n\
    \    sum = 0;\n    for(auto i:nums)\n    {\n        if(i<0)\n        {\n     \
    \       i = -i;\n        }\n        sum += i;\n        if(sum<max_val)\n     \
    \   {\n            ans.push_back(-sum);\n            sum = 0;\n        }\n   \
    \     ans.push_back(i);\n    }\n    return ans;", "    std::vector<long> nums_out;\n\
    \    long long sum = 0;\n    for (long long num : nums) {\n        sum += num;\n\
    \        nums_out.push_back(sum);\n    }\n    std::sort(nums_out.begin(), nums_out.end());\n\
    \    return nums_out;", '    // code here', "    // Sort by sum\n    auto comp\
    \ = [&nums](int i, int j) {\n        long long sum_1 = 0; long long sum_2 = 0;\n\
    \        long long sum_2_1 = 0, sum_2_2 = 0;\n        for (auto &x : nums) sum_1\
    \ += x;\n        for (auto &x : nums) sum_2 += x;\n        for (auto &x : nums)\
    \ sum_2_1 += x;\n        for (auto &x : nums) sum_2_2 += x;\n        if (sum_1\
    \ < sum_2) return 1;\n        else if (sum_1 > sum_2) return -1;\n        else\
    \ if (sum_2_1 < sum_2_2) return -1;\n        else if (sum_2_1 > sum_2_2) return\
    \ 1;\n        else return 0;\n    };\n    std::sort(nums.begin(), nums.end(),\
    \ comp);\n    return nums;", "    std::vector<int> sum_of_digits(nums.size(),\
    \ 0);\n    for (size_t i = 0; i < nums.size(); ++i) {\n        sum_of_digits[i]\
    \ = sum_of_digits[i] + nums[i];\n    }\n    std::sort(sum_of_digits.begin(), sum_of_digits.end());\n\
    \    std::vector<long> result(nums.size(), 0);\n    for (size_t i = 0; i < nums.size();\
    \ ++i) {\n        result[i] = sum_of_digits[i] - nums[i];\n    }\n    return result;",
  "  // Your code goes here\n  std::sort(nums.begin(), nums.end(), [](const long &a,\
    \ const long &b){return (a+b < 0);});\n  return nums;", "    // Write your code\
    \ here\n    int n = nums.size();\n    int maxSum = 0;\n    int maxPoint = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        int sum = 0;\n        int point =\
    \ i;\n        for (int j = 0; j < n; j++) {\n            sum += nums[j];\n   \
    \         if (sum > maxSum) {\n                maxSum = sum;\n               \
    \ maxPoint = point;\n            }\n        }\n    }\n    std::vector<long> nums_sorted;\n\
    \    nums_sorted.reserve(n);\n    for (int i = 0; i < n; i++) {\n        if (nums[maxPoint]\
    \ < i) {\n            nums_sorted.insert(nums_sorted.begin() + i, nums[maxPoint]);\n\
    \        } else {\n            nums_sorted.push_back(nums[i]);\n        }\n  \
    \  }\n    return nums_sorted;", "    std::sort(nums.begin(), nums.end(),\n   \
    \ [](long x, long y) { return std::abs(x + y) <= std::abs(x); });\n    return\
    \ nums;", "    if (nums.size() == 0) {\n        return nums;\n    }\n    // Sort\
    \ the vector first\n    std::sort(nums.begin(), nums.end(), comp);\n    // Then\
    \ sort it again by comparing sum of the digits with themselves.\n    std::sort(nums.begin(),\
    \ nums.end(), comp_sum);\n    return nums;", "    // Sort nums in ascending order\
    \ by their sum.\n    // Initialize vector of bools used to keep track of which\
    \ items have\n    // already been placed in the correct place.\n    std::vector<bool>\
    \ visited(nums.size(), false);\n    std::vector<long> num_with_sum(0);\n    //\
    \ Iterate over nums, calculating the sum of the digits in each element\n    //\
    \ of the vector. Add the element with the correct sum to the output\n    // vector\
    \ num_with_sum\n    for(long long i = 0; i < nums.size(); i++)\n        num_with_sum.push_back(sum(nums.begin()\
    \ + i, nums.end()));\n    // Iterate over num_with_sum, adding the element to\
    \ the output vector if it hasn't already been added\n    for(long long i = 0;\
    \ i < num_with_sum.size(); i++)\n        if(!visited[i])\n            visited[i]\
    \ = true;\n            \n    return nums;", "    // code here\n    long sum =\
    \ 0;\n    for (long i : nums) {\n        sum += i;\n    }\n    long max_num =\
    \ sum;\n    std::vector<long> ans;\n    for (long i : nums) {\n        long tmp\
    \ = sum - i;\n        if (tmp > max_num) {\n            max_num = tmp;\n     \
    \       ans = {i};\n        } else if (tmp == max_num) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;", "    std::vector<long> rev_nums;\n    long\
    \ cur_sum = 0;\n    for (long num : nums) {\n        cur_sum += num;\n       \
    \ rev_nums.push_back(cur_sum % 10);\n        cur_sum = (cur_sum / 10) % 10;\n\
    \    }\n\n    std::sort(rev_nums.begin(), rev_nums.end());\n    return rev_nums;",
  "    assert(!nums.empty());\n    std::vector<bool> sorted(nums.size(), false);\n\
    \    long long sum = 0;\n    for (auto n : nums) {\n        sum += n;\n      \
    \  sorted[sum % 10] = true;\n    }\n    return std::move(nums);", "\t// Write\
    \ your code here\n\tlong sum, maxSum = 0, i, curSum = 0, curPoint = -1;\n\tstd::vector<long>\
    \ result;\n\twhile (curSum != 0) {\n\t\tcurSum = 0;\n\t\tfor (i = 0; i < nums.size();\
    \ i++) {\n\t\t\tif (nums[i] != curPoint && nums[i]%10 == curSum%10) {\n\t\t\t\t\
    sum = 0;\n\t\t\t\twhile (nums[i] != 0) {\n\t\t\t\t\tsum += nums[i]%10;\n\t\t\t\
    \t\tnums[i] /= 10;\n\t\t\t\t}\n\t\t\t\tif (sum > curSum) {\n\t\t\t\t\tcurSum =\
    \ sum;\n\t\t\t\t\tcurPoint = nums[i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (curSum\
    \ == 0) {\n\t\t\tresult.push_back(curPoint);\n\t\t\tcurPoint = -1;\n\t\t}\n\t\t\
    else {\n\t\t\tresult.push_back(curPoint);\n\t\t\tcurPoint = -1;\n\t\t}\n\t}\n\t\
    return result;", "    assert(!nums.empty());\n    int sum = nums.front();\n  \
    \  std::vector<long> result;\n    int len = nums.size();\n    for (int i = 1;\
    \ i < len; i++) {\n        int cur_sum = nums[i] + sum;\n        if (cur_sum <\
    \ 0)\n            cur_sum = -cur_sum;\n        if (cur_sum == sum)\n         \
    \   result.push_back(i);\n        sum = cur_sum;\n    }\n    return result;",
  "    // Sort by total sum of each digit\n    std::vector<long> temp(std::begin(nums),\
    \ std::end(nums));\n    long sum = 0;\n    long digit_sum = 0;\n    for (long\
    \ i : temp) {\n        sum += i;\n        digit_sum += (i * i) / 10;\n    }\n\
    \    std::vector<long> result;\n    for (size_t i = 0; i < temp.size(); i++) {\n\
    \        std::vector<long> cur;\n        for (size_t j = 0; j < temp.size(); j++)\
    \ {\n            if (i != j) cur = order_by_points(temp, sum, digit_sum, i, j);\n\
    \            if (cur.size() < result.size()) result = cur;\n        }\n    }\n\
    \    return result;", "    std::vector<long> result(nums.size(), 0);\n    std::map<long,\
    \ long> num_to_sum;\n    for (long num : nums) {\n        num_to_sum[num] = std::accumulate(nums.begin(),\
    \ nums.end(), 0);\n        result[std::find(result.begin(), result.end(), num_to_sum[num])\
    \ - result.begin()] = num;\n    }\n    return result;", "    // write your code\
    \ here\n    int sum = 0;\n    for(int i = 0; i < nums.size(); i++) {\n       \
    \ sum += nums[i];\n    }\n    std::sort(nums.begin(), nums.end(), [&sum](int a,\
    \ int b) {\n        return sum - a + b < sum - a + b;\n    });\n    return nums;",
  "    // Your code here\n    long sum_of_digits=0;\n    long max_sum=-1000000000;\n\
    \    int max_sum_index=0;\n    int min_sum=1000000000;\n    int min_sum_index=0;\n\
    \    int count=0;\n    for(int i=0;i<nums.size();i++){\n        sum_of_digits+=nums[i];\n\
    \        if(sum_of_digits<0){\n            sum_of_digits*=-1;\n        }\n   \
    \     while(sum_of_digits<0){\n            sum_of_digits+=10;\n        }\n   \
    \     if(sum_of_digits<min_sum){\n            min_sum=sum_of_digits;\n       \
    \     min_sum_index=i;\n        }\n        while(sum_of_digits>max_sum){\n   \
    \         max_sum+=10;\n            count++;\n        }\n        if(max_sum<sum_of_digits){\n\
    \            max_sum=sum_of_digits;\n            max_sum_index=i;\n        }\n\
    \    }\n    assert(max_sum<sum_of_digits);\n    std::vector<long> sorted_nums;\n\
    \    sorted_nums.resize(count);\n    int j=0;\n    for(int i=0;i<nums.size();i++){\n\
    \        sum_of_digits+=nums[i];\n        if(sum_of_digits<0){\n            sum_of_digits*=-1;\n\
    \        }\n        while(sum_of_digits<0){\n            sum_of_digits+=10;\n\
    \        }\n        if(sum_of_digits==max_sum){\n            sorted_nums[j]=nums[i];\n\
    \            j++;\n        }\n    }\n    sorted_nums.resize(j);\n    return sorted_nums;",
  "  int n = nums.size();\n  if (n == 0) {\n    return nums;\n  }\n  // Sort the nums\
    \ based on their digits using radix sort\n  std::sort(nums.begin(), nums.end(),\
    \ [](long a, long b) {\n    long sum = a + b + 10 * (long)std::floor((a + b) /\
    \ 10);\n    return sum > 0;\n  });\n  nums.erase(std::unique(nums.begin(), nums.end(),\
    \ [](long a, long b) {\n    return a + b + 10 * (long)std::floor((a + b) / 10)\
    \ < 0;\n  }), nums.end());\n  return nums;", "    std::vector<long> nums2;\n \
    \   for (auto n: nums)\n    {\n        for (auto d: digits(n))\n        {\n  \
    \          nums2.push_back(n);\n        }\n    }\n    return nums2;", "    std::vector<long>\
    \ sorted_nums;\n    std::sort(nums.begin(), nums.end());\n    long sum_nums =\
    \ 0;\n    for (long num : nums) {\n        sum_nums += num;\n    }\n    for (long\
    \ num : nums) {\n        if (sum_nums == num) {\n            sorted_nums.push_back(num);\n\
    \        }\n    }\n    return sorted_nums;", "  // Your code here\n  std::vector<long>\
    \ ordered_nums;\n  ordered_nums.reserve(nums.size());\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    long x = nums[i];\n    int sum = 0;\n    while (x > 0) {\n     \
    \ sum++;\n      x /= 10;\n    }\n    if (sum < 10) {\n      x = x * 10 + sum;\n\
    \      ordered_nums.push_back(x);\n    }\n  }\n  std::sort(ordered_nums.begin(),\
    \ ordered_nums.end(), [](long a, long b) {\n    return a > b;\n  });\n  return\
    \ ordered_nums;", "    // TODO Auto-generated method stub\n    long sum = 0;\n\
    \    for (size_t i = 0; i < nums.size(); i++){\n        sum+=nums[i];\n    }\n\
    \    std::vector<long> nums_sorted = nums;\n    for(size_t i = 0; i < nums.size();\
    \ i++){\n        long num = nums[i];\n        long sum_real = sum % 10;\n    \
    \    nums_sorted[i]=sum_real;\n        sum-=sum_real*10;\n    }\n    return nums_sorted;",
  "    std::vector<long> output;\n    int n = nums.size();\n    for (int i = 0; i\
    \ < n; ++i) {\n        long sum = nums[i];\n        int j = 0;\n        while\
    \ (sum > 0) {\n            sum -= nums[j++];\n        }\n        output.push_back(nums[i]);\n\
    \        output.push_back(j);\n    }\n    std::sort(output.begin(), output.end(),\
    \ [](long a, long b) -> bool {\n        return a > b;\n    });\n    return output;",
  "    std::vector<long> numsCopy = nums;\n    long sum = 0;\n    int index = 0;\n\
    \    for (auto it=numsCopy.begin(); it!=numsCopy.end(); ++it) {\n        sum +=\
    \ *it;\n        std::swap(nums[index], nums[sum%nums.size() ]);\n        index++;\n\
    \    }\n    return numsCopy;", "  int n = nums.size();\n  long long sum = 0;\n\
    \  for(auto v: nums) {\n    sum += v;\n  }\n  std::vector<long> result;\n  if(sum\
    \ == 0) return result;\n  std::vector<int> digits;\n  for(int i = 0; i < n; i++)\
    \ {\n    int digit = 0;\n    while(sum >= 10) {\n      sum += nums[i] / 10;\n\
    \      digit++;\n    }\n    sum += nums[i];\n    digits.push_back(digit);\n  }\n\
    \  for(int i = 0; i < n; i++) {\n    result.push_back(nums[digits[i]]);\n  }\n\
    \  return result;", "    if (nums.empty()) return nums;\n    long long sum = 0;\n\
    \    for (int i = 0; i < (int)nums.size(); i++) {\n        sum += nums[i];\n \
    \   }\n    std::vector<long> result;\n    for (int i = 0; i < (int)nums.size();\
    \ i++) {\n        if (sum >= 0) {\n            result.push_back(nums[i]);\n  \
    \          sum -= nums[i];\n        } else {\n            result.push_back(nums[nums.size()\
    \ - i - 1]);\n        }\n    }\n    return result;", "    std::vector<long> result;\n\
    \    // Write your code here\n    long long sum_of_digits = 0, digits = 0, index\
    \ = 0;\n    while (index < nums.size()) {\n        sum_of_digits += nums[index];\n\
    \        ++index;\n    }\n    while (sum_of_digits > 9) {\n        digits = sum_of_digits\
    \ % 10;\n        sum_of_digits /= 10;\n        result.push_back(digits);\n   \
    \ }\n    return result;", "    // Write your code here\n    std::vector<long>\
    \ res;\n    long cur_sum = 0;\n    for (long &num : nums) {\n        while (num\
    \ > 0) {\n            cur_sum += num % 10;\n            num /= 10;\n        }\n\
    \        if (cur_sum > 0) {\n            res.push_back(num);\n            cur_sum\
    \ = 0;\n        }\n    }\n    return res;", "    // write your code here\n   \
    \ int s = nums.size();\n    std::vector<long> nums2 = nums;\n    int max = 0;\n\
    \    long sum = 0;\n    long ans;\n    for (int i = 0; i < s; i++) {\n       \
    \ sum = nums[i];\n        for (int j = i + 1; j < s; j++) {\n            sum +=\
    \ nums[j];\n            if (sum > max) {\n                max = sum;\n       \
    \         ans = i;\n            }\n        }\n        nums2[ans] = -1;\n    }\n\
    \    return nums2;", "    // Write your code here\n    if (nums.size() == 0) {\n\
    \        return nums;\n    }\n    long ans = nums.front();\n    long last = nums.back();\n\
    \    for (long i = 0; i < nums.size() - 1; i++) {\n        long cur = nums[i]\
    \ + nums[i + 1];\n        long next_sum = cur % 10;\n        nums[i] = cur / 10;\n\
    \        nums[i + 1] = next_sum;\n        long diff = cur - last_sum;\n      \
    \  if (diff == 0) {\n            ans = ans + i;\n        } else if (diff > 0)\
    \ {\n            ans = ans + i + diff;\n        }\n        last_sum = cur;\n \
    \   }\n    return nums;", "  if (nums.empty()) {\n    return nums;\n  }\n  long\
    \ long max = 0;\n  long long sum = 0;\n  for (long long num : nums) {\n    sum\
    \ += num;\n    max = std::max(max, num);\n  }\n  std::vector<long> ans;\n  long\
    \ long cur = 0, last = 0, prev = 0, cursum = 0;\n  for (long long num : nums)\
    \ {\n    cursum += num;\n    cur = std::max(cur, num);\n    if (cursum == sum)\
    \ {\n      // If two or more items have same sum, order them based on their index\
    \ in nums\n      last = std::max(last, num);\n      prev = num;\n    }\n    if\
    \ (cursum > sum) {\n      // If the sum of two or more items is greater than sum,\
    \ order them based on their index in nums\n      long long count = std::count(nums.begin(),\
    \ nums.end(), num);\n      assert(count <= 1);\n      ans.push_back(prev);\n \
    \     ans.push_back(last);\n      ans.push_back(num);\n      ans.push_back(nums.back());\n\
    \      return ans;\n    }\n  }\n  assert(false);", "    // code here\n    std::vector<long>\
    \ ordered_nums;\n    for(auto &num : nums) {\n        long temp = num;\n     \
    \   while(temp > 0) {\n            temp = temp % 10;\n            long next_num\
    \ = (temp > 0) ? temp : 10;\n            if((ordered_nums.size() == 0) && (num\
    \ < next_num)) {\n                ordered_nums.push_back(num);\n             \
    \   ordered_nums.push_back(next_num);\n                ordered_nums.push_back(next_num);\n\
    \            } else if(num < next_num) {\n                ordered_nums.push_back(next_num);\n\
    \                ordered_nums.push_back(num);\n                ordered_nums.push_back(next_num);\n\
    \            } else {\n                if(num == ordered_nums[0]) {\n        \
    \            ordered_nums.push_back(next_num);\n                    ordered_nums.push_back(num);\n\
    \                    ordered_nums.push_back(next_num);\n                } else\
    \ {\n                    if(num > ordered_nums[0]) {\n                       \
    \ ordered_nums.push_back(num);\n                        ordered_nums.push_back(next_num);\n\
    \                        ordered_nums.push_back(num);\n                    } else\
    \ {\n                        ordered_nums.push_back(num);\n                  \
    \      ordered_nums.push_back(num);\n                        ordered_nums.push_back(next_num);\n\
    \                    }\n                }\n            }\n        }\n    }\n \
    \   return ordered_nums;", "    if (nums.size() == 0) {\n        return nums;\n\
    \    }\n    // Sort nums in ascending order\n    std::stable_sort(nums.begin(),\
    \ nums.end(), [](long a, long b) {\n        long c = abs(a - b);\n        return\
    \ c < 10 ? c : c - 10;\n    });\n    // Return the sorted vector\n    return nums;",
  "    std::vector<long> result;\n    long max_sum = 0;\n    for (int i = 0; i < nums.size();\
    \ ++i) {\n        long sum = 0;\n        for (int j = i; j < nums.size(); ++j)\
    \ {\n            sum += nums[j];\n        }\n        if (sum > max_sum) {\n  \
    \          max_sum = sum;\n            std::vector<long>::iterator i = &nums[i];\n\
    \            std::iter_swap(i, &nums[max_sum]);\n        }\n    }\n    result.clear();\n\
    \    int last_index = -1;\n    for (auto i : nums) {\n        int index = i -\
    \ max_sum;\n        if (last_index != index) {\n            result.push_back(max_sum);\n\
    \            last_index = index;\n        }\n        result.push_back(i);\n  \
    \  }\n    return result;", "  long long sum = 0;\n  for (int i = 0; i < nums.size();\
    \ i++) {\n    sum += nums[i];\n  }\n  std::vector<long> new_nums;\n  for (int\
    \ i = 0; i < nums.size(); i++) {\n    sum += nums[i];\n    if (sum > 0) {\n  \
    \    new_nums.push_back(nums[i]);\n    }\n  }\n  return new_nums;", "  // Write\
    \ your code here.\n    std::vector<std::pair<long, int>> v;\n    for (size_t i\
    \ = 0; i != nums.size(); ++i){\n        v.push_back({nums[i], i});\n    }\n  \
    \  std::sort(v.begin(), v.end(),\n        [&nums](const std::pair<long, int>&\
    \ a, const std::pair<long, int>& b) {\n            return a.first < b.first;\n\
    \        });\n    std::map<long, int> m;\n    for(auto &i : v){\n        m[i.first]\
    \ = i.second;\n    }\n    std::vector<long> out;\n    for(auto &i : m){\n    \
    \    out.push_back(i);\n    }\n    return out;", "    long long sum = 0;\n   \
    \ for (long l : nums) {\n        sum += l;\n    }\n    auto comp = [](long long\
    \ sum1, long long sum2) {\n        if (sum1 < sum2) {\n            return -1;\n\
    \        } else if (sum1 > sum2) {\n            return 1;\n        } else {\n\
    \            return 0;\n        }\n    };\n    std::vector<long> res;\n    for\
    \ (long i = 0; i < nums.size(); i++) {\n        long long cur = nums[i];\n   \
    \     res.push_back(cur);\n    }\n    std::sort(res.begin(), res.end(), comp);\n\
    \    return res;", "    if (nums.size() == 0) {\n        return nums;\n    }\n\
    \n    auto comp = [](long a, long b) {\n        return std::abs(a) > std::abs(b);\n\
    \    };\n    std::sort(nums.begin(), nums.end(), comp);\n\n    auto prev_sum =\
    \ nums[0];\n    auto current_sum = nums[0];\n    for (auto &ele : nums) {\n  \
    \      if (ele < prev_sum) {\n            current_sum -= ele;\n        } else\
    \ {\n            current_sum += ele;\n        }\n        prev_sum = current_sum;\n\
    \    }\n    return nums;", "    if (nums.empty())\n        return nums;\n    std::vector<long>\
    \ vs;\n    std::map<long, std::vector<long> > m;\n    for (long i : nums) {\n\
    \        auto itr = m.find(i);\n        if (itr != m.end()) {\n            itr->second.push_back(i);\n\
    \        } else {\n            m.insert({i, {i}});\n        }\n    }\n    for\
    \ (auto itr = m.begin(); itr != m.end(); ++itr) {\n        std::vector<long> vp\
    \ = itr->second;\n        vp.erase(std::unique(vp.begin(), vp.end()), vp.end());\n\
    \        vs.insert(vs.end(), vp.begin(), vp.end());\n    }\n    vs.erase(vs.begin(),\
    \ vs.end());\n    return vs;", "    std::vector<long> new_nums;\n    new_nums.reserve(nums.size());\n\
    \    for (long &num : nums) {\n        long total = 0;\n        while (num !=\
    \ 0) {\n            total += num % 10;\n            num /= 10;\n        }\n  \
    \      new_nums.push_back(total);\n    }\n    std::sort(new_nums.begin(), new_nums.end());\n\
    \    // Now new_nums has the elements with ascending order.\n    // Now, iterate\
    \ over new_nums and find all elements with same sum.\n    // If an element is\
    \ found, add the index of new_nums element to it\n    // and remove the new_nums\
    \ element.\n    // Finally, iterate over the remaining elements and assign the\n\
    \    // index of each element to the smallest index that has not\n    // assigned\
    \ an index yet.\n    std::vector<int> new_nums_index(new_nums.size());\n    int\
    \ cur_index = 0;\n    for (int i = 0; i < new_nums.size(); i++) {\n        int\
    \ index = std::find(new_nums_index.begin(), new_nums_index.end(), new_nums[i])\
    \ - new_nums_index.begin();\n        if (index == -1) {\n            new_nums_index[i]\
    \ = cur_index;\n            new_nums[cur_index] = new_nums[i];\n            cur_index++;\n\
    \        } else {\n            if (new_nums_index[index] > new_nums_index[i])\n\
    \                new_nums_index[index] = new_nums_index[i];\n        }\n    }\n\
    \    std::sort(new_nums_index.begin(), new_nums_index.end());\n    // Now new_nums_index\
    \ is a sorted list of all elements with same sum of their digits.\n    // Now,\
    \ iterate over new_nums_index and find elements with index\n    // equal to largest\
    \ index that has not been assigned an index.\n    std::vector<int> new_nums_index_idx(new_nums_index.size());\n\
    \    int cur_index_idx = 0;\n    for (int i = 0; i < new_nums_index.size(); i++)\
    \ {\n        int index = new_nums_index[i];\n        if (index == -1) {\n    \
    \        new_nums_index_idx[i] = cur_index_idx;\n            cur_index_idx++;\n\
    \        } else {\n            if (new_nums_index_idx[index] < new_nums_index_idx[i])\n\
    \                new_nums_index_idx[index] = new_nums_index_idx[i];\n        }\n\
    \    }\n    // Now new_nums_index_idx is a sorted list of all elements with indexes\
    \ equal to largest index that has not been assigned an index.\n    // Now, iterate\
    \ over new_nums_index_idx and find elements with index\n    // equal to the smallest\
    \ index that has not been assigned an index.\n    std::vector<int> new_nums_index_idx1(new_nums_index.size());\n\
    \    int cur_index_idx1 = 0;\n    for (int i = 0; i < new_nums_index.size(); i++)\
    \ {\n        int index = new_nums_index[i];\n        if (index == -1) {\n    \
    \        new_nums_index_idx1[i] = cur_index_idx", "    int n = nums.size();\n\
    \    int max_digit = INT_MIN;\n    for (int i = 0; i < n; ++i) {\n        max_digit\
    \ = std::max(max_digit, nums[i]);\n    }\n    std::vector<long> res;\n    for\
    \ (int i = 0; i < n; ++i) {\n        res.push_back(nums[i]);\n    }\n    for (int\
    \ i = 0; i < n; ++i) {\n        for (int j = i + 1; j < n; ++j) {\n          \
    \  int sum = 0;\n            for (int k = i; k < j; ++k) {\n                sum\
    \ += nums[k];\n            }\n            if (sum < -max_digit || sum > max_digit)\
    \ {\n                std::swap(res[i], res[j]);\n            }\n        }\n  \
    \  }\n    return res;", "    if (nums.empty()) {\n        return nums;\n    }\n\
    \    // Sorting nums vector in ascending order based on\n    // sum of its digits\n\
    \    // Sorting by sum of its digits\n    std::sort(nums.begin(), nums.end(),\
    \ [](const long &a, const long &b) {\n        long digit_sum;\n        int a_bin\
    \ = static_cast<int>(a);\n        int b_bin = static_cast<int>(b);\n        digit_sum\
    \ = a_bin + b_bin;\n        return digit_sum < 0 ? false : true;\n    });\n  \
    \  // Sorting by index in original vector\n    std::sort(nums.begin(), nums.end(),\
    \ [](const long &a, const long &b) {\n        long a_index = 0, b_index = 0;\n\
    \        for (int i = 0; i < 10; i++) {\n            if (a >= 10 * i && a <= 10\
    \ * (i + 1)) {\n                a_index += a - 10 * i;\n            }\n      \
    \      if (b >= 10 * i && b <= 10 * (i + 1)) {\n                b_index += b -\
    \ 10 * i;\n            }\n        }\n        return a_index < b_index ? true :\
    \ false;\n    });\n    return nums;", "    // Your code here\n    long long int\
    \ temp = 0;\n    for (long long int n: nums) {\n        temp = n%10;\n       \
    \ n/=10;\n        if (temp > n) {\n            temp = n;\n        }\n        nums.insert(nums.begin(),\
    \ temp);\n    }\n    std::sort(nums.begin(), nums.end());\n    return nums;",
  "    long sum = 0;\n    for (long i : nums)\n        sum += i;\n    nums.clear();\n\
    \    for (long i : nums)\n        sum += i;\n    std::vector<long> ret;\n    for\
    \ (long i : nums)\n        if (sum - i < 0)\n            ret.push_back(i);\n \
    \       else\n            ret.push_back(nums.size() - i - 1);\n    std::sort(ret.begin(),\
    \ ret.end());\n    return ret;", "    int res = 0;\n    for (auto &i : nums)\n\
    \        res += i;\n\n    std::vector<long> ret;\n    for (auto &i : nums) {\n\
    \        if (i > 0)\n            rem += i % 10;\n        while (rem >= 0)\n  \
    \          rem -= 10;\n        long tmp = i;\n        rem += tmp;\n        ret.push_back(tmp);\n\
    \    }\n    std::sort(ret.begin(), ret.end());\n\n    return ret;", "    // Write\
    \ your code here.\n    // vector<long> nums(1001);\n    // for(auto i = 0; i <\
    \ nums.size(); i++){\n    //     cout << nums[i] << \" \";\n    // }\n    // cout\
    \ << endl;\n\n    // vector<long> nums;\n    // for(long i = 0; i < 1001; i++){\n\
    \    //     nums.push_back(i);\n    // }\n\n    // for(auto i = 0; i < nums.size();\
    \ i++){\n    //     cout << nums[i] << \" \";\n    // }\n    // cout << endl;\n\
    \n    // long sum = 0;\n    // for(auto i = 0; i < nums.size(); i++){\n    //\
    \     sum += nums[i];\n    // }\n\n    // vector<long> new_nums(nums);\n    //\
    \ for(auto i = 0; i < nums.size(); i++){\n    //     if(sum % 10 != 0){\n    //\
    \         new_nums[nums.begin() + i] = nums[i];\n    //     }\n    // }\n    //\
    \ return new_nums;\n", "  assert(nums.size() > 0);\n  long s = 0;\n  for (long\
    \ i : nums) {\n    s += i;\n  }\n\n  // std::stable_sort(nums.begin(), nums.end(),\
    \ \n  //   [](long a, long b) {\n  //     return a - b; \n  //   });\n  \n  std::stable_sort(nums.begin(),\
    \ nums.end(), \n    [&s](long a, long b){\n      return (a + s) - b; \n    });\n\
    \  \n  return nums;", "    std::vector<int> digits(nums.size());\n    for (long\
    \ i : nums)\n        digits[i] = abs(i);\n    std::sort(digits.begin(), digits.end());\n\
    \    std::vector<long> result;\n    for (long i : digits)\n        result.push_back(i);\n\
    \    return result;", "    std::vector<long> new_nums;\n    new_nums.reserve(nums.size());\n\
    \    for (long num : nums)\n        new_nums.push_back(calculate_sum(num));\n\
    \    // std::sort(new_nums.begin(), new_nums.end(), [](long num1, long num2) {\
    \ return num1 - num2; });\n    std::sort(new_nums.begin(), new_nums.end());\n\
    \    return new_nums;", "  std::vector<long> sorted = nums;\n  // find sum\n \
    \ int sum = 0;\n  for (long i : sorted) {\n    sum += i;\n  }\n  // sort according\
    \ to sum\n  auto cmp = [](long a, long b) { return sum - a; };\n  std::sort(sorted.begin(),\
    \ sorted.end(), cmp);\n  return sorted;", "    int n = nums.size();\n    int max_sum\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        max_sum += nums[i];\n    }\n\
    \    std::vector<int> v(n);\n    std::iota(v.begin(), v.end(), 0);\n    std::vector<bool>\
    \ visited(n, false);\n    for (int i = 0; i < n; i++) {\n        while (max_sum\
    \ > 0) {\n            int cur = max_sum % 10;\n            if (visited[i]) {\n\
    \                max_sum -= cur;\n            } else {\n                visited[i]\
    \ = true;\n                auto it = std::lower_bound(v.begin(), v.end(), cur);\n\
    \                for (int j = v.size(); j-- > 0; ) {\n                    v[j\
    \ + 1] = v[j];\n                }\n                v[0] = cur;\n             \
    \   max_sum -= cur;\n                break;\n            }\n        }\n    }\n\
    \    return nums;", "  // sort from shortest to longest\n  std::sort(nums.begin(),\
    \ nums.end(), [](const long a, const long b) -> bool {\n    const long a_digits\
    \ = a % 10;\n    const long b_digits = b % 10;\n    return a_digits == b_digits;\n\
    \  });\n  // calculate sum of digits\n  long sum = 0;\n  for (const auto &it :\
    \ nums)\n    sum += it % 10;\n  // sort according to sum\n  std::sort(nums.begin(),\
    \ nums.end(), [](const long a, const long b) -> bool {\n    const long a_digits\
    \ = a % 10;\n    const long b_digits = b % 10;\n    return a_digits > b_digits\
    \ ? true : a_digits < b_digits ? false : sum - a_digits < sum - b_digits;\n  });\n\
    \  return nums;", "    if (nums.size() <= 1) return nums;\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    for (auto n : nums) {\n        sum += n;\n \
    \       result.push_back(n);\n    }\n    std::sort(result.begin(), result.end(),\
    \ [sum](long n1, long n2) {\n        return sum - n1 < sum - n2;\n    });\n  \
    \  return result;", "    // Write your code here\n    int n = nums.size();\n \
    \   int ans[n];\n    for (int i=0; i<n; i++){\n        ans[i] = nums[i];\n   \
    \ }\n    ans[0] = 0;\n    for (int i=1; i<n; i++){\n        int sum = 0;\n   \
    \     for (int j=0; j<i; j++){\n            sum += ans[j];\n        }\n      \
    \  if (sum < ans[i]){\n            for (int j=i; j>0; j--){\n                ans[j-1]\
    \ = ans[j];\n            }\n            ans[0] = sum;\n        }\n    }\n    std::vector<long>\
    \ ans2(n);\n    for (int i=0; i<n; i++){\n        ans2[i] = ans[i];\n    }\n \
    \   return ans2;", "    std::vector<long> sorted_nums = nums;\n    sort(nums.begin(),\
    \ nums.end(), [](long left, long right){\n        return left > right;\n    });\n\
    \    return sorted_nums;", "    // Write your code here\n    int sum = 0;\n  \
    \  for(long &v : nums){\n        sum = sum + v;\n    }\n    std::vector<long>\
    \ ans;\n    long x = 1;\n    for(long &v : nums){\n        x /= v;\n        long\
    \ y = pow(10, x - 1);\n        long temp = y * v;\n        int n = 1;\n      \
    \  while(temp > 0){\n            temp = temp / y;\n            ans.push_back((long)\
    \ n);\n            temp = temp % y;\n            n += 1;\n        }\n    }\n \
    \   sort(ans.begin(), ans.end());\n    return ans;", "    std::sort(nums.begin(),\
    \ nums.end(),\n        [&nums](long& a, long& b) -> bool {\n            return\
    \ a + b < 0;\n        });\n    return nums;", "    std::vector<long> result;\n\
    \    for (long i : nums) {\n        if (i < 0) {\n            result.push_back(-i);\n\
    \        } else {\n            int cur = 0;\n            while (true) {\n    \
    \            int curr = cur;\n                cur = (curr * 10 + i) % 10;\n  \
    \              if (curr != cur) {\n                    result.push_back(-i);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return result;", "    // sort all the numbers in ascending order\n  \
    \  std::sort(nums.begin(), nums.end(), [](long a, long b) { return a > b; });\n\
    \    // get cumulative sum, which is also the index of first number in the sorted\
    \ list\n    std::vector<long> cumsums(nums.size());\n    for (long i = 0; i <\
    \ cumsums.size(); ++i) cumsums[i] = cumsum(i = 0);\n    // sort all the numbers\
    \ by their cumulative sum\n    std::sort(nums.begin(), nums.end(), [](long a,\
    \ long b) { return cumsums[b] - cumsums[a] < 0; });\n    return nums;", '  //
    your implementation here', "    assert(!nums.empty());\n    if (nums.size() ==\
    \ 1) return nums;\n    std::vector<long> result;\n    for (long i = nums.size();\
    \ i--;) {\n        long sum = 0;\n        for (long j = i; j--;) {\n         \
    \   sum += nums[j];\n            if (sum > 0) {\n                result.push_back(i);\n\
    \                break;\n            }\n        }\n    }\n    if (result.empty())\
    \ return nums;\n    std::stable_sort(result.begin(), result.end(), [&nums] (int\
    \ i, int j) {\n        return nums[i] > nums[j];\n    });\n    return result;",
  "  assert(!nums.empty());\n  if (nums.size() == 1) return nums;\n  std::multiset<long>\
    \ nums_sum;\n  for (auto& n : nums) {\n    nums_sum.insert(n);\n  }\n  std::vector<long>\
    \ res;\n  while (nums_sum.size()) {\n    auto it = nums_sum.begin();\n    long\
    \ t = *it;\n    long new_sum = t - 10;\n    nums_sum.erase(it);\n    res.push_back(new_sum);\n\
    \    // copy rest of the numbers\n    while (!nums_sum.empty() && nums_sum.begin()->second\
    \ == t) {\n      auto new_t = nums_sum.begin()->first;\n      nums_sum.erase(nums_sum.begin());\n\
    \      res.push_back(new_t);\n    }\n  }\n  return res;", "  assert (nums.size()\
    \ != 0);\n  // Get the sum of each digit\n  std::vector<long> sum_of_digits(nums.size(),\
    \ 0);\n  for (size_t i = 0; i < nums.size(); ++i) {\n    for (size_t j = 0; j\
    \ < nums.size(); ++j) {\n      sum_of_digits[j] += (nums[i] == nums[j]) ? (long)1\
    \ : (nums[i] - nums[j]) * (long)10;\n    }\n  }\n  // Sort the vector\n  std::sort(sum_of_digits.begin(),\
    \ sum_of_digits.end(), [&](long a, long b){\n    return a + b < 0;\n  });\n  //\
    \ Re-arrange the vector according to their sum\n  std::vector<long> output(sum_of_digits.size());\n\
    \  for (size_t i = 0; i < nums.size(); ++i) {\n    output[i] = nums[i];\n  }\n\
    \  for (size_t i = 0; i < sum_of_digits.size(); ++i) {\n    for (size_t j = i\
    \ + 1; j < sum_of_digits.size(); ++j) {\n      if (sum_of_digits[i] + sum_of_digits[j]\
    \ == 0) {\n        std::swap(output[i], output[j]);\n      }\n    }\n  }\n  return\
    \ output;", "    assert(nums.size() > 0);\n    std::vector<long> nums_tmp(nums.size());\n\
    \    int n = nums.size();\n    int max_digit = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        max_digit = max(max_digit, nums[i]);\n    }\n    // Sort nums_tmp\
    \ in increasing order\n    // nums_tmp will be sorted in-place\n    int j = 0;\n\
    \    for (int i = 1; i < n; i++) {\n        int digit = 0;\n        while ((j\
    \ + 1) * 10 < max_digit && (j * 10 + nums[j + 1]) > max_digit) {\n           \
    \ j++;\n        }\n        nums_tmp[i] = nums[j];\n        j++;\n    }\n    return\
    \ nums_tmp;", "    std::vector<long> temp;\n    if (nums.empty()) {\n        return\
    \ temp;\n    }\n    long sum = 0;\n    long max = nums[0];\n    for (long i =\
    \ nums.size() - 1; i >= 0; i--) {\n        long curr = nums[i];\n        if (curr\
    \ > max) {\n            max = curr;\n        }\n        long digit = curr - max;\n\
    \        sum += digit < 0 ? -digit : digit;\n        temp.push_back(curr);\n \
    \   }\n    long maxsum = (nums.size() * max) + sum;\n    long minsum = (nums.size()\
    \ * nums.back()) + nums.back();\n    if (maxsum > minsum) {\n        std::stable_sort(temp.begin(),\
    \ temp.end());\n    } else if (maxsum < minsum) {\n        std::partial_sort(temp.begin(),\
    \ temp.end());\n    }\n    return temp;", "    std::vector<long> result;\n   \
    \ int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n        int digit\
    \ = nums[i];\n        sum += digit;\n    }\n\n    result.push_back((long)sum %\
    \ 10);\n    sum += 10 - (sum % 10);\n    for (int i = 0; i < nums.size(); i++)\
    \ {\n        int digit = nums[i];\n        sum += digit;\n        if (sum < 0)\
    \ {\n            sum = 0;\n        }\n        if (sum > 9) {\n            sum\
    \ = 0;\n        }\n        result.push_back(sum % 10);\n    }\n    return result;",
  "  long sum = 0;\n  for (long x: nums) {\n    sum += x;\n  }\n  std::vector<long>\
    \ numsCopy(nums);\n  std::sort(numsCopy.begin(), numsCopy.end(), [&sum](long x,\
    \ long y) -> bool {\n    return sum - x == y;\n  });\n  return numsCopy;", " \
    \   // Your code here\n    std::vector<long> nums2;\n    \n    nums2.reserve(nums.size());\n\
    \    \n    long sum = 0;\n    for(int i=0;i<nums.size();i++){\n        sum+=nums[i];\n\
    \        if(sum<0){\n            sum+=10;\n        }\n    }\n    \n    int j=0;\n\
    \    int k = 0;\n    for(int i=0;i<nums.size();i++){\n        sum+=nums[i];\n\
    \        if(sum<0){\n            sum+=10;\n        }\n        if(sum>sum10){\n\
    \            nums2[j]=nums[k];\n            j++;\n            k++;\n        }else{\n\
    \            nums2[j]=nums[i];\n            j++;\n        }\n        sum10-=sum;\n\
    \    }\n    return nums2;", "    // Your code here\n    \n    // write your code\
    \ in C++14\n    // You can write this in one line if desired\n    std::vector<long>\
    \ nums2(nums.begin(), nums.end());\n    std::sort(nums2.begin(), nums2.end(),\
    \ [](long a, long b) {\n        long m = 0, d = 0;\n        while (b != 0) {\n\
    \            m = b%10;\n            b /= 10;\n            d += m*m;\n        }\n\
    \        return d < a;\n    });\n    \n    return nums2;", "    for (auto i :\
    \ nums)\n    {\n        long sum = 0;\n        while (i > 0)\n        {\n    \
    \        sum += (i % 10);\n            i /= 10;\n        }\n        if (sum <\
    \ 0)\n            sum += 10;\n        long tmpSum = 0;\n        for (auto j :\
    \ nums)\n        {\n            tmpSum += (j % 10);\n            j /= 10;\n  \
    \          if (tmpSum > sum)\n            {\n                long tmp = j;\n \
    \               j = i;\n                i = tmp;\n            }\n        }\n \
    \       long a = sum - tmpSum;\n        if (a < 0)\n            a *= -1;\n   \
    \     if (a > 0)\n        {\n            std::swap(i, nums.back());\n        \
    \    nums.pop_back();\n        }\n    }\n    return nums;", "    assert(nums.size()\
    \ > 1);\n    auto iter = std::min_element(nums.begin(), nums.end(), [&nums] (long\
    \ a, long b) { return a + b; });\n    auto min_sum = std::accumulate(nums.begin(),\
    \ iter, (long long sum, long long i) { return sum + i % 10; });\n\n    std::vector<long>\
    \ new_nums = nums;\n    for (auto it = nums.begin(); it != nums.end(); it++) {\n\
    \        if (*it == *iter) {\n            new_nums[it - nums.begin()] = *it;\n\
    \        }\n    }\n    return new_nums;", "  if (nums.empty()) {\n    return nums;\n\
    \  }\n  long n = nums.front();\n  std::vector<long> result;\n  long d = 0, sum\
    \ = 0, sum1 = 0;\n  // find the sum of the digits in n\n  for (int i = static_cast<int>(std::log10(static_cast<double>(n)));\
    \ i >= 0; i--) {\n    sum += n % 10;\n    n /= 10;\n  }\n  // find the maximum\
    \ possible value of d\n  for (int i = nums.size() - 1; i >= 0; i--) {\n    sum1\
    \ += nums[i];\n    if (sum1 > sum) {\n      sum = sum1;\n      d = i;\n    }\n\
    \  }\n  result.push_back(d);\n  // find the number of occurrences of each digit\
    \ in n\n  for (int i = static_cast<int>(std::log10(static_cast<double>(n))); i\
    \ >= 0; i--) {\n    if (n % 10 == sum) {\n      result.push_back(static_cast<int>(nums.size()\
    \ - i - 1));\n      n /= 10;\n    }\n  }\n  for (int i = 0; i < static_cast<int>(result.size());\
    \ i++) {\n    result.push_back(nums[result[i] - 1]);\n  }\n  return result;",
  "    std::vector<long> nums_copy;\n    for (auto i: nums)\n        nums_copy.push_back(i);\n\
    \    int sum = 0;\n    for (auto i: nums_copy) {\n        sum += i;\n    }\n \
    \   long sum_copy = sum;\n    std::vector<long> nums_sorted;\n    bool changed\
    \ = false;\n    for (auto i: nums_copy) {\n        while (sum_copy != sum && nums_copy.size()\
    \ > 0) {\n            sum_copy -= nums_copy.at(0);\n            changed = true;\n\
    \            nums_sorted.push_back(nums_copy.at(0));\n            nums_copy.pop_back();\n\
    \        }\n        nums_sorted.push_back(i);\n        sum += i;\n    }\n    if\
    \ (changed)\n        return order_by_points(nums_sorted);\n    else\n        return\
    \ nums_sorted;", "    std::vector<long> v1;\n    std::vector<long> v2;\n    v1\
    \ = nums;\n    std::sort(v1.begin(), v1.end(), std::greater<long>());\n    for\
    \ (auto it1 = v1.begin(); it1 != v1.end(); ++it1)\n    {\n        long temp =\
    \ *it1;\n        v1.erase(it1);\n        for (auto it2 = v2.begin(); it2 != v2.end();\
    \ ++it2)\n        {\n            long temp2 = *it2;\n            v2.erase(it2);\n\
    \            if (temp >= temp2)\n            {\n                break;\n     \
    \       }\n        }\n        v2.push_back(temp);\n    }\n    return v2;", " \
    \ std::map<long, std::map<long, std::set<long> > > ans;\n  long n = 0;\n  for\
    \ (auto i : nums) {\n    if (i == -1 || i == 0)\n      continue;\n    ans[abs(i)][abs(i)].insert(i);\n\
    \    n += i;\n  }\n  std::vector<long> res;\n  long res = 0, i = 0;\n  for (auto\
    \ i : nums) {\n    if (i == -1 || i == 0)\n      continue;\n    std::map<long,\
    \ std::set<long> >::iterator it;\n    if (abs(i) > res) {\n      res = abs(i);\n\
    \      i = it->first;\n    }\n    for (auto j : it->second) {\n      res.push_back(i);\n\
    \    }\n  }\n  for (auto i : ans.key()) {\n    std::map<long, std::set<long> >\
    \ tmp;\n    for (auto j : ans[i])\n      tmp.insert(j);\n    ans[i] = tmp;\n \
    \ }\n  n = abs(n);\n  assert(n == 0 || ans[n - 1][n - 1].size() == 0);\n  for\
    \ (auto i : ans[n - 1]) {\n    std::vector<long> tmp;\n    for (auto j : i)\n\
    \      tmp.push_back(n + j);\n    res.push_back(tmp);\n  }\n  return res;", " \
    \ assert(nums.size());\n  std::vector<long> res(nums.size());\n  res.assign(nums.begin(),\
    \ nums.end());\n  std::sort(res.begin(), res.end(), sort_by_digits);\n  return\
    \ res;", "    long long ans = 0;\n    std::unordered_map<long long, int> map;\n\
    \    for (long long i : nums) {\n        if (map.find(i) == map.end()) {\n   \
    \         map[ans] = i;\n            ans += i;\n        }\n    }\n    std::vector<long>\
    \ res;\n    for (auto it1 = map.begin(); it1 != map.end(); ++it1) {\n        res.push_back(it1->second);\n\
    \    }\n    return res;", "    // write your code here\n    std::priority_queue<long,\
    \ std::deque<long>, greater<long>> pq;\n    pq.push(nums.front());\n    long sum\
    \ = pq.top();\n    pq.pop();\n    for (int i = 0; i < nums.size(); i++) {\n  \
    \      sum += nums[i];\n        pq.push(sum);\n        sum = pq.top();\n     \
    \   pq.pop();\n    }\n    return pq;", "    // TODO: Auto-generated method stub\n\
    \    return std::vector<long>();", "    // Sort vector from largest to smallest\n\
    \    std::stable_sort(nums.begin(), nums.end(), [&nums](const long &a, const long\
    \ &b) {\n        long sum = 0;\n        while (a != 0) {\n            sum += a\
    \ % 10;\n            a /= 10;\n        }\n        while (a != 0) {\n         \
    \   sum += a % 10;\n            a /= 10;\n        }\n        return sum < b;\n\
    \    });\n    return nums;", "  // Your code goes here\n  std::sort(nums.begin(),\
    \ nums.end(), [](long a, long b) -> bool {\n    return a + b < 0;\n  });\n  std::reverse(std::begin(nums),\
    \ std::end(nums));\n  return nums;", "    // Write your code here\n    assert(nums.size()\
    \ > 0);\n    if (nums.empty()) {\n        return nums;\n    }\n    std::multimap<long,\
    \ int> sort_map;\n    for (auto i : nums) {\n        auto s = std::to_string(i);\n\
    \        sort_map.insert({s, i});\n    }\n    std::vector<long> results;\n   \
    \ std::for_each(sort_map.begin(), sort_map.end(),\n                [&results](const\
    \ std::pair<long, int>& p) {\n                    results.push_back(p.second);\n\
    \                });\n    return std::move(results);", "    // write your code\
    \ in C++17\n    int n = nums.size();\n    std::vector<long> arr;\n    std::vector<int>\
    \ sorted_ids(n);\n    for (auto e : nums)\n    {\n        auto s = e;\n      \
    \  for (int i = 0; i < 9; i++)\n        {\n            s /= 10;\n            if\
    \ (s == 0)\n            {\n                for (int j = 0; j < i; j++)\n     \
    \           {\n                    arr[j] = sorted_ids[j];\n                }\n\
    \                break;\n            }\n        }\n        sorted_ids[n - 1] =\
    \ s;\n    }\n    std::sort(arr.begin(), arr.end(), [](long a, long b) { return\
    \ a < b; });\n    std::vector<long> res(arr.begin(), arr.end());\n    return res;",
  "    std::sort(nums.begin(), nums.end(), [](long a, long b){return a>b;});\n   \
    \ return nums;", "    int sum = 0;\n    for (auto const &i : nums) {\n       \
    \ assert(i >= 0);\n        assert(i < 10);\n        sum += i;\n    }\n    std::vector<long>\
    \ res(std::begin(nums), std::end(nums));\n    std::sort(std::begin(res), std::end(res),\n\
    \              [sum](long const &l, long const &r) -> bool {\n               \
    \   return sum - l < sum - r;\n              });\n    return res;", "    std::vector<long>\
    \ res;\n    long int sum = 0;\n    for (int i = 0; i < nums.size(); i++) {\n \
    \       sum += nums[i];\n        res.push_back(sum);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    // Write your code here\n    int n = nums.size();\n\
    \    std::vector<long> tmp;\n    for (int i = 0; i < n; i++)\n    {\n        int\
    \ sum = 0;\n        for (int j = 0; j < n; j++)\n        {\n            sum +=\
    \ nums[j];\n        }\n        if (sum > 0)\n            tmp.push_back(nums[i]);\n\
    \        else\n        {\n            int pos = i;\n            for (int j = i;\
    \ j > 0; j--)\n            {\n                if (nums[j] <= 0)\n            \
    \    {\n                    pos = j;\n                    break;\n           \
    \     }\n            }\n            tmp.push_back(nums[pos]);\n            tmp.pop_back();\n\
    \        }\n    }\n    return tmp;", "    // Write your code here.\n    long sum\
    \ = 0;\n    int index = 0;\n    for (auto num : nums) {\n        if (num >= 0)\n\
    \            sum += num;\n        else\n            sum -= num;\n\n        if\
    \ (sum > 0)\n            index++;\n    }\n\n    std::sort(nums.begin(), nums.end(),\
    \ [sum, &index] (long a, long b) {\n        return a + b > sum ? a - b : index\
    \ + b - a;\n    });\n\n    return nums;", "    std::vector<long> sorted_nums;\n\
    \    long cur_sum = 0;\n    for (auto i : nums) {\n        cur_sum += i;\n   \
    \ }\n    for (auto i : nums) {\n        if (cur_sum < i) {\n            cur_sum\
    \ = i;\n        }\n    }\n    std::sort(nums.begin(), nums.end(), [&](long a,\
    \ long b) {\n        return cur_sum < a + b;\n    });\n    sorted_nums.clear();\n\
    \    for (auto i : nums) {\n        sorted_nums.push_back(i);\n    }\n    return\
    \ sorted_nums;", "\t// TODO: Write your code here", "    std::vector<int> sorted_index(nums.size(),\
    \ -1);\n    int sum = 0;\n    for (auto num : nums) {\n        sum += num;\n \
    \       sorted_index[sum] = nums.size() - 1;\n    }\n    std::sort(sorted_index.begin(),\
    \ sorted_index.end());\n    auto reorder_index = [](int i) {\n        if (i ==\
    \ -1) {\n            return sorted_index[0];\n        } else {\n            return\
    \ sorted_index[i];\n        }\n    };\n    auto it = nums.begin();\n    nums.clear();\n\
    \    for (auto num : sorted_index) {\n        nums.push_back(it++);\n    }\n \
    \   return nums;", "  assert(nums.size()>0);\n  std::sort(nums.begin(), nums.end(),\
    \ sort_by_points);\n  return nums;", "    std::vector<long> res;\n    res.reserve(nums.size());\n\
    \    for (auto const &it : nums)\n        res.emplace_back(it);\n    std::sort(res.begin(),\
    \ res.end(), [&nums] (long const &a, long const &b) -> bool {\n        long const\
    \ &x = a;\n        long const &y = b;\n        long const xi = *std::max_element(std::begin(x),\
    \ std::end(x));\n        long const yi = *std::max_element(std::begin(y), std::end(y));\n\
    \        long const &xd = *std::max_element(std::begin(xi) + std::distance(x,\
    \ xi), std::end(x));\n        long const &yd = *std::max_element(std::begin(yi)\
    \ + std::distance(y, yi), std::end(y));\n        return xd == yd;\n    });\n \
    \   return res;", "  if(nums.size() == 0) return nums;\n  std::vector<long> ans;\n\
    \  long sum = 0;\n  long cur_val = nums[0];\n  std::stack<long> st;\n  st.push(cur_val);\n\
    \  while(!st.empty()) {\n    cur_val = st.top();\n    st.pop();\n    sum = (sum\
    \ * 10 + cur_val) % 10;\n    long next_val = nums[ans.size()];\n    long next_sum\
    \ = next_val % 10;\n    if(sum == next_sum) ans.push_back(next_val);\n    else\
    \ if(sum < next_sum) {\n      while(!st.empty() && sum == (next_sum * 10 + st.top())%10)\
    \ {\n        st.pop();\n      }\n      st.push(next_val);\n    }\n  }\n  return\
    \ ans;", "    // Write your code here\n    if (nums.size() == 0)\n        return\
    \ nums;\n    auto largest = nums[0];\n    for (auto n : nums) {\n        if (n+largest\
    \ < largest) largest = n + largest;\n    }\n    std::stable_sort(nums.begin(),\
    \ nums.end(), [&largest](long a, long b){\n        long sum_of_digits = std::accumulate(std::begin(std::set<long>(std::to_string(a),\
    \ std::to_string(b).begin(), std::to_string(b).end(), [](long l, long r){\n  \
    \          long r = l % 10;\n            long l = l / 10;\n            l = l %\
    \ 10;\n            return l+r;\n        })), std::begin(std::set<long>(std::to_string(a),\
    \ std::to_string(b).begin(), std::to_string(b).end(), [](long l, long r){\n  \
    \          long r = l % 10;\n            long l = l / 10;\n            l = l %\
    \ 10;\n            return l+r;\n        })), 0);\n        return sum_of_digits\
    \ < largest;\n    });\n    return nums;", "    std::vector<long> nums_copy = nums;\n\
    \    // Your code goes here\n    long sum = 0;\n    for (auto &v : nums) {\n \
    \       sum += v;\n    }\n    std::sort(nums_copy.begin(), nums_copy.end(), [&sum](long\
    \ a, long b) -> bool {\n        return a + b > sum;\n    });\n    return nums_copy;",
  "\t// O(n)\n\tstd::sort(nums.begin(), nums.end());\n\tlong ans = 0, sum = 0;\n\t\
    for (auto i : nums) {\n\t\tsum += i;\n\t\tif (sum > ans) {\n\t\t\tans = sum;\n\
    \t\t}\n\t}\n\treturn nums;", "    if (nums.empty()) {\n        return nums;\n\
    \    }\n    // Build a map to record the sum of digits\n    // Example: if vector\
    \ is [9, 10, 11, 12]\n    // then map is {9=9, 10=10, 11=11, 12=12}\n    // After\
    \ sort, the map becomes:\n    // {11=11, 12=12, 9=9}\n    \n    std::vector<long>\
    \ result;\n    \n    long long maxSum = 0, sum = 0;\n    for (long long val: nums)\
    \ {\n        // Use val to get the sum of digits\n        sum += val;\n      \
    \  // If the sum > maxSum, update maxSum and sum\n        if (sum > maxSum) {\n\
    \            maxSum = sum;\n        }\n    }\n    \n    // Sort the vector based\
    \ on the sum\n    for (long long i = 0; i < nums.size(); i++) {\n        // Use\
    \ val to get the sum of digits\n        sum += nums[i];\n        if (sum > maxSum)\
    \ {\n            // Update maxSum and sum\n            maxSum = sum;\n       \
    \ }\n    }\n    \n    // Return sorted vector\n    for (long long i = 0; i < nums.size();\
    \ i++) {\n        result.push_back(nums[i]);\n    }\n    return result;", "  \
    \  // Your code here\n    // assert(nums.size() > 0);\n    std::sort(nums.begin(),\
    \ nums.end(), [](long a, long b) {\n        return (a%10 + b%10 < 0);\n    });\n\
    \n    return nums;", "    std::vector<long> temp(nums);\n    long long n1 = 0,\
    \ n2 = 0;\n    for (long i = 0; i < nums.size(); i++) {\n        n1 = n1 + nums[i];\n\
    \        n2 = n2 + pow(10, abs(nums[i] - n1));\n    }\n    if (n1 < n2)\n    \
    \    for (long i = 0; i < nums.size(); i++) {\n            temp[i] = nums[i];\n\
    \        }\n    else\n        for (long i = 0; i < nums.size(); i++) {\n     \
    \       temp[i] = pow(10, abs(nums[i] - n2)) + nums[i];\n        }\n    std::stable_sort(temp.begin(),\
    \ temp.end());\n    return temp;", "    int n = nums.size();\n    for (int i =\
    \ 0; i < n; i++) {\n        long cur = nums[i];\n        long sum = 0;\n     \
    \   for (int j = 0; j < i; j++) {\n            sum += nums[j];\n            if\
    \ (sum > cur) {\n                std::swap(nums[i], nums[j]);\n            }\n\
    \        }\n    }\n    return nums;", "  std::vector<long> new_nums;\n  new_nums\
    \ = nums;\n  for (size_t i = 0; i < new_nums.size(); ++i) {\n    int new_sum =\
    \ 0;\n    for (size_t j = 0; j < new_nums.size(); ++j) {\n      int n = new_nums[j];\n\
    \      int d = n % 10;\n      new_sum += d * d;\n      new_nums[j] = n / 10;\n\
    \    }\n    new_nums[i] = new_sum;\n  }\n  return new_nums;", "    assert(nums.size());\n\
    \    if (nums.size() == 1) {\n        return nums;\n    }\n    std::vector<int>\
    \ numsOfDigits(nums.size());\n    for (long num : nums) {\n        int digit =\
    \ num % 10;\n        numsOfDigits[digit]++;\n    }\n    std::vector<long> result(nums.size());\n\
    \    for (long i = 0; i < numsOfDigits.size(); i++) {\n        result[i] = nums[numsOfDigits[i]\
    \ - 1] + i;\n    }\n    return result;", "  std::vector<long> nums2(nums.size());\n\
    \  for (size_t i = 0; i < nums.size(); i++) {\n    nums2[i] = nums[i];\n  }\n\
    \  std::sort(nums2.begin(), nums2.end(), sum_of_digits);\n  return nums2;", " \
    \ // Write your code here\n  std::sort(nums.begin(), nums.end(), [](const long\
    \ a, const long b)->bool {\n      long sum_a = std::accumulate(nums.begin(), nums.end(),\
    \ 0L);\n      long sum_b = std::accumulate(nums.begin(), nums.end(), 0L);\n  \
    \    return sum_a - sum_b == a < b;\n  });\n  return nums;", "\tstd::map<long,\
    \ std::map<int, int>> map;\n\tfor (auto i : nums) {\n\t\tstd::map<int, int> j;\n\
    \t\tfor (auto j : map)\n\t\t\tj[j.first] += j.second;\n\t\tmap[j.first].insert(std::make_pair(i,\
    \ 0));\n\t}\n\tstd::vector<long> res(map.size());\n\tstd::map<long, std::map<int,\
    \ int>>::iterator i;\n\tfor (i = map.begin(); i != map.end(); i++) {\n\t\tfor\
    \ (auto j = i->second.begin(); j != i->second.end(); j++)\n\t\t\tres[i->first].push_back(i->first);\n\
    \t}\n\treturn res;", "    int n = nums.size();\n    int ret[n]; // Will hold the\
    \ sorted vector.\n    long max_sum = 0;\n    for (long &i : nums) {\n        int\
    \ j = 0;\n        while (j < n && i != nums[j]) {\n            ++j;\n        }\n\
    \        if (j == n) {\n            ret[n-1] = i;\n        } else {\n        \
    \    int k;\n            for (k = j; k < n; ++k) {\n                ret[k-1] =\
    \ ret[k];\n            }\n            ret[k] = i;\n            max_sum = std::max(max_sum,\
    \ std::abs(i));\n        }\n    }\n    std::vector<long> ans;\n    for (int i\
    \ = 0; i < n; ++i) {\n        if (max_sum < std::abs(ret[i])) {\n            ans.push_back(ret[n-1]);\n\
    \        } else {\n            ans.push_back(ret[i]);\n        }\n    }\n    return\
    \ ans;", "    if (nums.empty()) return nums;\n    std::vector<long> ret;\n   \
    \ int sum = 0;\n    for (auto num : nums) sum += num;\n    int pos = 0;\n    for\
    \ (auto num : nums) {\n        int temp = num / 10;\n        int digit = num -\
    \ temp * 10;\n        for (; pos < sum - digit + 1; ++pos);\n        ret.push_back(temp);\n\
    \    }\n    return ret;", "    std::vector<long> nums_copy = nums;\n    long carry\
    \ = 0;\n    long result = 0;\n    for (long num : nums_copy)\n    {\n        result\
    \ += num;\n        carry = result / 10;\n        result = result % 10;\n    }\n\
    \    if (nums.size() != 0 && carry != 0)\n        nums_copy.push_back(carry);\n\
    \    return nums_copy;", "    assert(nums.size() != 0);\n    int sum = nums.front();\n\
    \    auto ita = nums.begin();\n    std::sort(ita, nums.end(), [sum](long a, long\
    \ b) { return a + b > sum; });\n    auto itb = nums.begin();\n    std::sort(itb,\
    \ nums.end(), [sum](long a, long b) { return a + b > sum; });\n    return std::vector<long>{nums.begin(),\
    \ ita};", "    if (nums.empty()) {\n        return std::vector<long>();\n    }\n\
    \n    std::vector<bool> visited(nums.size(), false);\n    std::vector<long> res(nums.size());\n\
    \n    std::stack<long> st;\n    st.pop();\n    visited[st.top()] = true;\n   \
    \ while (!st.empty()) {\n        long i = st.top();\n        st.pop();\n     \
    \   while (visited[i]) {\n            i = res[i - 1];\n            visited[i]\
    \ = true;\n        }\n        res[st.top()] = i;\n        st.push(i - 1);\n  \
    \  }\n    return res;", "    // Write your code here\n    std::vector<long> vs;\n\
    \    for (long num : nums) {\n        int sum = 0;\n        while (num != 0) {\n\
    \            sum = sum + num % 10;\n            num = num / 10;\n        }\n \
    \       vs.push_back(sum);\n    }\n    std::sort(vs.begin(), vs.end());\n    return\
    \ vs;", "    if (nums.empty())\n        return nums;\n    std::vector<long> v;\n\
    \    std::sort(v.begin(), v.end(), [&nums](const long & i, const long & j) { return\
    \ i + j > nums[i] + nums[j]; });\n    for (auto i : v)\n        nums[i] = i;\n\
    \    return nums;", "    // write your code here\n    std::vector<long> numsSorted\
    \ = nums;\n    std::sort(numsSorted.begin(), numsSorted.end(), [](const long &a,\
    \ const long &b) -> bool {\n        return a + b > 0;\n    });\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end(), [](const long &a, const long &b) -> bool {\n        return\
    \ a < b;\n    });\n    return numsSorted;", "    assert(nums.size() > 0);\n  \
    \  // get sums of all digits in nums\n    long long sum = 0;\n    for (long long\
    \ &num : nums)\n        sum += num;\n\n    // create a map from the sums to the\
    \ indices of nums\n    std::map<long long, size_t> index_map;\n    size_t idx\
    \ = 0;\n    for (size_t i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n\
    \        index_map[sum] = idx;\n        sum += nums[i] / 10;\n        index_map[sum]\
    \ = idx;\n        sum += nums[i] / 100;\n        index_map[sum] = idx;\n     \
    \   sum += nums[i] / 1000;\n        index_map[sum] = idx;\n        sum += nums[i]\
    \ / 10000;\n        index_map[sum] = idx;\n        sum += nums[i] / 100000;\n\
    \        index_map[sum] = idx;\n        sum += nums[i] / 1000000;\n        index_map[sum]\
    \ = idx;\n        sum += nums[i] / 10000000;\n        index_map[sum] = idx;\n\
    \        sum += nums[i] / 1000000000;\n        index_map[sum] = idx;\n       \
    \ idx += 1;\n    }\n\n    // now sort the original nums according to their index_map\n\
    \    std::vector<long> res(nums.size());\n    for (auto &num : nums)\n       \
    \ res[index_map[num]] = num;\n    return res;", "  // Write your code here.\n\
    \  std::vector<int> temp;\n  for (long x : nums)\n    temp.push_back(std::accumulate(&x,\
    \ &x + 10, 0));\n  std::sort(temp.begin(), temp.end());\n  std::vector<long> temp2;\n\
    \  for (long i : temp)\n    temp2.push_back(nums[temp.size() - i - 1]);\n  return\
    \ temp2;", "    // Write your code here\n    std::sort(nums.begin(), nums.end(),\
    \ [](const long &l, const long &r) {\n        // write your code here\n      \
    \  return l + r < 0;\n    });\n    return nums;", "    std::vector<long> nums_copy;\n\
    \    std::copy(nums.begin(), nums.end(), std::back_inserter(nums_copy));\n\n \
    \   std::sort(nums_copy.begin(), nums_copy.end(), [&](long a, long b){\n     \
    \   // check if sums are equal or less than 0\n        if ((a < 0) != (b < 0)){\n\
    \            return false;\n        }\n        // check if sums are equal\n  \
    \      if (a == b){\n            return false;\n        }\n        // check if\
    \ sums are less than 0\n        if ((a < 0) != (b < 0)){\n            return true;\n\
    \        }\n        // check if sums are equal\n        if (a == b){\n       \
    \     return true;\n        }\n        // get sum of digits in both numbers\n\
    \        long s = a + b;\n        // check if sums are equal\n        if (s ==\
    \ a){\n            return true;\n        }\n        // check if sums are less\
    \ than 0\n        if (s < 0){\n            return true;\n        }\n        //\
    \ check if sums are equal\n        if (s == a){\n            return true;\n  \
    \      }\n        return false;\n    });\n    return nums_copy;", "    int sum\
    \ = 0;\n    for (auto it : nums) {\n        sum += it;\n    }\n    std::vector<long>\
    \ sorted_nums = nums;\n    for (int i = 0; i < sorted_nums.size(); i++) {\n  \
    \      if (i == 0 || sum - sorted_nums[i - 1] != nums[i - 1]) {\n            int\
    \ j;\n            for (j = i; j < sorted_nums.size(); j++) {\n               \
    \ if (sum - sorted_nums[j - 1] == nums[j - 1]) {\n                    break;\n\
    \                }\n            }\n            std::swap(sorted_nums[i], sorted_nums[j]);\n\
    \        }\n    }\n    return sorted_nums;", "    if (nums.empty()) return nums;\n\
    \    // get digits\n    std::vector<int> digits(std::begin(nums), std::end(nums));\n\
    \    // calculate sum\n    int sum = 0;\n    for (auto d : digits) sum += d;\n\
    \    // sort ascending\n    std::sort(std::begin(digits), std::end(digits), [](int\
    \ a, int b) {\n        return a + b < b + a;\n    });\n    // put back\n    std::reverse(std::begin(digits),\
    \ std::end(digits));\n    // create result vector\n    std::vector<long> results(std::begin(nums),\
    \ std::end(nums));\n    // set result\n    for (auto d : digits) results[nums.size()\
    \ - 1 - d] = sum - d;\n    return results;", "    // write your code here\n  \
    \  std::vector<long> new_nums = nums;\n    new_nums.push_back(-1); // Add extra\
    \ element for sort\n    for(std::size_t i = 0; i < nums.size(); ++i){\n      \
    \  for(std::size_t j = i; j < nums.size(); ++j){\n            if(nums[j] - nums[i]\
    \ == 0){\n                std::swap(new_nums[j], new_nums[i]);\n            }\n\
    \        }\n    }\n    return new_nums;", "    int N = nums.size();\n    std::vector<long>\
    \ answer;\n    for (int i = 0; i < N; i++) {\n        long sum = nums[i];\n  \
    \      long j;\n        int k = i;\n        while (k < (N - 1)) {\n          \
    \  sum += nums[k];\n            k += 1;\n        }\n        answer.push_back(sum);\n\
    \    }\n    std::sort(answer.begin(), answer.end());\n    return answer;", " \
    \   std::vector<long> sorted_nums;\n    // The variable i keeps track of the current\
    \ position in sorted_nums.\n    long long i = 1;\n    // While there are still\
    \ numbers in nums.\n    while (i < nums.size()) {\n        // Get the sum of the\
    \ digits of the current number.\n        long long sum = 0;\n        long long\
    \ carry = 0;\n        for (long long k = 0; k < i; k++) {\n            sum +=\
    \ nums[k] % 10;\n            carry = (sum + carry) % 10;\n        }\n        //\
    \ If the sum is larger than current_sum, the number at position i\n        //\
    \ is the one to be added to the sorted list, otherwise add it.\n        if (sum\
    \ > sorted_nums[i - 1])\n            sorted_nums.push_back(nums[i]);\n       \
    \ else\n            sorted_nums.push_back(sum);\n        // Move to the next position.\n\
    \        i++;\n    }\n    return sorted_nums;", "  std::vector<long> sorted;\n\
    \  sorted.reserve(nums.size());\n  for (long i = 0; i < nums.size(); i++) {\n\
    \    auto current_sum = nums[i] + nums[nums.size() - i - 1];\n    if (current_sum\
    \ < 0)\n      current_sum = -current_sum;\n    sorted.emplace_back(current_sum);\n\
    \  }\n  std::sort(sorted.begin(), sorted.end());\n  auto begin = sorted.begin();\n\
    \  while (begin != sorted.end()) {\n    auto temp = *begin;\n    begin++;\n  \
    \  std::rotate(begin, sorted.end(), temp);\n  }\n  return sorted;", "  assert\
    \ (nums.size() > 0);\n  std::vector<int> dp;\n  dp.resize(nums.size(), 0);\n \
    \ for (size_t i = 0; i < nums.size(); ++i) {\n    dp[i] = dp[i - 1] + nums[i];\n\
    \  }\n  std::stable_sort(nums.begin(), nums.end(),\n                   [&dp](const\
    \ long & lhs, const long & rhs) {\n                     return dp[lhs] < dp[rhs];\n\
    \                   });\n  return nums;", "    // write your code here\n    int\
    \ maxsum = 0;\n    for (size_t i = 0; i < nums.size(); i++) {\n        int cursum\
    \ = 0;\n        long curval = nums[i];\n        while (curval != 0) {\n      \
    \      int digit = curval % 10;\n            curval = curval /10;\n          \
    \  cursum += digit;\n        }\n        if (cursum > maxsum) {\n            maxsum\
    \ = cursum;\n        }\n    }\n\n    for (int i = 0; i < nums.size(); i++) {\n\
    \        int cursum = 0;\n        long curval = nums[i];\n        while (curval\
    \ != 0) {\n            int digit = curval % 10;\n            curval = curval /10;\n\
    \            cursum += digit;\n        }\n        if (cursum == maxsum) {\n  \
    \          std::swap(nums[i], nums[nums.size() - i - 1]);\n        }\n    }\n\
    \    return nums;", "    std::vector<int> temp;\n    int sum = 0;\n    for (int\
    \ i = 0; i < nums.size(); i++) {\n        sum += nums[i];\n        auto it = temp.find(sum);\n\
    \        if (it == temp.end()) {\n            temp.push_back(sum);\n        }\
    \ else {\n            int index = temp.find(sum);\n            std::swap(nums[i],\
    \ nums[index]);\n        }\n    }\n    return nums;", "    std::sort(nums.begin(),\
    \ nums.end(), [](long a, long b)\n    {\n        return b - a; \n    });\n   \
    \ return nums;", "    std::vector<long> sorted_nums(nums.size());\n    for (long\
    \ i = 0; i < nums.size(); i++) {\n        int sum = 0;\n        for (long j =\
    \ 0; j < nums.size(); j++) {\n            if (i != j) {\n                sum +=\
    \ nums[j];\n            }\n        }\n        if (sum > 0) {\n            sorted_nums[i]\
    \ = sum;\n        }\n    }\n    return sorted_nums;", "  // Sort all elements\
    \ and get the sum of digits.\n  auto it = std::max_element(nums.begin(), nums.end());\
    \ //find the maximum number\n  assert(it != nums.end()); //assert for empty vector\n\
    \  auto max_value = *it;\n  long total_digits = 0;\n  for (long &value : nums)\
    \ {\n    total_digits += std::abs(value);\n  }\n  std::sort(nums.begin(), nums.end(),\
    \ [&total_digits](long &a, long &b) -> bool {\n    long &sum_a = std::abs(a);\n\
    \    long &sum_b = std::abs(b);\n    return sum_a == sum_b\n      || (sum_a <\
    \ sum_b\n          && (sum_a >= max_value - total_digits || sum_b >= max_value\
    \ - total_digits));\n  });\n  return nums;", "    if(nums.empty())\n        return\
    \ nums;\n    auto len = nums.size();\n    // Store all sums of digits in an unordered_map\
    \ to optimize finding sums\n    unordered_map<long long, int> sums;\n    for(int\
    \ i = 0; i < len; i++)\n        sums[nums[i]] = sums[nums[i]] + 1;\n    // Sort\
    \ the sums from high to low\n    for(auto it = sums.rbegin(); it != sums.rend();\
    \ it++) {\n        std::swap(sums[it->first], sums.rbegin()->first);\n    }\n\
    \    // Sort nums in original order\n    std::stable_sort(nums.begin(), nums.end(),\
    \ [&sums](long& a, long& b) -> bool {\n        // If the sum is same, sort them\
    \ from original order\n        if(sums[a] == sums[b])\n            return a <\
    \ b;\n        // Otherwise, sort them from high to low\n        else\n       \
    \     return sums[a] < sums[b];\n    });\n    return nums;", "    std::vector<long>\
    \ numsSorted;\n    for (long num : nums) {\n        // find sum of num's digit\n\
    \        long sum = num;\n        while (sum > 0) {\n            int remainder\
    \ = (sum % 10);\n            sum = sum / 10;\n            numsSorted.push_back(remainder);\n\
    \        }\n    }\n    // sort by sum of digit\n    std::sort(numsSorted.begin(),\
    \ numsSorted.end());\n\n    // create reverse index\n    std::vector<long> reverseIndex(num_elements(nums));\n\
    \    for (long i = 0; i < numsSorted.size(); ++i) {\n        reverseIndex[numsSorted[i]]\
    \ = i;\n    }\n\n    // sort by index\n    std::sort(numsSorted.begin(), numsSorted.end(),\n\
    \            [](long a, long b) { return reverseIndex[a] < reverseIndex[b]; });\n\
    \    return numsSorted;", "    std::vector<long> result;\n    std::map<long, long>\
    \ sums;\n    for (const auto& num : nums) {\n        auto sum = sums[num];\n \
    \       if (sum == 0) sum = 1;\n        sums[num] = sum;\n        sum += num;\n\
    \        result.push_back(sum);\n    }\n    std::sort(result.begin(), result.end());\n\
    \    return result;", "    if (nums.size() <= 1) return nums;\n    std::vector<long>\
    \ result;\n    long sum = 0;\n    long pos = 0, cnt = 0;\n    for (long i = 0;\
    \ i < nums.size(); i++) {\n        while (pos < nums.size() && sum > 0) {\n  \
    \          sum += nums[pos];\n            cnt++;\n            pos++;\n       \
    \ }\n        result.push_back(nums[i]);\n    }\n    long temp = 0;\n    for (long\
    \ i = 0; i < result.size(); i++) {\n        temp = result[i];\n        result[i]\
    \ = result[cnt - 1];\n        result[cnt - 1] = temp;\n    }\n    return result;",
  "  std::sort(nums.begin(), nums.end(), [](long a, long b) {\n    return std::abs(a\
    \ + b) < std::abs(a - b);\n  });\n  return nums;", "    // write your code here\n\
    \    long sum = 0;\n    std::vector<long> nums2;\n    for (long &i : nums) {\n\
    \        sum += i;\n    }\n    std::vector<long> res;\n    for (long i = 0; i\
    \ < nums.size(); i++) {\n        if (nums[i] > 0) {\n            if (sum == nums[i])\
    \ {\n                nums2.push_back(i - nums.size());\n            }\n      \
    \      else if (sum < nums[i]) {\n                res.push_back(nums[i]);\n  \
    \              nums2.push_back(i - nums.size());\n            }\n            else\
    \ if (sum > nums[i]) {\n                res.push_back(nums[i] - sum);\n      \
    \      }\n        }\n    }\n    for (long &i : nums2) {\n        res.push_back(i);\n\
    \    }\n    return res;", "    // write your code here\n    std::sort(nums.begin(),\
    \ nums.end(), [&nums](long& a, long& b){\n        int sum_digits = (a+b)*10;\n\
    \        if(a+b==0)\n            return 0;\n        return sum_digits > 0 ? sum_digits\
    \ : -sum_digits;\n    });\n    return nums;", "    std::sort(nums.begin(), nums.end(),\
    \ [](long l, long r){return l<r;});\n    return nums;", "    // write your code\
    \ here\n    std::vector<long> res;\n    for (auto &i : nums){\n        int sum\
    \ = 0;\n        while (i>0){\n            sum += i%10;\n            i /= 10;\n\
    \        }\n        if (sum > 0){\n            long temp = sum;\n            for\
    \ (auto &j : nums){\n                if (j%10 == temp){\n                    auto\
    \ temp2 = j;\n                    for (auto &k : nums){\n                    \
    \    if (k%10 == temp2){\n                            res.push_back(k);\n    \
    \                        break;\n                        }\n                 \
    \   }\n                    break;\n                }\n            }\n        }\n\
    \    }\n    return res;", "    assert(nums.size() != 0);\n    std::vector<long>\
    \ ans;\n    long sum = 0;\n    for (auto &n: nums) {\n        sum += n;\n    }\n\
    \    long max_idx = nums.size() - 1;\n    while (sum > 0) {\n        max_idx--;\n\
    \        long min_idx = max_idx + 1;\n        for (long idx = min_idx; idx <=\
    \ max_idx; idx++) {\n            if (nums[idx] > sum)\n                break;\n\
    \            if (nums[idx] == sum)\n                ans.push_back(nums[idx]);\n\
    \        }\n        sum += nums[max_idx];\n    }\n    return ans;", "    assert(nums.size()\
    \ > 0);\n    // sort nums based on sums of their digits\n    std::map<long, std::vector<long>>\
    \ m;\n    for (auto num : nums) {\n        auto it = m.find(num);\n        if\
    \ (it == m.end()) {\n            std::vector<long> v;\n            v.push_back(num);\n\
    \            m[num] = v;\n        } else {\n            it->second.push_back(num);\n\
    \        }\n    }\n    for (auto &it : m) {\n        std::sort(it.second.begin(),\
    \ it.second.end(), [](long a, long b) {\n            return (a<b) ? true : ((a==b)\
    \ ? 0 : ((a>b) ? true : false));\n        });\n    }\n    // reorder nums in original\
    \ order\n    std::vector<long> ret(std::begin(m), std::end(m));\n    // remove\
    \ duplicate elements\n    ret.erase(std::unique(ret.begin(), ret.end()), ret.end());\n\
    \    return ret;", "    for (size_t i = 0; i < nums.size(); i++) {\n        for\
    \ (size_t j = i + 1; j < nums.size(); j++) {\n            long sum = nums[i] +\
    \ nums[j];\n            if (sum < 0) sum += 100;\n            if (sum > 100) sum\
    \ -= 100;\n            if (nums[i] != nums[j]) nums[j] = sum;\n        }\n   \
    \ }\n    return nums;", "    std::vector<long> nums_copy = nums;\n    nums_copy.push_back(0);\n\
    \    nums_copy.push_back(0);\n    for (auto & num : nums) {\n        int sum =\
    \ 0;\n        int i = 0;\n        while (i < num.size() && nums[i] > 0) {\n  \
    \          sum += nums[i++] - '0';\n        }\n        if (sum > 0) {\n      \
    \      auto it = std::find(nums_copy.begin(), nums_copy.end(), sum);\n       \
    \     if (it != nums_copy.end()) {\n                nums_copy.erase(it);\n   \
    \             nums_copy.push_back(sum);\n            }\n        }\n    }\n   \
    \ return nums_copy;", "    // Write your code here.\n    long min_value = nums[0];\n\
    \    long max_value = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n\
    \        int num = nums[i];\n        if (num < min_value) min_value = num;\n \
    \       else if (num > max_value) max_value = num;\n    }\n    long max_num =\
    \ 0;\n    long min_num = 0;\n    for (int i = 0; i < nums.size(); i++) {\n   \
    \     int num = nums[i];\n        if (num == max_value) {\n            max_num\
    \ += i;\n        } else if (num == min_value) {\n            min_num += i;\n \
    \       } else {\n            long left = num - min_value;\n            long right\
    \ = (num - max_value) - 1;\n            if (left > right) {\n                max_num\
    \ += i;\n            } else {\n                min_num += i;\n            }\n\
    \        }\n    }\n    if (max_num != 0) {\n        max_num -= max_num == min_num\
    \ ? 1 : 0;\n    }\n    return nums;", "    assert(nums.size() > 0);\n    int sum\
    \ = 0;\n    for (long num : nums) {\n        sum += num;\n    }\n    std::sort(nums.begin(),\
    \ nums.end(),\n            [sum](int a, int b) -> bool {\n        return sum -\
    \ a + b < sum - a + b;\n    });\n    return nums;", "    // write your code here\n\
    \    std::vector<long> results;\n    for (long number : nums) {\n        long\
    \ sum_of_digits = 0;\n        while (number != 0) {\n            sum_of_digits\
    \ += number % 10;\n            number /= 10;\n        }\n        results.push_back(sum_of_digits);\n\
    \    }\n    std::sort(results.begin(), results.end(), [](long a, long b) { return\
    \ a == b; });\n    return results;", "    int max_digit = 0;\n    for (int x :\
    \ nums) {\n        max_digit = x > max_digit ? x : max_digit;\n    }\n    auto\
    \ f = [max_digit](int x) {\n        return x > max_digit ? x - max_digit : 0;\n\
    \    };\n    return std::stable_sort_copy(nums.begin(), nums.end(), f);", "\t\
    if (nums.empty())\n\t\treturn nums;\n\tstd::sort(std::begin(nums), std::end(nums),\
    \ [](long l, long r) { return (l > r) - (l < r); });\n\tlong sum = std::accumulate(std::begin(nums),\
    \ std::end(nums), 0);\n\tstd::vector<long> result;\n\tfor (long x : nums)\n\t\t\
    if (sum - x > 0)\n\t\t\tresult.push_back(x);\n\t\telse\n\t\t\tresult.push_back(sum\
    \ - x);\n\treturn result;", "    // Your code here\n    std::vector<long> sorted;\n\
    \    for (long n : nums) {\n        long max = 0;\n        for (int i = 1; i <=\
    \ n; i++) {\n            if (n % i == 0) {\n                max += i;\n      \
    \      }\n        }\n        if (max != 0) {\n            for (int i = 0; i <=\
    \ max; i++) {\n                sorted.push_back(n);\n            }\n        }\
    \ else {\n            sorted.push_back(n);\n        }\n    }\n    return sorted;",
  "    // Write your code here\n    std::vector<long> ans;\n    long sum = 0;\n  \
    \  for(long i: nums){\n        sum += i;\n        ans.push_back(i);\n    }\n \
    \   for(long i=0;i<ans.size();i++){\n        long temp = ans[i];\n        ans[i]\
    \ = sum-temp;\n        sum += ans[i];\n    }\n    return ans;", "\tlong long sum\
    \ = 0;\n\tstd::vector<long> order(nums.size());\n\tint i = 0;\n\tint j = 0;\n\t\
    \n\t\n\t// Iterate through the vector and add up the digits of each element\n\t\
    // Then add them into the vector in the order they are found\n\tfor (long long\
    \ val : nums) {\n\t\tsum += val;\n\t\torder[i] = sum;\n\t\ti++;\n\t}\n\t\n\t\n\
    \t// Sort the order vector and return the new vector\n\tfor (auto iter = order.rbegin();\
    \ iter != order.rend(); ++iter)\n\t{\n\t\tfor (j = i; j > 0; j--)\n\t\t\tif (*iter\
    \ < *(iter - 1))\n\t\t\t\tstd::swap(order[j], order[j-1]);\n\t}\n\t\n\treturn\
    \ order;", "    long sum = 0;\n    for(int i = 0; i < nums.size(); i++)\n    \
    \    sum += nums[i];\n    std::vector<long> sorted_nums(nums.size());\n    std::iota(sorted_nums.begin(),\
    \ sorted_nums.end(), 1);\n    std::vector<long>::iterator it;\n    long current_sum\
    \ = 0;\n    for(it = sorted_nums.begin(); it != sorted_nums.end(); it++) {\n \
    \       current_sum += *it;\n        if(current_sum > sum)\n            std::iter_swap(it,\
    \ --it);\n    }\n    return sorted_nums;", "  vector<long> sorted(nums.size());\n\
    \  for (auto i = 0; i < nums.size(); ++i) {\n    int sum_digits = 0;\n    for\
    \ (auto j = 0; j < nums[i]; ++j) {\n      sum_digits += nums[i] - '0' + j;\n \
    \   }\n    sorted[i] = sum_digits;\n  }\n  std::sort(sorted.begin(), sorted.end());\n\
    \  return sorted;", "    // Your code here\n    std::sort(nums.begin(), nums.end(),\
    \ [](long a, long b) {\n        return std::abs(a) > std::abs(b);\n    });\n \
    \   return nums;", "    // Write your code here\n    \n    // return nums;\n \
    \   \n    long long sum = 0;\n    int start = 0;\n    int end = nums.size()-1;\n\
    \    while(start <= end) {\n        sum = sum + nums[start];\n        if(sum <\
    \ 0)\n            sum = (sum*(-1));\n        sum = (sum*10);\n        if(sum >\
    \ nums[end])\n            sum = sum - (nums[end]*10);\n        \n        while(sum\
    \ > nums[end]) {\n            sum = (sum-(nums[end]*10));\n            end--;\n\
    \        }\n        \n        while(sum < nums[start]) {\n            sum = sum\
    \ + (nums[start]*10);\n            start++;\n        }\n    }\n    return nums;",
  "    auto n = nums.size();\n    if (n == 0) {\n        return nums;\n    }\n   \
    \ std::vector<std::pair<long, long>> numPairs;\n    for (int i = 0; i < n; ++i)\
    \ {\n        int sum = 0;\n        for (int j = 0; j < n; ++j) {\n           \
    \ sum += nums[j];\n        }\n        numPairs.push_back(std::make_pair(sum, static_cast<long>(i)));\n\
    \    }\n    auto it = std::min_element(numPairs.begin(), numPairs.end());\n  \
    \  if (it->first == 0) {\n        numPairs.erase(it);\n        it = std::min_element(numPairs.begin(),\
    \ numPairs.end());\n    }\n    std::stable_sort(numPairs.begin(), numPairs.end(),\n\
    \            [](auto const &a, auto const &b) { return a.first > b.first; });\n\
    \    std::vector<long> ans;\n    for (auto const &numPair : numPairs) {\n    \
    \    ans.push_back(nums[numPair.second]);\n    }\n    return ans;", "    // Write\
    \ your code here\n    // std::sort(nums.begin(), nums.end());\n    return nums;"]
stop_tokens:
- "\n}"
