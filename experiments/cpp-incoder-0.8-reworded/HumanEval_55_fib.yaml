name: HumanEval_55_fib
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return n-th Fibonacci number.\n\
  // >>> fib((10))\n// (55)\n// >>> fib((1))\n// (1)\n// >>> fib((8))\n// (21)\nlong\
  \ fib(long n) {\n"
tests: "}\nint main() {\n    auto candidate = fib;\n    assert(candidate((10)) ==\
  \ (55));\n    assert(candidate((1)) == (1));\n    assert(candidate((8)) == (21));\n\
  \    assert(candidate((11)) == (89));\n    assert(candidate((12)) == (144));\n}\n"
completions: ["    long result = 0;\n    // Base case.\n    if (n <= 2)\n        return\
    \ n;\n    // Recursive case.\n    result =  fib(n-1) + fib(n-2);\n    return result;",
  "\tif (n < 2)\n\t\treturn n;\n\treturn fib(n-1) + fib(n-2);", "    if (n <= 1) {\n\
    \        return n;\n    } else {\n        return fib(n-1) + fib(n-2);\n    }",
  "    if(n <= 1) {\n        return n;\n    }\n    else {\n        return fib(n -\
    \ 1) + fib(n - 2);\n    }", "  assert(n > 0);\n  if (n == 1)\n    return 1;\n\
    \  return fib(n - 2) + fib(n - 1);", "    // Write your code here.\n    int a\
    \ = 0;\n    int b = 0;\n    long f = 0;\n    if (n <= 1) {\n        return n;\n\
    \    } else {\n        while (n > 1) {\n            int temp = n;\n          \
    \  n = a + b;\n            a = b;\n            b = temp;\n            f = a +\
    \ b;\n        }\n        return f;\n    }", "    assert(n>0 && n<=20);\n    if(n\
    \ <= 2)\n        return n;\n    return fib(n-1) + fib(n-2);", "    if(n < 2) return\
    \ n;\n    long prev1 = 1;\n    long prev2 = 1;\n    for(int i = 3; i <= n; i++){\n\
    \        long curr = prev1 + prev2;\n        prev1 = prev2;\n        prev2 = curr;\n\
    \    }\n    return prev1;", "   assert(n >= 0);\n   long prev1 = 0, prev2 = 1;\n\
    \   for (long i = 0; i < n; ++i) {\n       long curr = prev1 + prev2;\n      \
    \ prev1 = prev2;\n       prev2 = curr;\n   }\n   return prev2;", "  // Write your\
    \ code here.\n  if(n==0) return 0;\n  if(n==1) return 1;\n  if(fib(n-1) < fib(n-2))\n\
    \    return fib(n-1);\n  else\n    return fib(n-2);", "    if (n == 0) return\
    \ 0;\n    if (n == 1) return 1;\n    return fib(n-1) + fib(n-2);", "    if(n <=\
    \ 1) return n;\n    else return fib(n - 1) + fib(n - 2);", "    if (n==0) {\n\
    \        return 0;\n    }\n    if (n==1) {\n        return 1;\n    }\n    return\
    \ fib(n-1) + fib(n-2);", "  if (n == 0) return 0;\n  if (n == 1) return 1;\n \
    \ return fib(n - 1) + fib(n - 2);", "  if (n <= 1) return n;\n  return fib(n -\
    \ 1) + fib(n - 2);", "\tif(n<=1)\n\t\treturn n;\n\telse\n\t\treturn fib(n-1)+fib(n-2);",
  "  if (n <= 1)\n    return 1;\n  else\n    return fib(n - 1) + fib(n - 2);", " \
    \   // assert 0<=n<=20\n    if (n<2)\n        return 1;\n    if (n==2)\n     \
    \   return 2;\n    long fib1=fib(n-1);\n    long fib2=fib(n-2);\n    return fib1+fib2;",
  "    if (n <= 1) {\n        return n;\n    }\n\n    return fib(n-1) + fib(n-2);",
  "    long prev = 0;\n    long curr = 1;\n    long next;\n    for(int i=1; i<=n;\
    \ i++){\n        next = curr + prev;\n        prev = curr;\n        curr = next;\n\
    \    }\n    return prev;", "    // write your code here\n    long a = 1;\n   \
    \ long b = 1;\n    for(long i = 2; i < n; i++) {\n        long c = a + b;\n  \
    \      a = b;\n        b = c;\n    }\n    return b;", "    // assert(n > 0);\n\
    \    if (n == 0 || n == 1) return n;\n    if (n >= 2) return fib(n - 1) + fib(n\
    \ - 2);\n    return -1;", "    long f1 = 0, f2 = 1, fib_number;\n    // To store\
    \ Fibonacci number.\n    long fib[100];\n    // To store previous Fibonacci numbers.\n\
    \    long prev[100];\n    // To store last two Fibonacci numbers.\n    long last\
    \ = 0, prev_last = 0;\n    // To store position of Fibonacci number in array.\n\
    \    long position = 0;\n    // To store position of Fibonacci number in array.\n\
    \    long pos = 0;\n    // To store position of last two Fibonacci numbers.\n\
    \    long last_pos = 0;\n    // To store position of last two Fibonacci numbers.\n\
    \    long last_pos = 0;\n    // To store position of current Fibonacci number\
    \ in array.\n    long pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of last two Fibonacci\
    \ numbers.\n    long last_pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of current Fibonacci\
    \ number in array.\n    long pos = 0;\n    // To store position of last two ",
  "    long a = 1, b = 1, c;\n    for (long i = 1; i <= n; i++)\n    {\n        c\
    \ = a + b;\n        a = b;\n        b = c;\n    }\n    return c;", "  assert(n\
    \ >= 0);\n  long res = 1;\n  long prev_res = 0;\n  for (long i = 2; i < n; i++)\
    \ {\n    prev_res = res;\n    res = res + prev_res;\n  }\n  return res;", "\t\
    if (n == 0 || n == 1)\n\t\treturn n;\n\treturn fib(n-1) + fib(n-2);", "    if\
    \ (n < 2) return n;\n    return fib(n - 1) + fib(n - 2);", "  if (n == 0 || n\
    \ == 1) {\n    return n;\n  }\n  long first = 0, second = 1, next;\n  for (int\
    \ i = 2; i <= n; i++) {\n    next = first + second;\n    first = second;\n   \
    \ second = next;\n  }\n  return next;", "    if (n <= 1)\n        return n;\n\
    \    long previous = 0;\n    long current = 1;\n    for (long i = 2; i <= n; i++)\
    \ {\n        long next = previous + current;\n        previous = current;\n  \
    \      current = next;\n    }\n    return current;", "    if(n==0 || n==1)\n \
    \       return 1;\n    long ret = fib(n-1) + fib(n-2);\n    return ret;", "  assert(n\
    \ > 0);\n  if (n <= 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);", " \
    \   assert(n >= 0);\n    if (n <= 1)\n        return n;\n    return fib(n - 1)\
    \ + fib(n - 2);", "  assert(n >= 0);\n  if (n == 0) return 0;\n  if (n == 1) return\
    \ 1;\n  return fib(n-1) + fib(n-2);", "    // assert(n >= 0 && n <= 10 ** 9);\n\
    \    if (n < 2) {\n        return 1;\n    }\n    return fib(n - 2) + fib(n - 1);",
  "    long f[2]={1,1};\n    for (long i=2; i<=n; i++)\n        f[i]=f[i-1]+f[i-2];\n\
    \    return f[n];", "  // assert(n > 0) && assert(n < 100)\n  if (n < 2) {\n \
    \   return n;\n  }\n  if (n == 1) {\n    return n;\n  }\n  return fib(n - 1) +\
    \ fib(n - 2);", "  assert((n >= 0) && (n <= INT_MAX));\n  long long n1;\n  long\
    \ long n2;\n  if (n <= 1) {\n    return n;\n  }\n  else {\n    n1 = fib((n - 2));\n\
    \    n2 = fib((n - 1));\n    return n1 + n2;\n  }", "    if (n <= 1)\n       \
    \ return n;\n    else\n        return fib(n - 1) + fib(n - 2);", "    if(n<2)\n\
    \treturn n;\n    return fib(n-1)+fib(n-2);", "    if (n <= 1)\n        return\
    \ n;\n    return fib(n - 1) + fib(n - 2);", "    long a = 0, b = 1, c = 1;\n \
    \   \n    for (long i = 2; i <= n; i++) {\n        c = (a + b) % 10;\n       \
    \ a = b;\n        b = c;\n    }\n    return c;", "    if (n == 1 || n == 2) return\
    \ 1;\n    return fib(n-1) + fib(n-2);", "    if (n <= 1)\n        return n;\n\
    \    long a = 0,\n        b = 1;\n    for (int i = 0; i <= n; i++) {\n       \
    \ long temp = a + b;\n        a = b;\n        b = temp;\n    }\n    return a;",
  "    if(n<2) return 1;\n    long temp=fib(floor(n/2));\n    return temp+fib(floor((n-1)/2));",
  "  assert(n >= 0);\n  if (n < 2) {\n    return n;\n  }\n  return fib(n-2) + fib(n-1);",
  "    if(n==1 || n==0){\n        return 1;\n    }\n    if(n<2){\n        return 1;\n\
    \    }\n    return fib(n - 2) + fib(n - 1);", "    // assert(n>=0 && n<100);\n\
    \    if(n<=1){\n        return 1;\n    }\n    long a=1, b=1;\n    for(long i=2;i<=n;i++){\n\
    \        long c=a+b;\n        a=b;\n        b=c;\n    }\n    return b;", "   \
    \ if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "    assert(n\
    \ >= 0 && n <= 1);\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 1;\n    return fib(n - 1) + fib(n - 2);", "  if (n <= 1) return n;\n\
    \  return fib(n-2) + fib(n-1);", "    assert(n >= 1);\n    return n < 2 ? n :\
    \ fib(n-2) + fib(n-1);", "    assert(n>0);\n    if (n==1)\n        return 1;\n\
    \    if (n==2)\n        return 2;\n    return fib(n-1) + fib(n-2);", "    if (n\
    \ == 0 || n == 1)\n        return n;\n    long next = (fib(n - 1) + fib(n - 2));\n\
    \    return next;", "    // Check for negative number.\n    if (n < 0) {\n   \
    \     return -1;\n    }\n    // Return value if n is 0 or 1.\n    if (n == 0 ||\
    \ n == 1) {\n        return n;\n    }\n    // Create two temporary variables.\n\
    \    long a = 1, b = 1;\n    // Iterate through all numbers between 1 and n (excluding\
    \ n).\n    for (long i = 2; i <= n; i++) {\n        // Add current number to the\
    \ temporary variable.\n        long c = a + b;\n        // Set temporary variable\
    \ to the current number.\n        a = b;\n        // Set current number to the\
    \ temporary variable.\n        b = c;\n    }\n    // Return the value of b.\n\
    \    return b;", "    long f1=0, f2=1;\n    long temp;\n    for(long i=2; i<n;\
    \ i++)\n    {\n        temp = f2;\n        f2 = f1 + f2;\n        f1 = temp;\n\
    \    }\n    return f1;", "  if (n == 0)\n    return 1;\n  else if (n == 1)\n \
    \   return 1;\n  return fib(n - 1) + fib(n - 2);", "  // Assert n is in the range\
    \ [0, 100].\n  assert(n >= 0 && n < 100);\n  if (n == 0 || n == 1) {\n    return\
    \ n;\n  }\n  // Recursion\n  long fib_1st = fib(n-1) + fib(n-2);\n  // Memoization\n\
    \  long long cache[n*2];\n  cache[n*2] = fib_1st;\n  cache[n*2+1] = fib_1st;\n\
    \  // Return the result from the memoization cache.\n  if (n < sizeof(cache)/sizeof(cache[0]))\
    \ {\n    return cache[n];\n  }\n  // Recursion without memoization.\n  long fib_2nd\
    \ = fib(n-1) + fib(n-2);\n  return fib_2nd;", "  if (n <= 0) return 0;\n  if (n\
    \ == 1) return 1;\n  if (n == 2) return 1;\n  return fib(n - 1) + fib(n - 2);",
  "\tassert (n>0);\n\tif (n==1) {\n\t\treturn 1;\n\t} else if (n==2) {\n\t\treturn\
    \ 2;\n\t} else if (n==3) {\n\t\treturn 3;\n\t} else {\n\t\treturn fib(n-1) + fib(n-2);\n\
    \t}", "    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);",
  "    // write your code here\n    if(n==0 || n==1){\n        return n;\n    }\n\
    \    if(fib(n-1)==0 || fib(n-1)==1){\n        return fib(n-1);\n    }\n    long\
    \ ans=0;\n    for(long i=0;i<n;i++){\n        ans=fib(n-i)+ans;\n    }\n    return\
    \ ans;", "    assert(n >= 0 && n < 20);\n    if(n == 0) return 0;\n    if(n ==\
    \ 1) return 1;\n    return fib(n - 1) + fib(n - 2);", "    if (n < 2)\n      \
    \  return n;\n    return fib(n - 1) + fib(n - 2);", "  if (n == 1 || n == 2)\n\
    \    return n;\n  return fib(n-1) + fib(n-2);", "    assert(n >= 1);\n    if (n\
    \ == 1)\n        return 1;\n    if (n == 2)\n        return 1;\n    return fib(n-1)\
    \ + fib(n-2);", "    long long int a = 0;\n    long long int b = 1;\n    long\
    \ long int temp;\n\n    for(long long int i = 0; i < n; i++) {\n        temp =\
    \ a;\n        a = b;\n        b = temp + b;\n    }\n    return b;", "    // Write\
    \ your code here.\n\tlong a=1, b=1, r;\n\twhile (n>2) {\n\t\tr = a+b;\n\t\ta =\
    \ b;\n\t\tb = r;\n\t\tn-=2;\n\t}\n\tif (n>0)\n\t\treturn r;\n\telse\n\t\treturn\
    \ 1;", "    long prev = 0;\n    long curr = 1;\n    long next = curr;\n    if\
    \ (n <= 1) {\n        return n;\n    }\n    if (n >= (long)sqrt(n)) {\n      \
    \  curr = curr;\n        while (curr < n) {\n            next = curr;\n      \
    \      curr = prev + next;\n        }\n    } else {\n        curr = curr;\n  \
    \      while (next < n) {\n            next = curr;\n            curr = prev +\
    \ next;\n        }\n    }\n    return curr;", "    if (n == 0)\n        return\
    \ 0;\n    if (n == 1)\n        return 1;\n    return fib(n - 2) + fib(n - 1);",
  "    long a = 0,\n        b = 1;\n    for (long i = 0; i < n; i++) {\n        long\
    \ c = a + b;\n        a = b;\n        b = c;\n    }\n    return b;", '    return
    n < 2 ? n : fib(n-2) + fib(n-1);', "    if(n<2)\n        return n;\n    return\
    \ fib(n-1) + fib(n-2);", "  assert(n > 0);\n  if (n <= 1) return n;\n  return\
    \ fib(n-1) + fib(n-2);", "    if (n <= 1)\n        return 1;\n    return fib(n-1)\
    \ + fib(n-2);", "    if (n < 2)\n        return n;\n    return fib(n - 1) + fib(n\
    \ - 2);", "    // Write your code here\n    if(n == 0)\n        return 0;\n  \
    \  if(n == 1)\n        return 1;\n    return fib(n-1) + fib(n-2);", "  // Declare\
    \ fibonacci array. \n  // It has n elements\n  long arr[100]; \n  arr[0] = 0;\
    \ \n  arr[1] = 1;\n\n  // To find Fibonacci number i for n-1\n  // we need to\
    \ find previous Fibonacci number for i-1\n  // So in total we go 2*(n-1) times\n\
    \  for(long i = 2; i <= n; i++) {\n    arr[i] = arr[i - 1] + arr[i - 2];\n  }\n\
    \  // Return n-th Fibonacci number\n  return arr[n];", "\tif (n == 0)\n\t\treturn\
    \ 0;\n\tif (n == 1)\n\t\treturn 1;\n\tlong fib1 = fib(n - 1);\n\tlong fib2 = fib(n\
    \ - 2);\n\treturn fib1 + fib2;", "\tassert(n >= 0);\n\tif (n == 0 || n == 1)\n\
    \t\treturn n;\n\treturn fib(n - 1) + fib(n - 2);", "    assert(n >= 0);\n    if\
    \ (n < 2) {\n        return n;\n    }\n    long a = 1;\n    long b = 1;\n    long\
    \ f = 0;\n    for (long i = 0; i < n - 1; ++i) {\n        f += a;\n        double\
    \ x = static_cast<double>(f);\n        a = b;\n        b = x;\n    }\n    return\
    \ f;", "  if (n <= 1)\n    return n;\n  return fib(n - 1) + fib(n - 2);", "  //\
    \ Initializing first two numbers and saving the result in their two variables.\n\
    \  long long a = 0, b = 1;\n  // Checking if the given input is valid or not.\n\
    \  assert(n > 0);\n  // Traverse the loop in such a way that every number gets\
    \ stored in variable \"i\" until value of n is reached.\n  for (long long i =\
    \ 2; i <= n; i++) {\n    // Save next two numbers in their variables.\n    long\
    \ long tmp = a;\n    a = b;\n    b = tmp + b;\n  }\n  // Return the result.\n\
    \  return b;", "    assert(n >= 0);\n    if (n == 1 || n == 2)\n        return\
    \ 1;\n    return fib(n-1) + fib(n-2);", "  if (n < 2) return n;\n  return fib(n-2)\
    \ + fib(n-1);", "\tif(n<=1)\n\t\treturn n;\n\telse\n\t\treturn fib(n-1)+fib(n-2);",
  "    assert(n >= 0);\n    if (n == 0)\n        return 0;\n    if (n == 1)\n    \
    \    return 1;\n    return fib(n - 1) + fib(n - 2);", "    if (n<=1)\n       \
    \ return 1;\n    return fib(n-2) + fib(n-1);", "    if (n < 2) return n;\n   \
    \ return fib(n-1) + fib(n-2);", "    if (n < 2)\n        return 1;\n    long fib_of_n1\
    \ = fib(n - 1);\n    long fib_of_n2 = fib(n - 2);\n    return fib_of_n2 + fib_of_n1;",
  "    long f0 = 0, f1 = 1;\n    // The fibonacci number is calculated with the recursive\
    \ formula:\n    // f(n) = f0 + f(n-1).\n    for (int i = 0; i <= n; ++i) {\n \
    \       f0 = f1;\n        f1 = f0 + f1;\n    }\n    return f0;", "    if(n<2)return\
    \ 1;\n    return fib(n-1)+fib(n-2);", "\tif(n<1) return 0;\n\tif(n==1) return\
    \ 1;\n\tlong prev=fib(n-1)+1;\n\treturn prev;", "  if (n < 2) {\n    return 1;\n\
    \  }\n  long first = 1;\n  long second = 1;\n  for (long i = 2; i <= n; i++) {\n\
    \    long newFirst = first + second;\n    first = second;\n    second = newFirst;\n\
    \  }\n  return second;", "  if (n < 2)\n    return n;\n  return fib(n-1) + fib(n-2);",
  "    if(n<=1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "    if\
    \ (n == 0)\n        return 0;\n    if (n == 1)\n        return 1;\n    return\
    \ fib(n - 2) + fib(n - 1);", "    if (n == 0 || n == 1)\n        return n;\n \
    \   return fib(n-1) + fib(n-2);", "    assert(n >= 0);\n    if (n == 0 || n ==\
    \ 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "  if (n == 0 ||\
    \ n == 1)\n    return n;\n\n  long prev = (long)fib(n-1);\n  long curr = prev\
    \ + prev;\n  return curr;", "    if (n <= 0) return 0;\n    else if (n == 1) return\
    \ 1;\n    else return fib(n-1) + fib(n-2);", "    if (n == 1)\n        return\
    \ 1;\n    return fib(n-1) + fib(n-2);", "  if (n <= 1) return n;\n  long p0 =\
    \ fib(n/2);\n  long p1 = fib(n/2);\n  long sum = p0 + p1;\n  return sum;", " \
    \   if (n <= 0) return 0;\n    long ret = 0;\n    long tmp = 0;\n    // If n is\
    \ even,\n    if (n % 2 == 0) {\n        ret = fib(n-2) + fib(n-1);\n    } else\
    \ {\n        // If n is odd\n        // Get 1st, 2nd, and 3rd Fibonacci numbers\
    \ to calculate\n        tmp = fib(n-1) + fib(n-2);\n        // Get the Fibonacci\
    \ number whose sum is equal to n\n        ret = tmp + tmp;\n    }\n    return\
    \ ret;", "    int a,b,f;\n    if (n <= 1) return n;\n    a = 0;\n    b = 1;\n\
    \    f = 2;\n    while (f <= n) {\n        f = a+b;\n        a = b;\n        b\
    \ = f;\n    }\n    return b;", "    long f1=0, f2=1;\n    for(int i=0;i<n;i++){\n\
    \        long num=f1+ f2;\n        f1=f2;\n        f2=num;\n    }\n    return\
    \ f1;", "\tif(n<=0) return 0;\n\tif(n==1) return 1;\n\tlong res = fib(n - 1) +\
    \ fib(n - 2);\n\treturn res;", "   if (n <= 1)\n      return n;\n   long prev1\
    \ = 0, prev2 = 1;\n   while (1) {\n      if (n % 2 == 0)\n         return prev2\
    \ + prev1;\n      else\n         return prev1;\n   }", "    if (n <= 2) return\
    \ 1;\n    return fib(n-2) + fib(n-1);", "    if(n == 0)\n        return 0;\n \
    \   if(n == 1)\n        return 1;\n    long res = fib(n - 1) + fib(n - 2);\n \
    \   return res;", "\tif (n < 2) {\n\t\treturn n;\n\t}\n\treturn fib(n-2) + fib(n-1);",
  "    if (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);", "    long a=1,\
    \ b=2, c=0;\n    while (n>0) {\n        c = a+b;\n        a = b;\n        b =\
    \ c;\n        n--;\n    }\n    return a;", "    if (n <= 1) return 1;\n    return\
    \ fib(n - 1) + fib(n - 2);", "    if (n <= 1)\n        return n;\n    return fib(n\
    \ - 1) + fib(n - 2);", "    long a = 0;\n    long b = 1;\n    long c = a + b;\n\
    \    for(long i = 1; i<n; i++){\n        c = a + b;\n        a = b;\n        b\
    \ = c;\n    }\n    return c;", "  assert(n > 0);\n  long a = 1;\n  long b = 1;\n\
    \  long c = a;\n  if (n <= 1) return n;\n  for (int i = 1; i <= n; i++) {\n  \
    \  c = a + b;\n    a = b;\n    b = c;\n  }\n  return b;", "  if (n <= 2) {\n \
    \   return n;\n  } else {\n    return fib((n - 2)) + fib((n - 1));\n  }", "  \
    \  assert(n >= 0);\n    if (n <= 1)\n        return n;\n    return fib((n - 1)\
    \ + 1) + fib((n - 2));", "\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\t\
    return fib(n - 1) + fib(n - 2);", "    if (n<2)\n        return n;\n    return\
    \ fib(n-1)+fib(n-2);", "\tlong ret = 1;\n\tlong prev = 0;\n\twhile (n > 2) {\n\
    \t\tret = (ret + (prev + prev)) / 2;\n\t\tprev = ret;\n\t\t--n;\n\t}\n\treturn\
    \ ret;", "    if (n == 0) {\n        return 0;\n    }\n    if (n == 1) {\n   \
    \     return 1;\n    }\n    return fib(n - 1) + fib(n - 2);", "    long prev =\
    \ 0;\n    long curr = 1;\n    for (int i = 0; i < n; i++) {\n        prev = curr;\n\
    \        curr = curr + prev;\n    }\n    return curr;", "  if (n <= 1) return\
    \ n;\n  return fib(n-1) + fib(n-2);", "    assert(n>0 && n<64);\n    long fib_nth_number\
    \ = 1, fib_nth_number1 = 1, fib_nth_number2 = 1;\n    for (long i = 0; i < n;\
    \ i++) {\n        long temp;\n        temp = fib_nth_number;\n        fib_nth_number\
    \ = fib_nth_number1;\n        fib_nth_number1 = fib_nth_number2;\n        fib_nth_number2\
    \ = temp;\n    }\n    return fib_nth_number;", "  if (n <= 1) return n;\n  long\
    \ a = 0, b = 1, c = 1;\n  while (c <= n) {\n    c++;\n    b += a;\n    a = b;\n\
    \  }\n  return b;", "   if (n <= 1) return n;\n   long prev = 0, curr = 1, temp;\n\
    \   for (long i = 2; i < n; ++i) {\n      temp = prev + curr;\n      prev = curr;\n\
    \      curr = temp;\n   }\n   return curr;", "  // assert(n >= 0); // not required\
    \ but easier to test with assert()\n  if (n == 0 || n == 1)\n    return n;\n \
    \ return fib(n-1) + fib(n-2);", "    long ret = 1;\n    long c = 1;\n    for (int\
    \ i = 1; i < n; i++) {\n        ret = c + ret;\n        c = c - ret;\n    }\n\
    \    return ret;", "    long a = 0, b = 1;\n    long c;\n\n    for (int i = 0;\
    \ i < (n + 1); i++) {\n        long c = a + b;\n        a = b;\n        b = c;\n\
    \    }\n    return b;", "  assert(n >= 0);\n  if (n == 0 || n == 1) {\n    return\
    \ 1;\n  }\n  return fib(n - 1) + fib(n - 2);", "    if (n <= 1) return 1;\n  \
    \  return fib(n - 1) + fib(n - 2);", "  if (n < 2) {\n    return n;\n  }\n  long\
    \ ans = fib(n - 1) + fib(n - 2);\n  return ans;", "    if (n == 0) return 0;\n\
    \    if (n == 1) return 1;\n    long result = 0;\n    long temp = fib(n-1) + fib(n-2);\n\
    \    result += temp;\n    return result;", "    if (n <= 1) return n;\n    else\
    \ return fib(n - 1) + fib(n - 2);", "    assert(n >= 0);\n    if (n < 2) {\n \
    \       return n;\n    } else {\n        return fib((n - 1) + 1) + fib((n - 2));\n\
    \    }", "    if(n == 0) return 0;\n    if(n == 1) return 1;\n    return fib(n-1)\
    \ + fib(n-2);", "\tif (n == 0 || n == 1)\n\t\treturn n;\n\treturn fib(n - 2) +\
    \ fib(n - 1);", "    if(n<0)\n        return 0;\n    if(n==0)\n        return\
    \ 1;\n    if(n==1)\n        return 2;\n    long a,b;\n    a=fib(n-2);\n    b=fib(n-1);\n\
    \    return a+b;", "    long f[] = { 1, 1, 2 };\n    if (n <= 1) return 1;\n \
    \   for (long i = 2; i <= n; i++) {\n        long t = f[i-1];\n        f[i-1]\
    \ = f[i-2];\n        f[i-2] = t;\n    }\n    return f[n-1];", "\tassert(n >= 0);\n\
    \tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn fib(n-1) + fib(n-2);",
  "\tif (n <= 2)\n\t\treturn n;\n\treturn fib(n - 2) + fib(n - 1);", "\tassert(n >=\
    \ 1);\n\tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\treturn fib(n - 2) +\
    \ fib(n - 1);", "    if (n <= 1)\n        return n;\n    return fib(n - 1) + fib(n\
    \ - 2);", "    assert(n > 0);\n    long a = 0, b = 1;\n    long sum = a + b;\n\
    \    for (long i = 0; i < n; i++) {\n        a = b;\n        b = sum;\n      \
    \  sum = a + b;\n    }\n    return sum;", "  if (n <= 1)\n    return n;\n  return\
    \ fib(n - 1) + fib(n - 2);", "\tassert(n > 0);\n\tif (n == 0)\n\t\treturn 0;\n\
    \tif (n == 1)\n\t\treturn 1;\n\tlong a1 = fib(n-1);\n\tlong a2 = fib(n-2);\n\t\
    return a1 + a2;", "    \n    if (n == 1 || n == 2)\n        return 1;\n    \n\
    \    return fib(n-1) + fib(n-2);", "\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n-1)\
    \ + fib(n-2);", "    long fibonacci = 0, nextNumber = 0;\n    if (n <= 1) {\n\
    \        return n;\n    }\n    for (long i = 2; i <= n; i++) {\n        nextNumber\
    \ = fibonacci + i;\n        fibonacci = nextNumber;\n    }\n    return fibonacci;",
  "    if (n <= 2)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "  if(n\
    \ == 0 || n == 1)\n    return n;\n  else\n    return fib(n-1) + fib(n-2);", " \
    \ if (n == 0) {\n    return 0L;\n  }\n  if (n == 1) {\n    return 1L;\n  }\n \
    \ if (n <= 2) {\n    return fib(n-1) + fib(n-2);\n  }\n  long res = fib(n - 2)\
    \ + fib(n - 1);\n  return res;", "    long f0 = 0, f1 = 1;\n    if (n <= 1) return\
    \ 1;\n    for (int i = 0; i < n - 1; i++) {\n        long temp = f0;\n       \
    \ f0 = f1;\n        f1 = temp + f1;\n    }\n    return f1;", "\tif (n <= 1)\n\t\
    \treturn n;\n\tlong a = 1;\n\tlong b = 1;\n\tfor (long i = 2; i <= n; i++)\n\t\
    {\n\t\tlong c = a + b;\n\t\ta = b;\n\t\tb = c;\n\t}\n\treturn b;", "    if (n\
    \ == 0 || n == 1) {\n        return n;\n    }\n    else {\n        long ret1 =\
    \ fib(n - 2);\n        long ret2 = fib(n - 1);\n        return (ret1 + ret2);\n\
    \    }", "    if (n == 0) return 0;\n    else if (n == 1) return 1;\n    else\
    \ {\n        assert(n >= 2);\n        return fib(n - 1) + fib(n - 2);\n    }",
  "    if (n == 0)\n        return 0;\n    else if (n == 1)\n        return 1;\n \
    \   return fib(n - 1) + fib(n - 2);", "   if (n <= 1)\n      return n;\n   return\
    \ fib(n-1) + fib(n-2);", "\tif (n <= 1) return n;\n\tlong a = fib((n - 1)) + fib((n\
    \ - 2));\n\treturn a;", "\tif (n <= 1) return n;\n\telse if (n == 2) return 1;\n\
    \telse\n\t\treturn fib(n - 1) + fib(n - 2);", "  if (n == 0 || n == 1)\n    return\
    \ n;\n  else\n    return fib(n - 1) + fib(n - 2);", "    // assert(n > 0);\n \
    \   // if (n == 0) return 1;\n    // return fib(n - 1) + fib(n - 2);\n    if (n\
    \ == 0) return 1;\n    if (n == 1) return 1;\n    return fib(n - 1) + fib(n -\
    \ 2);", "  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);",
  "\tif (n <= 0)\n\t\treturn 0;\n\telse if (n == 1)\n\t\treturn 1;\n\telse if (n ==\
    \ 2)\n\t\treturn 2;\n\telse if (n >= 3)\n\t\treturn fib(n - 1) + fib(n - 2);\n\
    \telse\n\t\treturn 0;", "    if (n == 0 || n == 1) {\n        return n;\n    }\
    \ else {\n        return fib(n-1) + fib(n-2);\n    }", "  // Declare a variable\
    \ to store sum.\n  long sum = 0;\n  // Check if n is 0 or 1.\n  if (n <= 1) return\
    \ n;\n  // Calculate sum of all previous two numbers.\n  while (n >= 2)\n    sum\
    \ += n;\n  // Store current n-th number.\n  sum += fib(n-2);\n  // Return result.\n\
    \  return sum;", "\tif (n == 1)\n\t\treturn 1;\n\telse if (n == 0)\n\t\treturn\
    \ 0;\n\telse {\n\t\tlong temp = fib(n-1);\n\t\treturn temp + temp;\n\t}", "\t\
    long prev, curr = 1, result = 1;\n\tfor (long i = 2; i <= n; i++) {\n\t\tprev\
    \ = curr;\n\t\tcurr += prev;\n\t}\n\treturn result;", "\tif (n < 2)\n\t\treturn\
    \ n;\n\treturn fib(n-2) + fib(n-1);", "    assert(n >= 0);\n    if (n == 0) return\
    \ 0;\n    if (n == 1) return 1;\n    if (n == 2) return 1;\n    long prev = 0,\
    \ curr = 1, next = 0;\n    long result = 0;\n    while (n-- > 0) {\n        next\
    \ = (curr + prev) % 10;\n        result = (curr * result + next) % 10;\n     \
    \   prev = curr;\n        curr = next;\n    }\n    return result;", "\tassert(n\
    \ > 0);\n\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n-1) + fib(n-2);", "    if\
    \ (n <= 1) return n;\n    return fib(n - 1) + fib(n - 2);", "\tif (n < 2) {\n\t\
    \treturn 1;\n\t} else if (n == 2) {\n\t\treturn 2;\n\t} else {\n\t\treturn fib(n\
    \ - 1) + fib(n - 2);\n\t}", "    long sum=0;\n    if(n==0)\n        sum=1;\n \
    \   else if(n==1)\n        sum=2;\n    else {\n        long first,second;\n  \
    \      first=fib(n-1);\n        second=fib(n-2);\n        sum=second+first;\n\
    \    }\n    return sum;", "    if(n<2) {\n        return n;\n    }\n    return\
    \ fib(n-2) + fib(n-1);", "  assert((n>0) && (n<=1000));\n  if (n<=1)\n    return\
    \ n;\n  else\n    return fib(n-1)+fib(n-2);", "    if(n<2)\n        return n;\n\
    \    return fib(n-2) + fib(n-1);", "    long a = 0, b = 1, c;\n    while (n >\
    \ 2) {\n        c = a + b;\n        a = b;\n        b = c;\n        n -= 1;\n\
    \    }\n    return a;", "\tassert(n >= 0);\n\tif (n == 0) return 0;\n\telse if\
    \ (n == 1) return 1;\n\telse return fib(n-1) + fib(n-2);", "    if (n <= 1) return\
    \ n;\n    long a = 1, b = 1;\n    while (a < n) {\n        long c = a + b;\n \
    \       a = b;\n        b = c;\n    }\n    return a;", "    long x;\n    long\
    \ ret = 1;\n    if (n <= 1) return n;\n    x = 0;\n    while (x<n) {\n       \
    \ ret = ret + x;\n        x = x + 1;\n    }\n    return ret;", "    assert(n >=\
    \ 0);\n    if (n <= 1) return n;\n    return fib(n-1) + fib(n-2);", "\tif (n <=\
    \ 1)\n\t\treturn n;\n\treturn fib((n - 1) + fib(n - 2));", "    if (n == 0 ||\
    \ n == 1) return n;\n    return fib(n - 1) + fib(n - 2);", "\tassert(n >= 0);\n\
    \tif (n == 0) return 0;\n\tif (n == 1) return 1;\n\tlong a = fib(n-1);\n\tlong\
    \ b = fib(n-2);\n\treturn a + b;", "\tif (n<2) return n-1;\n\treturn fib(n-1)+fib(n-2);",
  "    long fib_sum = 0;\n    if (n <= 2) {\n        return n;\n    }\n    fib_sum\
    \ += fib(n - 1);\n    fib_sum += fib(n - 2);\n    return fib_sum;", "    long\
    \ f[100], a, b, i, ans;\n    a = 0;\n    b = 1;\n    for (i = 1; i <= n; ++i)\
    \ {\n        f[i] = b;\n        ++a;\n        b = a + b;\n    }\n    i = n - 1;\n\
    \    while (i > 0) {\n        f[i] = b;\n        --i;\n        b = a + b;\n  \
    \  }\n    return f[n];", "  if (n <= 1) return n;\n  return fib(n - 1) + fib(n\
    \ - 2);", "    if(n == 0 || n == 1)\n        return n;\n    return fib(n-1) +\
    \ fib(n-2);", "\tif (n < 2) return n;\n\treturn fib(n - 1) + fib(n - 2);", " \
    \   if (n == 0) {\n        return 0;\n    }\n    else if(n == 1){\n        return\
    \ 1;\n    }\n    else {\n        // Calculate Fibonacci(n-1).\n        long f1\
    \ = fib(n-1); // Fibonacci(n - 1)\n        // Calculate Fibonacci(n-2).\n    \
    \    long f2 = fib(n-2);\n        // Add two Fibonacci numbers to get result.\n\
    \        return f1 + f2;\n    }", "\tif (n == 1)\n\t\treturn 1;\n\tlong a = 1;\n\
    \tlong b = 1;\n\tfor (int i = 0; i < n - 1; i++)\n\t\ta = a + b;\n\t\tb = a;\n\
    \treturn b;", '    return (n == 1) ? 1 : fib(n-1) + fib(n-2);', "    if(n == 0\
    \ || n == 1)\n        return n;\n    return fib(n - 1) + fib(n - 2);", "    int\
    \ a, d, f;\n    if (n <= 1)\n        return n;\n    a = 1;\n    d = 1;\n    f\
    \ = 1;\n    while (f <= n) {\n        f = a + d;\n        a = d;\n        d =\
    \ f;\n    }\n    return f;", "\tif (n <= 1)\n\t\treturn n;\n\treturn fib(n - 1)\
    \ + fib(n - 2);", "  if (n <= 0)\n    return 0;\n  if (n == 1)\n    return 1;\n\
    \  if (n == 2)\n    return 1;\n  long f0 = fib(n-1);\n  long f1 = fib(n-2);\n\
    \  return f1 + f0;", "    long long int fib_array[n + 1] = {0};\n    fib_array[0]\
    \ = 0;\n    fib_array[1] = 1;\n    for (long long int i = 2; i <= n; i++){\n \
    \       fib_array[i] = fib_array[i - 1] + fib_array[i - 2];\n    }\n    return\
    \ fib_array[n];"]
stop_tokens:
- "\n}"
