language: cpp
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for(auto it : l)\n        sum += it;\n    if(sum < 0)\n        sum\
    \ += std::abs(sum);\n    if(sum > 0)\n        sum += 1;\n    return l.size() ==\
    \ 2 && std::find(l.begin(), l.end(), sum) == l.end();\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6xvysevv: /tmp/tmp6xvysevv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code here\n\
    \    long sum = 0;\n    for (auto it=l.begin(); it!=l.end(); ++it){\n        if(*it<0)\n\
    \        {\n            std::cout << \"it < 0 \" << *it <<std::endl;\n       \
    \     return false;\n        }\n        sum += *it;\n    }\n    if (sum == 0)\n\
    \    {\n        std::cout << \"sum equals 0 \" << sum <<std::endl;\n        return\
    \ false;\n    }\n    long two=1;\n    for (auto it=l.begin(); it!=l.end(); ++it){\n\
    \        long temp = sum - two;\n        if (temp == 0)\n            return true;\n\
    \        sum += temp;\n        two += temp;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvbcqtfcn: /tmp/tmpvbcqtfcn.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: 'it < 0 -2

    it < 0 -5

    '
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    return std::adjacent_find(l.begin(),\
    \ l.end()) == l.end();\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7bley2wq: /tmp/tmp7bley2wq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    bool ret = true; // If this returns false, then none of the elements of the\
    \ vector sum to zero\n    for (size_t i = 0; i < n; i++) {\n        for (size_t\
    \ j = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) {\n            \
    \    ret = false;\n                break;\n            }\n        }\n    }\n \
    \   return ret;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgxzo24bq: /tmp/tmpgxzo24bq.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long ans =\
    \ 0;\n    for (long long i = 0; i < l.size(); i++) {\n        ans += l[i];\n \
    \   }\n    if (ans == 0) {\n        return false;\n    } else {\n        return\
    \ true;\n    }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoqoua9o4: /tmp/tmpoqoua9o4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code goes\
    \ here\n  bool is_sum_to_zero = true;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    int sum = 0;\n    for (int j = 0; j < i; j++) {\n      sum += l[j];\n   \
    \ }\n    if (sum == 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp15ojfte0: /tmp/tmp15ojfte0.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // write your code\
    \ here\n  int n = l.size();\n  for (int i = 0; i < n; i++) {\n    int k = i;\n\
    \    long s = 0;\n    for (int j = i + 1; j < n; j++) {\n      if (l[j] > l[k])\n\
    \        s += l[j] - l[k];\n      else\n        s += l[k] - l[j];\n      k = j;\n\
    \    }\n    if (s == 0)\n      return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmz8i9wsz: /tmp/tmpmz8i9wsz.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  for (long i = 0;\
    \ i < l.size(); i++) {\n    for (long j = i + 1; j < l.size(); j++) {\n      if\
    \ (l[i] + l[j] == 0) {\n        return true;\n      }\n    }\n  }\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011446
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here.\n    std::vector<bool> bv(l.size());\n    long long ans = 0;\n    long\
    \ long count = 0;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n    \
    \    if (it->first != 0) {\n            if (it->first != it->second) {\n     \
    \           std::cout << \"This shouldn't happen\" << std::endl;\n           \
    \     assert(0);\n            }\n            if (ans == 0) {\n               \
    \ ans = it->first;\n            }\n            count++;\n            bv[count]\
    \ = true;\n        }\n    }\n    long long max_count = 0;\n    long long max_val\
    \ = ans;\n    for (auto i = 0; i < l.size(); ++i) {\n        if ((bv[i] == true)\
    \ && (count == max_count)) {\n            return false;\n        }\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpoi8pk1ey.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpoi8pk1ey.cpp:22:17: error: request for member \u2018first\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   22\
    \ |         if (it->first != 0) {\n      |                 ^~~~~\n/tmp/tmpoi8pk1ey.cpp:23:21:\
    \ error: request for member \u2018first\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   23 |             if (it->first != it->second) {\n \
    \     |                     ^~~~~\n/tmp/tmpoi8pk1ey.cpp:23:34: error: request\
    \ for member \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   23 |             if (it->first != it->second) {\n \
    \     |                                  ^~~~~~\n/tmp/tmpoi8pk1ey.cpp:28:27: error:\
    \ request for member \u2018first\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   28 |                 ans = it->first;\n      |    \
    \                       ^~~~~\n"
  stdout: ''
  timestamp: 1660011447
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  std::set<long> s;\n  for (int i = 0; i < l.size(); ++i)\n    s[l[i]] += 1;\n\
    \  if (s.size() == 1) return false;\n  for (int i = 1; i < s.size(); ++i) {\n\
    \    if (s[i - 1] + s[i] != 0) return false;\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiwvf2xpu.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpiwvf2xpu.cpp:20:6: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::set<long int>\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019})\n   20 |     s[l[i]]\
    \ += 1;\n      |      ^\n/tmp/tmpiwvf2xpu.cpp:23:10: error: no match for \u2018\
    operator[]\u2019 (operand types are \u2018std::set<long int>\u2019 and \u2018\
    int\u2019)\n   23 |     if (s[i - 1] + s[i] != 0) return false;\n      |     \
    \     ^\n/tmp/tmpiwvf2xpu.cpp:23:21: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::set<long int>\u2019 and \u2018int\u2019)\n   23\
    \ |     if (s[i - 1] + s[i] != 0) return false;\n      |                     ^\n"
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long n = l.size();\n\
    \  long sum = 0;\n  for (long i = 0; i < n; i++) {\n    sum += l[i];\n  }\n\n\
    \  // if there are any pairs that sum to zero, we have found two zeros:\n  if\
    \ (sum == 0) return true;\n  if (sum > 0) return false;\n  // if there are any\
    \ negative numbers, we have found two negative numbers:\n  for (long i = 0; i\
    \ < n; i++) {\n    if (l[i] < 0) return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0lykfbby: /tmp/tmp0lykfbby.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::pair<long, long>\
    \ p1, p2;\n  long s = 0;\n  for (auto& ele : l) {\n    s += ele;\n    p1.first\
    \ = ele;\n    p2.first = s;\n    if (s == 0) return false;\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp723z9fkg: /tmp/tmp723z9fkg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int count = 0;\n\
    \  for (int i = 0; i < l.size(); i++) {\n    for (int j = 0; j < l.size(); j++)\
    \ {\n      if (l[i] + l[j] == 0) {\n        count++;\n      }\n    }\n  }\n\n\
    \  if (l.size() == count) {\n    return false;\n  } else {\n    return true;\n\
    \  }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpht0j8r97: /tmp/tmpht0j8r97.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // O(n^2) time\
    \ and O(n) space solution\n    int n = l.size();\n    for (int i = 1; i < n; ++i)\
    \ {\n        for (int j = i + 1; j < n; ++j) {\n            if (l[i] + l[j] ==\
    \ 0) {\n                return true;\n            }\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfyhy3zut: /tmp/tmpfyhy3zut.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  long s = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n;\
    \ j++) {\n      s = s + l[i] + l[j];\n    }\n    if (s == 0) return false;\n \
    \ }\n  return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_z4481fh: /tmp/tmp_z4481fh.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  long s = 0;\n  bool result = true;\n  for (long i : l) {\n    if\
    \ (i != 0) {\n      s += i;\n      if (s > 0) {\n        result = false;\n   \
    \     break;\n      }\n    }\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjnal4peo: /tmp/tmpjnal4peo.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // return false\n\
    \  if (l.size() < 2) return false;\n  int n = l.size();\n  long a = l[0], b =\
    \ l[1], c = l[2];\n  bool ans = false;\n  int m = (n == 3) ? 3 : n - 1;\n  int\
    \ i = 0;\n  int j = 0;\n  for (; i < m && j < n; i++) {\n    if (a > b) break;\n\
    \    if (b > c) break;\n    if (b == 0) return true;\n    if (a == 0 || c == 0)\
    \ {\n      if (i < j) return true;\n      continue;\n    }\n    long x = a + b;\n\
    \    long y = c + a;\n    if (x < y) break;\n    if (x == y) ans = true;\n   \
    \ b = c;\n    c = x;\n    a = y;\n  }\n  return ans;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7srevp84: /tmp/tmp7srevp84.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Complete this\
    \ function\n    std::map<long, long> m;\n    for (long i : l) {\n        m.insert({i,\
    \ 0});\n    }\n    for (auto i : m) {\n        if (i.second == 0) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3qnh4lpm: /tmp/tmp3qnh4lpm.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // initialize a vector\
    \ to store the pairs that sum to zero.\n  std::unordered_set<pair<long, long>>\
    \ s;\n  // initialize a flag variable to indicate whether there are any pairs\
    \ that sum to zero.\n  bool flag = false;\n  // initialize a long variable to\
    \ store the pairs that sum to zero.\n  long sum = 0;\n  // traverse the vector\n\
    \  for (long i : l) {\n    // add current value to the sum\n    sum += i;\n  \
    \  // if the current sum is greater than zero\n    if (sum > 0) {\n      // construct\
    \ a pair from the current sum and the current element\n      pair<long, long>\
    \ p(sum, i);\n      // if the current pair doesn't exist in the set, add it to\
    \ the set\n      // and set the flag variable to true\n      if (!s.find(p)) {\n\
    \        s.insert(p);\n        flag = true;\n      }\n    }\n  }\n  // if the\
    \ flag variable is true, then there are no pairs that sum to zero.\n  return flag;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx5h7e5bo.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx5h7e5bo.cpp:18:22: error: \u2018pair\u2019 was not declared\
    \ in this scope; did you mean \u2018std::pair\u2019?\n   18 |   std::unordered_set<pair<long,\
    \ long>> s;\n      |                      ^~~~\n      |                      std::pair\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpx5h7e5bo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:208:12:\
    \ note: \u2018std::pair\u2019 declared here\n  208 |     struct pair\n      |\
    \            ^~~~\n/tmp/tmpx5h7e5bo.cpp:18:37: error: template argument 1 is invalid\n\
    \   18 |   std::unordered_set<pair<long, long>> s;\n      |                  \
    \                   ^~\n/tmp/tmpx5h7e5bo.cpp:18:37: error: template argument 2\
    \ is invalid\n/tmp/tmpx5h7e5bo.cpp:18:37: error: template argument 3 is invalid\n\
    /tmp/tmpx5h7e5bo.cpp:18:37: error: template argument 4 is invalid\n/tmp/tmpx5h7e5bo.cpp:30:12:\
    \ error: expected primary-expression before \u2018long\u2019\n   30 |       pair<long,\
    \ long> p(sum, i);\n      |            ^~~~\n/tmp/tmpx5h7e5bo.cpp:33:14: error:\
    \ request for member \u2018find\u2019 in \u2018s\u2019, which is of non-class\
    \ type \u2018int\u2019\n   33 |       if (!s.find(p)) {\n      |             \
    \ ^~~~\n/tmp/tmpx5h7e5bo.cpp:33:19: error: \u2018p\u2019 was not declared in this\
    \ scope\n   33 |       if (!s.find(p)) {\n      |                   ^\n/tmp/tmpx5h7"
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  if (l.size() < 2)\
    \ return false;\n  long a = l[0], b = l[1], c = l[2];\n  long sum = a + b + c;\n\
    \  return sum == 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv7ltitdz: /tmp/tmpv7ltitdz.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    long long int i = 0;\n    for (i = 0; i < l.size(); i++) {\n     \
    \   sum += l[i];\n    }\n    if (sum == 0) {\n        return false;\n    }\n \
    \   long long int left_sum = sum;\n    long long int right_sum = sum;\n    for\
    \ (; i < l.size(); i++) {\n        left_sum += l[i];\n        right_sum -= l[i];\n\
    \        if (left_sum == 0 && right_sum == 0) {\n            return true;\n  \
    \      }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1r0qd2fg: /tmp/tmp1r0qd2fg.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long count\
    \ = 0;\n    for (long long i : l) {\n        count += i;\n    }\n    long long\
    \ sum = 0;\n    for (long long i : l) {\n        if (i == 0) {\n            return\
    \ false;\n        }\n        sum += i;\n    }\n    if (count < sum) {\n      \
    \  return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg6t4h3k8: /tmp/tmpg6t4h3k8.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    long long result = 0;\n    int c = 0;\n    int n = 0;\n    for (long\
    \ long i : l) {\n        result += i;\n        n++;\n    }\n    if (n == 0) {\n\
    \        return false;\n    }\n    for (long long i = 0; i < n; i++) {\n     \
    \   c = result % 10;\n        result /= 10;\n        result += c;\n        result\
    \ = abs(result);\n        if (result == 0) {\n            return true;\n     \
    \   }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmw1uvqil: /tmp/tmpmw1uvqil.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011447
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::unordered_map<long,\
    \ int> counts;\n  for (int i = 0; i < l.size(); ++i) {\n    long val = l[i];\n\
    \    if (counts[val] == 0) {\n      counts[val] = 1;\n    } else {\n      counts[val]\
    \ += 1;\n    }\n  }\n  for (auto i : counts) {\n    if (i != 0) return true;\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3nn0m47.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw3nn0m47.cpp:27:11: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018std::pair<const long int, int>\u2019 and \u2018int\u2019\
    )\n   27 |     if (i != 0) return true;\n      |         ~ ^~ ~\n      |     \
    \    |    |\n      |         |    int\n      |         std::pair<const long int,\
    \ int>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw3nn0m47.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note: candidate: \u2018template<class _BiIter> bool std::__cxx11::operator!=(const\
    \ std::__cxx11::sub_match<_BiIter>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\
    \n 1037 |     operator!=(const sub_match<_BiIter>& __lhs, const sub_match<_BiIter>&\
    \ __rhs)\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1037:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpw3nn0m47.cpp:27:14:\
    \ note:   \u2018std::pair<const long int, int>\u2019 is not derived from \u2018\
    const std::__cxx11::sub_match<_BiIter>\u2019\n   27 |     if (i != 0) return true;\n\
    \      |              ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/regex:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw3nn0m47.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5:\
    \ note: candidate: \u2018template<class _Bi_iter, class _Ch_traits, class _Ch_alloc>\
    \ bool std::__cxx11::operator!=(std::__cxx11::__sub_match_string<_Bi_iter, _Ch_traits,\
    \ _Ch_alloc>&, const std::__cxx11::sub_match<_BiIter>&)\u2019\n 1112 |     operator!=(const\
    \ __sub_match_string<_Bi_iter, _Ch_traits, _Ch_alloc>& __lhs,\n      |     ^~~~~~~~\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/regex.h:1112:5: note:\
    \   template argument deduction/substitution failed:\n/tmp/tmpw3n"
  stdout: ''
  timestamp: 1660011448
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tlong long sum = 0;\n\tfor (auto i : l)\n\t\tsum += i;\n\tfor (auto\
    \ i : l) {\n\t\tif (i != 0)\n\t\t\treturn false;\n\t\tlong long a = sum;\n\t\t\
    while (a > 0) {\n\t\t\tsum += 1;\n\t\t\ta -= 1;\n\t\t}\n\t}\n\treturn true;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmwo26g2x: /tmp/tmpmwo26g2x.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  for (int i = 0; i < l.size() - 1; i++)\n    if (l[i] + l[i+1] ==\
    \ 0)\n      return true;\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4bx7uzv6: /tmp/tmp4bx7uzv6.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    int size = l.size();\n    for(int i = 1; i < size; i++) {\n      \
    \  long cur = l[i];\n        for(int j = i; j < size; j++) {\n            if(cur\
    \ + l[j] == 0) {\n                return false;\n            }\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi3690f8n: /tmp/tmpi3690f8n.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here\n    int cnt = 0;\n    for (long x : l) {\n        if (x.second != 0) {\n\
    \            cnt++;\n        }\n    }\n    if (cnt != l.size()) {\n        return\
    \ false;\n    }\n    std::unordered_set<long> set(l.begin(), l.end());\n    if\
    \ (set.size() != l.size()) {\n        return false;\n    }\n    for (long x :\
    \ l) {\n        if (x.second != 0) {\n            std::cout << x << std::endl;\n\
    \            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1_l5t_dw.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1_l5t_dw.cpp:20:15: error: request for member \u2018second\u2019\
    \ in \u2018x\u2019, which is of non-class type \u2018long int\u2019\n   20 | \
    \        if (x.second != 0) {\n      |               ^~~~~~\n/tmp/tmp1_l5t_dw.cpp:32:15:\
    \ error: request for member \u2018second\u2019 in \u2018x\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   32 |         if (x.second != 0) {\n      |   \
    \            ^~~~~~\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    int result = 0;\n    long max_sum = std::numeric_limits<long>::min();\n \
    \   for (int i = 0; i < n; i++) {\n        int curr = l[i];\n        int next\
    \ = (i + 1 < n) ? l[i + 1] : 0;\n        result += curr;\n        max_sum = std::max(max_sum,\
    \ curr + next);\n    }\n    long current_sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        int curr = l[i];\n        int next = (i + 1 < n) ? l[i + 1]\
    \ : 0;\n        current_sum += curr;\n        if (current_sum == 0 || (current_sum\
    \ == max_sum && i != 0)) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprekzdc2c.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprekzdc2c.cpp:24:48: error: no matching function for call\
    \ to \u2018max(long int&, int)\u2019\n   24 |         max_sum = std::max(max_sum,\
    \ curr + next);\n      |                                                ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprekzdc2c.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:222:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmprekzdc2c.cpp:24:48:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long int\u2019 and \u2018int\u2019)\n   24 |         max_sum = std::max(max_sum,\
    \ curr + next);\n      |                                                ^\nIn\
    \ file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9"
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long sum = 0;\n\
    \  for (long long i = 0; i < l.size(); i++) {\n    sum += l[i];\n  }\n  std::sort(l.begin(),\
    \ l.end());\n  return std::unique(l.begin(), l.end()) != l.end();\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6y5htqpi: /tmp/tmp6y5htqpi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    int ans = 0;\n    for (int i = 1; i < n; i++) {\n        int j = i;\n   \
    \     while (j > 0) {\n            int k = 0;\n            while (j > 0) {\n \
    \               if (l[j] < l[j - 1]) {\n                    k = j;\n         \
    \           break;\n                }\n                j--;\n            }\n \
    \           if (k == j) {\n                ans += 1;\n            }\n        }\n\
    \    }\n    if (ans == n) return false;\n    return true;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011454
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  long long pairs = 0, last_pair = 0, last_num = 0, max_pairs = 0;\n  for (int\
    \ i = 0; i < n; i++) {\n    pairs += (long long)l[i] * l[i];\n    if (pairs >\
    \ last_pair) {\n      last_pair = pairs;\n      last_num = l[i];\n    }\n    if\
    \ (pairs == 0) return false;\n    max_pairs = max(max_pairs, (long long)l[i]);\n\
    \  }\n  if (max_pairs == pairs) {\n    return false;\n  } else {\n    return true;\n\
    \  }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdg1sj3q7.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpdg1sj3q7.cpp:26:17: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   26 |     max_pairs = max(max_pairs,\
    \ (long long)l[i]);\n      |                 ^~~\n      |                 std::max\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdg1sj3q7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// sort the vector\
    \ in ascending order\n\tstd::sort(l.begin(), l.end());\n\t// initialize two variables\
    \ sum and temp\n\tlong long sum = 0, temp;\n\t// iterate over the vector and compare\
    \ adjacent elements if\n\t// the sum becomes zero then return true.\n\tfor (int\
    \ i = 0; i < l.size() - 1; i++) {\n\t\ttemp = l[i] + l[i + 1];\n\t\tif (temp ==\
    \ 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tsum += temp;\n\t\t}\n\t}\n\treturn\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmprmxyr8fi: /tmp/tmprmxyr8fi.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<bool> seen;\n    for (long i : l) {\n        if (seen.count(i))\n\
    \            return true;\n        seen.push_back(false);\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvq3qrpg9.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpvq3qrpg9.cpp:20:18: error: \u2018class std::vector<bool>\u2019\
    \ has no member named \u2018count\u2019\n   20 |         if (seen.count(i))\n\
    \      |                  ^~~~~\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long zero = 0;\n\
    \    long long count = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ count += l[i];\n        if (count != 0) {\n            zero += count;\n    \
    \        count = 0;\n        }\n    }\n    if (count != 0) {\n        return false;\n\
    \    }\n    for (long i = 0; i < l.size(); i++) {\n        count -= l[i];\n  \
    \      if (count != 0) {\n            zero += count;\n            count = 0;\n\
    \        }\n    }\n    return zero == 0;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpn86sbzey: /tmp/tmpn86sbzey.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \    }\n    if (sum == 0) return false;\n    long last_sum = 0;\n    for (int\
    \ i = 0; i < n; i++) {\n        if (last_sum != 0 && last_sum == sum) return false;\n\
    \        last_sum += l[i];\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmprevrdszg: /tmp/tmprevrdszg.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::unordered_set<long>\
    \ nums;\n  for (auto e : l)\n    if (nums.find(e - nums.begin()) != nums.end())\n\
    \      return true;\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgd019k_k.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgd019k_k.cpp:19:21: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::unordered_set<long int>::iterator\u2019\
    \ {aka \u2018std::__detail::_Node_iterator<long int, true, false>\u2019})\n  \
    \ 19 |     if (nums.find(e - nums.begin()) != nums.end())\n      |           \
    \        ~ ^ ~~~~~~~~~~~~\n      |                   |             |\n      |\
    \                   long int      std::unordered_set<long int>::iterator {aka\
    \ std::__detail::_Node_iterator<long int, true, false>}\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    bool res = false;\n\
    \    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for (int j\
    \ = i + 1; j < n; j++) {\n            if (l[i] + l[j] == 0) {\n              \
    \  res = true;\n                break;\n            }\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int i = 0;\n  bool\
    \ res = false;\n  bool flag = false;\n  int count = 0;\n  long long int sum =\
    \ 0;\n  while (i < l.size()) {\n    int pos = i;\n    int counter = 1;\n    while\
    \ (pos <= l.size() - 1 && counter > 0) {\n      pos = pos + 1;\n      counter\
    \ = counter + 1;\n    }\n    if (pos == l.size() - 1) {\n      pos = pos + 1;\n\
    \      counter = counter + 1;\n    }\n    if (counter == 2) {\n      res = true;\n\
    \    }\n    sum = sum + l[i];\n    i = pos + 1;\n  }\n  if (res == true) {\n \
    \   flag = true;\n  }\n  return res;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyv782n37: /tmp/tmpyv782n37.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tlong long sum = 0;\n\
    \tfor (long long i = 0; i < l.size(); i++) {\n\t\tsum += l[i];\n\t\tif (sum <\
    \ 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main() {\n   \
    \ auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyo494oxt: /tmp/tmpyo494oxt.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long ans =\
    \ 0;\n    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n    \
    \    sum += l[i];\n        if (sum == 0) {\n            ans += 1;\n          \
    \  sum = 1;\n        }\n    }\n    if (ans == 2) {\n        return true;\n   \
    \ } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmph5cy18li: /tmp/tmph5cy18li.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  long zero = 0;\n  long sum = 0;\n  for (auto it = l.begin(); it\
    \ != l.end(); ++it) {\n    sum += *it;\n    if (sum == 0) {\n      zero = 1;\n\
    \      break;\n    }\n  }\n  return !zero;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqacd8yll: /tmp/tmpqacd8yll.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)7}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long int sum\
    \ = 0;\n  // first we check if the vector has any zero elements\n  for (auto it\
    \ = l.begin(); it != l.end(); ++it) {\n    // sum the values in the vector\n \
    \   sum += *it;\n  }\n  assert(sum != 0);\n  // if the sum is non-zero, we have\
    \ two distinct elements.\n  if (sum != 0) {\n    // get the vector with the two\
    \ distinct elements and check if they are pairs.\n    // that is, if the vector\
    \ has two distinct elements that sum to zero.\n    long long int a = 0, b = 0,\
    \ sum = 0;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n      sum +=\
    \ *it;\n      assert(sum != 0);\n      if (sum < 0) {\n        break;\n      }\n\
    \      if (*it == 0) {\n        break;\n      }\n      if (sum > 0) {\n      \
    \  sum += a;\n        if (sum > 0) {\n          sum += b;\n          if (sum ==\
    \ 0) {\n            assert(a + b == 0);\n            return true;\n          }\n\
    \        } else {\n          assert(a == b);\n        }\n      } else if (sum\
    \ < 0) {\n        sum += b;\n        if (sum < 0) {\n          sum += a;\n   \
    \       if (sum == 0) {\n            assert(a + b == 0);\n            return true;\n\
    \          }\n        } else {\n          assert(b == a);\n        }\n      }\n\
    \      a = *it;\n      b = sum;\n    }\n    assert(false);\n    return false;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1fzbhrle: /tmp/tmp1fzbhrle.cpp:64: bool pairs_sum_to_zero(std::vector<long
    int>): Assertion `false'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  // two iterators over the array\n  std::vector<long>::iterator itr1 = l.begin();\n\
    \  std::vector<long>::iterator itr2 = l.begin() + n;\n  while (itr1 != itr2) {\n\
    \    int sum = 0;\n    while (itr1 != itr2) {\n      sum += *itr1;\n      ++itr1;\n\
    \    }\n    if (sum == 0) {\n      return true;\n    }\n    while (itr2 != itr1)\
    \ {\n      --itr2;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_dimul0z: /tmp/tmp_dimul0z.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    int n = l.size();\n    // two elements whose sum is zero\n  \
    \  if (n <= 2)\n        return true;\n    if (l[0] == 0 && l[1] == 0)\n      \
    \  return true;\n    int left = 0, right = 1;\n    while (right < n) {\n     \
    \   if (l[right] >= 0)\n            right = right + 1;\n        else\n       \
    \     left = left + 1;\n    }\n    if (right == n)\n        return false;\n  \
    \  if (l[right] == 0)\n        return false;\n    // two elements whose sum is\
    \ zero\n    if (left == right)\n        return true;\n    return pairs_sum_to_zero(std::vector<long>(l.begin()\
    \ + left, l.begin() + right + 1));\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkda5r3v6: /tmp/tmpkda5r3v6.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011449
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    bool found = false;\n    bool is_even = false;\n    std::vector<int>\
    \ v(l.size() - 1);\n    for (auto i = 0; i < l.size() - 1; i++) {\n        if\
    \ (l[i] == 0) {\n            is_even = false;\n        }\n        if (l[i + 1]\
    \ != 0) {\n            if (is_even) {\n                if (l[i] == l[i + 2]) {\n\
    \                    v[i] = 0;\n                    v[i + 1] = 0;\n          \
    \          found = true;\n                    break;\n                }\n    \
    \            else if (l[i] == l[i + 1] - l[i + 2]) {\n                    v[i]\
    \ = 0;\n                    v[i + 1] = 0;\n                    found = true;\n\
    \                    break;\n                }\n                else {\n     \
    \               v[i] = 0;\n                    v[i + 1] = 0;\n               \
    \ }\n            }\n            else {\n                if (l[i] == l[i + 1] -\
    \ l[i + 2]) {\n                    v[i] = 0;\n                    v[i + 1] = 0;\n\
    \                    found = true;\n                    break;\n             \
    \   }\n                else {\n                    v[i] = 0;\n               \
    \     v[i + 1] = 0;\n                }\n            }\n        }\n        else\
    \ {\n            if (l[i] % 2 == 0) {\n                is_even = true;\n     \
    \       }\n            if (l[i + 1] != 0) {\n                if (is_even) {\n\
    \                    if (l[i] == l[i + 2]) {\n                        v[i] = 0;\n\
    \                        v[i + 1] = 0;\n                        found = true;\n\
    \                        break;\n                    }\n                    else\
    \ if (l[i] == l[i + 1] - l[i + 2]) {\n                        v[i] = 0;\n    \
    \                    v[i + 1] = 0;\n                        found = true;\n  \
    \                      break;\n                    }\n                    else\
    \ {\n                        v[i] = 0;\n                        v[i + 1] = 0;\n\
    \                    }\n                }\n                else {\n          \
    \          if (l[i] == l[i + 1] - l[i + 2]) {\n                        v[i] =\
    \ 0;\n                        v[i + 1] = 0;\n                        found = true;\n\
    \                        break;\n                    }\n                    else\
    \ {\n                        v[i] = 0;\n                        v[i + 1] = 0;\n\
    \                    }\n                }\n            }\n            else {\n\
    \                if (l[i] % 2 == 0) {\n                    is_even = true;\n \
    \               }\n                if (l[i + 1] != 0) {\n                    if\
    \ (is_even) {\n                        if (l[i] == l[i + 2]) {\n             \
    \               v[i] = 0;\n                            v[i + 1] = 0;\n       \
    \                     found = true;\n                            break;\n    \
    \                    }\n                        else if (l[i] == l[i + 1] - l[i\
    \ + 2]) {\n                            v[i] = 0;\n                           \
    \ v[i + 1] = 0;\n                            found = true;\n                 \
    \           break;\n                        }\n                        else {\n\
    \                            v[i] = 0;\n                            v[i + 1] =\
    \ 0;\n                        }\n                    }\n                    else\
    \ {\n                        if (l[i] == l[i + 1] - l[i + 2]) {\n            \
    \                v[i] = 0;\n                            v[i + 1] = 0;\n      \
    \                      found = true;\n                            break;\n   \
    \                     }\n                        else {\n                    \
    \        v[i] = 0;\n                            v[i + 1] = 0;\n              \
    \          }\n                    }\n                }\n                else {\n\
    \                    if (l[i] % 2 == 0) {\n                        is_even = true;\n\
    \                    }\n                    if (l[i + 1]\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1ltiatpi.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1ltiatpi.cpp:133:33: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  133 |                     if (l[i + 1]\n      |     \
    \                   ~        ^\n      |                                 )\n  134\
    \ | }\n      | ~                                \n/tmp/tmp1ltiatpi.cpp:134:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  134 | }\n \
    \     | ^\n/tmp/tmp1ltiatpi.cpp:135:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  135 | int main() {\n      |            ^\n\
    /tmp/tmp1ltiatpi.cpp:146:1: error: expected \u2018}\u2019 at end of input\n  146\
    \ | }\n      | ^\n/tmp/tmp1ltiatpi.cpp:93:18: note: to match this \u2018{\u2019\
    \n   93 |             else {\n      |                  ^\n/tmp/tmp1ltiatpi.cpp:146:1:\
    \ error: expected \u2018}\u2019 at end of input\n  146 | }\n      | ^\n/tmp/tmp1ltiatpi.cpp:57:14:\
    \ note: to match this \u2018{\u2019\n   57 |         else {\n      |         \
    \     ^\n/tmp/tmp1ltiatpi.cpp:146:1: error: expected \u2018}\u2019 at end of input\n\
    \  146 | }\n      | ^\n/tmp/tmp1ltiatpi.cpp:21:45: note: to match this \u2018\
    {\u2019\n   21 |     for (auto i = 0; i < l.size() - 1; i++) {\n      |      \
    \                                       ^\n/tmp/tmp1ltiatpi.cpp:146:1: error:\
    \ expected \u2018}\u2019 at end of input\n  146 | }\n      | ^\n/tmp/tmp1ltiatpi.cpp:16:45:\
    \ note: to match this \u2018{\u2019\n   16 | bool pairs_sum_to_zero(std::vector<long>\
    \ l) {\n      |                                             ^\n/tmp/tmp1ltiatpi.cpp:146:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \  146 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660011449
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    long long int count = 0;\n    for(long long int e : l){\n        sum\
    \ += e;\n        count += 1;\n    }\n    return (count == 1) && (sum == 0);\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp67m2c6xu: /tmp/tmp67m2c6xu.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    int n1=l.size();\n    int n2=0;\n    for(int i=0;i<n1;i++){\n        for(int\
    \ j=i+1;j<n1;j++){\n            if(l[i]+l[j]==0){\n                n2=1;\n   \
    \             break;\n            }\n        }\n        if(n2==1)\n          \
    \  break;\n    }\n    return (n2==0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbn1chw0r: /tmp/tmpbn1chw0r.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (auto i : l) {\n        sum += i;\n    }\n    bool found = false;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (i == 0 && sum ==\
    \ 0) {\n            continue;\n        }\n        if (l[i] == 0 && l[i - 1] ==\
    \ 0 && l[i - 2] == 0 && sum == 0) {\n            found = true;\n        } else\
    \ {\n            break;\n        }\n    }\n    return found;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp33smo3f7: /tmp/tmp33smo3f7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::vector<std::pair<long, long>> res;\n\tfor (long i = 0; i <\
    \ l.size(); i++) {\n\t\tfor (long j = i + 1; j < l.size(); j++) {\n\t\t\tlong\
    \ a = l[i];\n\t\t\tlong b = l[j];\n\t\t\tif (a + b == 0)\n\t\t\t\tres.emplace_back(a,\
    \ b);\n\t\t}\n\t}\n\tbool has = false;\n\tfor (auto i : res)\n\t\tif (i.first\
    \ + i.second == 0)\n\t\t\thas = true;\n\treturn has;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011451
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::pair<long, long>\
    \ i1, i2;\n  if (l.size() == 0)\n    return false;\n  std::unordered_map<long,\
    \ long> temp;\n  for (int i = 0; i != l.size(); i++) {\n    i1 = std::make_pair(l.at(i),\
    \ l.at(i));\n    temp.emplace(i1.first, i1.first);\n  }\n  std::unordered_set<long>\
    \ s;\n  for (auto itr : temp) {\n    s.insert(itr.first);\n  }\n  if (s.size()\
    \ == 1) return false;\n  std::vector<long> temp2;\n  for (int i = 0; i != l.size();\
    \ i++) {\n    i2 = std::make_pair(l.at(i), l.at(i));\n    temp2.emplace(i2.first);\n\
    \  }\n  std::unordered_set<long> s2;\n  for (auto itr : temp2) {\n    s2.insert(itr);\n\
    \  }\n  if (s2.size() == 1) return false;\n  if (s.size() == 0 || s2.size() ==\
    \ 0) return true;\n  do {\n    temp2.clear();\n    for (int i = 0; i != l.size();\
    \ i++) {\n      i2 = std::make_pair(l.at(i), l.at(i));\n      temp2.emplace(i2.first);\n\
    \    }\n    std::unordered_set<long> s3;\n    for (auto itr : temp2) {\n     \
    \ s3.insert(itr);\n    }\n    if (s3.size() == 1) {\n      return true;\n    }\n\
    \  } while (std::next_permutation(temp2.begin(), temp2.end()));\n  return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwu9mjxti.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwu9mjxti.cpp:33:27: error: no matching function for call\
    \ to \u2018std::vector<long int>::emplace(long int&)\u2019\n   33 |     temp2.emplace(i2.first);\n\
    \      |                           ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpwu9mjxti.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1245:2:\
    \ note: candidate: \u2018template<class ... _Args> std::vector<_Tp, _Alloc>::iterator\
    \ std::vector<_Tp, _Alloc>::emplace(std::vector<_Tp, _Alloc>::const_iterator,\
    \ _Args&& ...) [with _Args = {_Args ...}; _Tp = long int; _Alloc = std::allocator<long\
    \ int>]\u2019\n 1245 |  emplace(const_iterator __position, _Args&&... __args)\n\
    \      |  ^~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1245:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpwu9mjxti.cpp:33:22:\
    \ note:   cannot convert \u2018i2.std::pair<long int, long int>::first\u2019 (type\
    \ \u2018long int\u2019) to type \u2018std::vector<long int>::const_iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<const long int*, std::vector<long int>\
    \ >\u2019}\n   33 |     temp2.emplace(i2.first);\n      |                   ~~~^~~~~\n\
    /tmp/tmpwu9mjxti.cpp:45:29: error: no matching function for call to \u2018std::vector<long\
    \ int>::emplace(long int&)\u2019\n   45 |       temp2.emplace(i2.first);\n   \
    \   |                             ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpwu9mjxti.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:1245:2:\
    \ note: cand"
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long sum = 0;\n \
    \ for (auto it : l) {\n    sum += it;\n  }\n  bool is_two_same = false;\n  if\
    \ (sum < 0) {\n    is_two_same = true;\n  }\n  for (size_t i = 0; i < l.size();\
    \ ++i) {\n    long temp_sum = 0;\n    for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n      temp_sum += *it;\n    }\n    if (temp_sum < 0) is_two_same =\
    \ true;\n  }\n  return is_two_same;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpih7i3uf7: /tmp/tmpih7i3uf7.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int N = (int) l.size();\n\
    \  int count = 0;\n  for (int i = 1; i < N; i++) {\n    int sum = 0;\n    for\
    \ (int j = 0; j < i; j++) {\n      sum += l[j];\n    }\n    if (sum == 0) {\n\
    \      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmprc7z0k07: /tmp/tmprc7z0k07.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_set<long>\
    \ s(l.begin(), l.end());\n    return s.size() == 2 && s.count(0) == 1 && s.count(1)\
    \ == 1;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4d0_xk63: /tmp/tmp4d0_xk63.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long s = 0;\n\
    \    for (long long i = 0; i < l.size(); ++i) {\n        s += l[i];\n    }\n \
    \   long long n = (long long)l.size();\n    for (long long i = 0; i < n; ++i)\
    \ {\n        if (l[i] != 0) {\n            return true;\n        }\n    }\n  \
    \  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy_4brbt3: /tmp/tmpy_4brbt3.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ sum += l[i];\n    }\n    bool a = true;\n    long b = sum;\n    while (b !=\
    \ 0) {\n        if (sum % b == 0) {\n            a = false;\n        }\n     \
    \   b = b % 100;\n    }\n    return a;\n}\nint main() {\n    auto candidate =\
    \ pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int sum = 0;\n\
    \    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        sum += l[i];\n\
    \        if (sum > 0) {\n            for (int j = i + 1; j < n; ++j) {\n     \
    \           if (l[i] + l[j] == 0) {\n                    return true;\n      \
    \          }\n            }\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzu4_llxz: /tmp/tmpzu4_llxz.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)9, (long)-1, (long)3, (long)2, (long)30}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    for (long i = 0;\
    \ i < l.size() - 1; i++) {\n        for (long j = i + 1; j < l.size(); j++) {\n\
    \            long a = l[i] + l[j];\n            if (a == 0) return true;\n   \
    \         if (i == j) return false;\n        }\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int num_zero=0;\n\
    \  int num_total=0;\n  for(auto it=l.begin();it!=l.end();it++) {\n    if(*it==0)\
    \ {\n      num_zero++;\n      continue;\n    }\n    num_total++;\n    while((num_zero>0)\
    \ && (*it-num_zero)>=0) {\n      if(num_zero==1) {\n        return true;\n   \
    \   }\n      num_zero--;\n    }\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0dhb2tt0: /tmp/tmp0dhb2tt0.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        sum += *it;\n\
    \    }\n    return (sum == 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp42_4552b: /tmp/tmp42_4552b.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long long sum = 0;\n    long long ans = 0;\n    for (long long\
    \ i = 0; i < l.size(); ++i) {\n        if (i == 0)\n            ans = l[i] + l[i];\n\
    \        else {\n            long long next = l[i] + l[i - 1];\n            if\
    \ (next == 0) {\n                ans = l[i - 1];\n                break;\n   \
    \         }\n            sum += next;\n            if (sum == 0)\n           \
    \     ans = l[i - 1];\n            else if (sum < 0)\n                ans = l[i];\n\
    \            else\n                ans = l[i - 1];\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkrsu4ti1: /tmp/tmpkrsu4ti1.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i = 0; i < l.size(); i++){\n        sum += l[i];\n  \
    \  }\n    if (sum > 0) {\n        std::sort(l.begin(), l.end());\n        long\
    \ long k = 0;\n        for (long long i = 0; i < l.size(); i++) {\n          \
    \  long long x = l[i];\n            long long y = l[k];\n            if (x + y\
    \ > 0){\n                return false;\n            }\n            k++;\n    \
    \    }\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdxx7fr7j: /tmp/tmpdxx7fr7j.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  if (l.size() < 2)\
    \ {\n    return false;\n  }\n  int n = l.size();\n  int k = n - 1;\n  std::vector<int>\
    \ dp(k, -1);\n  dp[0] = 0;\n  long s = 0;\n  for (int i = 0; i < n; ++i) {\n \
    \   s += l[i];\n    if (s >= 0) {\n      dp[k--] = i;\n      if (k > 0) {\n  \
    \      s = s - l[dp[k - 1]];\n      }\n    }\n  }\n  // dp[i] indicates whether\
    \ there are two distinct elements that sum to zero.\n  // dp[i] < 0 indicates\
    \ that there is a single element that sums to zero.\n  // if dp[i] < 0, there\
    \ exists only one element in the input vector that sums to zero.\n  return dp[dp[k]]\
    \ < 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp002z02sr: /tmp/tmp002z02sr.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n<2)\n        return true;\n    // create vectors of size n-1 and size-n+1\n\
    \    std::vector<bool> a(n-1),b(n+1);\n    // fill up vectors so that a[i to n-2]\
    \ is 0 and b[i-n to n] is 0, and vice versa\n    // for i=1,..,n-1\n    for (int\
    \ i = 1 ; i <= n-1 ; i++)\n        a[i-1] = l[i] - l[i-1];\n    for (int i = 1\
    \ ; i <= n-1 ; i++)\n        b[i-n] = l[i] - l[i-n-1];\n    for (int i = 2; i\
    \ <= n ; i++)\n        a[i-1] = b[i-1];\n    for (int i = 2; i <= n ; i++)\n \
    \       b[i-n-1] = b[i-n];\n    for (int i = 1 ; i <= n-1 ; i++)\n        if (a[i]==0\
    \ || b[i]==0)\n            return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long int sum\
    \ = 0;\n  for (long long int x : l)\n    sum += x;\n  for (long long int x = 0;\
    \ x < sum; x++)\n    if (l.size() > 0 && l.front() == x) {\n      l.pop_back();\n\
    \      l.push_back(0);\n      return true;\n    }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoymno6t4: /tmp/tmpoymno6t4.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    std::vector<long> v;\n    for(int i=0;i<n;i++) v.push_back(-l[i]);\n    sort(v.begin(),\
    \ v.end());\n    for(int i=0;i<n;i++) {\n        int k = i + 1;\n        while(k\
    \ < (n - 1))\n            if(l[i] + v[k] == 0)\n                return true;\n\
    \            else if(l[i] + v[k] < 0)\n                k++;\n            else\n\
    \                i++;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpywrxk74v: /tmp/tmpywrxk74v.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long sum = 0;\n \
    \ for (int i = 0; i < l.size(); i++) {\n    sum += l[i];\n  }\n  if (sum < 0)\
    \ {\n    return false;\n  }\n  long twoSum = 0;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    twoSum = l[i] + twoSum;\n  }\n  return twoSum == 0;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpo_i_zbww: /tmp/tmpo_i_zbww.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011451
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    assert(l.size()\
    \ > 0);\n    std::vector<std::pair<long, long> > pairs;\n    for (long i = 0;\
    \ i < l.size(); i++) {\n        long first = l[i];\n        long second = l[(i\
    \ + 1) % l.size()];\n        pairs.push_back(std::make_pair(first, second));\n\
    \    }\n    for (long i = pairs.size(); i > 1; i--) {\n        if (pairs[i].first\
    \ + pairs[i - 1].second == 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw4vqafq8: /tmp/tmpw4vqafq8.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011452
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  assert(l.size() ==\
    \ 2);\n  long sum = 0;\n  for (long i = 0; i < l.size(); i++) {\n    sum += l[i];\n\
    \    if (sum != 0)\n      return true;\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxjmfstsl: /tmp/tmpxjmfstsl.cpp:17: bool pairs_sum_to_zero(std::vector<long
    int>): Assertion `l.size() == 2'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long s = 0;\n\
    \    long long sum = 0;\n    for(long long i : l) {\n        s += i;\n       \
    \ sum += i;\n    }\n    if(sum < 0) {\n        long long a = -1;\n        long\
    \ long b = 0;\n        for(long long i : l) {\n            if(i > 0) {\n     \
    \           a += i;\n                a %= b;\n                b += a;\n      \
    \      }\n        }\n    }\n    if(s < 0) {\n        return false;\n    } else\
    \ {\n        return true;\n    }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnerh0gz_: /tmp/tmpnerh0gz_.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    for (long i=0;\
    \ i<l.size(); i++) {\n        for (int j=i+1; j<l.size(); j++) {\n           \
    \ if (l[i] + l[j] == 0) {\n                return true;\n            }\n     \
    \   }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int N = l.size();\n\
    \  int k = 0;\n  int ans = 0;\n  long sum = 0;\n  for (int i = 0; i < N; i++)\
    \ {\n    k = 0;\n    while (ans > 0 && k + 1 < N) {\n      if (l[k] + l[k + 1]\
    \ == sum) {\n        ans = ans - 1;\n      }\n      k++;\n    }\n    sum = sum\
    \ + l[i];\n  }\n  return (ans > 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnr7q7cys: /tmp/tmpnr7q7cys.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    auto it = l.begin();\n\
    \    std::advance(it, l.size() / 2);\n    long long a = *it;\n    it++;\n    std::advance(it,\
    \ l.size() / 2);\n    long long b = *it;\n    it++;\n    long long c = *it;\n\
    \    return ((a + b + c) == 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpekbfd4fp: /tmp/tmpekbfd4fp.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() ==\
    \ 0) return false;\n    if (l.size() == 1) return true;\n    long long s = 0,\
    \ k = 0, tmp;\n    for (size_t i = 0; i < l.size() - 1; ++i){\n        k = l[i];\n\
    \        tmp = l[i+1];\n        s = s + k;\n        if (tmp == s) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpljkmb3sj: /tmp/tmpljkmb3sj.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() ==\
    \ 0) return false;\n    if (l.size() == 1) return true;\n    long long ans = 0,\
    \ cur = l[0];\n    for (long long i = 1; i < l.size(); ++i) {\n        if (l[i]\
    \ + cur == 0) ans++;\n        cur = l[i];\n    }\n    if (ans == 0) return false;\n\
    \    if (ans == 1) return true;\n    ans = 0;\n    for (long long i = 1; i < l.size();\
    \ ++i) {\n        if (l[i] + cur < 0) ans += (std::abs(l[i] + cur) - 1);\n   \
    \     cur = l[i];\n    }\n    if (ans == 0) return false;\n    if (ans == 1) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl057gakc: /tmp/tmpl057gakc.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::vector<std::pair<long,\
    \ long>> pairs(l.size());\n    std::iota(pairs.begin(), pairs.end(), 0L);\n  \
    \  std::vector<std::pair<long, long>> sorted_pairs = std::sort(pairs.begin(),\
    \ pairs.end(),\n                                                             \
    \    [](std::pair<long, long> a,\n                                           \
    \                            std::pair<long, long> b) {\n                    \
    \                                                 return a.first > b.first;\n\
    \                                                                 });\n\n    for\
    \ (size_t i = 0; i < sorted_pairs.size() - 1; ++i) {\n        if (sorted_pairs[i].second\
    \ + sorted_pairs[i + 1].second == 0) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ed7eyzn.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9ed7eyzn.cpp:19:64: error: conversion from \u2018void\u2019\
    \ to non-scalar type \u2018std::vector<std::pair<long int, long int> >\u2019 requested\n\
    \   19 |     std::vector<std::pair<long, long>> sorted_pairs = std::sort(pairs.begin(),\
    \ pairs.end(),\n      |                                                      \
    \ ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~\n   20 |                             \
    \                                     [](std::pair<long, long> a,\n      |   \
    \                                                               ~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \   21 |                                                                     \
    \   std::pair<long, long> b) {\n      |                                      \
    \                                  ~~~~~~~~~~~~~~~~~~~~~~~~~~\n   22 |       \
    \                                                               return a.first\
    \ > b.first;\n      |                                                        \
    \              ~~~~~~~~~~~~~~~~~~~~~~~~~\n   23 |                            \
    \                                      });\n      |                          \
    \                                        ~~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/numeric:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:84,\n\
    \                 from /tmp/tmp9ed7eyzn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_numeric.h:\
    \ In instantiation of \u2018void std::iota(_ForwardIterator, _ForwardIterator,\
    \ _Tp) [with _ForwardIterator = __gnu_cxx::__normal_iterator<std::pair<long int,\
    \ long int>*, std::vector<std::pair<long int, long int> > >; _Tp = long int]\u2019\
    :\n/tmp/tmp9ed7eyzn.cpp:18:45:   required from here\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_numeric.h:93:13:\
    \ error: no match for \u2018operator=\u2019 (operand types are \u2018std::pair<long\
    \ int, long int>\u2019 and \u2018long int\u2019)\n   93 |    *__first = __value;\n\
    \      |    ~~~~~~~~~^~~~~~~~~\nIn file included from /share"
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  long long ans = 0;\n  for (int i = 0; i < n; i++) {\n    long long sum = 0;\n\
    \    for (int j = 0; j < n; j++) {\n      if (i == j) {\n        continue;\n \
    \     }\n      sum += l[j];\n      if (sum == 0) return false;\n    }\n    ans\
    \ += 1;\n  }\n  if (ans == n) return true;\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp07e3psht: /tmp/tmp07e3psht.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long n = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        n += l[i];\n        if\
    \ (n < 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz33nsrfj: /tmp/tmpz33nsrfj.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    assert(l.size()\
    \ == 2);\n    long long a = l[0];\n    long long b = l[1];\n    int sum = 0;\n\
    \    if (a < 0) {\n        sum += -a * a;\n    } else {\n        sum += a;\n \
    \   }\n    if (b < 0) {\n        sum += -b * b;\n    } else {\n        sum +=\
    \ b;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6ug24qhn: /tmp/tmp6ug24qhn.cpp:17: bool pairs_sum_to_zero(std::vector<long
    int>): Assertion `l.size() == 2'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long sum = 0;\n    for (long elem : l) {\n        sum += elem;\n\
    \    }\n    long twoSum = 0;\n    long threeSum = 0;\n    long fourSum = 0;\n\
    \    for (long elem : l) {\n        if (elem % 2 == 0) {\n            twoSum =\
    \ elem + twoSum;\n        }\n        else {\n            fourSum = elem + fourSum;\n\
    \        }\n    }\n    for (long elem : l) {\n        if (elem % 3 == 0) {\n \
    \           threeSum = elem + threeSum;\n        }\n        else if (elem % 5\
    \ == 0) {\n            threeSum = elem + threeSum;\n        }\n    }\n    if (twoSum\
    \ == 0 && threeSum == 0 && fourSum == 0) {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmphau8dhda: /tmp/tmphau8dhda.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tlong long x = 0;\n\
    \tbool flag = false;\n\tfor (long i = 0; i < l.size(); i++) {\n\t\tx += l[i];\n\
    \t\tif (x != 0 && x % 2 == 0) {\n\t\t\tx = x + (x % 2 == 1 ? 1 : -1);\n\t\t\t\
    if (x == 0) {\n\t\t\t\tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ flag;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2jgeebrj: /tmp/tmp2jgeebrj.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int size = l.size();\n\
    \  long long int sum = std::accumulate(l.begin(), l.end(), 0);\n  return sum !=\
    \ 0 && sum == size;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmptcxp5guj: /tmp/tmptcxp5guj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011453
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    auto it = l.begin();\n\
    \    std::vector<long>::iterator it2;\n    if (l.size() == 0)\n        return\
    \ false;\n    long sum = 0;\n    while (it != l.end()) {\n        if (*it > 0)\
    \ {\n            sum += *it;\n            it++;\n        } else {\n          \
    \  sum -= *it;\n            if (sum < 0) {\n                sum = 0;\n       \
    \         it--;\n            } else {\n                it2 = it;\n           \
    \     do {\n                    sum += *it2;\n                    it2++;\n   \
    \             } while (it2 != l.end() && !(*it2 > *it));\n                if (sum\
    \ < 0) {\n                    it--;\n                }\n            }\n      \
    \  }\n    }\n    return sum == 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long sum = 0;\n\
    \    for (auto &i : l) {\n        sum += i;\n    }\n    long count = 0;\n    for\
    \ (auto &i : l) {\n        if (i == 0) {\n            continue;\n        }\n \
    \       long a = i;\n        while (a > 0) {\n            if (sum < 0) {\n   \
    \             return false;\n            }\n            if (sum == -i) {\n   \
    \             count++;\n            }\n            sum -= a;\n            a /=\
    \ 10;\n        }\n    }\n    return count == 2;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpln74w7j9: /tmp/tmpln74w7j9.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  if (l.size() == 0)\n\
    \    return false;\n  if (l.size() == 1)\n    return true;\n  std::pair<long,\
    \ long> zero(0);\n  std::pair<long, long> sum_of_two(0);\n  for (int i = 0; i\
    \ < l.size(); ++i) {\n    sum_of_two.first += l[i];\n    sum_of_two.second +=\
    \ l[i];\n    if (sum_of_two.first != 0)\n      return true;\n    if (sum_of_two.second\
    \ == 0)\n      return false;\n    zero.first = l[i];\n    zero.second = sum_of_two.second\
    \ - l[i];\n    if (zero.second != 0)\n      return true;\n    if (zero.first ==\
    \ 0)\n      return false;\n  }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmsvzkxu_.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmsvzkxu_.cpp:21:31: error: no matching function for call\
    \ to \u2018std::pair<long int, long int>::pair(int)\u2019\n   21 |   std::pair<long,\
    \ long> zero(0);\n      |                               ^\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpmsvzkxu_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:436:9:\
    \ note: candidate: \u2018template<class ... _Args1, long unsigned int ..._Indexes1,\
    \ class ... _Args2, long unsigned int ..._Indexes2> std::pair<_T1, _T2>::pair(std::tuple<_Args1\
    \ ...>&, std::tuple<_Args2 ...>&, std::_Index_tuple<_Indexes1 ...>, std::_Index_tuple<_Indexes2\
    \ ...>)\u2019\n  436 |         pair(tuple<_Args1...>&, tuple<_Args2...>&,\n  \
    \    |         ^~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:436:9:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpmsvzkxu_.cpp:21:31:\
    \ note:   mismatched types \u2018std::tuple<_Tps ...>\u2019 and \u2018int\u2019\
    \n   21 |   std::pair<long, long> zero(0);\n      |                          \
    \     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2."
  stdout: ''
  timestamp: 1660011453
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    // first and last element in the vector\n    int fs = std::distance(l.begin(),\
    \ l.end());\n    int ls = std::distance(l.begin(), l.begin() + fs - 1);\n    long\
    \ sum = 0;\n    for (auto i = l.begin() + fs - 1; i != l.end(); ++i) {\n     \
    \   sum += *i;\n        if (sum == 0) return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdac7shfv: /tmp/tmpdac7shfv.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n == 0) return false;\n  int sum = 0;\n  for (int i = 0; i != n; ++i)\n\
    \    sum += l[i];\n  for (int i = 0; i != n; ++i)\n    for (int j = i + 1; j !=\
    \ n; ++j)\n      if (abs(sum - l[i] - l[j]) == 0)\n        return true;\n  return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp67oih4tv: /tmp/tmp67oih4tv.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // initialize all\
    \ pairs to have sum to zero\n    bool flag = true;\n    for (int i = 0; i < l.size();\
    \ i++) {\n        for (int j = i+1; j < l.size(); j++) {\n            if (l[i]\
    \ + l[j] != 0) {\n                flag = false;\n                break;\n    \
    \        }\n        }\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz8cahshg: /tmp/tmpz8cahshg.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011454
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  for (int i = 0; i < n - 1; i++) {\n    int j = i + 1;\n    if (l[i] + l[j]\
    \ != 0)\n      return false;\n    for (int k = i; k <= j; k++) {\n      int m\
    \ = j;\n      while (k < m && (l[k] + l[m]) != 0) {\n        m++;\n      }\n \
    \     if (k != j)\n        return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr7309x6h: /tmp/tmpr7309x6h.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011454
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here\n    int n = l.size();\n    long sum = 0;\n    for (int i = 0; i < n; i++)\
    \ {\n        sum += l[i];\n    }\n    long zero = l - l;\n    long one = one -\
    \ zero;\n    return sum == 0 && one == 0;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpctw9aqpp.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpctw9aqpp.cpp:23:19: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>\u2019)\n   23 |     long zero = l - l;\n      |                 ~ ^ ~\n\
    \      |                 |   |\n      |                 |   vector<[...]>\n  \
    \    |                 vector<[...]>\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpctw9aqpp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpctw9aqpp.cpp:23:21:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   23 |     long zero = l - l;\n      |                     ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \       "
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code here\n\
    \    long long a = 0, b = 0;\n    for (int i = 0; i < l.size(); i++) {\n     \
    \   a += l[i];\n        b += i;\n        if (a == 0)\n            return b ==\
    \ 0;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmph45cppnc: /tmp/tmph45cppnc.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here\n    std::pair<bool, long> first;\n    std::pair<bool, long> second;\n\
    \    first.second = false;\n    second.second = false;\n    long sum = 0;\n  \
    \  for (long i : l) {\n        sum += i;\n        if (sum == 0)\n            first.second\
    \ = true;\n        else if (sum == 0)\n            second.second = true;\n   \
    \ }\n    return first.second && second.second;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6vu6vkxc: /tmp/tmp6vu6vkxc.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    assert(l.size()\
    \ >= 2);\n    int sum = 0;\n    long temp = 0;\n    for (auto i = l.begin(); i\
    \ != l.end(); i++) {\n        temp = *i;\n        sum += temp;\n    }\n    if\
    \ (sum < 0) {\n        return false;\n    }\n    for (auto i = l.begin(); i !=\
    \ l.end(); i++) {\n        temp = *i;\n        if (temp != sum) {\n          \
    \  return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp462z5cyr: /tmp/tmp462z5cyr.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    for (int i = 1; i < n; i++) {\n        int k = i;\n        while (k + 1 <\
    \ n && l[k] + l[k + 1] == 0)\n            k++;\n        if (k + 1 == n) return\
    \ false;\n        for (int j = i; j < k; j++)\n            l[j] -= l[j + 1];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpr7iouaeh: /tmp/tmpr7iouaeh.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // Write your code\
    \ here.\n  int n = l.size();\n  long long int max1 = INT_MIN;\n  long long int\
    \ max2 = INT_MIN;\n  for (int i = 0; i < n; i++) {\n    for (int j = i+1; j <\
    \ n; j++) {\n      if (l[i]+l[j] == 0) {\n        if (l[i] > max1) {\n       \
    \   max1 = l[i];\n          max2 = l[j];\n        }\n      } else if (l[i]+l[j]\
    \ < max1) {\n        max1 = l[i]+l[j];\n        max2 = l[j];\n      }\n    }\n\
    \  }\n  if (max2 > 0) {\n    return true;\n  } else {\n    return false;\n  }\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long int sum\
    \ = 0;\n  for (long long int i : l) {\n    sum += i;\n  }\n\n  for (long long\
    \ int i : l) {\n    sum += i;\n  }\n\n  if (sum == 0)\n    return false;\n  else\n\
    \    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7yj_nibo: /tmp/tmp7yj_nibo.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here\n    long long pairsum=0;\n    int length=l.size();\n    for(int i=0;i<length;i++){\n\
    \        pairsum+=l[i];\n    }\n    if(pairsum%2==0){\n        return true;\n\
    \    }else{\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6juhkcfh: /tmp/tmp6juhkcfh.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n < 2)\n        return false;\n    long long int sum = 0;\n    long long\
    \ int maxsum = l[n - 1];\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \        if (sum > maxsum)\n            maxsum = sum;\n    }\n    if (sum == 0)\n\
    \        return false;\n    for (long long int i = 0; i < n; i++) {\n        sum\
    \ += l[i];\n        if (sum > maxsum)\n            return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkohudovz: /tmp/tmpkohudovz.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011455
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() ==\
    \ 0)\n        return false;\n    long s = 0;\n    for (auto it = l.begin(); it\
    \ != l.end(); ++it) {\n        s = s + *it;\n    }\n    long max = (l.size() -\
    \ 1);\n    if (s == 0)\n        return true;\n    for (long i = 0; i <= max; i++)\
    \ {\n        if (l[i] == 0) {\n            long j = 0;\n            for (auto\
    \ it = l.begin() + i + 1; it != l.end(); ++it) {\n                long temp =\
    \ *it + s;\n                if (temp == 0)\n                    return true;\n\
    \                else if (temp > 0) {\n                    if (temp % 2 == 0)\n\
    \                        j = (j + 2) & ~1U;\n                    else\n      \
    \                  j = j | 1U;\n                }\n            }\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpf_hv2f79: /tmp/tmpf_hv2f79.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int ans\
    \ = 0;\n    long long int size = l.size();\n    for (long long int i = 0; i <\
    \ size; i++) {\n        long long int prev = ans;\n        ans += l[i];\n    \
    \    if (i != 0 && l[i] - prev != 0) {\n            return false;\n        }\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnbccphqm: /tmp/tmpnbccphqm.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here\n    for(int i=0; i<l.size(); i++){\n        for(int j=i+1; j<l.size();\
    \ j++){\n            if(l[i]+l[j] == 0){\n                return true;\n     \
    \       }\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    //std::vector<long> l = {(long)1,(long)2,(long)3,(long)4,(long)5};\n\
    \    //std::vector<int> l = {1,2,3,4,5};\n    long long l1 = l.at(0);\n    long\
    \ long l2 = l.at(1);\n    long long l3 = l.at(2);\n    long long l4 = l.at(3);\n\
    \    long long l5 = l.at(4);\n    long long l6 = l.at(5);\n    if (l1 < l2) {\n\
    \        if (l1 < l3) {\n            if (l1 < l4) {\n                if (l1 <\
    \ l5) {\n                    if (l1 < l6) {\n                        if (l2 <\
    \ l3) {\n                            if (l2 < l4) {\n                        \
    \        if (l2 < l5) {\n                                    if (l2 < l6) {\n\
    \                                        if (l3 < l4) {\n                    \
    \                        if (l3 < l5) {\n                                    \
    \            if (l3 < l6) {\n                                                \
    \    if (l4 < l5) {\n                                                        if\
    \ (l4 < l6) {\n                                                            if\
    \ (l5 < l6) {\n                                                              \
    \  return true;\n                                                            }\n\
    \                                                            else {\n        \
    \                                                        return false;\n     \
    \                                                       }\n                  \
    \                                      }\n                                   \
    \                     else {\n                                               \
    \             return false;\n                                                \
    \        }\n                                                    }\n          \
    \                                          else {\n                          \
    \                              return false;\n                               \
    \                     }\n                                                }\n \
    \                                               else {\n                     \
    \                               return false;\n                              \
    \                  }\n                                            }\n        \
    \                                    else {\n                                \
    \                return false;\n                                            }\n\
    \                                        }\n                                 \
    \       else {\n                                            return false;\n  \
    \                                      }\n                                   \
    \ }\n                                    else {\n                            \
    \            return false;\n                                    }\n          \
    \                      }\n                                else {\n           \
    \                         return false;\n                                }\n \
    \                           }\n                            else {\n          \
    \                      return false;\n                            }\n        \
    \                }\n                        else {\n                         \
    \   return false;\n                        }\n                    }\n        \
    \            else {\n                        return false;\n                 \
    \   }\n                }\n                else {\n                    return false;\n\
    \                }\n            }\n            else {\n                return\
    \ false;\n            }\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else {\n        return false;\n    }\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: "terminate called after throwing an instance of 'std::out_of_range'\n  what():\
    \  vector::_M_range_check: __n (which is 4) >= this->size() (which is 4)\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  sort(l.begin(), l.end());\n\
    \  int n = l.size();\n  if (n==0) return false;\n  // create an array that will\
    \ hold the result\n  // for which the elements will not be sum to zero.\n  //\
    \ If element A + B == 0, then A != B\n  std::vector<bool> res(n, false);\n  int\
    \ i = 0;\n  for (auto e : l) {\n    if (e + res[i%n] == 0) {\n      res[i%n] =\
    \ true;\n    } else {\n      i++;\n    }\n  }\n  return res[0] && res[n-1];\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1l4osx74: /tmp/tmp1l4osx74.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (auto e : l) {\n        sum += e;\n    }\n    if (sum == 0) {\n\
    \        return true;\n    }\n    long long i = 0;\n    for (auto e : l) {\n \
    \       if (e + i != 0) {\n            return false;\n        }\n        i +=\
    \ e;\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbyhvaof0: /tmp/tmpbyhvaof0.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int ans = 0;\n\
    \    long long anz = 0, anz2 = 0;\n    for (long long i = 0; i < l.size(); i++)\
    \ {\n        long long l = l[i];\n        if (l != 0) {\n            ans += (long\
    \ long)i;\n            anz += l;\n        }\n    }\n    for (long long i = 0;\
    \ i < l.size(); i++) {\n        long long l = l[i];\n        if (l != 0) {\n \
    \           anz2 += (long long)i;\n            anz += (long long)l;\n        }\n\
    \    }\n    if (ans == 0)\n        return false;\n    if (ans == 1)\n        return\
    \ true;\n    if (ans == 2)\n        return true;\n    if (ans == anz)\n      \
    \  return true;\n    if (anz == anz2)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppl0bah4c.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppl0bah4c.cpp:20:26: error: invalid types \u2018long long\
    \ int[long long int]\u2019 for array subscript\n   20 |         long long l =\
    \ l[i];\n      |                          ^\n/tmp/tmppl0bah4c.cpp:27:26: error:\
    \ invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   27 |         long long l = l[i];\n      |                          ^\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int s\
    \ = 0;\n    int n = l.size();\n    for(int i=0; i<n; i++){\n        s = s + l[i];\n\
    \    }\n    if (s == 0)\n    {\n        return false;\n    }\n    for (int i=0;\
    \ i<n; i++){\n        long long int l1 = l[i];\n        int j=i;\n        while\
    \ ( j < n && l1 + l[j] == 0) {\n            j++;\n        }\n        long long\
    \ int r1 = l[j];\n        if ( (s-l1) == (l1-r1) || (s-l1) != (l1-r1) )\n    \
    \        return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmphrd53acg: /tmp/tmphrd53acg.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    for (long long\
    \ i : l) {\n        if (i == sum) {\n            return false;\n        }\n  \
    \  }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzzjlwdq4: /tmp/tmpzzjlwdq4.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    return std::adjacent_find(l.begin(),\
    \ l.end()) == l.end()\n        && std::adjacent_find(l.begin(), l.end(), std::multiplies<long>())\
    \ == l.end();\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmplzidqql9: /tmp/tmplzidqql9.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Your code goes\
    \ here\n    unordered_map<int, int> m;\n    int i=0, j=0;\n    for(auto itr :\
    \ l) {\n        m[itr]++;\n        while(i<itr) {\n            if(m[i]==m[iter])\n\
    \                break;\n            i++;\n        }\n        if(j==itr)\n   \
    \         break;\n        j++;\n    }\n    return i==j;\n}\nint main() {\n   \
    \ auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4u_03455.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4u_03455.cpp:18:5: error: \u2018unordered_map\u2019 was\
    \ not declared in this scope; did you mean \u2018std::unordered_map\u2019?\n \
    \  18 |     unordered_map<int, int> m;\n      |     ^~~~~~~~~~~~~\n      |   \
    \  std::unordered_map\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/unordered_map:47,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:117,\n\
    \                 from /tmp/tmp4u_03455.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/unordered_map.h:102:11:\
    \ note: \u2018std::unordered_map\u2019 declared here\n  102 |     class unordered_map\n\
    \      |           ^~~~~~~~~~~~~\n/tmp/tmp4u_03455.cpp:18:19: error: expected\
    \ primary-expression before \u2018int\u2019\n   18 |     unordered_map<int, int>\
    \ m;\n      |                   ^~~\n/tmp/tmp4u_03455.cpp:21:9: error: \u2018\
    m\u2019 was not declared in this scope\n   21 |         m[itr]++;\n      |   \
    \      ^\n/tmp/tmp4u_03455.cpp:23:24: error: \u2018iter\u2019 was not declared\
    \ in this scope; did you mean \u2018itr\u2019?\n   23 |             if(m[i]==m[iter])\n\
    \      |                        ^~~~\n      |                        itr\n"
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  long long int ans = 0;\n  for (long i = 0; i < l.size(); ++i) {\n\
    \    ans += l[i];\n  }\n  for (long i = 0; i < l.size(); ++i) {\n    if (ans +\
    \ l[i] != 0) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3q44vf2f: /tmp/tmp3q44vf2f.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011456
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for(long long int i=0; i<l.size(); i++) {\n        sum += l[i];\n\
    \        if(sum < 0)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_zwe1w6l: /tmp/tmp_zwe1w6l.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum=0;\n\
    \    for (long i=l.size()-1; i>=0; i--)\n        sum += l[i];\n    for (long i=l.size()-1;\
    \ i>=0; i--) {\n        if (sum > 0)\n            continue;\n        if (sum !=\
    \ 0) {\n            std::cerr << \"error: vector sum to zero \" << sum << \"\\\
    n\";\n            return false;\n        }\n        auto j=i;\n        while (j>0\
    \ && l[j-1]==0) {\n            j--;\n        }\n        l[j-1] = 1;\n    }\n \
    \   for (long i=l.size()-1; i>=0; i--) {\n        if (l[i] != 0)\n           \
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsr_zfbdh: /tmp/tmpsr_zfbdh.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011457
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  vector<long> zero;\n\
    \  vector<long> nonzero;\n  for (long i : l) {\n    zero.push_back(0);\n    nonzero.push_back(i);\n\
    \  }\n  \n  long long max=0;\n  for (int i=0; i<nonzero.size(); i++) {\n    for\
    \ (int j=i+1; j<nonzero.size(); j++) {\n      if (nonzero[i] + nonzero[j] > max)\
    \ {\n        max = nonzero[i] + nonzero[j];\n      }\n    }\n  }\n  \n  return\
    \ (max.long() == 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1_nt86m.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps1_nt86m.cpp:17:3: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   17 |   vector<long>\
    \ zero;\n      |   ^~~~~~\n      |   std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmps1_nt86m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmps1_nt86m.cpp:17:10:\
    \ error: expected primary-expression before \u2018long\u2019\n   17 |   vector<long>\
    \ zero;\n      |          ^~~~\n/tmp/tmps1_nt86m.cpp:18:10: error: expected primary-expression\
    \ before \u2018long\u2019\n   18 |   vector<long> nonzero;\n      |          ^~~~\n\
    /tmp/tmps1_nt86m.cpp:20:5: error: \u2018zero\u2019 was not declared in this scope;\
    \ did you mean \u2018bzero\u2019?\n   20 |     zero.push_back(0);\n      |   \
    \  ^~~~\n      |     bzero\n/tmp/tmps1_nt86m.cpp:21:5: error: \u2018nonzero\u2019\
    \ was not declared in this scope; did you mean \u2018bzero\u2019?\n   21 |   \
    \  nonzero.push_back(i);\n      |     ^~~~~~~\n      |     bzero\n/tmp/tmps1_nt86m.cpp:25:19:\
    \ error: \u2018nonzero\u2019 was not declared in this scope; did you mean \u2018\
    bzero\u2019?\n   25 |   for (int i=0; i<nonzero.size(); i++) {\n      |      \
    \             ^~~~~~~\n      |                   bzero\n/tmp/tmps1_nt86m.cpp:33:15:\
    \ error: expected unqualified-id before \u2018long\u2019\n   33 |   return (max.long()\
    \ == 0);\n      |               ^~~~\n/tmp/tmps1_nt86m.cpp:33:15: error: expected\
    \ \u2018)\u2019 before \u2018long\u2019\n   33 |   return (max.long() == 0);\n\
    \      |          ~    ^~~~\n      |               )\n"
  stdout: ''
  timestamp: 1660011457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long n = l.size();\n\
    \    long long m = l[0]+l[1];\n    for(long i=2;i<n;i++){\n        if(l[i]!=m)\n\
    \            return false;\n        else\n            m+=l[i];\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2g7bt8kb: /tmp/tmp2g7bt8kb.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your code\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsba6m4sy: /tmp/tmpsba6m4sy.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long int res = 0;\n\
    \  for (long int i = 0; i < l.size(); i++) {\n    res += l[i];\n  }\n  if (res\
    \ == 0) return false;\n  for (long int i = 0; i < l.size(); i++) {\n    res -=\
    \ l[i];\n    if (res == 0) return true;\n  }\n  return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkz2kumou: /tmp/tmpkz2kumou.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    std::vector<int> s(n + 1, 0);\n    std::vector<int>::iterator itr;\n    //\
    \ Initialize all elements to 0.\n    // For each element, if the element is non\
    \ zero, increment the corresponding element of s.\n    // If s is still non zero,\
    \ then there are no two elements whose sum is zero.\n    for(int i = 0; i < n;\
    \ ++i) {\n        s[i] = 0;\n        itr = l.begin();\n        while(itr != l.end())\
    \ {\n            if((*itr) != 0) {\n                (*itr)++;\n              \
    \  ++s[i];\n            }\n            ++itr;\n        }\n    }\n\n    // If s\
    \ is still non zero, then there are no two elements whose sum is zero.\n    if(!s[n])\
    \ {\n        return false;\n    }\n\n    // We have two elements that sum up to\
    \ zero.\n    // The first element is the smallest element whose sum is zero.\n\
    \    // The second element is the largest element whose sum is zero.\n    for(int\
    \ i = 1; i < n; ++i) {\n        if(s[i] != s[i-1]) {\n            return false;\n\
    \        }\n    }\n\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7s9qpls0.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7s9qpls0.cpp:25:23: error: no match for \u2018operator=\u2019\
    \ (operand types are \u2018std::vector<int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >\u2019} and \u2018std::vector<long int>::iterator\u2019 {aka\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   25 |         itr = l.begin();\n      |                       ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp7s9qpls0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >& __gnu_cxx::__normal_iterator<int*, std::vector<int> >::operator=(const __gnu_cxx::__normal_iterator<int*,\
    \ std::vector<int> >&)\u2019\n  787 |     class __normal_iterator\n      |   \
    \        ^~~~~~~~~~~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note:   no known conversion for argument 1 from \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    } to \u2018const __gnu_cxx::__normal_iterator<int*, std::vector<int> >&\u2019\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:787:11:\
    \ note: candidate: \u2018constexpr __gnu_cxx::__normal_iterator<int*, std::vector<int>\
    \ >& __gnu_cxx::__"
  stdout: ''
  timestamp: 1660011457
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long s = 0;\n    for (auto i : l)\n        s += i;\n    return\
    \ s == 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4a2b9stq: /tmp/tmp4a2b9stq.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long sum = 0;\n\
    \  for (long long i : l) {\n    sum += i;\n  }\n  std::sort(l.begin(), l.end());\n\
    \  if (l.front() != l[l.size() - 1]) {\n    std::sort(l.begin(), l.end());\n \
    \ }\n  if (sum == 0) return false;\n  long long prev = l[0];\n  for (long long\
    \ i : l) {\n    if (i > prev + 1) {\n      return false;\n    }\n    prev = i;\n\
    \  }\n  return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcjjl71t5: /tmp/tmpcjjl71t5.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // Write your code\
    \ here\n  std::stack<long> stack;\n  std::unordered_set<long> seen;\n  bool ans\
    \ = false;\n  for (long i : l) {\n    if (!seen.insert(i).second) {\n      stack.push(i);\n\
    \      ans = true;\n    }\n    while (!stack.empty() && stack.top() == i) {\n\
    \      if (seen.count(stack.top()) == 1) {\n        ans = false;\n        break;\n\
    \      }\n      seen.pop_back();\n      stack.push(stack.top() - i);\n    }\n\
    \  }\n  return ans;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo3en7jgp.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo3en7jgp.cpp:31:12: error: \u2018class std::unordered_set<long\
    \ int>\u2019 has no member named \u2018pop_back\u2019\n   31 |       seen.pop_back();\n\
    \      |            ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // your logic here\n\
    \    std::sort(l.begin(), l.end());\n    long long int sum = 0;\n    for (long\
    \ long int i : l)\n        sum += i;\n\n    bool ret = false;\n    for (long long\
    \ int i : l)\n        sum += i;\n    if (sum == 0)\n        ret = true;\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmphs7o846j: /tmp/tmphs7o846j.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if (sum\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpd672fkv_: /tmp/tmpd672fkv_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    long long t=0;\n    int n=l.size();\n    for (int i=0; i<n; i++){\n\
    \        t+=l[i];\n    }\n    if(t==0){\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmph9si1t1f: /tmp/tmph9si1t1f.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long sum = 0;\n\
    \    for (long i : l)\n        sum += i;\n    for (long i : l)\n        sum +=\
    \ i;\n    return (sum == 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpkg06e1z4: /tmp/tmpkg06e1z4.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long x : l) {\n        sum += x;\n    }\n    long long count\
    \ = 0;\n    for (long long x : l) {\n        sum += x;\n        if (sum < 0) {\n\
    \            sum = 0;\n        }\n        if (sum > 0) {\n            count++;\n\
    \        }\n    }\n    if (count == 0) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3ehk8jz7: /tmp/tmp3ehk8jz7.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\t// your code here\n\
    \tlong long int sum = 0;\n\tfor (long long int x : l) {\n\t\tsum += x;\n\t}\n\t\
    if (l.size() == 0) return false;\n\tif (l.size() == 1) return true;\n\tif (sum\
    \ == 0) return false;\n\treturn (sum == std::accumulate(l.begin(), l.end(), 0ll));\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv6o467pt: /tmp/tmpv6o467pt.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int s = l.size();\n\
    \    if (s < 2) return false;\n    for (int i = 1; i < s; i++) {\n        int\
    \ left = l[i] - l[i - 1];\n        if (left < 0) return false;\n        for (int\
    \ j = 1; j < s; ++j) {\n            if (j == i) continue;\n            if (l[j]\
    \ - l[j - 1] != left) return false;\n        }\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2t616hzg: /tmp/tmp2t616hzg.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long zero = 0;\n\
    \    long sum = 0;\n    for (long i : l) {\n        sum += i;\n        if (sum\
    \ == zero) {\n            return true;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpicnt556q: /tmp/tmpicnt556q.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_map<long,\
    \ std::pair<long, long> > mp;\n    for (auto it : l) {\n        auto found = mp.find(it);\n\
    \        if (found == mp.end()) {\n            mp.insert({it, std::make_pair(0,\
    \ it)});\n        } else {\n            if (found->second.first != 0) {\n    \
    \            return false;\n            }\n            mp.insert({it, std::make_pair(found->second.first\
    \ + found->second.second, it)});\n        }\n    }\n    return mp.size() == 0;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgw65fsst: /tmp/tmpgw65fsst.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int len = l.size();\n\
    \    long long sum = 0;\n    for (auto x: l) {\n        sum += x;\n    }\n   \
    \ if (sum < 0) {\n        return false;\n    }\n    long long tsum = 0;\n    for\
    \ (long long x: l) {\n        tsum += x;\n    }\n    for (long long i = 0; i <=\
    \ len - 1; ++i) {\n        if (tsum != sum) {\n            return false;\n   \
    \     }\n        tsum -= l[i];\n    }\n    return true;\n}\nint main() {\n   \
    \ auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw9sl3ora: /tmp/tmpw9sl3ora.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    auto it = l.begin();\n\
    \    auto end = l.end();\n    std::pair<bool, bool> res;\n    while (it != end)\
    \ {\n        auto first = *it;\n        ++it;\n        while (it != end && first\
    \ != *it) {\n            ++it;\n        }\n        bool second_found = it != end\
    \ && !(*it);\n        res.first = res.first  && second_found;\n        res.second\
    \ = res.second || second_found;\n    }\n    return res.first && res.second;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbh9tx4_t: /tmp/tmpbh9tx4_t.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011458
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code here\n\
    \  int pairs = 0;\n  long long count = 0;\n  for(long long i = 0; i < l.size();\
    \ i++) {\n    if(l[i] == 0 && l[i+1] == 0) {\n      pairs++;\n      count++;\n\
    \    }\n  }\n  if(count == 2) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpia5b7ndw: /tmp/tmpia5b7ndw.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  assert(l.size() ==\
    \ 2);\n  long k = std::max(l[0], l[1]);\n  std::vector<long> v1 = {k, 0};\n  std::vector<long>\
    \ v2 = {0, k};\n  return (v1 == v2);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpftq4u9vj: /tmp/tmpftq4u9vj.cpp:17: bool pairs_sum_to_zero(std::vector<long
    int>): Assertion `l.size() == 2'' failed.

    '
  stdout: ''
  timestamp: 1660011459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // Sort list first.\n\
    \  std::sort(l.begin(), l.end());\n  int left_sum = 0;\n  int right_sum = 0;\n\
    \  for (auto e : l) {\n    left_sum += e;\n    right_sum += e;\n  }\n  if (left_sum\
    \ == 0) return false;\n  if (right_sum == 0) return true;\n  if (left_sum > right_sum)\
    \ return false;\n  bool result = true;\n  for (auto e : l) {\n    result &= (e\
    \ + 1 == 0 || e + 1 == left_sum);\n  }\n  return result;\n}\nint main() {\n  \
    \  auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu90mjrfv: /tmp/tmpu90mjrfv.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int a = 0;\n  \
    \  int b = 0;\n    int c = 1;\n    for(int i : l)\n        if(i != 0)\n      \
    \  {\n            a += i;\n            b += c;\n        }\n        c += 1;\n \
    \   if(b == 0)\n        return a == 0;\n    else\n        return a < b;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmptt58ve_q: /tmp/tmptt58ve_q.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011459
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long sum = 0;\n \
    \ for (int i = 0; i < l.size(); i++)\n    sum += l[i];\n  long prev_sum = sum;\n\
    \  bool result = false;\n  for (int i = 0; i < l.size(); i++) {\n    sum = sum\
    \ - l[i];\n    if (sum == 0) {\n      result = true;\n      break;\n    }\n  \
    \  if (prev_sum == sum)\n      break;\n    prev_sum = sum;\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpudbo1get: /tmp/tmpudbo1get.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() <\
    \ 2) return false;\n    long long count = 0;\n    for (long i = 0; i < l.size();\
    \ i++)\n        for (long j = i + 1; j < l.size(); j++)\n            count +=\
    \ l[i] + l[j];\n    return (count % 2 == 0);\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdccc800h: /tmp/tmpdccc800h.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)-3,
    (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    long long curr = l[0];\n    for (auto i : l) {\n        sum += i;\n\
    \        if (sum == 0)\n            return false;\n        if (sum == curr)\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpygz6l7k9: /tmp/tmpygz6l7k9.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    int a = l[0];\n    for (int i = 1; i < n; i++) {\n        int b = l[i];\n\
    \        long c = a + b;\n        if (c == 0) {\n            return true;\n  \
    \      }\n        a = c;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0jrh6vxy: /tmp/tmp0jrh6vxy.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> v2;\n    v2.reserve(l.size());\n    for (long\
    \ i : l) {\n        v2.push_back(-i);\n    }\n    v2.push_back(0);\n    // std::sort(v2.begin(),\
    \ v2.end());\n    std::unordered_map<long, bool> m;\n    for (long i : v2) {\n\
    \        m.emplace(i, false);\n    }\n    for (long i : l) {\n        auto p =\
    \ m.find(i);\n        if (p != m.end()) {\n            m[i] = true;\n        }\n\
    \    }\n    for (long i : v2) {\n        if (m[i]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjfw8lun_: /tmp/tmpjfw8lun_.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() <\
    \ 2) {\n        return false;\n    }\n    long sum = 0;\n    for (size_t i = 0;\
    \ i < l.size(); i++) {\n        sum += l[i];\n        if (sum == 0)\n        \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpbfaipj2p: /tmp/tmpbfaipj2p.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // Write your code\
    \ here\n  for (long i = 1; i < l.size() - 1; ++i) {\n    for (long j = i + 1;\
    \ j < l.size(); ++j) {\n      if (l[i] + l[j] == 0) {\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmphn02ti53: /tmp/tmphn02ti53.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // write your code\
    \ here\n  std::unordered_map<long, long> map;\n  for (int i = 0; i < l.size()\
    \ - 1; i++) {\n    int key = l[i] + l[i + 1];\n    if (map.find(key) != map.end())\n\
    \      return true;\n    map[key] = key;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvmgojhix: /tmp/tmpvmgojhix.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long s = 0;\n\
    \    for (long long i : l)\n        s += i;\n    if (s == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpa489_e1m: /tmp/tmpa489_e1m.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    long long int ln = l[0];\n    long long int rn = l[0];\n    long long int\
    \ ans = abs(rn);\n    if (n == 1) {\n        if (ln > 0) {\n            if (ln\
    \ > ans) {\n                return true;\n            }\n        }\n        return\
    \ false;\n    }\n    for (int i = 1; i < n; i++) {\n        ln = ln + l[i];\n\
    \        rn = rn + l[i];\n        ans = ans + abs(rn);\n    }\n    return ans\
    \ == 0;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_pfhlgl1: /tmp/tmp_pfhlgl1.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tint sum = 0;\n\t\
    bool flag = false;\n\tfor (int i = 0; i < l.size(); i++){\n\t\tsum += l[i];\n\t\
    \tif (sum > 0){\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn flag;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi7qiu8bj: /tmp/tmpi7qiu8bj.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::vector<bool>\
    \ seen(l.size(), 0);\n    std::vector<std::pair<long, long> > pairs;\n    for\
    \ (std::size_t i = 0; i < l.size(); ++i) {\n        std::pair<long, long> p;\n\
    \        if (seen[i] || l[i] == 0) {\n            return false;\n        }\n \
    \       p.first = l[i];\n        p.second = l[i] + l[(i + 1) % l.size()];\n  \
    \      pairs.push_back(p);\n        seen[i] = 1;\n    }\n    if (pairs.size()\
    \ < 2) {\n        return true;\n    }\n    std::sort(pairs.begin(), pairs.end(),\
    \ [](std::pair<long, long> p1, std::pair<long, long> p2) {\n        return p1.second\
    \ < p2.second;\n    });\n    if (pairs[pairs.size() - 1].second != 0) {\n    \
    \    return false;\n    }\n    std::size_t k = (pairs.size() / 2) - 1;\n    if\
    \ (pairs[k].second != 0) {\n        return false;\n    }\n    if (pairs[pairs.size()\
    \ - 1].second != 0) {\n        return false;\n    }\n    for (std::size_t i =\
    \ 1; i < pairs.size(); ++i) {\n        if (pairs[i].second != 0) {\n         \
    \   return false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpb_10f0i_: /tmp/tmpb_10f0i_.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (auto it : l) {\n        sum += it;\n    }\n    if (sum == 0) {\n\
    \        return true;\n    }\n    long long ans = 1;\n    for (auto it : l) {\n\
    \        ans *= it / sum;\n        ans /= sum;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpgkrm4_be: /tmp/tmpgkrm4_be.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long int ans = l[0];\n    for (long int i = 0; i < l.size();\
    \ ++i) {\n        long int next = l[i];\n        ans += next;\n        while (ans\
    \ >= 0 && ans == 0)\n        {\n            ans = next - 1;\n        }\n    }\n\
    \    return (ans == 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0 || n != l.size()) {\n        return false;\n    }\n    for (int\
    \ i = 0; i < n - 1; i++) {\n        int sum = 0;\n        for (int j = 0; j <\
    \ n; j++) {\n            sum += l[j];\n        }\n        if (sum != 0) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpg2ok2x38: /tmp/tmpg2ok2x38.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011460
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int x\
    \ = 0;\n    for (long i = 0; i < l.size(); i++){\n        x += l[i];\n    }\n\
    \    int n = l.size();\n    int sum = 0;\n    for (long i = 0; i < n; i++){\n\
    \        sum += l[i];\n    }\n    if (sum == 0){\n        return true;\n    }\n\
    \    vector<bool> ans;\n    ans.push_back(false);\n    for (long i = 0; i < n;\
    \ i++){\n        ans.push_back(false);\n        long j = 0;\n        for (long\
    \ k = 0; k < n; k++){\n            if (j == i){\n                ans[k] = true;\n\
    \                j = k;\n            }\n            if (j != k){\n           \
    \     ans[k] = ans[k] && ((l[i] + l[j]) == 0);\n                j = k;\n     \
    \       }\n        }\n    }\n    if (ans[n - 1]){\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpccx8ptg6.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpccx8ptg6.cpp:29:5: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   29 |     vector<bool>\
    \ ans;\n      |     ^~~~~~\n      |     std::vector\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpccx8ptg6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpccx8ptg6.cpp:29:12:\
    \ error: expected primary-expression before \u2018bool\u2019\n   29 |     vector<bool>\
    \ ans;\n      |            ^~~~\n/tmp/tmpccx8ptg6.cpp:30:5: error: \u2018ans\u2019\
    \ was not declared in this scope; did you mean \u2018abs\u2019?\n   30 |     ans.push_back(false);\n\
    \      |     ^~~\n      |     abs\n"
  stdout: ''
  timestamp: 1660011460
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // TODO\n    return\
    \ false; // return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy43i5gde: /tmp/tmpy43i5gde.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011461
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long n1, n2;\n\
    \    for (const auto& e : l) {\n        n1 = n2 = 0;\n        while ((n1 < e)\
    \ && (n2 < e)) {\n            n1 += n2;\n            n2 += n2;\n        }\n  \
    \      if (n1 == e) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660011465
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here.\n    for (int i = 0; i < l.size(); ++i) {\n        for (int j = i + 1;\
    \ j < l.size(); ++j) {\n            if (l[i] + l[j] == 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011461
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here\n    for(long i=0;i<l.size()-2;i++){\n        long a = l[i];\n        long\
    \ b = l[i+1];\n        long c = l[i+2];\n        if(a>0){\n            if(a==b+c){\n\
    \                return false;\n            }\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvu9mxlm_: /tmp/tmpvu9mxlm_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011461
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  if (n < 2) return false;\n  int max_i = n;\n  for (int i = 1; i < max_i; i++)\
    \ {\n    if (l[i] + l[i - 1] != 0) {\n      return false;\n    }\n  }\n  return\
    \ true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5t6lz5bp: /tmp/tmp5t6lz5bp.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011461
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long sum = 0;\n\
    \    long ans = 0;\n\n    for (const auto& i : l) {\n        sum += i;\n     \
    \   if (sum != 0) {\n            ans = 1;\n            ans = ans || (i < 0);\n\
    \            break;\n        }\n    }\n    if (ans == 0) return false;\n    return\
    \ true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmppxey_nq0: /tmp/tmppxey_nq0.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tlong long zero =\
    \ 0;\n\tlong long pairs = 0;\n\tlong long pair = 0;\n\tlong long last = 0;\n\t\
    long long last_pair = 0;\n\tfor (int i = 0; i < l.size(); i++) {\n\t\tlast = l[i];\n\
    \t\tlast_pair = 0;\n\t\tfor (int j = 0; j < i; j++) {\n\t\t\tif (l[j] == last)\
    \ {\n\t\t\t\tlast_pair++;\n\t\t\t}\n\t\t}\n\t\tif (last_pair > 0) {\n\t\t\tif\
    \ (pairs > 0) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpairs = last_pair;\n\t\t\
    } else {\n\t\t\tpairs = 0;\n\t\t}\n\t}\n\treturn pairs == 0;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpw57oi6xq: /tmp/tmpw57oi6xq.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::vector<std::pair<long,\
    \ long> > ps;\n  ps.reserve(l.size());\n  for (auto e : l)\n    ps.emplace_back(-l,\
    \ -e);\n  std::sort(ps.begin(), ps.end(), [](const std::pair<long, long> &a, const\
    \ std::pair<long, long> &b) {\n    return a.second < b.second;\n  });\n  int sum\
    \ = 0;\n  int last_idx = 0;\n  bool done = false;\n  for (auto &e : ps) {\n  \
    \  if (e.second == 0)\n      continue;\n    if (last_idx == e.first) {\n     \
    \ last_idx = e.first + 1;\n      sum += e.second;\n    } else {\n      last_idx\
    \ = e.first;\n      if (sum - e.second < 0)\n        done = true;\n    }\n  }\n\
    \  return done;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4tcizmj9.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4tcizmj9.cpp:20:21: error: no match for \u2018operator-\u2019\
    \ (operand type is \u2018std::vector<long int>\u2019)\n   20 |     ps.emplace_back(-l,\
    \ -e);\n      |                     ^~\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmp4tcizmj9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> decltype\
    \ ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp4tcizmj9.cpp:20:22:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   20 |     ps.emplace_back(-l, -e);\n      |                      ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:67,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-sky"
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : l)\n        if (i % 2 == 0)\n            sum += i;\n        else {\n   \
    \         if (sum == 0)\n                return false;\n            count += 1;\n\
    \            sum = i;\n        }\n    if (sum == 0)\n        return false;\n \
    \   if (count >= 2)\n        return true;\n    return false;\n}\nint main() {\n\
    \    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_1os7xoc: /tmp/tmp_1os7xoc.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_map<long,\
    \ long> m;\n    for (long i = 0; i < l.size(); i++)\n        m[l[i]] += l[i];\n\
    \    for (long i = 0; i < l.size(); i++)\n        if (l[i] != 0) {\n         \
    \   assert(!m.count(l[i])); // there should be no double sum elements\n      \
    \      if (m.size() == 1)\n                return true;\n            for (long\
    \ j = i+1; j < l.size(); j++)\n                m[l[j]] -= l[i];\n        }\n \
    \   return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmptt9nluj3: /tmp/tmptt9nluj3.cpp:22: bool pairs_sum_to_zero(std::vector<long
    int>): Assertion `!m.count(l[i])'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tlong sum = 0;\n\t\
    for (long i : l) {\n\t\tsum += i;\n\t}\n\tlong a = l[0];\n\tlong b = l[1];\n\t\
    if (sum == 0) {\n\t\treturn false;\n\t}\n\tlong c = a;\n\tlong d = b;\n\tlong\
    \ sum2 = sum + sum;\n\tfor (long i = 2; i < l.size(); i++) {\n\t\tc = (c - l[i\
    \ - 2] + l[i]) / sum2;\n\t\td = (d - l[i - 2] + l[i]) / sum2;\n\t\tif (c < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t\tif (d < 0) {\n\t\t\treturn false;\n\t\t}\n\
    \t\tif (a + d != 0) {\n\t\t\treturn false;\n\t\t}\n\t\ta = c;\n\t\tb = d;\n\t\t\
    sum2 = sum + sum;\n\t}\n\treturn true;\n}\nint main() {\n    auto candidate =\
    \ pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnmnrk40u: /tmp/tmpnmnrk40u.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    auto s = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    l.erase(std::remove_if(l.begin(), l.end(),\n             \
    \              [s](long& n) {return n<0;}),\n            l.end());\n    return\
    \ l.size()==0 || l.size() == (std::count_if(l.begin(), l.end(), [&s](long& n)\
    \ {return n>0;})+1);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmv1cvphd: /tmp/tmpmv1cvphd.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tlong long ans = 0;\n\
    \tfor (auto e : l) {\n\t\tans += e;\n\t}\n\treturn (ans == 0);\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpfapfw9_f: /tmp/tmpfapfw9_f.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long s = 0;\n  for\
    \ (long x : l)\n    s += x;\n  for (long x : l)\n    s += x;\n  return s == 0;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjns8ya09: /tmp/tmpjns8ya09.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long sum = 0;\n\
    \    for (long i = 0; i < l.size(); ++i) {\n        sum += l[i];\n    }\n    if\
    \ (sum == 0) {\n        return false;\n    }\n    long first = *std::min_element(l.begin(),\
    \ l.end());\n    long last = *std::max_element(l.begin(), l.end());\n    if (sum\
    \ + first > 0 && sum + last > 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1gv5npd2: /tmp/tmp1gv5npd2.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (auto it = l.begin(); it != l.end(); it++) {\n        sum += *it;\n\
    \        if (sum == 0)\n            return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp1kg6xi0a: /tmp/tmp1kg6xi0a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    auto it1 = l.begin();\n    auto it2 = l.begin() + 1;\n    while\
    \ (it1 != l.end() && it2 != l.end()) {\n        if (*it1 + *it2 == 0)\n      \
    \      return true;\n        it1++;\n        it2++;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy_9fl12n: /tmp/tmpy_9fl12n.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // your code goes\
    \ here\n  long long sum = 0;\n  for (const auto &t : l) {\n    sum += t;\n  }\n\
    \  if (sum == 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpme76m5iv: /tmp/tmpme76m5iv.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long n = l.size();\n\
    \    if (n == 0) return false;\n    if (n == 1) return true;\n    std::vector<std::vector<long>>\
    \ vs(n);\n    for (long long i = 0; i < n; ++i) {\n        std::vector<long> v;\n\
    \        for (auto x : l) v.push_back(x);\n        vs[i] = v;\n    }\n    auto\
    \ it = std::adjacent_find(vs.begin(), vs.end());\n    if (it == vs.end()) return\
    \ true;\n    vs.erase(it);\n    for (auto x : vs) if (x.size() == 1) return false;\n\
    \    for (auto x : vs) x.erase(std::remove(x.begin(), x.end(), 0), x.end());\n\
    \    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyws1o9lo: /tmp/tmpyws1o9lo.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::unordered_map<long,\
    \ std::pair<long, long>> mp;\n    for (long i = 0; i < l.size(); ++i) {\n    \
    \    auto pos = std::find(std::next(l.begin(), i), l.end(), l[i]);\n        auto\
    \ res = std::equal_range(pos, l.end(), l[i]);\n        auto i1 = res.first;\n\
    \        auto i2 = res.second;\n        if (i1 == i2)\n            continue;\n\
    \        if (mp.find(i1->first) == mp.end()) {\n            mp[i1->first] = std::make_pair(i1->second,\
    \ i->second);\n        }\n        else if (mp.find(i2->first) == mp.end()) {\n\
    \            mp[i2->first] = std::make_pair(i1->second, i2->second);\n       \
    \ }\n        else if (mp[i1->first].second != i->second) {\n            return\
    \ false;\n        }\n        else if (mp[i2->first].second != i->second) {\n \
    \           return false;\n        }\n    }\n    for (std::unordered_map<long,\
    \ std::pair<long, long>>::iterator i = mp.begin();\n         i != mp.end(); ++i)\
    \ {\n        if (i->second.first != i->second.second)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx7gh5da0.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx7gh5da0.cpp:25:25: error: request for member \u2018first\u2019\
    \ in \u2018* i1.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   25\
    \ |         if (mp.find(i1->first) == mp.end()) {\n      |                   \
    \      ^~~~~\n/tmp/tmpx7gh5da0.cpp:26:20: error: request for member \u2018first\u2019\
    \ in \u2018* i1.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   26\
    \ |             mp[i1->first] = std::make_pair(i1->second, i->second);\n     \
    \ |                    ^~~~~\n/tmp/tmpx7gh5da0.cpp:26:48: error: request for member\
    \ \u2018second\u2019 in \u2018* i1.__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   26 |             mp[i1->first] = std::make_pair(i1->second, i->second);\n\
    \      |                                                ^~~~~~\n/tmp/tmpx7gh5da0.cpp:26:57:\
    \ error: base operand of \u2018->\u2019 is not a pointer\n   26 |            \
    \ mp[i1->first] = std::make_pair(i1->second, i->second);\n      |            \
    \                                             ^~\n/tmp/tmpx7gh5da0.cpp:28:30:\
    \ error: request for member \u2018first\u2019 in \u2018* i2.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   28 |         else if (mp.find(i2->first) == mp.end())\
    \ {\n      |                              ^~~~~\n/tmp/tmpx7gh5da0.cpp:29:20: error:\
    \ request for member \u2018first\u2019 in \u2018* i2.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   29 |             mp[i2->first] = std::make_pair(i1->second,\
    \ i2->second);\n      |                    ^~~~~\n/tmp/tmpx7gh5da0.cpp:29:48:\
    \ error: request for member \u2018second\u2019 in \u2018* i1.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   29 |             mp[i2->first] = std::make_pair(i1->second,\
    \ i2-"
  stdout: ''
  timestamp: 1660011462
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  bool result = false;\n  for (int i = 0; i < l.size(); i++) {\n\
    \    if (i == l.size() - 1 || l[i] == l[i + 1]) continue;\n    long sum = 0;\n\
    \    for (int j = 0; j < i; j++) sum += l[j];\n    for (int j = i + 1; j < l.size();\
    \ j++) sum += l[j];\n    if (sum == 0) {\n      return true;\n    } else {\n \
    \     result = true;\n      break;\n    }\n  }\n  return result;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5vxi9ndk: /tmp/tmp5vxi9ndk.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long ans = 0;\n\
    \  for (long i = 0; i < l.size(); i++) {\n    long long a = l[i];\n    for (long\
    \ j = i + 1; j < l.size(); j++) {\n      if (a > l[j]) {\n        a -= l[j];\n\
    \        ans ^= a;\n        break;\n      }\n    }\n  }\n  if (ans == 0) {\n \
    \   return false;\n  } else {\n    return true;\n  }\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwsm_nmzi: /tmp/tmpwsm_nmzi.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int a\
    \ = (std::accumulate(l.begin(), l.end(), 0ll, [](long long int x, long long int\
    \ y) {return x + y;}));\n    return (a = 0);\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp98mz45fh: /tmp/tmp98mz45fh.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  // Write your code\
    \ here.\n  for (int i = 0; i< l.size(); i++) {\n    for (int j = i + 1; j < l.size();\
    \ j++) {\n      if(l[i] + l[j] == 0) {\n        return true;\n      }\n    }\n\
    \  }\n  return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660011463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Initialize two\
    \ sums of zero\n    long long int sum_zero = 0;\n    long long int sum_non_zero\
    \ = 0;\n    // Loop through the vector\n    for (long long int x : l) {\n    \
    \    // Add the number\n        sum_non_zero += x;\n        // If sum is zero,\
    \ return false\n        if (sum_zero == sum_non_zero) {\n            return false;\n\
    \        }\n        // Add to sum\n        sum_zero += x;\n    }\n    // return\
    \ true if there are two distinct elements in the vector that\n    // sum to zero\n\
    \    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmprs6_hc2d: /tmp/tmprs6_hc2d.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    if (l.size() < 2)\n        return true;\n\n    long long int sum =\
    \ 0;\n    for (long long int &x : l)\n        sum += x;\n\n    long long int min_x\
    \ = l.front();\n    for (long long int &x : l)\n        if (x < min_x)\n     \
    \       min_x = x;\n\n    if (min_x == 0)\n        return false;\n\n    for (long\
    \ long int &x : l)\n        if (x >= min_x && x < min_x + sum)\n            return\
    \ false;\n\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpan8y_e8g.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpan8y_e8g.cpp:22:29: error: cannot bind non-const lvalue\
    \ reference of type \u2018long long int&\u2019 to an rvalue of type \u2018long\
    \ long int\u2019\n   22 |     for (long long int &x : l)\n      |            \
    \                 ^\n/tmp/tmpan8y_e8g.cpp:26:29: error: cannot bind non-const\
    \ lvalue reference of type \u2018long long int&\u2019 to an rvalue of type \u2018\
    long long int\u2019\n   26 |     for (long long int &x : l)\n      |         \
    \                    ^\n/tmp/tmpan8y_e8g.cpp:33:29: error: cannot bind non-const\
    \ lvalue reference of type \u2018long long int&\u2019 to an rvalue of type \u2018\
    long long int\u2019\n   33 |     for (long long int &x : l)\n      |         \
    \                    ^\n"
  stdout: ''
  timestamp: 1660011463
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tstd::vector<pair<long,\
    \ long> > p(l.size());\n\tfor (std::size_t i = 0; i < l.size(); ++i)\n\t\tp[i].first\
    \ = l[i];\n\tsort(p.begin(), p.end());\n\tlong long s = 0, prev_s = 0;\n\tfor\
    \ (auto it = p.begin(); it != p.end(); ++it)\n\t\ts = s + it->first;\n\ts = s\
    \ - 1;\n\tprev_s = 0;\n\tfor (auto it = p.rbegin(); it != p.rend(); ++it)\n\t\t\
    s = s - it->first;\n\tif (s == prev_s)\n\t\treturn false;\n\tfor (auto it = p.rbegin();\
    \ it != p.rend(); ++it)\n\t\tprev_s = prev_s - it->first;\n\treturn true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaft2jo23.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpaft2jo23.cpp:17:14: error: \u2018pair\u2019 was not declared\
    \ in this scope; did you mean \u2018std::pair\u2019?\n   17 |  std::vector<pair<long,\
    \ long> > p(l.size());\n      |              ^~~~\n      |              std::pair\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:64,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/char_traits.h:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ios:40,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/istream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/sstream:38,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/complex:45,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/ccomplex:39,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:54,\n\
    \                 from /tmp/tmpaft2jo23.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_pair.h:208:12:\
    \ note: \u2018std::pair\u2019 declared here\n  208 |     struct pair\n      |\
    \            ^~~~\n/tmp/tmpaft2jo23.cpp:17:29: error: template argument 1 is invalid\n\
    \   17 |  std::vector<pair<long, long> > p(l.size());\n      |               \
    \              ^\n/tmp/tmpaft2jo23.cpp:17:29: error: template argument 2 is invalid\n\
    /tmp/tmpaft2jo23.cpp:17:31: error: expected unqualified-id before \u2018>\u2019\
    \ token\n   17 |  std::vector<pair<long, long> > p(l.size());\n      |       \
    \                        ^\n/tmp/tmpaft2jo23.cpp:19:3: error: \u2018p\u2019 was\
    \ not declared in this scope\n   19 |   p[i].first = l[i];\n      |   ^\n/tmp/tmpaft2jo23.cpp:20:7:\
    \ error: \u2018p\u2019 was not declared in this scope\n   20 |  sort(p.begin(),\
    \ p.end());\n      |       ^\n/tmp/tmpaft2jo23.cpp:20:2: error: \u2018sort\u2019\
    \ was not declared in this scope; did you mean \u2018std::sort\u2019?\n   20 |\
    \  sort(p.begin(), p.end());\n      |  ^~~~\n      |  std::sort\nIn file included\
    \ from /shared/"
  stdout: ''
  timestamp: 1660011463
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    std::sort(l.begin(),\
    \ l.end());\n    long long sum = 0;\n    for (auto i : l) {\n        sum += i;\n\
    \    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpt4pvol9r: /tmp/tmpt4pvol9r.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long zero =\
    \ 0;\n  long long one = 0;\n  long long two = 0;\n  long long three = 0;\n  long\
    \ long four = 0;\n  long long five = 0;\n  long long six = 0;\n  long long seven\
    \ = 0;\n  long long eight = 0;\n  long long nine = 0;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    if (l[i] % 2 == 0) {\n      zero += l[i];\n    }\n    else if (l[i]\
    \ % 2 == 1) {\n      one += l[i];\n    }\n    else if (l[i] % 2 == 2) {\n    \
    \  two += l[i];\n    }\n    else if (l[i] % 2 == 3) {\n      three += l[i];\n\
    \    }\n    else if (l[i] % 2 == 4) {\n      four += l[i];\n    }\n    else if\
    \ (l[i] % 2 == 5) {\n      five += l[i];\n    }\n    else if (l[i] % 2 == 6) {\n\
    \      six += l[i];\n    }\n    else if (l[i] % 2 == 7) {\n      seven += l[i];\n\
    \    }\n    else if (l[i] % 2 == 8) {\n      eight += l[i];\n    }\n    else if\
    \ (l[i] % 2 == 9) {\n      nine += l[i];\n    }\n  }\n  if ((four + three) ==\
    \ zero && (five + seven) == zero && (six + eight) == zero && (nine + two) == zero\
    \ && (one + zero) == zero) {\n    return true;\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwd_3izso: /tmp/tmpwd_3izso.cpp:69: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    sort(l.begin(),\
    \ l.end());\n    long sum = 0;\n    for (auto i = 0; i < l.size(); i++) {\n  \
    \      sum += l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpe_3yi5w3: /tmp/tmpe_3yi5w3.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() <\
    \ 2) return false;\n    long ans = 0;\n    long max_value = -l[0];\n    for (long\
    \ i : l) {\n        max_value = std::max(max_value, i);\n    }\n    long cur =\
    \ max_value;\n    for (long i : l) {\n        ans += std::abs(i - cur);\n    \
    \    cur += i;\n    }\n    return ans % 2 == 1;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpi116hehm: /tmp/tmpi116hehm.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long zero = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long zero_to_two = zero - 2;\n    return l.size() >= 2 &&\
    \ zero_to_two >= 0 && l.end() != std::find_if(l.begin(), l.end(), [zero_to_two](long\
    \ x) { return x == zero_to_two; });\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpua0w5_h7: /tmp/tmpua0w5_h7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011464
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = (int) l.size();\n\
    \    long long sum = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \    }\n    std::vector<long> remaining(n - 1);\n    for (int i = 1; i < n; i++)\
    \ {\n        long long toAdd = l[i] - sum;\n        if (toAdd > 0) {\n       \
    \     remaining[i - 1] = toAdd;\n        } else if (toAdd < 0) {\n           \
    \ remaining[i] = -toAdd;\n        }\n        sum += remaining[i - 1];\n    }\n\
    \    for (size_t i = 0; i < remaining.size(); ++i) {\n        if (remaining[i]\
    \ != 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: "*** Error in `/tmp/tmpa7sjvl4s': free(): invalid next size (fast): 0x0000000000e5fc50\
    \ ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x81329)[0x2b3d7d3c7329]\n\
    /tmp/tmpa7sjvl4s[0x401ce0]\n/tmp/tmpa7sjvl4s[0x401bbc]\n/tmp/tmpa7sjvl4s[0x4019bc]\n\
    /tmp/tmpa7sjvl4s[0x4016ec]\n/tmp/tmpa7sjvl4s[0x401623]\n/tmp/tmpa7sjvl4s[0x400a92]\n\
    /tmp/tmpa7sjvl4s[0x400b7a]\n/lib64/libc.so.6(__libc_start_main+0xf5)[0x2b3d7d368555]\n\
    /tmp/tmpa7sjvl4s[0x400859]\n======= Memory map: ========\n00400000-00404000 r-xp\
    \ 00000000 08:02 1449095                            /tmp/tmpa7sjvl4s\n00603000-00604000\
    \ r--p 00003000 08:02 1449095                            /tmp/tmpa7sjvl4s\n00604000-00605000\
    \ rw-p 00004000 08:02 1449095                            /tmp/tmpa7sjvl4s\n00e4e000-00e80000\
    \ rw-p 00000000 00:00 0                                  [heap]\n2b3d7c82f000-2b3d7c851000\
    \ r-xp 00000000 08:01 50332354                   /usr/lib64/ld-2.17.so\n2b3d7c851000-2b3d7c853000\
    \ rw-p 00000000 00:00 0 \n2b3d7c86b000-2b3d7c870000 rw-p 00000000 00:00 0 \n2b3d7ca50000-2b3d7ca51000\
    \ r--p 00021000 08:01 50332354                   /usr/lib64/ld-2.17.so\n2b3d7ca51000-2b3d7ca52000\
    \ rw-p 00022000 08:01 50332354                   /usr/lib64/ld-2.17.so\n2b3d7ca52000-2b3d7ca53000\
    \ rw-p 00000000 00:00 0 \n2b3d7ca53000-2b3d7cc1c000 r-xp 00000000 00:28 1475687066821932785\
    \        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n2b3d7cc1c000-2b3d7ce1b000\
    \ ---p 001c9000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b3d7ce1b000-2b3d7ce26000 r--p 001c8000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b3d7ce26000-2b3d7ce29000 rw-p 001d3000 00:28 1475687066821932785        /shared/centos7/clang/10.0.1/lib/libstdc++.so.6.0.27\n\
    2b3d7ce29000-2b3d7ce2c000 rw-p 00000000 00:00 0 \n2b3d7ce2c000-2b3d7cf2d000 r-xp\
    \ 00000000 08:01 50332693                   /usr/lib64/libm-2.17.so\n2b3d7cf2d000-2b3d7d12c000\
    \ ---p 00101000 08:01 50332693                   /usr/lib64/libm-2.17.so\n2b3d7d12c000-2b3d7d12d000\
    \ r--p 00100000 08:01 50332693 "
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  long long max_so_far = std::accumulate(l.begin(), l.end(), 0);\n\
    \  for (long long i = 0; i < l.size() - 1; ++i) {\n    if (l[i] + l[i+1] == max_so_far)\
    \ {\n      return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxonmqvu_: /tmp/tmpxonmqvu_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  std::sort(l.begin(),\
    \ l.end());\n  std::sort(l.begin(), l.end(), std::greater<long>());\n  long long\
    \ ans = 0LL;\n  long long max = 0LL;\n  long long tmp = 0;\n  for (auto it = l.begin();\
    \ it != l.end(); it++) {\n    tmp = *it;\n    ans += tmp;\n    max = std::max(max,\
    \ tmp);\n    if (ans >= 0LL) {\n      if (tmp - max == 0) return false;\n    }\
    \ else {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmj6djtlk: /tmp/tmpmj6djtlk.cpp:39: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long long ans = 0;\n\
    \  for (long i = 0; i < l.size(); i++) {\n    ans += l[i];\n    ans %= 10;\n \
    \ }\n  if (ans == 0)\n    return false;\n  else\n    return true;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcjd2djdu: /tmp/tmpcjd2djdu.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  int n = l.size();\n\
    \  int zero = 0;\n  // initialize all values to zero\n  for (int i = 0; i < n;\
    \ ++i) {\n    zero = 0;\n    for (int j = i + 1; j < n; ++j) {\n      if (l[i]\
    \ + l[j] == 0) {\n        zero = 1;\n        break;\n      }\n    }\n    if (zero)\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp46eia7h0: /tmp/tmp46eia7h0.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    auto left = std::begin(l);\n\
    \    auto right = std::end(l);\n    long sum = 0;\n    while (left < right) {\n\
    \        sum += *left++;\n        if (sum == 0) return false;\n        sum +=\
    \ *right--;\n        if (sum == 0) return false;\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmbbx1vk3: /tmp/tmpmbbx1vk3.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if (l.size()\
    \ == 1) return false;\n    if (sum == 0) return true;\n    long long int min_sum\
    \ = l.front();\n    for (long long int i : l) {\n        if (i != min_sum) {\n\
    \            long long int cur_sum = i;\n            for (long long int j : l)\
    \ {\n                if (j != cur_sum) {\n                    if (cur_sum + j\
    \ == 0) return true;\n                    cur_sum += j;\n                }\n \
    \           }\n        }\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpx04nphbt: /tmp/tmpx04nphbt.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)-2, (long)1}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n\tint n = l.size();\n\
    \tlong long int sum = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tsum += l[i];\n\t\
    }\n\tlong long int c = 0;\n\tfor (int i = 0; i < n; i++) {\n\t\tc += l[i]*l[i];\n\
    \t}\n\tif (c == sum) {\n\t\treturn false;\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9pvqg_0w: /tmp/tmp9pvqg_0w.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    int m = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        if (l[i] ==\
    \ 0)\n            continue;\n        int j = i;\n        while (j + 1 < n && l[j\
    \ + 2] == 0)\n            j++;\n        if (j == n)\n            return false;\n\
    \        while (l[j] == 0 && j < n)\n            j++;\n        if (j == n || l[j]\
    \ != 0)\n            return false;\n        int k = 0;\n        while (j < n &&\
    \ l[j] == 0)\n            j++;\n        while (j + 1 < n && l[j + 1] == 0)\n \
    \           j++;\n        while (j < n && l[j] == 0)\n            j++;\n     \
    \   while (j < n && l[j + 1] == 0)\n            j++;\n        if (j < n && l[j]\
    \ != 0)\n            return false;\n        while (j < m && l[j] == 0)\n     \
    \       j++;\n        while (j < n && l[j] == 0)\n            j++;\n        while\
    \ (j + 1 < n && l[j + 1] == 0)\n            j++;\n        while (j < n && l[j]\
    \ == 0)\n            j++;\n        while (j < n && l[j + 1] == 0)\n          \
    \  j++;\n        m = j;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpexnnyj6k: /tmp/tmpexnnyj6k.cpp:61: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int s\
    \ = 0;\n    for (auto it : l) {\n        s += it;\n    }\n    return s > 0;\n\
    }\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmpds_vtdw3: /tmp/tmpds_vtdw3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // code here\n\
    \    long long long long sum = 0;\n    for(long long i = 0; i < l.size(); ++i)\n\
    \    {\n        if(l[i] < 0)\n        {\n            long long diff = -l[i];\n\
    \            if(diff >= 0)\n            {\n                sum += diff;\n    \
    \        }\n        }\n        else\n        {\n            sum += l[i];\n   \
    \     }\n    }\n    if(sum == 0)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkwxeba1d.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkwxeba1d.cpp:18:15: error: \u2018long long long\u2019\
    \ is too long for GCC\n   18 |     long long long long sum = 0;\n      |     \
    \          ^~~~\n/tmp/tmpkwxeba1d.cpp:18:20: error: \u2018long long long\u2019\
    \ is too long for GCC\n   18 |     long long long long sum = 0;\n      |     \
    \               ^~~~\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    int length = l.size();\n    for (int i = 0; i < length; ++i) {\n   \
    \     sum += l[i];\n    }\n    if (sum == 0)\n        return false;\n    vector<int>\
    \ d(length);\n    long long dp[length - 1];\n    for (int i = 0; i < length; ++i)\
    \ {\n        dp[i] = 0;\n        dp[i] = -1;\n        for (int j = i; j < length;\
    \ ++j) {\n            if (l[j] < 0) {\n                dp[i] = l[j] + sum;\n \
    \               break;\n            } else {\n                dp[i] = l[j];\n\
    \            }\n        }\n    }\n    for (int i = 1; i < length - 1; ++i) {\n\
    \        if (abs(dp[i]) > abs(dp[i - 1])) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn9rongu9.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn9rongu9.cpp:24:5: error: \u2018vector\u2019 was not declared\
    \ in this scope; did you mean \u2018std::vector\u2019?\n   24 |     vector<int>\
    \ d(length);\n      |     ^~~~~~\n      |     std::vector\nIn file included from\
    \ /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/vector:67,\n           \
    \      from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/queue:61,\n  \
    \               from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpn9rongu9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_vector.h:386:11:\
    \ note: \u2018std::vector\u2019 declared here\n  386 |     class vector : protected\
    \ _Vector_base<_Tp, _Alloc>\n      |           ^~~~~~\n/tmp/tmpn9rongu9.cpp:24:12:\
    \ error: expected primary-expression before \u2018int\u2019\n   24 |     vector<int>\
    \ d(length);\n      |            ^~~\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n  long a = l[0], b\
    \ = l[1], c = l[2], d = l[3], e = l[4], f = l[5];\n  if (a != 0 && b != 0 && c\
    \ != 0 && d != 0 && e != 0 && f != 0) {\n    return a == b + c + d + e + f;\n\
    \  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3q4gisce: /tmp/tmp3q4gisce.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0) return false;\n    for (int i = 1; i < n; i++) {\n        int\
    \ sum = 0;\n        int curr = l[i];\n        for (int j = 0; j < n; j++)\n  \
    \          sum += l[j];\n        if (sum == curr)\n            return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9zr2j745: /tmp/tmp9zr2j745.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    assert(l.size()\
    \ == 2);\n    long a = l[0];\n    long b = l[1];\n    long sum = a;\n    long\
    \ max_ab = max(a, b);\n    long min_ab = min(a, b);\n    int res = 0;\n    while\
    \ (a + b != 0) {\n        if (a + b == max_ab) {\n            sum += max_ab;\n\
    \            max_ab = max(b, max_ab);\n            res = 1;\n        } else if\
    \ (a + b == min_ab) {\n            sum += min_ab;\n            min_ab = min(a,\
    \ min_ab);\n            res = 0;\n        } else {\n            sum += a + b;\n\
    \            a++;\n            b++;\n            res |= 1;\n        }\n    }\n\
    \    return (sum == 0);\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8bwizvys.cpp: In function \u2018bool pairs_sum_to_zero(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8bwizvys.cpp:21:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   21 |     long max_ab =\
    \ max(a, b);\n      |                   ^~~\n      |                   std::max\n\
    In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8bwizvys.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3462:5:\
    \ note: \u2018std::max\u2019 declared here\n 3462 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp8bwizvys.cpp:22:19: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   22 |     long min_ab = min(a, b);\n      |                   ^~~\n      |\
    \                   std::min\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:62,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8bwizvys.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algo.h:3450:5:\
    \ note: \u2018std::min\u2019 declared here\n 3450 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here\n    long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n\
    \        if (sum == 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmprfq4dhpr: /tmp/tmprfq4dhpr.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)2,
    (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660011465
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a vector of integers as an input.\n// it returns true if there are two distinct\
    \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    if (l.size() <\
    \ 2) return false;\n\n    long long sum = 0;\n    for (long long i : l)\n    \
    \    sum += i;\n\n    if (sum < 0) return false;\n\n    for (long long i = l.size()\
    \ - 1; i >= 0; i--) {\n        long long j = i;\n        for (long long k = i;\
    \ k > 0; k--) {\n            if (l[j] + l[k] == 0) {\n                l[j] +=\
    \ l[k];\n                l[k] = 0;\n                j--;\n            }\n    \
    \    }\n    }\n    if (l.size() == 1) return false;\n    return true;\n}\nint\
    \ main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: Exception
  stderr: 'tmp24kadhm5: /tmp/tmp24kadhm5.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)3, (long)5, (long)0}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660011466
