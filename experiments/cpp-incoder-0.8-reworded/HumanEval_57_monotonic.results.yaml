language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) {\n    return false;\n  }\n  long prev = l[0];\n \
    \ for (long i : l) {\n    if (i == prev) {\n      return true;\n    }\n    prev\
    \ = i;\n  }\n  return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4e0jbd6b: /tmp/tmp4e0jbd6b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int first = l.front();\n    long long int last = l.back();\n\
    \    int cmp;\n    for (auto el : l) {\n        cmp = el - first;\n        if\
    \ (cmp > 0) {\n            if (last > first)\n                return false;\n\
    \            first = el;\n        } else if (cmp < 0) {\n            if (last\
    \ < first)\n                return false;\n            last = el;\n        } else\
    \ {\n            // Do nothing\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxyr9jdki: /tmp/tmpxyr9jdki.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Sorted list is sorted in increasing order. Find minimum in sorted\
    \ list.\n    long min = l[0];\n    for (long &i : l) {\n        if (i < min) {\n\
    \            min = i;\n        }\n    }\n    long idx = l.size() - 1;\n    long\
    \ &i = l[idx];\n    if (i < min) {\n        // Elements of l are in decreasing\
    \ order.\n        // Find the index with minimum element value in l and decrease\
    \ all other\n        // indices by it.\n        long minIdx = l.size() - 1;\n\
    \        for (size_t idx = 0; idx < idx; idx++) {\n            long &j = l[idx];\n\
    \            if (j < min) {\n                minIdx = idx;\n            }\n  \
    \      }\n        for (size_t idx = 0; idx < minIdx; idx++) {\n            l[idx]\
    \ -= i;\n            i = j;\n        }\n        // Check monotonicity by adding\
    \ i to last element. If it's less than last element,\n        // then we are done.\n\
    \        if (l[idx] + i < min) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqiz28exf.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqiz28exf.cpp:33:17: error: \u2018j\u2019 was not declared\
    \ in this scope\n   33 |             i = j;\n      |                 ^\n"
  stdout: ''
  timestamp: 1660129214
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int m = n;\n    int i = 0;\n    long long prev\
    \ = 0;\n    long long cur = 0;\n    long long ans = false;\n    while (i < n &&\
    \ m > 0) {\n        prev = cur;\n        cur = l[i++];\n        if (prev < cur)\
    \ {\n            ans = true;\n            m = m - 1;\n        } else {\n     \
    \       m = m - 1;\n        }\n    }\n    if (ans) {\n        i = n - 1;\n   \
    \     prev = 0;\n        cur = l[i++];\n        while (i < n && m > 0) {\n   \
    \         prev = cur;\n            cur = l[i++];\n            if (prev < cur)\
    \ {\n                ans = false;\n                m = m - 1;\n            } else\
    \ {\n                m = m - 1;\n            }\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpss4we8f2: /tmp/tmpss4we8f2.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long n = l.size();\n    if(n<=1)\n        return true;\n    long ans\
    \ = l[0];\n    long i = 1;\n    for(; i<n; i++) {\n        long curr = l[i];\n\
    \        if(curr < ans)\n            return false;\n        ans = curr;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp834o0ruu: /tmp/tmp834o0ruu.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129214
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return l[0] > l[1];\n    long prev = l[0], curr = l[1], diff;\n\
    \    for (int i = 1; i < n - 1; ++i) {\n        diff = curr - prev;\n        if\
    \ (diff == 0)\n            continue;\n        if (diff > 0)\n            return\
    \ true;\n        if (diff < 0)\n            return false;\n        prev = curr;\n\
    \        curr = l[i];\n    }\n    return curr > prev;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkcyt4k8v: /tmp/tmpkcyt4k8v.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129216
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long ans = 0;\n  long n = l.size();\n  assert(n > 1);\n  for (long i\
    \ = 0; i < n - 1; i++) {\n    if (l[i] > l[i + 1]) {\n      ans = true;\n    \
    \  break;\n    }\n  }\n  return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq918keex: /tmp/tmpq918keex.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // sort vector by element value\n    std::sort(l.begin(), l.end(),\
    \ std::greater<long>());\n    // find first decreasing element and second decreasing\
    \ element\n    long first = l.front();\n    long last = l.back();\n    // if all\
    \ elements are decreasing, return false\n    if (first > last)\n        return\
    \ false;\n    // otherwise return true if all elements are less than first\n \
    \   bool decreasing = true;\n    for (auto iter = l.begin(); iter != l.end();)\
    \ {\n        long curr = *iter;\n        if (curr < first)\n            break;\n\
    \        else if (curr > first) {\n            decreasing = false;\n         \
    \   break;\n        }\n        iter = l.erase(iter);\n    }\n    return decreasing;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbf3r4a5e: /tmp/tmpbf3r4a5e.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129216
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int j = 0;\n  long min_value = l[0];\n  long max_value = l[0];\n  for\
    \ (int i = 0; i < l.size(); i++) {\n    if (l[i] < min_value) {\n      min_value\
    \ = l[i];\n      j = i;\n    }\n    if (l[i] > max_value) {\n      max_value =\
    \ l[i];\n      j = i;\n    }\n  }\n  return j > 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1bjdn8cn: /tmp/tmp1bjdn8cn.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129214
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int left_idx = -1;\n    int right_idx = l.size()-1;\n    long curr_elem\
    \ = l[0];\n    while (right_idx >= left_idx) {\n        int mid_idx = right_idx\
    \ + (left_idx+right_idx)/2;\n        if (curr_elem < l[mid_idx]) left_idx = mid_idx;\n\
    \        else right_idx = mid_idx;\n    }\n    return left_idx == right_idx;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl1yjqeax: /tmp/tmpl1yjqeax.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        for\
    \ (int j = i + 1; j < n; j++) {\n            if (l[i] > l[j]) {\n            \
    \    return true;\n            }\n        }\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq90e_x5m: /tmp/tmpq90e_x5m.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int size1 = l.size();\n    for (int i = 0; i < size1; ++i) {\n   \
    \     int size2 = size1;\n        for (int j = i + 1; j < size2; ++j) {\n    \
    \        if (l[j] > l[i]) {\n                swap(l[i], l[j]);\n            }\n\
    \        }\n    }\n    return (std::is_sorted(l.begin(), l.end(), [](long a, long\
    \ b) { return a > b; }));\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7r2b5gn.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw7r2b5gn.cpp:16:17: error: \u2018swap\u2019 was not declared\
    \ in this scope\n   16 |                 swap(l[i], l[j]);\n      |          \
    \       ^~~~\n/tmp/tmpw7r2b5gn.cpp:16:17: note: suggested alternatives:\nIn file\
    \ included from /usr/include/c++/9/regex:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:110,\n\
    \                 from /tmp/tmpw7r2b5gn.cpp:2:\n/usr/include/c++/9/bits/regex.h:2029:5:\
    \ note:   \u2018std::__cxx11::swap\u2019\n 2029 |     swap(match_results<_Bi_iter,\
    \ _Alloc>& __lhs,\n      |     ^~~~\nIn file included from /usr/include/c++/9/bits/stl_pair.h:59,\n\
    \                 from /usr/include/c++/9/bits/stl_algobase.h:64,\n          \
    \       from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpw7r2b5gn.cpp:2:\n/usr/include/c++/9/bits/move.h:182:5:\
    \ note:   \u2018std::swap\u2019\n  182 |     swap(_Tp& __a, _Tp& __b)\n      |\
    \     ^~~~\n/usr/include/c++/9/bits/move.h:182:5: note:   \u2018std::swap\u2019\
    \nIn file included from /usr/include/c++/9/exception:143,\n                 from\
    \ /usr/include/c++/9/ios:39,\n                 from /usr/include/c++/9/istream:38,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpw7r2b5gn.cpp:2:\n/usr/include/c++/9/bits/exception_ptr.h:166:5: note:\
    \   \u2018std::__exception_ptr::swap\u2019\n  166 |     swap(exception_ptr& __lhs,\
    \ exception_ptr& __rhs)\n      |     ^~~~\nIn file included from /usr/include/c++/9/filesystem:37,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:129,\n\
    \                 from /tmp/tmpw7r2b5gn.cpp:2:\n/usr/include/c++/9/bits/fs_path.h:611:15:\
    \ note:   \u2018std::filesystem::__cxx11::swap\u2019\n  611 |   inline void swap(path"
  stdout: ''
  timestamp: 1660129214
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    long a = l[0];\n    for (size_t i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > a) return true;\n        if (l[i] <\
    \ a) return false;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpds7l0spq: /tmp/tmpds7l0spq.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::pair<long, long> p = std::min_element(l.begin(), l.end());\n  return\
    \ p.second < p.first;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpey9etkf2.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpey9etkf2.cpp:11:45: error: conversion from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to non-scalar type \u2018std::pair<long\
    \ int, long int>\u2019 requested\n   11 |   std::pair<long, long> p = std::min_element(l.begin(),\
    \ l.end());\n      |                             ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129214
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long prev = l[0];\n    bool flag = false;\n    for (long int x : l)\
    \ {\n        if (prev > x) {\n            flag = true;\n            break;\n \
    \       }\n        prev = x;\n    }\n    return flag;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_f4wvxj6: /tmp/tmp_f4wvxj6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129216
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long ans = std::numeric_limits<long>::max();\n    long l = l.size();\n\
    \    for(int i = 0;i < l;i++) {\n        if(ans >= l[i])\n            ans++;\n\
    \        else\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp22ly7err.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp22ly7err.cpp:12:10: error: declaration of \u2018long int\
    \ l\u2019 shadows a parameter\n   12 |     long l = l.size();\n      |       \
    \   ^\n/tmp/tmp22ly7err.cpp:12:16: error: request for member \u2018size\u2019\
    \ in \u2018l\u2019, which is of non-class type \u2018long int\u2019\n   12 | \
    \    long l = l.size();\n      |                ^~~~\n/tmp/tmp22ly7err.cpp:14:22:\
    \ error: invalid types \u2018long int[int]\u2019 for array subscript\n   14 |\
    \         if(ans >= l[i])\n      |                      ^\n"
  stdout: ''
  timestamp: 1660129214
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() < 2) return false;\n    long ans = l[0];\n    for(long\
    \ i = 1; i < l.size(); i++) {\n        if(l[i] < ans) return false;\n        ans\
    \ = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpznb5_j6z: /tmp/tmpznb5_j6z.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() == 0 || l.size() == 1) return true;\n    long cur = l.at(0);\
    \ // current value of the vector\n    long prev = l.at(0); // previous value of\
    \ the vector\n    for(long i = 1; i < l.size(); i++) { // iterate through the\
    \ vector\n        if(prev > l[i]) {\n            prev = l[i];\n        } \n  \
    \  }\n    bool result = true;\n    for(long i = 0; i < l.size(); i++) { // iterate\
    \ through the vector\n        if(cur < l[i]) {\n            result = false;\n\
    \            break;\n        }\n    }\n    return result;\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbyznd3ot: /tmp/tmpbyznd3ot.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) {\n    return true;\n  }\n\n  auto last_el = l.back();\n\
    \n  bool decreasing = false;\n  for (auto el : l) {\n    if (el < last_el) {\n\
    \      decreasing = true;\n      break;\n    }\n\n    last_el = el;\n  }\n  return\
    \ decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjjj00gi3: /tmp/tmpjjj00gi3.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) return false;\n\n  long prev = l[0];\n  bool first\
    \ = true;\n\n  for (long i = 1, j = l.size() - 1; i < j; ++i, --j) {\n    if (l[i]\
    \ <= prev) {\n      if (first) {\n        prev = l[i];\n        first = false;\n\
    \      } else {\n        // The vector is not monotonic!\n        return false;\n\
    \      }\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk4pbetu4: /tmp/tmpk4pbetu4.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int j = 0;\n    long k = l[0], n = 1;\n    for (int i = 1; i < l.size();\
    \ i++) {\n        if (l[i] > k)\n            j++;\n        else if (l[i] < k)\n\
    \            j--;\n        else\n            j = 0;\n        k = l[i];\n     \
    \   n = n * j;\n    }\n    return n == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk5c__v2d: /tmp/tmpk5c__v2d.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return true;\n    // First compare first and last\
    \ element of vector\n    if (l[0] < l[l.size()-1]) return false;\n    // Now compare\
    \ each element to find increasing or decreasing sequence\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i-1] > l[i]) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo_6ruz68: /tmp/tmpo_6ruz68.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) {\n    return true;\n  }\n  // if first element is\
    \ less than all others, it must be monotonically\n  // decreasing\n  if (l[0]\
    \ < l[1]) {\n    return false;\n  }\n  // find first element greater than or equal\
    \ to all others\n  size_t pos = 0;\n  for (size_t i = 2; i < l.size(); i++) {\n\
    \    if (l[i] <= l[pos]) {\n      // if current element is greater than all others,\
    \ it is monotonically\n      // decreasing\n      return false;\n    }\n    pos\
    \ = i;\n  }\n  // if current element is greater than all others, it is monotonically\n\
    \  // decreasing\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpic9de05p: /tmp/tmpic9de05p.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  auto it1 = l.begin();\n  auto it2 = l.begin();\n  for (; it1 < l.end()\
    \ - 1; it2++) {\n    if (it1 == it2) {\n      return false;\n    }\n    if (*it1\
    \ < *it2) {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp13h16gg6: /tmp/tmp13h16gg6.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.empty())\n\t\treturn false;\n\t// Find max element\n\tlong max\
    \ = l[0];\n\tfor (long elem : l) {\n\t\tif (elem > max)\n\t\t\tmax = elem;\n\t\
    }\n\tlong pre = l[0];\n\t// Compare with previous max element\n\tfor (long elem\
    \ : l) {\n\t\tif (elem < pre)\n\t\t\treturn false;\n\t}\n\treturn true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmt33w3w6: /tmp/tmpmt33w3w6.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int res = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] <\
    \ l[i - 1]) {\n      res = 1;\n      break;\n    } else if (l[i] > l[i - 1]) {\n\
    \      res = -1;\n      break;\n    }\n  }\n  if (res == 1) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp83sx4loc: /tmp/tmp83sx4loc.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto x = l.front();\n    auto y = l.back();\n    for (auto itr = l.begin()\
    \ + 1; itr != l.end(); ++itr) {\n        if ((*itr) <= y) {\n            return\
    \ false;\n        }\n        if ((*itr) < x) {\n            return true;\n   \
    \     }\n    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgnbt_hy3: /tmp/tmpgnbt_hy3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int i{0};\n    int j{0};\n    for (auto it=l.begin();it!=l.end();++it){\n\
    \        if(i<j)\n            return false;\n        if (it<l.begin())\n     \
    \       return true;\n        if (it>l.end())\n            return true;\n    \
    \    ++i;\n        ++j;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvx6l5b4s: /tmp/tmpvx6l5b4s.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int size = l.size();\n  for (int i = 1; i < size; ++i) {\n    if (l[i]\
    \ < l[i - 1]) {\n      return false;\n    }\n  }\n  return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5y2axg5n: /tmp/tmp5y2axg5n.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) {\n    return false;\n  }\n  long min_val = l[0];\n\
    \  for (long i : l) {\n    if (i > min_val) {\n      return true;\n    }\n   \
    \ min_val = i;\n  }\n  return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpknyrbelt: /tmp/tmpknyrbelt.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  for (int i = 1; i < n; i++) {\n    if (l[i] - l[i\
    \ - 1] < 1) return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph8wa75pt: /tmp/tmph8wa75pt.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    return std::adjacent_difference(l.begin(), l.end(), l.begin()) !=\
    \ l.end();\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgbkk6a8p: /tmp/tmpgbkk6a8p.cpp:15: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129216
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long prevVal = l.front();\n    long curVal = l.back();\n    if (prevVal\
    \ != curVal) {\n        // We are moving from larger to smaller\n        // Therefore\
    \ we return true if current element\n        // is greater than the last element\
    \ (largest)\n        return curVal > prevVal;\n    }\n\n    // We are moving from\
    \ smaller to larger\n    // Therefore we return true if current element\n    //\
    \ is lesser than the previous element\n    return curVal < prevVal;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq9ibl232: /tmp/tmpq9ibl232.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1) {\n        if (l[0] < l[1])\n            return false;\n        return\
    \ true;\n    }\n    for (int i = 1; i < n; i++) {\n        if (l[i - 1] >= l[i])\n\
    \            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3koe3w3c: /tmp/tmp3koe3w3c.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  if (n <= 1)\n    return true;\n  long prev = l[0];\n\
    \  for (int i = 1; i < n; i++) {\n    if (l[i] < prev)\n      return false;\n\
    \    prev = l[i];\n  }\n  return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmmmb9b1a: /tmp/tmpmmmb9b1a.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 0)\n\t\treturn false;\n\n\tlong first = l.at(0); //\
    \ first element\n\tlong last = first;\n\tlong count = 1;\n\tfor (size_t i = 0;\
    \ i < l.size(); i++) {\n\t\tif (l[i] > last) {\n\t\t\tlast = l[i];\n\t\t\tcount++;\n\
    \t\t}\n\t}\n\n\t// if count is decreasing, then first is decreasing\n\treturn\
    \ (count < 2) && (first > last);\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaej5i3r2: /tmp/tmpaej5i3r2.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int size2 = l.size();\n    for (int i = 0; i < size2; i++) {\n   \
    \     int j = i + 1;\n        while (j < size2) {\n            if (l[i] > l[j])\
    \ {\n                return false;\n            }\n            j = j + 1;\n  \
    \      }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp80orki23: /tmp/tmp80orki23.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(!l.empty());\n    // Find the first element and make sure it's\
    \ greater than all others.\n    auto it = std::lower_bound(l.begin(), l.end(),\
    \ l.front());\n    // If first is greater, the rest must be monotonic in order\
    \ to\n    // decrease to first. Otherwise, it's already true.\n    return it ==\
    \ l.begin() || l[it - 1] > l[0];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphmc31p3c.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphmc31p3c.cpp:16:32: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   16 |     return it == l.begin() ||\
    \ l[it - 1] > l[0];\n      |                                ^\nIn file included\
    \ from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphmc31p3c.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1040:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = long int;\
    \ _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::reference = long\
    \ int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\n 1040\
    \ |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n      |       ^~~~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1040:28: note:   no known conversion for\
    \ argument 1 from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 to \u2018std::vector<long int>::size_type\u2019 {aka \u2018long\
    \ unsigned int\u2019}\n 1040 |       operator[](size_type __n) _GLIBCXX_NOEXCEPT\n\
    \      |                  ~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1058:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::const_reference std::vector<_Tp,\
    \ _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) const [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::const_reference\
    \ = const long int&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]\u2019\
    \n 1058 |       operator[](size_type __n) const _GLIBCXX_NOEXCEPT\n      |   \
    \    ^~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1058:28: note:   no known\
    \ conversion for argument 1 from \u2018__gnu_cxx::__normal_iter"
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // initialize minimum to INT_MAX\n    long m = INT_MAX;\n    // initialize\
    \ maximum to INT_MIN\n    long M = INT_MIN;\n    // Initialize number of elements\
    \ in list\n    int n = l.size();\n    // Iterate through all elements\n    for(long\
    \ i = 1; i < n; i++) {\n        // Iterate through all elements in list\n    \
    \    for(long j = i; j > 0; j--) {\n            // If the current element is greater\
    \ than the minimum, set minimum to the current element\n            if(l[i] >\
    \ m) m = l[i];\n            // If the current element is smaller than the maximum,\
    \ set maximum to the current element\n            if(l[i] < M) M = l[i];\n   \
    \     }\n    }\n    // Return true if list elements are monotonically increasing\
    \ or decreasing\n    return m >= M;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptxtz8qd_: /tmp/tmptxtz8qd_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129216
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long max = std::numeric_limits<long>::min();\n    long min = 0;\n\
    \    for (auto& i : l) {\n        if (i > max) max = i;\n        if (i < min)\
    \ min = i;\n    }\n    if (max <= min) return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5mjg2x88: /tmp/tmp5mjg2x88.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = std::max_element(l.begin(), l.end()) - l.begin();\n    long\
    \ long a = *(it);\n    long long b = *(--l.end());\n    return (a <= b);\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl_e341d6.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl_e341d6.cpp:12:23: error: invalid type argument of unary\
    \ \u2018*\u2019 (have \u2018long int\u2019)\n   12 |     long long a = *(it);\n\
    \      |                       ^\n"
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // vector start from 0\n  int start = 0;\n  int end = l.size();\n  //\
    \ compare the second element\n  int cmp = l[start] - l[end];\n  // if the first\
    \ two elements are the same\n  if (cmp == 0 && start < end) {\n    return true;\n\
    \  }\n  // if the first two elements are not the same\n  if (cmp > 0) {\n    return\
    \ false;\n  }\n  // if first two elements are the same\n  start = end;\n  // compare\
    \ the third element\n  cmp = l[start] - l[end];\n  // if the third elements are\
    \ the same\n  if (cmp == 0 && start < end) {\n    return true;\n  }\n  // if the\
    \ third elements are not the same\n  if (cmp > 0) {\n    return false;\n  }\n\
    \  // if first two elements are the same\n  start = end;\n  // compare the fourth\
    \ element\n  cmp = l[start] - l[end];\n  // if the fourth elements are the same\n\
    \  if (cmp == 0 && start < end) {\n    return true;\n  }\n  // if the fourth elements\
    \ are not the same\n  if (cmp > 0) {\n    return false;\n  }\n  // if all elements\
    \ are the same\n  return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjqfmqk4t: /tmp/tmpjqfmqk4t.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    int x = l[0];\n    int y = l[1];\n\
    \    bool flag = false;\n    for (int i = 1; i < l.size(); i++) {\n        if\
    \ (x > l[i]) x = l[i];\n        if (x < l[i]) y = l[i];\n        if (y == l[i])\
    \ {\n            flag = true;\n        }\n    }\n    return flag;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzuqbjl8w: /tmp/tmpzuqbjl8w.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return l.front() == l.back() &&\
    \ l.size() > 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgkd9faol: /tmp/tmpgkd9faol.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long max = std::numeric_limits<long long>::max();\n    long long\
    \ min = std::numeric_limits<long long>::min();\n    for (auto i : l) {\n     \
    \   if (i == max) {\n            return true;\n        }\n        if (i == min)\
    \ {\n            return false;\n        }\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdagvv5_s: /tmp/tmpdagvv5_s.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Initialize result with first element\n    long first = l.at(0);\n\
    \    bool result = true;\n    // Iterate through remaining elements\n    for (int\
    \ i = 1; i < l.size(); i++) {\n        long current = l.at(i);\n        // If\
    \ current element is greater than first element then return false\n        if\
    \ (current < first) return false;\n        // Else update result to check if current\
    \ element is lesser than previous\n        first = current;\n    }\n    // Return\
    \ result to indicate if vector is monotonic\n    return result;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmn17_h1k: /tmp/tmpmn17_h1k.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129215
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long curr = l[0];\n    for (long i = 1; i < l.size(); i++) {\n   \
    \     long next = l[i];\n        if (curr > next) {\n            return true;\n\
    \        }\n        curr = next;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3pxnq57n: /tmp/tmp3pxnq57n.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() < 2) {\n\t\treturn false;\n\t}\n\t// sort vector to determine\
    \ if it is increasing\n\tsort(l.begin(), l.end());\n\tlong a = l[0];\n\tlong b\
    \ = l[1];\n\tif (a < b) {\n\t\treturn true;\n\t}\n\treturn false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpu2qferie: /tmp/tmpu2qferie.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129218
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::vector<bool> v(l.size());\n  std::iota(v.begin(), v.end(), true);\n\
    \  std::stable_sort(v.begin(), v.end(), [&l](int i, int j){\n    return l[j] >\
    \ l[i];\n  });\n  for (auto i=l.size()-1; i>0; --i) {\n    if (v[i-1]) v[i-v[i-1]]\
    \ = false;\n  }\n  return v[0];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/numeric:62,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:84,\n               \
    \  from /tmp/tmplm5rvlqj.cpp:2:\n/usr/include/c++/9/bits/stl_numeric.h: In instantiation\
    \ of \u2018void std::iota(_ForwardIterator, _ForwardIterator, _Tp) [with _ForwardIterator\
    \ = std::_Bit_iterator; _Tp = bool]\u2019:\n/tmp/tmplm5rvlqj.cpp:12:37:   required\
    \ from here\n/usr/include/c++/9/bits/stl_numeric.h:99:4: error: use of an operand\
    \ of type \u2018bool\u2019 in \u2018operator++\u2019 is forbidden in C++17\n \
    \  99 |    ++__value;\n      |    ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129218
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) return false;\n  std::sort(l.begin(), l.end());\n\
    \  if (l[0] == l[l-1]) return false;\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp906g3z3_.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp906g3z3_.cpp:13:18: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018int\u2019)\n\
    \   13 |   if (l[0] == l[l-1]) return false;\n      |                 ~^~\n  \
    \    |                 | |\n      |                 | int\n      |           \
    \      std::vector<long int>\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp906g3z3_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp906g3z3_.cpp:13:19:\
    \ note:   \u2018std::vector<long int>\u2019 is not derived from \u2018const std::reverse_iterator<_Iterator>\u2019\
    \n   13 |   if (l[0] == l[l-1]) return false;\n      |                   ^\nIn\
    \ file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n            \
    \     from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp906g3z3_.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     operator-(const move_iterator<_IteratorL>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:1209:5: note:\
    \   template argument deduction/s"
  stdout: ''
  timestamp: 1660129218
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long a = l[0], b = l[1], c = l[2], d = l[3];\n    long long mid\
    \ = a + (b - a) / 2;\n    if (c > mid) {\n        if (d > mid) {\n           \
    \ if (d > mid)\n                return monotonic({c, d, b, a});\n            else\n\
    \                return monotonic({c, d, a, mid});\n        } else {\n       \
    \     if (c > mid)\n                return monotonic({c, mid, b, a});\n      \
    \      else\n                return monotonic({c, mid, a, mid});\n        }\n\
    \    } else {\n        if (b > mid) {\n            if (c > mid)\n            \
    \    return monotonic({c, mid, b, a});\n            else\n                return\
    \ monotonic({c, mid, a, mid});\n        } else {\n            if (b > mid)\n \
    \               return monotonic({mid, b, a, c});\n            else\n        \
    \        return monotonic({mid, a, c, b});\n        }\n    }\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660129218
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // Get max and min of first two elements.\n  long maxElem = std::max(l[0],\
    \ l[1]);\n  long minElem = std::min(l[0], l[1]);\n\n  // Check if max and min\
    \ elements are same.\n  if (maxElem == minElem)\n    return true;\n\n  // Check\
    \ if max and min elements are different.\n  bool decreasing = true;\n  for (int\
    \ i = 2; i < l.size(); i++) {\n    if (l[i] == minElem)\n      minElem = l[i];\n\
    \    else if (l[i] == maxElem)\n      maxElem = l[i];\n    else if (l[i] > maxElem)\n\
    \      decreasing = false;\n    else if (l[i] < minElem)\n      decreasing = true;\n\
    \  }\n\n  return decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1dy026vg: /tmp/tmp1dy026vg.cpp:36: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129218
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpheifixtl: /tmp/tmpheifixtl.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long maxVal = *max_element(l.begin(), l.end());\n    for (auto\
    \ el : l) {\n        if (el < 0 && maxVal >= el)\n            return false;\n\
    \        else if (el > 0 && maxVal <= el)\n            return false;\n       \
    \ maxVal = el;\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5i0li_r7: /tmp/tmp5i0li_r7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  return std::equal(l.begin(), l.end(),\
    \ l.begin(), [](long l, long r) { return l > r; });\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6vwx5c7f: /tmp/tmp6vwx5c7f.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.empty())\n    return true;\n  std::pair<long, long> min_v = *std::min_element(l.begin(),\
    \ l.end());\n  long min_i = l.find_first_of(min_v.first);\n  long max_i = l.find_last_of(min_v.first);\n\
    \  return std::all_of(l.begin() + min_i + 1, l.begin() + max_i, [](long i) { return\
    \ i >= min_v.second; });\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmpm8_i8u.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmpm8_i8u.cpp:13:33: error: conversion from \u2018long\
    \ int\u2019 to non-scalar type \u2018std::pair<long int, long int>\u2019 requested\n\
    \   13 |   std::pair<long, long> min_v = *std::min_element(l.begin(), l.end());\n\
    \      |                                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    /tmp/tmpmpm8_i8u.cpp:14:18: error: \u2018class std::vector<long int>\u2019 has\
    \ no member named \u2018find_first_of\u2019\n   14 |   long min_i = l.find_first_of(min_v.first);\n\
    \      |                  ^~~~~~~~~~~~~\n/tmp/tmpmpm8_i8u.cpp:15:18: error: \u2018\
    class std::vector<long int>\u2019 has no member named \u2018find_last_of\u2019\
    \n   15 |   long max_i = l.find_last_of(min_v.first);\n      |               \
    \   ^~~~~~~~~~~~\n/tmp/tmpmpm8_i8u.cpp: In lambda function:\n/tmp/tmpmpm8_i8u.cpp:16:89:\
    \ error: \u2018min_v\u2019 is not captured\n   16 |   return std::all_of(l.begin()\
    \ + min_i + 1, l.begin() + max_i, [](long i) { return i >= min_v.second; });\n\
    \      |                                                                     \
    \                    ^~~~~\n/tmp/tmpmpm8_i8u.cpp:16:65: note: the lambda has no\
    \ capture-default\n   16 |   return std::all_of(l.begin() + min_i + 1, l.begin()\
    \ + max_i, [](long i) { return i >= min_v.second; });\n      |               \
    \                                                  ^\n/tmp/tmpmpm8_i8u.cpp:13:25:\
    \ note: \u2018std::pair<long int, long int> min_v\u2019 declared here\n   13 |\
    \   std::pair<long, long> min_v = *std::min_element(l.begin(), l.end());\n   \
    \   |                         ^~~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpmpm8_i8u.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_negate<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std:"
  stdout: ''
  timestamp: 1660129218
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    return std::is_sorted(l.begin(),\
    \ l.end());\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpinyq5e9y: /tmp/tmpinyq5e9y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return false;\n    bool ret = l[0] > l[1];\n  \
    \  long mid = l[0] + l[1] / 2;\n    for (size_t i = 2; i < l.size(); ++i) {\n\
    \        ret = ret || l[i] > mid;\n        mid = l[i] + mid / 2;\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdd98z99s: /tmp/tmpdd98z99s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0)\n        return true;\n    if (n\
    \ == 1)\n        return false;\n    long max = l[0];\n    for (int i = 1; i <\
    \ n; i++) {\n        if (l[i] > max)\n            max = l[i];\n    }\n    if (max\
    \ <= 0)\n        return true;\n    long min = l[0];\n    for (int i = 1; i < n;\
    \ i++) {\n        if (l[i] < min)\n            min = l[i];\n    }\n    if (min\
    \ >= 0)\n        return false;\n    for (int i = 1; i < n; i++) {\n        if\
    \ (l[i] > min)\n            return false;\n        if (l[i] < max)\n         \
    \   return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpstftn19w: /tmp/tmpstftn19w.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find maximum element.\n    long maxVal = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    // Find the smallest element.\n    long minVal = l.front();\n\
    \    for (int i = 1; i < l.size(); ++i) {\n        if (l[i] > maxVal) {\n    \
    \        maxVal = l[i];\n        }\n        if (l[i] < minVal) {\n           \
    \ minVal = l[i];\n        }\n    }\n    return maxVal > minVal;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxmjv0u3z: /tmp/tmpxmjv0u3z.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long prevVal = std::numeric_limits<long>::min();\n    bool isMonotonic\
    \ = true;\n    for (long i = 0; i < l.size() - 1; i++) {\n        long diff =\
    \ l[i + 1] - prevVal;\n        if (diff != 0)\n            isMonotonic = false;\n\
    \        prevVal = l[i];\n    }\n    return isMonotonic;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplb7g9ko8: /tmp/tmplb7g9ko8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long x = 0;\n  long y = 0;\n  for (auto & elem : l) {\n    y += elem;\n\
    \    x = std::min(std::max(x,y), x);\n  }\n  return x == y;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0oomc5nz: /tmp/tmp0oomc5nz.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::vector<std::pair<long, long>> v(l.size());\n    long curr = 0,\
    \ prev = 0;\n    for (long i = 0; i != l.size(); ++i) {\n        v[i].first =\
    \ l[i];\n        v[i].second = prev;\n        prev = curr;\n        curr = v[i].first;\n\
    \    }\n    long max_val = prev;\n    for (long i = 0; i != l.size(); ++i) {\n\
    \        if (v[i].first > max_val) {\n            max_val = v[i].first;\n    \
    \    }\n    }\n    return max_val >= 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplnap1ph_: /tmp/tmplnap1ph_.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long a = l[0];\n    for (long i : l)\n        if (a != i)\n      \
    \      return false;\n    return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzwzfp122: /tmp/tmpzwzfp122.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0)\n        return false;\n    // If first two values\
    \ are same, return true\n    if (l.front() == l.back())\n        return true;\n\
    \    // If all elements are same, return true\n    if (l.front() == l.back())\n\
    \        return true;\n\n    long first = l.front();\n    long last = l.back();\n\
    \n    // If first value is increasing then set last as second last and return\n\
    \    if (first > last)\n        return false;\n    // If last value is increasing\
    \ then set first as second first and return\n    if (last > first)\n        return\
    \ false;\n\n    // If first value is decreasing then set last as second last and\
    \ return\n    if (first < last)\n        return false;\n    // If last value is\
    \ decreasing then set first as second first and return\n    if (last < first)\n\
    \        return false;\n\n    long second_last = l.back();\n    // If second last\
    \ is increasing then set first as second last and return\n    if (second_last\
    \ > last)\n        return false;\n    // If second last is decreasing then set\
    \ first as second first and return\n    if (second_last < first)\n        return\
    \ false;\n\n    // If all elements are same then return true\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphyjmp5df: /tmp/tmphyjmp5df.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129220
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  return l.front() == l.back();\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwn30_26o: /tmp/tmpwn30_26o.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ll = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ lm = std::max(l.begin(), l.end());\n    long long lmm = std::min(l.begin(),\
    \ l.end());\n    return (ll == lm) || (ll == lmm);\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_rypyf3.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4_rypyf3.cpp:12:28: error: cannot convert \u2018const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long long int\u2019 in initialization\n   12 |     long long lm = std::max(l.begin(),\
    \ l.end());\n      |                    ~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |\
    \                            |\n      |                            const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmp4_rypyf3.cpp:13:29: error: cannot convert\
    \ \u2018const __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long long int\u2019 in initialization\n   13 |     long long lmm =\
    \ std::min(l.begin(), l.end());\n      |                     ~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                             |\n      |                             const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660129218
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tif (l.size() == 1) {\n\t\treturn true;\n\t}\n\tlong long max = std::max(l[0],\
    \ l[1]);\n\tlong long min = std::min(l[0], l[1]);\n\treturn max == min;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphq_jn_vk: /tmp/tmphq_jn_vk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129219
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long n = l.size();\n    long prev = l[0];\n    long curr = prev;\n\
    \    for (int i = 1; i < n; ++i) {\n        if (curr > l[i]) {\n            return\
    \ false;\n        }\n        curr = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpus9bawmp: /tmp/tmpus9bawmp.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tlong first = max(l.begin(), l.end());\n\tlong last = min(l.begin(),\
    \ l.end());\n\tlong count = 0;\n\tfor (long i = first; i <= last; i++) {\n\t\t\
    count++;\n\t\tif (count == 1) break;\n\t}\n\tassert(count == l.size());\n\treturn\
    \ first != last;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpecxlypth.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpecxlypth.cpp:11:18: error: cannot convert \u2018const\
    \ __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019 to \u2018\
    long int\u2019 in initialization\n   11 |  long first = max(l.begin(), l.end());\n\
    \      |               ~~~^~~~~~~~~~~~~~~~~~~~\n      |                  |\n \
    \     |                  const __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n/tmp/tmpecxlypth.cpp:12:17: error: cannot convert \u2018const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   12 |  long last = min(l.begin(), l.end());\n      |              ~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                 |\n      |                 const __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660129220
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int i, mid, n, k;\n    long min, max = 0;\n    n = l.size();\n   \
    \ k = n % 2; // Even n means decreasing else increasing\n    bool isIncreasing\
    \ = false;\n    for (i = 2; i <= n && i < n / 2; i++) {\n        mid = (i + n)\
    \ / 2;\n        min = l[mid];\n        max = l[mid];\n        if (min > max) {\n\
    \            if (min < mid) {\n                isIncreasing = true;\n        \
    \    }\n        }\n        else {\n            if (min > mid) {\n            \
    \    isIncreasing = false;\n            }\n        }\n    }\n    return (isIncreasing\
    \ ^ k);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzokgxlpv: /tmp/tmpzokgxlpv.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // Sort the input vector\n  std::sort(l.begin(), l.end());\n  // Find\
    \ index of largest element and smallest element\n  int max_idx = 0;\n  int min_idx\
    \ = 0;\n  // If min and max element are same, then vector is sorted\n  if (l[min_idx]\
    \ == l[max_idx])\n    return true;\n  // Iterate over the vector, finding the\
    \ min and max elements\n  for (int i = 0; i < l.size(); i++) {\n    if (l[i] >\
    \ l[max_idx]) {\n      max_idx = i;\n    }\n    if (l[i] < l[min_idx]) {\n   \
    \   min_idx = i;\n    }\n  }\n  // Return true if the difference between the min\
    \ and max elements is greater than 1\n  return max_idx - min_idx > 1;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5thnfiig: /tmp/tmp5thnfiig.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() == 1) return false;\n    long first = l.front();\n   \
    \ if(first == l[0]) return true;\n    for(long i = 1; i < l.size(); ++i) {\n \
    \       if(l[i] > first) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj7hf9ho_: /tmp/tmpj7hf9ho_.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() < 2) {\n        return false;\n    }\n    long long min\
    \ = l[0], max = l[0];\n    for(int i = 1; i < l.size(); ++i) {\n        if(l[i]\
    \ < min) min = l[i];\n        if(l[i] > max) max = l[i];\n    }\n    if(min >\
    \ max) return false;\n    if(max < l[0]) return false;\n    for(auto e : l) {\n\
    \        if(e > l[l.size() - 1]) return false;\n    }\n    return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpigohpmt0: /tmp/tmpigohpmt0.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long s = std::accumulate(l.begin(), l.end(), 0ll);\n    return s ==\
    \ 0ll;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcgj48rdz: /tmp/tmpcgj48rdz.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    auto begin = l.begin();\n    auto end =\
    \ l.end();\n    auto cur = std::next(begin, 0);\n    bool increasing = true;\n\
    \    bool decreasing = true;\n    while (cur < end) {\n        if (cur[0] == cur[1])\
    \ {\n            cur++;\n            continue;\n        }\n        if (cur[0]\
    \ < cur[1]) {\n            increasing = false;\n        } else if (cur[0] > cur[1])\
    \ {\n            decreasing = false;\n        }\n        break;\n    }\n    return\
    \ increasing || decreasing;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb_poheyk: /tmp/tmpb_poheyk.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    int m = INT_MAX / n;\n    std::vector<bool>\
    \ v(n);\n    for (int i = 0; i < n; i++) {\n        v[i] = l[i] < m;\n    }\n\
    \    std::vector<bool>::iterator it;\n    for (int i = 0; i < n; i++) {\n    \
    \    for (it = v.begin() + i + 1; it != v.end(); it++) {\n            if (*it)\
    \ {\n                break;\n            }\n        }\n        if (i == n / 2)\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppqe7zna_: /tmp/tmppqe7zna_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long first = l[0];\n    bool flag = true;\n    for (long val : l)\
    \ {\n        if (val < first)\n            flag = false;\n    }\n    return flag;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpraa0cxk8: /tmp/tmpraa0cxk8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long long a = 0;\n  long long b = 0;\n  long long c = 0;\n  for (int\
    \ i = 0; i < l.size(); i++) {\n    if (l[i] > b) b = l[i];\n    if (l[i] < c)\
    \ c = l[i];\n    long long d = b - c;\n    if (d >= a + (c - b)) {\n      a =\
    \ d;\n    }\n  }\n  return a >= b;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5ff5cglu: /tmp/tmp5ff5cglu.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    // Initialize min and max values.\n\
    \    long minV = l[0], maxV = l[0];\n    for (long i = 1; i < l.size(); ++i) {\n\
    \        if (minV > l[i]) minV = l[i];\n        if (maxV < l[i]) maxV = l[i];\n\
    \    }\n    if (maxV - minV >= 1) return false;\n    // If any values are equal,\
    \ sort ascending by value.\n    if (minV == l[0]) return false;\n    return !std::is_sorted(l.begin(),\
    \ l.end(), [](long i, long j){ return (i < j); });\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppaowfp0e: /tmp/tmppaowfp0e.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long a = l[0];\n    long b = l[1];\n    long c = l[2];\n    long d\
    \ = l[3];\n    long x = a;\n    long y = b;\n    long yl = b;\n    bool y = false;\n\
    \    bool y1 = false;\n    bool yr = false;\n\n    if (a != b) {\n        y =\
    \ false;\n    }\n    if (b != c) {\n        y = false;\n    }\n    if (a != d)\
    \ {\n        y1 = false;\n    }\n    if (b != d) {\n        y1 = false;\n    }\n\
    \    if (c != d) {\n        yr = false;\n    }\n    if (x == a) {\n        yl\
    \ = c;\n    }\n    if (x == b) {\n        yl = d;\n    }\n    if (x == c) {\n\
    \        yl = b;\n    }\n    if (x == d) {\n        yl = a;\n    }\n    if (y\
    \ == y1) {\n        yr = true;\n    }\n    if (y == yr) {\n        yr = false;\n\
    \    }\n    if (y == false) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4szlm66j.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4szlm66j.cpp:18:10: error: conflicting declaration \u2018\
    bool y\u2019\n   18 |     bool y = false;\n      |          ^\n/tmp/tmp4szlm66j.cpp:16:10:\
    \ note: previous declaration as \u2018long int y\u2019\n   16 |     long y = b;\n\
    \      |          ^\n"
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // The vector is assumed to be sorted.\n    // A monotonically increasing\
    \ vector is one where the elements are\n    // always increasing up to the current\
    \ element.\n    // A monotonically decreasing vector is one where there is an\n\
    \    // always decreasing element at the end.\n    // A monotonically increasing\
    \ or decreasing vector is always one of\n    // the two situations.\n    long\
    \ long i = l[0];\n    for (long long j = 1; j < l.size(); ++j) {\n        if (l[j]\
    \ <= i) {\n            return false;\n        }\n        i = l[j];\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfyvhaoln: /tmp/tmpfyvhaoln.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129220
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long last = l.back();\n    for (long i : l) {\n        if (i <= last)\
    \ {\n            return false;\n        }\n        last = i;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3wqthfq_: /tmp/tmp3wqthfq_.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tfor(long i = 1; i < l.size() && l[i] < l[i-1]; i++) {}\n\treturn i ==\
    \ l.size() || l[i] < l[i-1];\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptz76769f.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptz76769f.cpp:12:9: error: \u2018i\u2019 was not declared\
    \ in this scope\n   12 |  return i == l.size() || l[i] < l[i-1];\n      |    \
    \     ^\n"
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  return l.front() == l.back();\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwn30_26o: /tmp/tmpwn30_26o.cpp:16: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int size = l.size();\n  if (size < 3)\n    return false;\n  if (size\
    \ % 2 == 0)\n    return false;\n  int start = 0;\n  int end = size - 1;\n  while\
    \ (end > start) {\n    int m = (end + start) / 2;\n    if (l[m] <= l[start] &&\
    \ l[m] <= l[end])\n      start = m + 1;\n    else if (l[m] > l[start] && l[m]\
    \ > l[end])\n      end = m - 1;\n    else\n      return false;\n  }\n  return\
    \ l[start] <= l[end];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpleq1jpxv: /tmp/tmpleq1jpxv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129220
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long smallest = std::min_element(l.begin(), l.end());\n    long largest\
    \ = std::max_element(l.begin(), l.end());\n\n    if (smallest > largest)\n   \
    \     return true;\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi6p66ka8.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpi6p66ka8.cpp:11:37: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in initialization\n\
    \   11 |     long smallest = std::min_element(l.begin(), l.end());\n      |  \
    \                   ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n      |            \
    \                         |\n      |                                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n/tmp/tmpi6p66ka8.cpp:12:36: error: cannot convert\
    \ \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018long int\u2019 in initialization\n   12 |     long largest = std::max_element(l.begin(),\
    \ l.end());\n      |                    ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~\n\
    \      |                                    |\n      |                       \
    \             __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 3) return true;\n    if (l[0] > l[1]) return true;\n\
    \    if (l[1] < l[2]) return true;\n    if (l[0] == l[2]) return true;\n\n   \
    \ if (l[0] > l[1]) {\n        if (l[2] > l[3]) return true;\n        if (l[3]\
    \ > l[2]) return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjojtano8: /tmp/tmpjojtano8.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    for(auto it = l.begin(); it != l.end();\
    \ it++) {\n        if(*it >= *it - 1) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_7a9_1w8: /tmp/tmp_7a9_1w8.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tauto it = l.begin();\n\tlong long min = *it;\n\tlong long max = min;\n\
    \tit++;\n\tfor (; it != l.end(); it++) if (*it > max) return false;\n\treturn\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpicroiaxv: /tmp/tmpicroiaxv.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long a = 0, b = 0;\n    long long count = 1;\n    for (long long\
    \ x : l) {\n        if (x < a) return false;\n        if (x > b) return false;\n\
    \        b += x;\n        count += 1;\n    }\n    a = b;\n    b = b;\n    bool\
    \ ret = true;\n    long long sum = 0;\n    for (long long i = 0; i <= count; i++)\
    \ {\n        sum += i;\n        if (sum > count) {\n            ret = false;\n\
    \        }\n    }\n    return ret;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8hydp3xd: /tmp/tmp8hydp3xd.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  for (long i = l.size() - 1; i > 0; i--) {\n    if (l[i] < l[i - 1])\
    \ {\n      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7cun4_g2: /tmp/tmp7cun4_g2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129221
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  std::sort(l.begin(), l.end());\n  for (auto it1 = l.begin(); it1 < l.end();\
    \ ++it1)\n    if (*it1 >= *it1) return false;\n  return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpl27hqi_4: /tmp/tmpl27hqi_4.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int low = 0;\n    int high = l.size()-1;\n    int mid = 0;\n    while\
    \ (low <= high) {\n        mid = (low+high)/2;\n        if (l[mid] < l[mid+1])\
    \ high = mid+1;\n        else if (l[mid] > l[mid+1]) low = mid+1;\n        else\
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    auto end = l.end();\n    ++it;\n    for\
    \ (; it != end; ++it)\n        if ((*it) < (*--end))\n            return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_j0kn9lw: /tmp/tmp_j0kn9lw.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  auto x = l[0], y = l[0], z = l[0];\n  for (auto i : l) {\n    if (y\
    \ < i || x == i) {\n      x = i;\n      y = i;\n    } else {\n      z = i;\n \
    \   }\n  }\n  return x == z;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnh7puove: /tmp/tmpnh7puove.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long current = l.front();\n    bool is_increasing = true;\n \
    \   for (long long n : l) {\n        if (n <= current)\n            is_increasing\
    \ = false;\n        if (n > current)\n            current = n;\n    }\n    return\
    \ is_increasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2yps8gk2: /tmp/tmp2yps8gk2.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool ret = false;\n    int i = 0;\n    while (i < l.size()) {\n  \
    \      // if first element of pair is greater than second element in pair\n  \
    \      if (l[i] >= l[i + 1]) {\n            // swap both elements\n          \
    \  auto j = i;\n            i--;\n            std::swap(l[i], l[j]);\n       \
    \     ret = true;\n        } else {\n            i++;\n        }\n    }\n    return\
    \ ret;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'munmap_chunk(): invalid pointer

    '
  stdout: ''
  timestamp: 1660129223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int len = l.size();\n    if (len < 2) return false;\n    int maxv\
    \ = l[0], minv = l[0];\n    for (int i = 1; i < len; i++) {\n        if (l[i]\
    \ > maxv) return false;\n        if (l[i] < minv) return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp08ug58la: /tmp/tmp08ug58la.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129222
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // Sort from small to large.\n  std::sort(l.begin(), l.end(), [](long\
    \ a, long b) {\n    return a > b;\n  });\n  if (l.front() <= l.back()) {\n   \
    \ return true;\n  } else {\n    return false;\n  }\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf8ww67r9: /tmp/tmpf8ww67r9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long a = l[0], b = l[1];\n    bool c = false;\n    for (auto i : l)\
    \ {\n        if (b < i) {\n            a = i;\n            b = i;\n        } else\
    \ {\n            c = true;\n        }\n    }\n    if (c == true)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg8i72a_s: /tmp/tmpg8i72a_s.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Get max and min elements.\n    long max_value = std::numeric_limits<long>::max();\n\
    \    long min_value = std::numeric_limits<long>::min();\n    for (auto &elem :\
    \ l){\n        if (elem > max_value)\n            max_value = elem;\n        if\
    \ (elem < min_value)\n            min_value = elem;\n    }\n\n    if (max_value\
    \ < min_value)\n        return false;\n    // If the max is less than the min,\
    \ swap them.\n    if (max_value < 0)\n        max_value = -max_value;\n\n    return\
    \ true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0q91uefn: /tmp/tmp0q91uefn.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129225
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 1) {\n    return true;\n  }\n  std::unordered_map<long,\
    \ long> mp;\n  std::unordered_set<long> s;\n  for (long i : l) {\n    mp[i] =\
    \ i;\n    s.insert(i);\n  }\n  for (long i = 0; i < l.size() - 1; ++i) {\n   \
    \ if (mp[s[i]] < mp[s[i + 1]]) {\n      return false;\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpit8401ey.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpit8401ey.cpp:21:13: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::unordered_set<long int>\u2019 and \u2018long int\u2019\
    )\n   21 |     if (mp[s[i]] < mp[s[i + 1]]) {\n      |             ^\n/tmp/tmpit8401ey.cpp:21:24:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::unordered_set<long\
    \ int>\u2019 and \u2018long int\u2019)\n   21 |     if (mp[s[i]] < mp[s[i + 1]])\
    \ {\n      |                        ^\n"
  stdout: ''
  timestamp: 1660129223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (auto i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1])\
    \ return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwmtul8lr: /tmp/tmpwmtul8lr.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129223
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::vector<long> curr = l;\n    bool increasing\
    \ = true;\n    do {\n        increasing = false;\n        for (auto c : curr)\
    \ {\n            if (c < curr[0]) {\n                increasing = true;\n    \
    \            break;\n            }\n        }\n        if (!increasing) break;\n\
    \        std::swap(curr[0], curr[curr.size()-1]);\n        curr.pop_back();\n\
    \    } while (true);\n    return increasing;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmproancqe1: /tmp/tmproancqe1.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129224
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) return false;\n  long m = l[0];\n  for (long i = 1;\
    \ i < l.size(); i++) {\n    if (l[i] < m)\n      return false;\n    else if (l[i]\
    \ > m)\n      return true;\n    m = l[i];\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6zyuip7_: /tmp/tmp6zyuip7_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129224
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) return false;\n  long min = l[0], max = l[0];\n  for\
    \ (long i : l) {\n    if (i < min) return false;\n    if (i > max) return false;\n\
    \    min = max;\n    max = i;\n  }\n  return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9_78oecm: /tmp/tmp9_78oecm.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129225
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() >= 2);\n    long first = l[0];\n    long last = l[l.size()-1];\n\
    \    long mid = first + (last-l)/2;\n    for(long i = 0; i < l.size()-1; i++)\
    \ {\n        if(l[i+1] < mid)\n            return false;\n        else if(l[i]\
    \ > mid)\n            return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0luoogq.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz0luoogq.cpp:14:29: error: no match for \u2018operator-\u2019\
    \ (operand types are \u2018long int\u2019 and \u2018std::vector<long int>\u2019\
    )\n   14 |     long mid = first + (last-l)/2;\n      |                       \
    \  ~~~~^~\n      |                         |    |\n      |                   \
    \      |    std::vector<long int>\n      |                         long int\n\
    In file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n           \
    \      from /usr/include/c++/9/bits/specfun.h:45,\n                 from /usr/include/c++/9/cmath:1927,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpz0luoogq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__y.base() - __x.base())) std::operator-(const std::reverse_iterator<_Iterator>&,\
    \ const std::reverse_iterator<_IteratorR>&)\u2019\n  415 |     operator-(const\
    \ reverse_iterator<_IteratorL>& __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:415:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpz0luoogq.cpp:14:30:\
    \ note:   mismatched types \u2018const std::reverse_iterator<_Iterator>\u2019\
    \ and \u2018long int\u2019\n   14 |     long mid = first + (last-l)/2;\n     \
    \ |                              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpz0luoogq.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:1209:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR> constexpr\
    \ decltype ((__x.base() - __y.base())) std::operator-(const std::move_iterator<_IteratorL>&,\
    \ const std::move_iterator<_IteratorR>&)\u2019\n 1209 |     operator-(const move_iterator<_IteratorL>&\
    \ __x,\n      |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator"
  stdout: ''
  timestamp: 1660129223
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  // Sort vector l\n  std::sort(l.begin(), l.end());\n\n  // Find lowest\
    \ element of left side of current range\n  // If leftSideOfCurrentRange < leftSideOfCurrentRange_2,\
    \ then current range is increasing\n  long leftSideOfCurrentRange = l[l.size()\
    \ - 1];\n\n  // Find right side of current range\n  // If rightSideOfCurrentRange\
    \ > rightSideOfCurrentRange_2, then current range is decreasing\n  long rightSideOfCurrentRange\
    \ = l[0];\n\n  // Check for monotonicity of increasing or decreasing vector\n\
    \  while (rightSideOfCurrentRange != leftSideOfCurrentRange) {\n    leftSideOfCurrentRange\
    \ = l[l.size() - 1];\n    rightSideOfCurrentRange = l[0];\n  }\n\n  // If vector\
    \ is monotonic increasing, return true\n  if (leftSideOfCurrentRange < rightSideOfCurrentRange)\
    \ return true;\n\n  // If vector is monotonic decreasing, return true\n  if (leftSideOfCurrentRange\
    \ > rightSideOfCurrentRange) return false;\n\n  // If vector is monotonic and\
    \ same, return true\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long i = 0;\n    bool flag = true;\n    for (auto x : l) {\n     \
    \   if (i == 0) {\n            i = x;\n            continue;\n        }\n    \
    \    if (x < i) {\n            flag = false;\n            break;\n        }\n\
    \        i += 1;\n    }\n    return flag;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw357bmto: /tmp/tmpw357bmto.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129224
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    auto last = l.end();\n    \n    auto increasing\
    \ = [&it, &last](long l) {\n        return l > last && *it > l;\n    };\n    auto\
    \ decreasing = [&it, &last](long l) {\n        return l > last && *it < l;\n \
    \   };\n    return increasing(l.back()) || decreasing(l.front());\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkuvtu88t.cpp: In lambda function:\n/tmp/tmpkuvtu88t.cpp:15:18:\
    \ error: no match for \u2018operator>\u2019 (operand types are \u2018long int\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    )\n   15 |         return l > last && *it > l;\n      |                ~ ^ ~~~~\n\
    \      |                |   |\n      |                |   __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n      |                long int\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkuvtu88t.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:926:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator>(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  926 |\
    \     operator>(const __normal_iterator<_IteratorL, _Container>& __lhs,\n    \
    \  |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:926:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpkuvtu88t.cpp:15:20: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018long int\u2019\n   15 |         return l > last && *it > l;\n    \
    \  |                    ^~~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpkuvtu88t.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:933:5:\
    \ note: candidate: \u2018template<class _Iterator, class _Container> bool __gnu_cxx::operator>(const\
    \ __gnu_cxx::__normal_iterator<_Iterator, _Container>&, const __gnu_cxx::__normal_iterator<_Iterator,\
    \ _Container>&)\u2019\n  933 |     operator>(const __normal_iterator<_Iter"
  stdout: ''
  timestamp: 1660129224
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long int l1=0;\n    long int l2=0;\n    long int l3=1;\n    long int\
    \ l4=1;\n    long int l5=1;\n    long int l6=1;\n    long int l7=1;\n    for (size_t\
    \ i = 0; i < l.size(); i++) {\n        if (l[i] < l1) {\n            l1=l[i];\n\
    \        }\n        else if (l[i] > l2) {\n            l2=l[i];\n        }\n \
    \       else if (l[i] < l3) {\n            l3=l[i];\n        }\n        else if\
    \ (l[i] > l4) {\n            l4=l[i];\n        }\n        else if (l[i] < l5)\
    \ {\n            l5=l[i];\n        }\n        else if (l[i] > l6) {\n        \
    \    l6=l[i];\n        }\n        else if (l[i] < l7) {\n            l7=l[i];\n\
    \        }\n    }\n    // All elements of l are monotonically increasing or decreasing.\n\
    \    bool isMonotonic = l1 <= l2 && l3 <= l4 && l5 <= l6 && l7 <= l2;\n    return\
    \ isMonotonic;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprxcky4cc: /tmp/tmprxcky4cc.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129225
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return true;\n    std::vector<long> v = l;\n   \
    \ v.sort();\n    if (v[0] != v[1]) return false;\n    for (size_t i = 2; i < v.size();\
    \ ++i) {\n        if (v[i] > v[i - 1]) return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpegmrf0hk.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpegmrf0hk.cpp:13:7: error: \u2018class std::vector<long\
    \ int>\u2019 has no member named \u2018sort\u2019\n   13 |     v.sort();\n   \
    \   |       ^~~~\n"
  stdout: ''
  timestamp: 1660129225
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int len = l.size();\n    int ind = 0;\n    while (++ind < len) {\n\
    \        if (l[ind] <= l[ind - 1]) {\n            break;\n        }\n    }\n \
    \   return ind != len - 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd_6xxkr4: /tmp/tmpd_6xxkr4.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1) return false;\n\n  auto f1 = l.front();\n  auto f2\
    \ = l.back();\n  return f2 < f1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5dmu74bb: /tmp/tmp5dmu74bb.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] > l[i-1])\
    \ \n            return false;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphtns5sk_: /tmp/tmphtns5sk_.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    sort(l.begin(), l.end());\n    long long m = l[0];\n    for (long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < m) break;\n    }\n    if (i\
    \ == l.size() - 1) return true;\n    if (l[i - 1] > l[i]) return false;\n    if\
    \ (l[i - 1] != l[i]) return monotonic(l);\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp21vc9oyw.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp21vc9oyw.cpp:16:9: error: \u2018i\u2019 was not declared\
    \ in this scope\n   16 |     if (i == l.size() - 1) return true;\n      |    \
    \     ^\n/tmp/tmp21vc9oyw.cpp:17:11: error: \u2018i\u2019 was not declared in\
    \ this scope\n   17 |     if (l[i - 1] > l[i]) return false;\n      |        \
    \   ^\n/tmp/tmp21vc9oyw.cpp:18:11: error: \u2018i\u2019 was not declared in this\
    \ scope\n   18 |     if (l[i - 1] != l[i]) return monotonic(l);\n      |     \
    \      ^\n"
  stdout: ''
  timestamp: 1660129225
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long x = 0;\n    for (long i = 0; i < l.size(); ++i) {\n        x\
    \ = std::max(x, l[i]);\n    }\n    for (long i = 0; i < l.size(); ++i) {\n   \
    \     x = std::min(x, l[i]);\n    }\n    return x == 0;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3k4pcyeg: /tmp/tmp3k4pcyeg.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129225
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i = 0; i < l.size() - 1; ++i) {\n        if (l[i] < l[i\
    \ + 1]) {\n            return false;\n        }\n    }\n    return true;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphirvo5dk: /tmp/tmphirvo5dk.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  typedef typename std::vector<long>::const_iterator v_iter;\n  v_iter\
    \ first = l.begin();\n  v_iter last = l.end();\n  long cur_val = *first;\n  long\
    \ prev_val = *last;\n  bool decrease = true;\n  for (v_iter iter = first+1; iter\
    \ != last; ++iter) {\n    long val = *iter;\n    if (val < cur_val) {\n      return\
    \ false;\n    }\n    if (val > prev_val) {\n      return false;\n    }\n    if\
    \ (val < prev_val) {\n      decrease = false;\n    }\n    prev_val = cur_val;\n\
    \    cur_val = val;\n  }\n  return decrease;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzvwf4uom: /tmp/tmpzvwf4uom.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long minValue = 0;\n    long long maxValue = 0;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        if (l[i] < minValue)\n           \
    \ minValue = l[i];\n        if (l[i] > maxValue)\n            maxValue = l[i];\n\
    \    }\n    return (maxValue >= minValue);\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqyziqqij: /tmp/tmpqyziqqij.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    long a = *it++;\n    long b = *it;\n   \
    \ if (a == b) return false;\n    ++it;\n    a = *it;\n    long c = *it;\n    if\
    \ (c < b) return true;\n    if (b < c) return true;\n    return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn_ck3zil: /tmp/tmpn_ck3zil.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() > 0);\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i = 1; i < l.size(); ++i) {\n        if (l[i] <= l[i - 1]) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpge9bo0jb: /tmp/tmpge9bo0jb.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    long max_val\
    \ = l[0];\n    for (int i = 1; i < n; i++) {\n        long val = l[i];\n     \
    \   if (val > max_val) {\n            max_val = val;\n        }\n    }\n    return\
    \ max_val == l[0];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnxzfxwjo: /tmp/tmpnxzfxwjo.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) {\n        return true;\n    }\n    std::vector<long>\
    \ l2 = l;\n    std::sort(l2.begin(), l2.end());\n    if (l2.front() >= l2.back())\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe47eyvs7: /tmp/tmpe47eyvs7.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    auto last = l.end() - 1;\n    // check increasing\n\
    \    bool increasing = true;\n    while (it < last && increasing) {\n        increasing\
    \ = !(*it > *(++it));\n    }\n    if (increasing && it == last)\n        return\
    \ true;\n    // check decreasing\n    decreasing = true;\n    while (it > last\
    \ && decreasing) {\n        decreasing = !(*it > *(--it));\n    }\n    if (decreasing\
    \ && it == last)\n        return true;\n    return false;\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv90pr3jv.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpv90pr3jv.cpp:21:5: error: \u2018decreasing\u2019 was not\
    \ declared in this scope; did you mean \u2018increasing\u2019?\n   21 |     decreasing\
    \ = true;\n      |     ^~~~~~~~~~\n      |     increasing\n"
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0 || l[0] > l[l.size()-1]) {\n        return false;\n\
    \    }\n    long first = l[0];\n    long last = l[l.size()-1];\n    for (size_t\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < first || l[i] > last) {\n  \
    \          return false;\n        }\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuhsbqken: /tmp/tmpuhsbqken.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int size = l.size();\n  bool flag = true;\n  for (int i = 0; i <= size;\
    \ i++) {\n    int j = i + 1;\n    if (i == size - 1 || l[j] >= l[i]) flag = false;\n\
    \  }\n  return flag;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0rn5qddu: /tmp/tmp0rn5qddu.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = std::lower_bound(l.begin(), l.end(), l.front());\n    if\
    \ (it == l.begin() || it == l.end() || (*it) < l.front())\n        return true;\n\
    \    if (it == l.end() || (*it) > l.back())\n        return false;\n    std::vector<long>\
    \ res;\n    res.push_back((*it) - 1);\n    for (auto p = it; p != l.end() && p->back()\
    \ == l.front(); ++p)\n        res.push_back((*p) - 1);\n    if (res.back() >=\
    \ 0)\n        res.pop_back();\n    return monotonic(res);\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3j3uitzi.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3j3uitzi.cpp:18:42: error: request for member \u2018back\u2019\
    \ in \u2018* p.__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator->()\u2019\
    , which is of non-class type \u2018long int\u2019\n   18 |     for (auto p = it;\
    \ p != l.end() && p->back() == l.front(); ++p)\n      |                      \
    \                    ^~~~\n"
  stdout: ''
  timestamp: 1660129225
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long low = 0, high = l.size() - 1;\n  while (low < high) {\n    long\
    \ mid = (low + high) / 2;\n    if (l[mid] < l[low] || l[mid] < l[high]) {\n  \
    \    low = mid;\n    } else {\n      high = mid;\n    }\n  }\n  return l[low]\
    \ >= l[high];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Use std::max_element to find the maximum element in the vector\n\
    \    long maximum = *std::max_element(l.begin(), l.end());\n    // If vector is\
    \ empty, return true because no element has been added\n    if (l.size() == 0)\n\
    \        return true;\n    // Iterate over the vector looking for the first non-decreasing\
    \ element\n    bool result = false;\n    for (long i : l) {\n        if (i < maximum)\
    \ {\n            result = true;\n            break;\n        }\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpst72ghtt: /tmp/tmpst72ghtt.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() <= 1 || l.size() >= 1000) return false;\n  if (l[0] ==\
    \ l[1]) return false;\n  long max_val = l[0];\n  for (long i = 1, j = l[0]; i\
    \ <= l.size(); i++) {\n    if (l[i] < l[j]) {\n      if (l[i] < max_val) return\
    \ false;\n      max_val = l[i];\n    } else if (l[i] > l[j]) {\n      if (l[i]\
    \ > max_val) return false;\n      max_val = l[i];\n    }\n  }\n  return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmcge88xo: /tmp/tmpmcge88xo.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Sort vector.\n    sort(l.begin(), l.end());\n    // Iterate over\
    \ sorted vector and compare with previous element using <.\n    for (long i =\
    \ l.size()-1; i > 0; --i) {\n        if (l[i] < l[i-1]) {\n            return\
    \ false;\n        }\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyawaa6aj: /tmp/tmpyawaa6aj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (int i = 0; i < l.size(); i++) {\n        if (l[i] > l[i - 1])\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5kzu7wsh: /tmp/tmp5kzu7wsh.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129225
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int i1 = 0, i2 = l.size() - 1;\n  while (i1 < i2) {\n    if (l[i1] >\
    \ l[i2]) std::swap(i1, i2);\n    ++i1;\n    --i2;\n  }\n  return (i1 == 0 || l[i1]\
    \ <= l[i2]);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq8rtlict: /tmp/tmpq8rtlict.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129225
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long ln = l.size();\n  if (ln < 2) return true;\n  if (ln > 2) return\
    \ false;\n  int first = l[0];\n  int last = l[ln - 1];\n  if (first <= last) return\
    \ false;\n  for (long i = 0; i < ln; i++) {\n    if (l[i] < first) return false;\n\
    \    if (l[i] > last) return false;\n  }\n  return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc02jo075: /tmp/tmpc02jo075.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Create a vector with difference between each element of the vector\n\
    \    // and a vector of 0 with the same size of vector.\n    std::vector<long>\
    \ diff(l.size());\n    std::vector<long> zero(l.size());\n    for (size_t i =\
    \ 0; i < l.size(); ++i) {\n        diff[i] = l[i] - l[i - 1];\n        zero[i]\
    \ = 0;\n    }\n    // Find the first zero element and last non-zero element.\n\
    \    auto it = std::find_if(zero.begin(), zero.end(), [](const auto elem) { return\
    \ elem == 0; });\n    auto it2 = std::find_if(l.begin(), l.end(), [](const auto\
    \ elem) { return elem != 0; });\n    // If there is any difference between first\
    \ non-zero and last non-zero\n    // element. Return true if they are increasing\
    \ or decreasing.\n    return std::any_of(diff.begin(), diff.end(), [](const auto\
    \ elem) { return elem > 0; });\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4575pdhu: /tmp/tmp4575pdhu.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int left_bound = 0;\n  int right_bound = l.size() - 1;\n  while (left_bound\
    \ <= right_bound) {\n    int mid = (left_bound + right_bound) / 2;\n    int mid_val\
    \ = l[mid];\n    if (mid_val < mid_val) {\n      right_bound = mid - 1;\n    }\
    \ else if (mid_val > mid_val) {\n      left_bound = mid + 1;\n    } else {\n \
    \     return true;\n    }\n  }\n  return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppkg6ua9c: /tmp/tmppkg6ua9c.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Write your code here\n    long long start = l[0];\n    for (size_t\
    \ i = 0; i < l.size(); ++i) {\n        if (l[i] >= start) {\n            return\
    \ true;\n        }\n        start = l[i];\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpq2n4rz79: /tmp/tmpq2n4rz79.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find minimum element\n    auto min = *min_element(l.begin(), l.end());\n\
    \    if (l.size() > 1) {\n        long m = *max_element(l.begin(), l.end());\n\
    \        if (m == min) {\n            // All elements are equal\n            return\
    \ true;\n        } else if (m == min + 1) {\n            // Both are same and\
    \ one is next\n            return false;\n        } else if (m > min && l > l)\
    \ {\n            // Both elements are increasing\n            return true;\n \
    \       } else {\n            // Both elements are decreasing\n            return\
    \ false;\n        }\n    } else {\n        return *min_element(l.begin(), l.end())\
    \ <= min;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfw2u3gib: /tmp/tmpfw2u3gib.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129227
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    if (it == l.end()) return true;\n    if\
    \ (std::next(it) == l.end()) return false;\n    if (it->first <= std::next(it)->first)\
    \ return monotonic(std::next(it));\n    auto it2 = std::next(it);\n    if (it2->first\
    \ <= it->first) return false;\n    return monotonic(std::next(it2));\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrkp3vvj.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcrkp3vvj.cpp:14:13: error: request for member \u2018first\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   14\
    \ |     if (it->first <= std::next(it)->first) return monotonic(std::next(it));\n\
    \      |             ^~~~~\n/tmp/tmpcrkp3vvj.cpp:14:37: error: request for member\
    \ \u2018first\u2019 in \u2018* std::next<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(it, 1).__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   14 |     if (it->first <= std::next(it)->first) return monotonic(std::next(it));\n\
    \      |                                     ^~~~~\n/tmp/tmpcrkp3vvj.cpp:14:70:\
    \ error: could not convert \u2018std::next<__gnu_cxx::__normal_iterator<long int*,\
    \ std::vector<long int> > >(it, 1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  14 |     if (it->first <= std::next(it)->first) return monotonic(std::next(it));\n\
    \      |                                                             ~~~~~~~~~^~~~\n\
    \      |                                                                     \
    \ |\n      |                                                                 \
    \     __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpcrkp3vvj.cpp:16:14:\
    \ error: request for member \u2018first\u2019 in \u2018* it2.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   16 |     if (it2->first <= it->first) return false;\n\
    \      |              ^~~~~\n/tmp/tmpcrkp3vvj.cpp:16:27: error: request for member\
    \ \u2018first\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n\
    \   16 |     if (it2->first <= it->first) return false;\n      |             \
    \              ^~~~~\n/tmp/tmpcrkp3vvj.cpp:17:31: e"
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) return true;\n  // Compare the first and last element\n\
    \  if (l.front() > l.back()) return false;\n  auto it = l.begin();\n  auto last\
    \ = it;\n  if (it == l.end()) return true;\n  ++it;\n  if (it == l.end()) return\
    \ true;\n  ++it;\n  while (it != last) {\n    if (it == l.end()) return false;\n\
    \    ++it;\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4cbvi_xx: /tmp/tmp4cbvi_xx.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129226
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int i, j, temp;\n    if (l.size() <= 1) return true;\n    for (i =\
    \ 1, j = 0, temp = l[0]; temp > l[i]; i++, j++, temp = l[i]) {\n        if (temp\
    \ > l[i]) {\n            l[j] = temp;\n            return true;\n        }\n \
    \   }\n    l[j] = temp;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpks86hzys: /tmp/tmpks86hzys.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  assert(n > 0);\n  bool res = true;\n  // sort and\
    \ reverse the list\n  auto it = std::stable_sort(l.begin(), l.end());\n  l +=\
    \ l.begin();\n  it--;\n  for (int i = 1; i < n; i++) {\n    int cmp = it->first\
    \ - l[i].first;\n    if (cmp < 0) {\n      res = false;\n      break;\n    }\n\
    \    it--;\n  }\n  return res;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfwyn1bn1.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfwyn1bn1.cpp:15:8: error: \u2018void it\u2019 has incomplete\
    \ type\n   15 |   auto it = std::stable_sort(l.begin(), l.end());\n      |   \
    \     ^~\n/tmp/tmpfwyn1bn1.cpp:16:5: error: no match for \u2018operator+=\u2019\
    \ (operand types are \u2018std::vector<long int>\u2019 and \u2018std::vector<long\
    \ int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019})\n   16 |   l += l.begin();\n      |   ~~^~~~~~~~~~~~\n/tmp/tmpfwyn1bn1.cpp:19:32:\
    \ error: request for member \u2018first\u2019 in \u2018l.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)i))\u2019, which is of non-class type \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019}\n   19 |     int\
    \ cmp = it->first - l[i].first;\n      |                                ^~~~~\n"
  stdout: ''
  timestamp: 1660129227
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (long i = 0; i < l.size()-1; ++i) {\n        if (l[i+1] >= l[i])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaj7abf5d: /tmp/tmpaj7abf5d.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129229
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long sum = 0;\n    for (long i : l) {\n        sum += i;\n  \
    \  }\n\n    long long avg = sum / l.size();\n\n    for (long i : l) {\n      \
    \  if (i < avg)\n            return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg6aqyqak: /tmp/tmpg6aqyqak.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129229
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long prev = std::numeric_limits<long>::min();\n    for (long el :\
    \ l) {\n        if (prev > el)\n            return false;\n        prev = el;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpecroywud: /tmp/tmpecroywud.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129229
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    std::sort(l.begin(), l.end());\n    long long x = 0;\n    for (long\
    \ long i = 1; i < l.size(); ++i) {\n        if (l[i] <= l[i - 1]) {\n        \
    \    return false;\n        }\n        x += (long long)l[i] - l[i - 1];\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8ttju3gr: /tmp/tmp8ttju3gr.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (size_t i = l.size()-1; i >= 0; i--) {\n        if (l[i] > l[i+1])\
    \ return false;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph5bwll6y: /tmp/tmph5bwll6y.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    long long a = l[0], b = l[1],\
    \ c = l[2];\n    if (a == b) return false;\n    if (a == c) return false;\n  \
    \  if (b == c) return true;\n    if ((a - b) <= (c - a)) return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7zptcb9q: /tmp/tmp7zptcb9q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129229
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long low = l[0]; // current minimum value\n    long long high\
    \ = l[0]; // current maximum value\n    for (long long i = 0; i < l.size(); i++)\
    \ {\n        if (l[i] < low)\n            low = l[i];\n        if (l[i] > high)\n\
    \            high = l[i];\n    }\n    return low <= high;\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfzi5wr7d: /tmp/tmpfzi5wr7d.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto l = l.size();\n    long l1 = l[0];\n    long l2 = l[1];\n   \
    \ long l3 = l[2];\n    long l4 = l[3];\n    for (long i = 1; i < l; i++) {\n \
    \       if (l[i] > l1) {\n            l1 = l[i];\n        }\n        if (l[i]\
    \ < l2) {\n            l2 = l[i];\n        }\n        if (l[i] > l3) {\n     \
    \       l3 = l[i];\n        }\n        if (l[i] < l4) {\n            l4 = l[i];\n\
    \        }\n    }\n    bool res = true;\n    if (l2 < l1) {\n        res = false;\n\
    \    }\n    if (l4 < l3) {\n        res = false;\n    }\n    if (l1 < l2) {\n\
    \        res = false;\n    }\n    if (l3 < l4) {\n        res = false;\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5o3_xjtf.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp5o3_xjtf.cpp:11:10: error: declaration of \u2018auto l\u2019\
    \ shadows a parameter\n   11 |     auto l = l.size();\n      |          ^\n/tmp/tmp5o3_xjtf.cpp:11:14:\
    \ error: use of \u2018l\u2019 before deduction of \u2018auto\u2019\n   11 |  \
    \   auto l = l.size();\n      |              ^\n"
  stdout: ''
  timestamp: 1660129228
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Loop over the vector until we find a decreasing or increasing element.\n\
    \    // If one exists, break the loop and return true\n    bool increasing = false;\n\
    \    bool decreasing = false;\n    for (long i = l.size() - 1; i >= 0; --i) {\n\
    \        if (l[i] <= l[i - 1]) {\n            decreasing = true;\n        } else\
    \ if (l[i] >= l[i - 1]) {\n            increasing = true;\n            break;\n\
    \        }\n    }\n    return increasing || decreasing;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplcgwzrjg: /tmp/tmplcgwzrjg.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long previous = l[0];\n    bool increases = true;\n    for (int i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] < previous) {\n            increases\
    \ = false;\n            break;\n        }\n        previous = l[i];\n    }\n \
    \   return increases;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1o9v34bf: /tmp/tmp1o9v34bf.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; ++i) {\n        int\
    \ j = (i+1) % n;\n        if (l[i] < l[j]) {\n            return false;\n    \
    \    }\n        if (l[i] > l[j]) {\n            return true;\n        }\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjg7mzow5: /tmp/tmpjg7mzow5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    assert(l.size() >= 2);\n\n    auto lmin = *std::min_element(l.begin(),\
    \ l.end());\n    auto lmax = *std::max_element(l.begin(), l.end());\n    if (lmin\
    \ > lmax) {\n        std::swap(lmin, lmax);\n    }\n\n    for (int i = 0; i <\
    \ l.size(); ++i) {\n        if (l[i] < lmin) return false;\n        if (l[i] >\
    \ lmax) return false;\n    }\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpn1wbyvm9: /tmp/tmpn1wbyvm9.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto start = l.begin();\n    auto end = l.end();\n    if (end - start\
    \ < 2)\n        return false;\n    auto middle = std::next(start);\n    std::advance(middle,\
    \ 1);\n    return (l.back() <= std::get<0>(middle)) && (std::get<0>(start) > std::get<0>(middle));\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0obnx6xb.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0obnx6xb.cpp:17:43: error: no matching function for call\
    \ to \u2018get<0>(__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >&)\u2019\n   17 |     return (l.back() <= std::get<0>(middle)) && (std::get<0>(start)\
    \ > std::get<0>(middle));\n      |                                           ^\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0obnx6xb.cpp:2:\n/usr/include/c++/9/utility:219:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type& std::get(std::pair<_Tp1,\
    \ _Tp2>&)\u2019\n  219 |     get(std::pair<_Tp1, _Tp2>& __in) noexcept\n     \
    \ |     ^~~\n/usr/include/c++/9/utility:219:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0obnx6xb.cpp:17:43: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   17 |     return (l.back() <= std::get<0>(middle)) && (std::get<0>(start)\
    \ > std::get<0>(middle));\n      |                                           ^\n\
    In file included from /usr/include/c++/9/algorithm:60,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmp0obnx6xb.cpp:2:\n/usr/include/c++/9/utility:224:5: note: candidate:\
    \ \u2018template<long unsigned int _Int, class _Tp1, class _Tp2> constexpr typename\
    \ std::tuple_element<_Int, std::pair<_Tp1, _Tp2> >::type&& std::get(std::pair<_Tp1,\
    \ _Tp2>&&)\u2019\n  224 |     get(std::pair<_Tp1, _Tp2>&& __in) noexcept\n   \
    \   |     ^~~\n/usr/include/c++/9/utility:224:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmp0obnx6xb.cpp:17:43: note:   \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 is not derived from \u2018std::pair<_Tp1,\
    \ _Tp2>\u2019\n   17 |     return (l.back() <= std::get<0>(middle)) && (std::get<0>(start)\
    \ > std::get<"
  stdout: ''
  timestamp: 1660129229
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  for (int i = 0; i < l.size() - 1; i++) {\n    if (l[i] > l[i + 1]) {\n\
    \      return false;\n    }\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpo2_6xphj: /tmp/tmpo2_6xphj.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    auto last = it;\n    while (it != l.end()\
    \ && (*it < *last)) {\n        last++;\n    }\n    if (it == l.end())\n      \
    \  return true;\n    last = it;\n    while (it != l.end() && (*it > *last)) {\n\
    \        last++;\n    }\n    if (it == l.end())\n        return false;\n    return\
    \ !(*it < *last);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_ygv61po: /tmp/tmp_ygv61po.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long min = l.front();\n    long max = l.back();\n    for (auto i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        }\n        if (i\
    \ < min) {\n            min = i;\n        }\n    }\n    if (min == max) {\n  \
    \      return false;\n    }\n    // All elements are increasing.\n    if (min\
    \ > max) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppwm65ne0: /tmp/tmppwm65ne0.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  long long i = 1;\n  for (auto e : l) { i = (i*e + 1) >> 1; }\n  return\
    \ i < (1LL<<31) && i > 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvitbszay: /tmp/tmpvitbszay.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  for (long long i = 0; i < l.size(); ++i) {\n    if (l[i] > l[i - 1])\
    \ return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7eppi518: /tmp/tmp7eppi518.cpp:18: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Find the first element that isn't equal to its neighbours. We do\n\
    \    // this by iterating through both vectors simultaneously and looking for\n\
    \    // a difference between the current element and the neighbours. This\n  \
    \  // is done using two pointers, one that points to the current element and\n\
    \    // the other to the current neighbour (the element it just looked at) and\n\
    \    // comparing the values at these pointers.\n    long current = l.at(0); //\
    \ Current element\n    long last = l.back(); // Previous element\n    for (long\
    \ i = 1, e = l.size(); i < e; i++) {\n        // Iterate over two consecutive\
    \ elements in an array\n        if (current != l.at(i)) {\n            // If there\
    \ is a difference we return false\n            return false;\n        }\n    \
    \    current = l.at(i); // Update current element\n        last = l.at(i - 1);\
    \ // Update previous element\n    }\n    // Return true is there are no differences\
    \ anymore\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmo9u67q_: /tmp/tmpmo9u67q_.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long x = l.front();\n    if (x == 0) return true;\n    for (size_t\
    \ i = 1; i < l.size(); i++) {\n        if (std::abs(l[i] - x) > 1) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5etz02ve: /tmp/tmp5etz02ve.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2)\n        return false;\n    auto cmp = [&l](int\
    \ x, int y) { return x < y; };\n    std::sort(l.begin(), l.end(), cmp);\n    return\
    \ l.front() == l.back();\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb_4h6r5z: /tmp/tmpb_4h6r5z.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int cnt = 0;\n  long max_v = *(l.end()-1);\n  for (auto v : l)\n   \
    \ if (v < max_v) {\n      cnt++;\n      max_v = v;\n    }\n  return (cnt < 2);\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd6e5nt2j: /tmp/tmpd6e5nt2j.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long lMin = l[0], lMax = l[n-1];\n    for(int\
    \ i = 1; i < n; ++i) {\n        lMin = std::min(lMin, l[i]);\n        lMax = std::max(lMax,\
    \ l[i]);\n    }\n    if(lMax < lMin) {\n        return true;\n    } else {\n \
    \       return false;\n    }\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5qitvjsb: /tmp/tmp5qitvjsb.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129230
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() == 0) return false;\n  long long res = 0;\n  for (int i\
    \ = 0; i < l.size(); i++)\n    res += l[i];\n  return (std::is_increasing)(res);\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpevxvc3aj.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpevxvc3aj.cpp:15:16: error: \u2018is_increasing\u2019 is\
    \ not a member of \u2018std\u2019\n   15 |   return (std::is_increasing)(res);\n\
    \      |                ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129230
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  sort(l.begin(), l.end());\n  for (auto i : l) {\n    if (i < l.front())\n\
    \      return false;\n  }\n  return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7oowqxvj: /tmp/tmp7oowqxvj.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long max = std::numeric_limits<long long>::max();\n    long long\
    \ min = std::numeric_limits<long long>::min();\n    return std::find_if(l.begin(),\
    \ l.end(), [max](long long i) {\n        return (i == max || i == min);\n    })\
    \ != l.end();\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu43wxfyn.cpp: In lambda function:\n/tmp/tmpu43wxfyn.cpp:14:34:\
    \ error: \u2018min\u2019 is not captured\n   14 |         return (i == max ||\
    \ i == min);\n      |                                  ^~~\n/tmp/tmpu43wxfyn.cpp:13:49:\
    \ note: the lambda has no capture-default\n   13 |     return std::find_if(l.begin(),\
    \ l.end(), [max](long long i) {\n      |                                     \
    \            ^\n/tmp/tmpu43wxfyn.cpp:12:15: note: \u2018long long int min\u2019\
    \ declared here\n   12 |     long long min = std::numeric_limits<long long>::min();\n\
    \      |               ^~~\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:71,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpu43wxfyn.cpp:2:\n/usr/include/c++/9/bits/predefined_ops.h:\
    \ In instantiation of \u2018bool __gnu_cxx::__ops::_Iter_pred<_Predicate>::operator()(_Iterator)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = monotonic(std::vector<long int>)::<lambda(long long int)>]\u2019\
    :\n/usr/include/c++/9/bits/stl_algo.h:120:14:   required from \u2018_RandomAccessIterator\
    \ std::__find_if(_RandomAccessIterator, _RandomAccessIterator, _Predicate, std::random_access_iterator_tag)\
    \ [with _RandomAccessIterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >; _Predicate = __gnu_cxx::__ops::_Iter_pred<monotonic(std::vector<long\
    \ int>)::<lambda(long long int)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:161:23:\
    \   required from \u2018_Iterator std::__find_if(_Iterator, _Iterator, _Predicate)\
    \ [with _Iterator = __gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >; _Predicate = __gnu_cxx::__ops::_Iter_pred<monotonic(std::vector<long int>)::<lambda(long\
    \ long int)> >]\u2019\n/usr/include/c++/9/bits/stl_algo.h:3969:28:   required\
    \ from \u2018_IIter std::find_if(_IIter, _IIter, _Predicate) [with _IIter = __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >; _Pre"
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  bool b = true;\n  for (int i = n-1; i >= 0; i--)\
    \ {\n    if (l[i] <= l[i+1]) {\n      b = false;\n      break;\n    }\n  }\n \
    \ return b;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3_2s5jtx: /tmp/tmp3_2s5jtx.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int size = l.size();\n  long i = 0;\n  long pre = 0;\n  long post =\
    \ 0;\n  while (i < size) {\n    pre = pre * 10 + l[i] - 1;\n    post = post *\
    \ 10 + l[i] + 1;\n    i++;\n  }\n  return pre > post;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkq80onzq: /tmp/tmpkq80onzq.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1) return true;\n\n    bool ans = true;\n\n    for\
    \ (long i = 0, j = l.size(); i < j; i++) {\n        if (l[i] < l[j]) {\n     \
    \       ans = false;\n            break;\n        }\n    }\n\n    return ans;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptx5hmdre: /tmp/tmptx5hmdre.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if(l.size() == 0) return false;\n    auto it1 = l.begin(), it2 = l.begin();\n\
    \    for(; it1 != l.end(); it1++, it2++) {\n        if(*it2 > *it1) return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp44lep4cc: /tmp/tmp44lep4cc.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long first = l.front(), last = l.back();\n    for(auto i = l.begin()+2;\
    \ i != l.end()-1; i++) {\n        if(*i < *(i-1)) return true;\n        if(*i\
    \ > *(i+1)) return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptkc5c1qg: /tmp/tmptkc5c1qg.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto it = l.begin();\n    auto end = l.end();\n    auto less = [&](long\
    \ a, long b) { return a < b; };\n    for (; it != end; ++it) {\n        auto it\
    \ = l.begin();\n        while (it != end && *it < *it) ++it;\n        if (it ==\
    \ end) {\n            return false;\n        }\n        if ((*it > 0 && *it >\
    \ it->second || *it < 0 && *it < it->second) ||\n            !(*it == it->second))\
    \ {\n            return false;\n        }\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0zdqy17m.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0zdqy17m.cpp:20:35: error: request for member \u2018second\u2019\
    \ in \u2018* it.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   20\
    \ |         if ((*it > 0 && *it > it->second || *it < 0 && *it < it->second) ||\n\
    \      |                                   ^~~~~~\n/tmp/tmp0zdqy17m.cpp:20:66:\
    \ error: request for member \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   20 |         if ((*it > 0 && *it > it->second || *it\
    \ < 0 && *it < it->second) ||\n      |                                       \
    \                           ^~~~~~\n/tmp/tmp0zdqy17m.cpp:21:26: error: request\
    \ for member \u2018second\u2019 in \u2018* it.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   21 |             !(*it == it->second)) {\n      | \
    \                         ^~~~~~\n"
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  long long int max_val = -1;\n  for (int i = 0;\
    \ i < n; ++i) {\n    long long int curr = l[i];\n    if (curr > max_val) {\n \
    \     max_val = curr;\n    }\n  }\n  if (max_val < 0) {\n    return false;\n \
    \ }\n  bool flag = true;\n  for (int i = 1; i < n; ++i) {\n    long long int curr\
    \ = l[i];\n    if (curr != max_val) {\n      flag = false;\n    }\n  }\n  return\
    \ flag;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp30crj17b: /tmp/tmp30crj17b.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Return true if monotonic increasing.\n    for (long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] < l[i-1]) return true;\n    }\n    // Return\
    \ true if monotonic decreasing.\n    for (long i = 1; i < l.size(); i++) {\n \
    \       if (l[i] > l[i-1]) return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpi9tfe73q: /tmp/tmpi9tfe73q.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    return std::next_permutation(l.begin(), l.end()) == l.end();\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_oxjx52.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd_oxjx52.cpp:11:54: error: no match for \u2018operator==\u2019\
    \ (operand types are \u2018bool\u2019 and \u2018std::vector<long int>::iterator\u2019\
    \ {aka \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    })\n   11 |     return std::next_permutation(l.begin(), l.end()) == l.end();\n\
    \      |            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ^~ ~~~~~~~\n   \
    \   |                                 |                            |\n      |\
    \                                 bool                         std::vector<long\
    \ int>::iterator {aka __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd_oxjx52.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpd_oxjx52.cpp:11:63: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018bool\u2019\n   11 |     return std::next_permutation(l.begin(), l.end())\
    \ == l.end();\n      |                                                       \
    \        ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd_oxjx52.cpp:2:\n/usr/i"
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tint n = l.size();\n\t// Sort list elements to decreasing order.\n\t\
    std::sort(l.begin(), l.end(), std::greater<long>());\n\t// Iterate till 1st element\
    \ is increasing or n is decreasing\n\tfor (int i = 1; i < n; i++) {\n\t\tif (l[i\
    \ - 1] > l[i]) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpf2cxnsvn: /tmp/tmpf2cxnsvn.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    auto s = l.size();\n    if (s == 0) {\n        return true;\n    }\n\
    \    auto m = s[s-1];\n    for (auto i = 0ll; i < s; i++){\n        if (l[i] <\
    \ m && l[i-1] > m){\n            return false;\n        }\n        if (l[i] >\
    \ m && l[i-1] < m){\n            return false;\n        }\n        m = std::max(m,\
    \ l[i]);\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpffefp4r_.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpffefp4r_.cpp:15:19: error: invalid types \u2018long unsigned\
    \ int[long unsigned int]\u2019 for array subscript\n   15 |     auto m = s[s-1];\n\
    \      |                   ^\n"
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    for (auto it1 = l.begin(), it2 = l.begin() + 1; it2 != l.end(); ++it1,\
    \ ++it2) {\n        if (*it1 > *it2) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzuk3i88v: /tmp/tmpzuk3i88v.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long largest = *std::max_element(std::begin(l), std::end(l));\n  \
    \  long smallest = *std::min_element(std::begin(l), std::end(l));\n    return\
    \ largest >= smallest;\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3li10lax: /tmp/tmp3li10lax.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long min_v = *std::min_element(l.begin(), l.end());\n    long\
    \ long max_v = *std::max_element(l.begin(), l.end());\n    return (min_v < max_v);\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpb_gfe9bz: /tmp/tmpb_gfe9bz.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    bool ok = true;\n    if (l.size() == 0) {\n        return true;\n\
    \    }\n\n    if (l.size() == 1) {\n        if (l[0] == 0) {\n            return\
    \ false;\n        }\n        return l[0] >= l[1];\n    }\n\n    for (int i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            return false;\n\
    \        }\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8_agi4ak: /tmp/tmp8_agi4ak.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long n = l.size();\n    long long gap = 0;\n    long long pos\
    \ = 0;\n    long long temp;\n    for (long long i = 0; i < n; ++i) {\n       \
    \ pos = i;\n        temp = l[i];\n        while (i + 1 < n && l[i + 1] > temp)\
    \ {\n            ++i;\n        }\n        gap = std::max(gap, i - pos);\n    }\n\
    \    return gap == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmparkoawte: /tmp/tmparkoawte.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  int n = l.size();\n  // Avoid n^2 by taking advantage of monotonicity\n\
    \  long curr = l[0];\n  for (int i = 1; i < n; ++i) {\n    if (l[i] < curr) {\n\
    \      return true;\n    }\n    curr = l[i];\n  }\n  return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4ergpbiv: /tmp/tmp4ergpbiv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long t = 0;\n    for (auto it = l.begin(); it != l.end(); it++)\
    \ {\n        t = t > static_cast<long long>(*it) ? t : *it;\n    }\n    return\
    \ t < 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk5d3vj3y: /tmp/tmpk5d3vj3y.cpp:19: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tfor(long i = l.size() - 1; i >= 0; i--) {\n\t\tfor(long j = i; j >=\
    \ 0; j--) {\n\t\t\tif(l[j] < l[i]) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\
    }\n\treturn false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmps8m2stxb: /tmp/tmps8m2stxb.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // Sort vector using merge sort algorithm\n    mergeSort(l, l.begin(),\
    \ l.end());\n    if (l[0] != l[l.size() - 1]) {\n        return true;\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpokgmo5rm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpokgmo5rm.cpp:12:5: error: \u2018mergeSort\u2019 was not\
    \ declared in this scope\n   12 |     mergeSort(l, l.begin(), l.end());\n    \
    \  |     ^~~~~~~~~\n"
  stdout: ''
  timestamp: 1660129231
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    int n = l.size();\n    long long largest =\
    \ l[n-1];\n    for (int i = 1; i < n; i++) {\n        long long current = l[i];\n\
    \        if (current < largest)\n            return false;\n        else\n   \
    \         ans += current - largest;\n        largest = current;\n    }\n    if\
    \ (ans > 0)\n        return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpity64_9r: /tmp/tmpity64_9r.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129232
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long start = 0;\n    long end = std::accumulate(l.begin(), l.end(),\
    \ 0);\n    if (end < start) {\n        return false;\n    }\n    if (l.front()\
    \ < end) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpacde29vm: /tmp/tmpacde29vm.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long start=0;\n    long long last=l.back();\n    for(auto i:l)\
    \ start=max(start, last+i);\n    for(auto i:l)\n        if(last+i < start) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcv6i7g0u.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpcv6i7g0u.cpp:13:25: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |     for(auto i:l)\
    \ start=max(start, last+i);\n      |                         ^~~\n      |    \
    \                     std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcv6i7g0u.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660129233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  auto it = l.begin();\n  for (int i = 0; i < l.size() - 1; i++) {\n \
    \   if (*it < *(it + 1)) return false;\n    ++it;\n  }\n  return true;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvcc85m5_: /tmp/tmpvcc85m5_.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n  if (l.size() < 2) return false;\n  long prev = l[0], curr = l[0];\n\
    \  for (int i = 1; i < l.size(); ++i) {\n    if (l[i] < prev) return false;\n\
    \    curr = l[i];\n    prev = curr;\n  }\n  return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnyfucs4c: /tmp/tmpnyfucs4c.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n\tbool increasing = l.front() >= l.back();\n\tfor (auto i = l.begin()\
    \ + 1; i + 1 != l.end(); ++i) {\n\t\tif (increasing) {\n\t\t\tincreasing = *i\
    \ > *(i + 1);\n\t\t} else {\n\t\t\tincreasing = *i < *(i + 1);\n\t\t}\n\t}\n\t\
    return increasing;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw453b082: /tmp/tmpw453b082.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    // We assume that l is monotonic (a vector of monotonic increasing\n\
    \    // or decreasing numbers), and that the last element in the list is\n   \
    \ // the largest number in the list.\n    if (l.size() == 0) {\n        return\
    \ true;\n    }\n    if (l.size() == 1) {\n        return false;\n    }\n    long\
    \ max = l[0];\n    for (size_t i = 1; i < l.size(); i++) {\n        long cur =\
    \ l[i];\n        if (cur > max) {\n            return false;\n        }\n    \
    \    max = cur;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpih9agoi3: /tmp/tmpih9agoi3.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() <= 1 || l.front() <= 0) {\n        return false;\n  \
    \  }\n\n    long s = l.front();\n    for (long i = 1; i < l.size(); i++) {\n \
    \       long e1 = l.at(i);\n        long e2 = l.at(i-1);\n        if (e1 < e2\
    \ || (e1 == e2 && (e1 < 0 || e1 >= s))) {\n            return false;\n       \
    \ }\n        s = e1;\n    }\n\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpcxksmfkf: /tmp/tmpcxksmfkf.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129234
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    for (int i =\
    \ 1; i < n; ++i) {\n        if (l[i - 1] > l[i]) return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpa6kcgxve: /tmp/tmpa6kcgxve.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660129233
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return true is vector\
    \ elements are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return true;\n    auto first = l.begin();\n    auto\
    \ last = l.end() - 1;\n    while (first <= last && first->second <= last->second)\
    \ ++first;\n    if (first <= last) {\n        auto mid = first + (last - first)\
    \ / 2;\n        auto middle = mid->second;\n        if (middle > last->second)\
    \ return monotonic(l);\n        if (middle < first->second) return false;\n  \
    \      if (middle > first->second) return monotonic(l);\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprp7_usj4.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprp7_usj4.cpp:14:36: error: request for member \u2018second\u2019\
    \ in \u2018* first.__gnu_cxx::__normal_iterator<long int*, std::vector<long int>\
    \ >::operator->()\u2019, which is of non-class type \u2018long int\u2019\n   14\
    \ |     while (first <= last && first->second <= last->second) ++first;\n    \
    \  |                                    ^~~~~~\n/tmp/tmprp7_usj4.cpp:14:52: error:\
    \ request for member \u2018second\u2019 in \u2018* last.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   14 |     while (first <= last && first->second <= last->second)\
    \ ++first;\n      |                                                    ^~~~~~\n\
    /tmp/tmprp7_usj4.cpp:17:28: error: request for member \u2018second\u2019 in \u2018\
    * mid.__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::operator->()\u2019\
    , which is of non-class type \u2018long int\u2019\n   17 |         auto middle\
    \ = mid->second;\n      |                            ^~~~~~\n/tmp/tmprp7_usj4.cpp:18:28:\
    \ error: request for member \u2018second\u2019 in \u2018* last.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   18 |         if (middle > last->second) return monotonic(l);\n\
    \      |                            ^~~~~~\n/tmp/tmprp7_usj4.cpp:19:29: error:\
    \ request for member \u2018second\u2019 in \u2018* first.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   19 |         if (middle < first->second) return false;\n\
    \      |                             ^~~~~~\n/tmp/tmprp7_usj4.cpp:20:29: error:\
    \ request for member \u2018second\u2019 in \u2018* first.__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >::operator->()\u2019, which is of non-class type\
    \ \u2018long int\u2019\n   20 |         if (middle > first->second) return monotonic(l);\n\
    \      |                             ^~~~~~\n"
  stdout: ''
  timestamp: 1660129232
