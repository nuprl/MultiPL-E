name: HumanEval_43_pairs_sum_to_zero
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes a\
  \ vector of integers as an input.\n// it returns true if there are two distinct\
  \ elements in the vector that\n// sum to zero, and false otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
  // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n"
tests: "}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
  \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
  \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
  \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
completions: ["    long long int sum = 0;\n    for(auto it : l)\n        sum += it;\n\
    \    if(sum < 0)\n        sum += std::abs(sum);\n    if(sum > 0)\n        sum\
    \ += 1;\n    return l.size() == 2 && std::find(l.begin(), l.end(), sum) == l.end();",
  "    // your code here\n    long sum = 0;\n    for (auto it=l.begin(); it!=l.end();\
    \ ++it){\n        if(*it<0)\n        {\n            std::cout << \"it < 0 \" <<\
    \ *it <<std::endl;\n            return false;\n        }\n        sum += *it;\n\
    \    }\n    if (sum == 0)\n    {\n        std::cout << \"sum equals 0 \" << sum\
    \ <<std::endl;\n        return false;\n    }\n    long two=1;\n    for (auto it=l.begin();\
    \ it!=l.end(); ++it){\n        long temp = sum - two;\n        if (temp == 0)\n\
    \            return true;\n        sum += temp;\n        two += temp;\n    }\n\
    \    return false;", '    return std::adjacent_find(l.begin(), l.end()) == l.end();',
  "    int n = l.size();\n    bool ret = true; // If this returns false, then none\
    \ of the elements of the vector sum to zero\n    for (size_t i = 0; i < n; i++)\
    \ {\n        for (size_t j = i + 1; j < n; j++) {\n            if (l[i] + l[j]\
    \ == 0) {\n                ret = false;\n                break;\n            }\n\
    \        }\n    }\n    return ret;", "    long long ans = 0;\n    for (long long\
    \ i = 0; i < l.size(); i++) {\n        ans += l[i];\n    }\n    if (ans == 0)\
    \ {\n        return false;\n    } else {\n        return true;\n    }", "  //\
    \ your code goes here\n  bool is_sum_to_zero = true;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    int sum = 0;\n    for (int j = 0; j < i; j++) {\n      sum += l[j];\n\
    \    }\n    if (sum == 0) {\n      return false;\n    }\n  }\n  return true;",
  "  // write your code here\n  int n = l.size();\n  for (int i = 0; i < n; i++) {\n\
    \    int k = i;\n    long s = 0;\n    for (int j = i + 1; j < n; j++) {\n    \
    \  if (l[j] > l[k])\n        s += l[j] - l[k];\n      else\n        s += l[k]\
    \ - l[j];\n      k = j;\n    }\n    if (s == 0)\n      return true;\n  }\n  return\
    \ false;", "  for (long i = 0; i < l.size(); i++) {\n    for (long j = i + 1;\
    \ j < l.size(); j++) {\n      if (l[i] + l[j] == 0) {\n        return true;\n\
    \      }\n    }\n  }\n  return false;", "    // Write your code here.\n    std::vector<bool>\
    \ bv(l.size());\n    long long ans = 0;\n    long long count = 0;\n    for (auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if (it->first != 0) {\n    \
    \        if (it->first != it->second) {\n                std::cout << \"This shouldn't\
    \ happen\" << std::endl;\n                assert(0);\n            }\n        \
    \    if (ans == 0) {\n                ans = it->first;\n            }\n      \
    \      count++;\n            bv[count] = true;\n        }\n    }\n    long long\
    \ max_count = 0;\n    long long max_val = ans;\n    for (auto i = 0; i < l.size();\
    \ ++i) {\n        if ((bv[i] == true) && (count == max_count)) {\n           \
    \ return false;\n        }\n    }\n    return true;", "  // your code here\n \
    \ std::set<long> s;\n  for (int i = 0; i < l.size(); ++i)\n    s[l[i]] += 1;\n\
    \  if (s.size() == 1) return false;\n  for (int i = 1; i < s.size(); ++i) {\n\
    \    if (s[i - 1] + s[i] != 0) return false;\n  }\n  return true;", "  long n\
    \ = l.size();\n  long sum = 0;\n  for (long i = 0; i < n; i++) {\n    sum += l[i];\n\
    \  }\n\n  // if there are any pairs that sum to zero, we have found two zeros:\n\
    \  if (sum == 0) return true;\n  if (sum > 0) return false;\n  // if there are\
    \ any negative numbers, we have found two negative numbers:\n  for (long i = 0;\
    \ i < n; i++) {\n    if (l[i] < 0) return true;\n  }\n  return false;", "  std::pair<long,\
    \ long> p1, p2;\n  long s = 0;\n  for (auto& ele : l) {\n    s += ele;\n    p1.first\
    \ = ele;\n    p2.first = s;\n    if (s == 0) return false;\n  }\n  return true;",
  "  int count = 0;\n  for (int i = 0; i < l.size(); i++) {\n    for (int j = 0; j\
    \ < l.size(); j++) {\n      if (l[i] + l[j] == 0) {\n        count++;\n      }\n\
    \    }\n  }\n\n  if (l.size() == count) {\n    return false;\n  } else {\n   \
    \ return true;\n  }", "    // O(n^2) time and O(n) space solution\n    int n =\
    \ l.size();\n    for (int i = 1; i < n; ++i) {\n        for (int j = i + 1; j\
    \ < n; ++j) {\n            if (l[i] + l[j] == 0) {\n                return true;\n\
    \            }\n        }\n    }\n    return false;", "  int n = l.size();\n \
    \ long s = 0;\n  for (int i = 0; i < n; i++) {\n    for (int j = i + 1; j < n;\
    \ j++) {\n      s = s + l[i] + l[j];\n    }\n    if (s == 0) return false;\n \
    \ }\n  return true;", "  std::sort(l.begin(), l.end());\n  long s = 0;\n  bool\
    \ result = true;\n  for (long i : l) {\n    if (i != 0) {\n      s += i;\n   \
    \   if (s > 0) {\n        result = false;\n        break;\n      }\n    }\n  }\n\
    \  return result;", "  // return false\n  if (l.size() < 2) return false;\n  int\
    \ n = l.size();\n  long a = l[0], b = l[1], c = l[2];\n  bool ans = false;\n \
    \ int m = (n == 3) ? 3 : n - 1;\n  int i = 0;\n  int j = 0;\n  for (; i < m &&\
    \ j < n; i++) {\n    if (a > b) break;\n    if (b > c) break;\n    if (b == 0)\
    \ return true;\n    if (a == 0 || c == 0) {\n      if (i < j) return true;\n \
    \     continue;\n    }\n    long x = a + b;\n    long y = c + a;\n    if (x <\
    \ y) break;\n    if (x == y) ans = true;\n    b = c;\n    c = x;\n    a = y;\n\
    \  }\n  return ans;", "    // Complete this function\n    std::map<long, long>\
    \ m;\n    for (long i : l) {\n        m.insert({i, 0});\n    }\n    for (auto\
    \ i : m) {\n        if (i.second == 0) return false;\n    }\n    return true;",
  "  // initialize a vector to store the pairs that sum to zero.\n  std::unordered_set<pair<long,\
    \ long>> s;\n  // initialize a flag variable to indicate whether there are any\
    \ pairs that sum to zero.\n  bool flag = false;\n  // initialize a long variable\
    \ to store the pairs that sum to zero.\n  long sum = 0;\n  // traverse the vector\n\
    \  for (long i : l) {\n    // add current value to the sum\n    sum += i;\n  \
    \  // if the current sum is greater than zero\n    if (sum > 0) {\n      // construct\
    \ a pair from the current sum and the current element\n      pair<long, long>\
    \ p(sum, i);\n      // if the current pair doesn't exist in the set, add it to\
    \ the set\n      // and set the flag variable to true\n      if (!s.find(p)) {\n\
    \        s.insert(p);\n        flag = true;\n      }\n    }\n  }\n  // if the\
    \ flag variable is true, then there are no pairs that sum to zero.\n  return flag;",
  "  if (l.size() < 2) return false;\n  long a = l[0], b = l[1], c = l[2];\n  long\
    \ sum = a + b + c;\n  return sum == 0;", "    long long int sum = 0;\n    long\
    \ long int i = 0;\n    for (i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \    }\n    if (sum == 0) {\n        return false;\n    }\n    long long int left_sum\
    \ = sum;\n    long long int right_sum = sum;\n    for (; i < l.size(); i++) {\n\
    \        left_sum += l[i];\n        right_sum -= l[i];\n        if (left_sum ==\
    \ 0 && right_sum == 0) {\n            return true;\n        }\n    }\n    return\
    \ false;", "    long long count = 0;\n    for (long long i : l) {\n        count\
    \ += i;\n    }\n    long long sum = 0;\n    for (long long i : l) {\n        if\
    \ (i == 0) {\n            return false;\n        }\n        sum += i;\n    }\n\
    \    if (count < sum) {\n        return true;\n    }\n    return false;", "  \
    \  // write your code here\n    long long result = 0;\n    int c = 0;\n    int\
    \ n = 0;\n    for (long long i : l) {\n        result += i;\n        n++;\n  \
    \  }\n    if (n == 0) {\n        return false;\n    }\n    for (long long i =\
    \ 0; i < n; i++) {\n        c = result % 10;\n        result /= 10;\n        result\
    \ += c;\n        result = abs(result);\n        if (result == 0) {\n         \
    \   return true;\n        }\n    }\n    return false;", "  std::unordered_map<long,\
    \ int> counts;\n  for (int i = 0; i < l.size(); ++i) {\n    long val = l[i];\n\
    \    if (counts[val] == 0) {\n      counts[val] = 1;\n    } else {\n      counts[val]\
    \ += 1;\n    }\n  }\n  for (auto i : counts) {\n    if (i != 0) return true;\n\
    \  }\n  return false;", "\tstd::sort(l.begin(), l.end());\n\tlong long sum = 0;\n\
    \tfor (auto i : l)\n\t\tsum += i;\n\tfor (auto i : l) {\n\t\tif (i != 0)\n\t\t\
    \treturn false;\n\t\tlong long a = sum;\n\t\twhile (a > 0) {\n\t\t\tsum += 1;\n\
    \t\t\ta -= 1;\n\t\t}\n\t}\n\treturn true;", "  std::sort(l.begin(), l.end());\n\
    \  for (int i = 0; i < l.size() - 1; i++)\n    if (l[i] + l[i+1] == 0)\n     \
    \ return true;\n  return false;", "    // write your code here\n    int size =\
    \ l.size();\n    for(int i = 1; i < size; i++) {\n        long cur = l[i];\n \
    \       for(int j = i; j < size; j++) {\n            if(cur + l[j] == 0) {\n \
    \               return false;\n            }\n        }\n    }\n    return true;",
  "    // Your code goes here\n    int cnt = 0;\n    for (long x : l) {\n        if\
    \ (x.second != 0) {\n            cnt++;\n        }\n    }\n    if (cnt != l.size())\
    \ {\n        return false;\n    }\n    std::unordered_set<long> set(l.begin(),\
    \ l.end());\n    if (set.size() != l.size()) {\n        return false;\n    }\n\
    \    for (long x : l) {\n        if (x.second != 0) {\n            std::cout <<\
    \ x << std::endl;\n            return false;\n        }\n    }\n    return true;",
  "    int n = l.size();\n    int result = 0;\n    long max_sum = std::numeric_limits<long>::min();\n\
    \    for (int i = 0; i < n; i++) {\n        int curr = l[i];\n        int next\
    \ = (i + 1 < n) ? l[i + 1] : 0;\n        result += curr;\n        max_sum = std::max(max_sum,\
    \ curr + next);\n    }\n    long current_sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        int curr = l[i];\n        int next = (i + 1 < n) ? l[i + 1]\
    \ : 0;\n        current_sum += curr;\n        if (current_sum == 0 || (current_sum\
    \ == max_sum && i != 0)) {\n            return true;\n        }\n    }\n    return\
    \ false;", "  long long sum = 0;\n  for (long long i = 0; i < l.size(); i++) {\n\
    \    sum += l[i];\n  }\n  std::sort(l.begin(), l.end());\n  return std::unique(l.begin(),\
    \ l.end()) != l.end();", "    int n = l.size();\n    int ans = 0;\n    for (int\
    \ i = 1; i < n; i++) {\n        int j = i;\n        while (j > 0) {\n        \
    \    int k = 0;\n            while (j > 0) {\n                if (l[j] < l[j -\
    \ 1]) {\n                    k = j;\n                    break;\n            \
    \    }\n                j--;\n            }\n            if (k == j) {\n     \
    \           ans += 1;\n            }\n        }\n    }\n    if (ans == n) return\
    \ false;\n    return true;", "  int n = l.size();\n  long long pairs = 0, last_pair\
    \ = 0, last_num = 0, max_pairs = 0;\n  for (int i = 0; i < n; i++) {\n    pairs\
    \ += (long long)l[i] * l[i];\n    if (pairs > last_pair) {\n      last_pair =\
    \ pairs;\n      last_num = l[i];\n    }\n    if (pairs == 0) return false;\n \
    \   max_pairs = max(max_pairs, (long long)l[i]);\n  }\n  if (max_pairs == pairs)\
    \ {\n    return false;\n  } else {\n    return true;\n  }", "\t// sort the vector\
    \ in ascending order\n\tstd::sort(l.begin(), l.end());\n\t// initialize two variables\
    \ sum and temp\n\tlong long sum = 0, temp;\n\t// iterate over the vector and compare\
    \ adjacent elements if\n\t// the sum becomes zero then return true.\n\tfor (int\
    \ i = 0; i < l.size() - 1; i++) {\n\t\ttemp = l[i] + l[i + 1];\n\t\tif (temp ==\
    \ 0) {\n\t\t\treturn true;\n\t\t} else {\n\t\t\tsum += temp;\n\t\t}\n\t}\n\treturn\
    \ false;", "    std::sort(l.begin(), l.end());\n    std::vector<bool> seen;\n\
    \    for (long i : l) {\n        if (seen.count(i))\n            return true;\n\
    \        seen.push_back(false);\n    }\n    return false;", "    long zero = 0;\n\
    \    long long count = 0;\n    for (long i = 0; i < l.size(); i++) {\n       \
    \ count += l[i];\n        if (count != 0) {\n            zero += count;\n    \
    \        count = 0;\n        }\n    }\n    if (count != 0) {\n        return false;\n\
    \    }\n    for (long i = 0; i < l.size(); i++) {\n        count -= l[i];\n  \
    \      if (count != 0) {\n            zero += count;\n            count = 0;\n\
    \        }\n    }\n    return zero == 0;", "    int n = l.size();\n    long sum\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    if\
    \ (sum == 0) return false;\n    long last_sum = 0;\n    for (int i = 0; i < n;\
    \ i++) {\n        if (last_sum != 0 && last_sum == sum) return false;\n      \
    \  last_sum += l[i];\n    }\n    return true;", "  std::unordered_set<long> nums;\n\
    \  for (auto e : l)\n    if (nums.find(e - nums.begin()) != nums.end())\n    \
    \  return true;\n  return false;", "    bool res = false;\n    int n = l.size();\n\
    \    for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n\
    \            if (l[i] + l[j] == 0) {\n                res = true;\n          \
    \      break;\n            }\n        }\n    }\n    return res;", "  int i = 0;\n\
    \  bool res = false;\n  bool flag = false;\n  int count = 0;\n  long long int\
    \ sum = 0;\n  while (i < l.size()) {\n    int pos = i;\n    int counter = 1;\n\
    \    while (pos <= l.size() - 1 && counter > 0) {\n      pos = pos + 1;\n    \
    \  counter = counter + 1;\n    }\n    if (pos == l.size() - 1) {\n      pos =\
    \ pos + 1;\n      counter = counter + 1;\n    }\n    if (counter == 2) {\n   \
    \   res = true;\n    }\n    sum = sum + l[i];\n    i = pos + 1;\n  }\n  if (res\
    \ == true) {\n    flag = true;\n  }\n  return res;", "\tlong long sum = 0;\n\t\
    for (long long i = 0; i < l.size(); i++) {\n\t\tsum += l[i];\n\t\tif (sum < 0)\
    \ {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn true;", "    long long ans = 0;\n\
    \    long long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n        sum\
    \ += l[i];\n        if (sum == 0) {\n            ans += 1;\n            sum =\
    \ 1;\n        }\n    }\n    if (ans == 2) {\n        return true;\n    } else\
    \ {\n        return false;\n    }", "  std::sort(l.begin(), l.end());\n  long\
    \ zero = 0;\n  long sum = 0;\n  for (auto it = l.begin(); it != l.end(); ++it)\
    \ {\n    sum += *it;\n    if (sum == 0) {\n      zero = 1;\n      break;\n   \
    \ }\n  }\n  return !zero;", "  long long int sum = 0;\n  // first we check if\
    \ the vector has any zero elements\n  for (auto it = l.begin(); it != l.end();\
    \ ++it) {\n    // sum the values in the vector\n    sum += *it;\n  }\n  assert(sum\
    \ != 0);\n  // if the sum is non-zero, we have two distinct elements.\n  if (sum\
    \ != 0) {\n    // get the vector with the two distinct elements and check if they\
    \ are pairs.\n    // that is, if the vector has two distinct elements that sum\
    \ to zero.\n    long long int a = 0, b = 0, sum = 0;\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n      sum += *it;\n      assert(sum != 0);\n      if\
    \ (sum < 0) {\n        break;\n      }\n      if (*it == 0) {\n        break;\n\
    \      }\n      if (sum > 0) {\n        sum += a;\n        if (sum > 0) {\n  \
    \        sum += b;\n          if (sum == 0) {\n            assert(a + b == 0);\n\
    \            return true;\n          }\n        } else {\n          assert(a ==\
    \ b);\n        }\n      } else if (sum < 0) {\n        sum += b;\n        if (sum\
    \ < 0) {\n          sum += a;\n          if (sum == 0) {\n            assert(a\
    \ + b == 0);\n            return true;\n          }\n        } else {\n      \
    \    assert(b == a);\n        }\n      }\n      a = *it;\n      b = sum;\n   \
    \ }\n    assert(false);\n    return false;\n  }\n  return true;", "  int n = l.size();\n\
    \  // two iterators over the array\n  std::vector<long>::iterator itr1 = l.begin();\n\
    \  std::vector<long>::iterator itr2 = l.begin() + n;\n  while (itr1 != itr2) {\n\
    \    int sum = 0;\n    while (itr1 != itr2) {\n      sum += *itr1;\n      ++itr1;\n\
    \    }\n    if (sum == 0) {\n      return true;\n    }\n    while (itr2 != itr1)\
    \ {\n      --itr2;\n    }\n  }\n  return false;", "    std::sort(l.begin(), l.end());\n\
    \    int n = l.size();\n    // two elements whose sum is zero\n    if (n <= 2)\n\
    \        return true;\n    if (l[0] == 0 && l[1] == 0)\n        return true;\n\
    \    int left = 0, right = 1;\n    while (right < n) {\n        if (l[right] >=\
    \ 0)\n            right = right + 1;\n        else\n            left = left +\
    \ 1;\n    }\n    if (right == n)\n        return false;\n    if (l[right] == 0)\n\
    \        return false;\n    // two elements whose sum is zero\n    if (left ==\
    \ right)\n        return true;\n    return pairs_sum_to_zero(std::vector<long>(l.begin()\
    \ + left, l.begin() + right + 1));", "    std::sort(l.begin(), l.end());\n   \
    \ bool found = false;\n    bool is_even = false;\n    std::vector<int> v(l.size()\
    \ - 1);\n    for (auto i = 0; i < l.size() - 1; i++) {\n        if (l[i] == 0)\
    \ {\n            is_even = false;\n        }\n        if (l[i + 1] != 0) {\n \
    \           if (is_even) {\n                if (l[i] == l[i + 2]) {\n        \
    \            v[i] = 0;\n                    v[i + 1] = 0;\n                  \
    \  found = true;\n                    break;\n                }\n            \
    \    else if (l[i] == l[i + 1] - l[i + 2]) {\n                    v[i] = 0;\n\
    \                    v[i + 1] = 0;\n                    found = true;\n      \
    \              break;\n                }\n                else {\n           \
    \         v[i] = 0;\n                    v[i + 1] = 0;\n                }\n  \
    \          }\n            else {\n                if (l[i] == l[i + 1] - l[i +\
    \ 2]) {\n                    v[i] = 0;\n                    v[i + 1] = 0;\n  \
    \                  found = true;\n                    break;\n               \
    \ }\n                else {\n                    v[i] = 0;\n                 \
    \   v[i + 1] = 0;\n                }\n            }\n        }\n        else {\n\
    \            if (l[i] % 2 == 0) {\n                is_even = true;\n         \
    \   }\n            if (l[i + 1] != 0) {\n                if (is_even) {\n    \
    \                if (l[i] == l[i + 2]) {\n                        v[i] = 0;\n\
    \                        v[i + 1] = 0;\n                        found = true;\n\
    \                        break;\n                    }\n                    else\
    \ if (l[i] == l[i + 1] - l[i + 2]) {\n                        v[i] = 0;\n    \
    \                    v[i + 1] = 0;\n                        found = true;\n  \
    \                      break;\n                    }\n                    else\
    \ {\n                        v[i] = 0;\n                        v[i + 1] = 0;\n\
    \                    }\n                }\n                else {\n          \
    \          if (l[i] == l[i + 1] - l[i + 2]) {\n                        v[i] =\
    \ 0;\n                        v[i + 1] = 0;\n                        found = true;\n\
    \                        break;\n                    }\n                    else\
    \ {\n                        v[i] = 0;\n                        v[i + 1] = 0;\n\
    \                    }\n                }\n            }\n            else {\n\
    \                if (l[i] % 2 == 0) {\n                    is_even = true;\n \
    \               }\n                if (l[i + 1] != 0) {\n                    if\
    \ (is_even) {\n                        if (l[i] == l[i + 2]) {\n             \
    \               v[i] = 0;\n                            v[i + 1] = 0;\n       \
    \                     found = true;\n                            break;\n    \
    \                    }\n                        else if (l[i] == l[i + 1] - l[i\
    \ + 2]) {\n                            v[i] = 0;\n                           \
    \ v[i + 1] = 0;\n                            found = true;\n                 \
    \           break;\n                        }\n                        else {\n\
    \                            v[i] = 0;\n                            v[i + 1] =\
    \ 0;\n                        }\n                    }\n                    else\
    \ {\n                        if (l[i] == l[i + 1] - l[i + 2]) {\n            \
    \                v[i] = 0;\n                            v[i + 1] = 0;\n      \
    \                      found = true;\n                            break;\n   \
    \                     }\n                        else {\n                    \
    \        v[i] = 0;\n                            v[i + 1] = 0;\n              \
    \          }\n                    }\n                }\n                else {\n\
    \                    if (l[i] % 2 == 0) {\n                        is_even = true;\n\
    \                    }\n                    if (l[i + 1]", "    long long int\
    \ sum = 0;\n    long long int count = 0;\n    for(long long int e : l){\n    \
    \    sum += e;\n        count += 1;\n    }\n    return (count == 1) && (sum ==\
    \ 0);", "    // Your code here\n    int n1=l.size();\n    int n2=0;\n    for(int\
    \ i=0;i<n1;i++){\n        for(int j=i+1;j<n1;j++){\n            if(l[i]+l[j]==0){\n\
    \                n2=1;\n                break;\n            }\n        }\n   \
    \     if(n2==1)\n            break;\n    }\n    return (n2==0);", "    long long\
    \ sum = 0;\n    for (auto i : l) {\n        sum += i;\n    }\n    bool found =\
    \ false;\n    for (long long i = 0; i < l.size(); i++) {\n        if (i == 0 &&\
    \ sum == 0) {\n            continue;\n        }\n        if (l[i] == 0 && l[i\
    \ - 1] == 0 && l[i - 2] == 0 && sum == 0) {\n            found = true;\n     \
    \   } else {\n            break;\n        }\n    }\n    return found;", "\tstd::sort(l.begin(),\
    \ l.end());\n\tstd::vector<std::pair<long, long>> res;\n\tfor (long i = 0; i <\
    \ l.size(); i++) {\n\t\tfor (long j = i + 1; j < l.size(); j++) {\n\t\t\tlong\
    \ a = l[i];\n\t\t\tlong b = l[j];\n\t\t\tif (a + b == 0)\n\t\t\t\tres.emplace_back(a,\
    \ b);\n\t\t}\n\t}\n\tbool has = false;\n\tfor (auto i : res)\n\t\tif (i.first\
    \ + i.second == 0)\n\t\t\thas = true;\n\treturn has;", "  std::pair<long, long>\
    \ i1, i2;\n  if (l.size() == 0)\n    return false;\n  std::unordered_map<long,\
    \ long> temp;\n  for (int i = 0; i != l.size(); i++) {\n    i1 = std::make_pair(l.at(i),\
    \ l.at(i));\n    temp.emplace(i1.first, i1.first);\n  }\n  std::unordered_set<long>\
    \ s;\n  for (auto itr : temp) {\n    s.insert(itr.first);\n  }\n  if (s.size()\
    \ == 1) return false;\n  std::vector<long> temp2;\n  for (int i = 0; i != l.size();\
    \ i++) {\n    i2 = std::make_pair(l.at(i), l.at(i));\n    temp2.emplace(i2.first);\n\
    \  }\n  std::unordered_set<long> s2;\n  for (auto itr : temp2) {\n    s2.insert(itr);\n\
    \  }\n  if (s2.size() == 1) return false;\n  if (s.size() == 0 || s2.size() ==\
    \ 0) return true;\n  do {\n    temp2.clear();\n    for (int i = 0; i != l.size();\
    \ i++) {\n      i2 = std::make_pair(l.at(i), l.at(i));\n      temp2.emplace(i2.first);\n\
    \    }\n    std::unordered_set<long> s3;\n    for (auto itr : temp2) {\n     \
    \ s3.insert(itr);\n    }\n    if (s3.size() == 1) {\n      return true;\n    }\n\
    \  } while (std::next_permutation(temp2.begin(), temp2.end()));\n  return false;",
  "  long sum = 0;\n  for (auto it : l) {\n    sum += it;\n  }\n  bool is_two_same\
    \ = false;\n  if (sum < 0) {\n    is_two_same = true;\n  }\n  for (size_t i =\
    \ 0; i < l.size(); ++i) {\n    long temp_sum = 0;\n    for (auto it = l.begin();\
    \ it != l.end(); ++it) {\n      temp_sum += *it;\n    }\n    if (temp_sum < 0)\
    \ is_two_same = true;\n  }\n  return is_two_same;", "  int N = (int) l.size();\n\
    \  int count = 0;\n  for (int i = 1; i < N; i++) {\n    int sum = 0;\n    for\
    \ (int j = 0; j < i; j++) {\n      sum += l[j];\n    }\n    if (sum == 0) {\n\
    \      return true;\n    }\n  }\n  return false;", "    std::unordered_set<long>\
    \ s(l.begin(), l.end());\n    return s.size() == 2 && s.count(0) == 1 && s.count(1)\
    \ == 1;", "    long long s = 0;\n    for (long long i = 0; i < l.size(); ++i)\
    \ {\n        s += l[i];\n    }\n    long long n = (long long)l.size();\n    for\
    \ (long long i = 0; i < n; ++i) {\n        if (l[i] != 0) {\n            return\
    \ true;\n        }\n    }\n    return false;", "    // write your code here\n\
    \    long sum = 0;\n    for (long i = 0; i < l.size(); i++) {\n        sum +=\
    \ l[i];\n    }\n    bool a = true;\n    long b = sum;\n    while (b != 0) {\n\
    \        if (sum % b == 0) {\n            a = false;\n        }\n        b = b\
    \ % 100;\n    }\n    return a;", "    int sum = 0;\n    int n = l.size();\n  \
    \  for (int i = 0; i < n; ++i) {\n        sum += l[i];\n        if (sum > 0) {\n\
    \            for (int j = i + 1; j < n; ++j) {\n                if (l[i] + l[j]\
    \ == 0) {\n                    return true;\n                }\n            }\n\
    \        }\n    }\n    return false;", "    for (long i = 0; i < l.size() - 1;\
    \ i++) {\n        for (long j = i + 1; j < l.size(); j++) {\n            long\
    \ a = l[i] + l[j];\n            if (a == 0) return true;\n            if (i ==\
    \ j) return false;\n        }\n    }\n    return false;", "  int num_zero=0;\n\
    \  int num_total=0;\n  for(auto it=l.begin();it!=l.end();it++) {\n    if(*it==0)\
    \ {\n      num_zero++;\n      continue;\n    }\n    num_total++;\n    while((num_zero>0)\
    \ && (*it-num_zero)>=0) {\n      if(num_zero==1) {\n        return true;\n   \
    \   }\n      num_zero--;\n    }\n  }\n  return false;", "    long long int sum\
    \ = 0;\n    for (auto it = l.begin(); it != l.end(); ++it) {\n        sum += *it;\n\
    \    }\n    return (sum == 0);", "    std::sort(l.begin(), l.end());\n    long\
    \ long sum = 0;\n    long long ans = 0;\n    for (long long i = 0; i < l.size();\
    \ ++i) {\n        if (i == 0)\n            ans = l[i] + l[i];\n        else {\n\
    \            long long next = l[i] + l[i - 1];\n            if (next == 0) {\n\
    \                ans = l[i - 1];\n                break;\n            }\n    \
    \        sum += next;\n            if (sum == 0)\n                ans = l[i -\
    \ 1];\n            else if (sum < 0)\n                ans = l[i];\n          \
    \  else\n                ans = l[i - 1];\n        }\n    }\n    return ans ==\
    \ 0;", "    long long sum = 0;\n    for (long long i = 0; i < l.size(); i++){\n\
    \        sum += l[i];\n    }\n    if (sum > 0) {\n        std::sort(l.begin(),\
    \ l.end());\n        long long k = 0;\n        for (long long i = 0; i < l.size();\
    \ i++) {\n            long long x = l[i];\n            long long y = l[k];\n \
    \           if (x + y > 0){\n                return false;\n            }\n  \
    \          k++;\n        }\n        return true;\n    }\n    return false;", " \
    \ if (l.size() < 2) {\n    return false;\n  }\n  int n = l.size();\n  int k =\
    \ n - 1;\n  std::vector<int> dp(k, -1);\n  dp[0] = 0;\n  long s = 0;\n  for (int\
    \ i = 0; i < n; ++i) {\n    s += l[i];\n    if (s >= 0) {\n      dp[k--] = i;\n\
    \      if (k > 0) {\n        s = s - l[dp[k - 1]];\n      }\n    }\n  }\n  //\
    \ dp[i] indicates whether there are two distinct elements that sum to zero.\n\
    \  // dp[i] < 0 indicates that there is a single element that sums to zero.\n\
    \  // if dp[i] < 0, there exists only one element in the input vector that sums\
    \ to zero.\n  return dp[dp[k]] < 0;", "    int n = l.size();\n    if (n<2)\n \
    \       return true;\n    // create vectors of size n-1 and size-n+1\n    std::vector<bool>\
    \ a(n-1),b(n+1);\n    // fill up vectors so that a[i to n-2] is 0 and b[i-n to\
    \ n] is 0, and vice versa\n    // for i=1,..,n-1\n    for (int i = 1 ; i <= n-1\
    \ ; i++)\n        a[i-1] = l[i] - l[i-1];\n    for (int i = 1 ; i <= n-1 ; i++)\n\
    \        b[i-n] = l[i] - l[i-n-1];\n    for (int i = 2; i <= n ; i++)\n      \
    \  a[i-1] = b[i-1];\n    for (int i = 2; i <= n ; i++)\n        b[i-n-1] = b[i-n];\n\
    \    for (int i = 1 ; i <= n-1 ; i++)\n        if (a[i]==0 || b[i]==0)\n     \
    \       return false;\n    return true;", "  long long int sum = 0;\n  for (long\
    \ long int x : l)\n    sum += x;\n  for (long long int x = 0; x < sum; x++)\n\
    \    if (l.size() > 0 && l.front() == x) {\n      l.pop_back();\n      l.push_back(0);\n\
    \      return true;\n    }\n  return false;", "    int n = l.size();\n    std::vector<long>\
    \ v;\n    for(int i=0;i<n;i++) v.push_back(-l[i]);\n    sort(v.begin(), v.end());\n\
    \    for(int i=0;i<n;i++) {\n        int k = i + 1;\n        while(k < (n - 1))\n\
    \            if(l[i] + v[k] == 0)\n                return true;\n            else\
    \ if(l[i] + v[k] < 0)\n                k++;\n            else\n              \
    \  i++;\n    }\n    return false;", "  long sum = 0;\n  for (int i = 0; i < l.size();\
    \ i++) {\n    sum += l[i];\n  }\n  if (sum < 0) {\n    return false;\n  }\n  long\
    \ twoSum = 0;\n  for (int i = 0; i < l.size(); i++) {\n    twoSum = l[i] + twoSum;\n\
    \  }\n  return twoSum == 0;", "    assert(l.size() > 0);\n    std::vector<std::pair<long,\
    \ long> > pairs;\n    for (long i = 0; i < l.size(); i++) {\n        long first\
    \ = l[i];\n        long second = l[(i + 1) % l.size()];\n        pairs.push_back(std::make_pair(first,\
    \ second));\n    }\n    for (long i = pairs.size(); i > 1; i--) {\n        if\
    \ (pairs[i].first + pairs[i - 1].second == 0) {\n            return true;\n  \
    \      }\n    }\n    return false;", "  assert(l.size() == 2);\n  long sum = 0;\n\
    \  for (long i = 0; i < l.size(); i++) {\n    sum += l[i];\n    if (sum != 0)\n\
    \      return true;\n  }\n  return false;", "    long long s = 0;\n    long long\
    \ sum = 0;\n    for(long long i : l) {\n        s += i;\n        sum += i;\n \
    \   }\n    if(sum < 0) {\n        long long a = -1;\n        long long b = 0;\n\
    \        for(long long i : l) {\n            if(i > 0) {\n                a +=\
    \ i;\n                a %= b;\n                b += a;\n            }\n      \
    \  }\n    }\n    if(s < 0) {\n        return false;\n    } else {\n        return\
    \ true;\n    }", "    for (long i=0; i<l.size(); i++) {\n        for (int j=i+1;\
    \ j<l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return\
    \ true;\n            }\n        }\n    }\n    return false;", "  int N = l.size();\n\
    \  int k = 0;\n  int ans = 0;\n  long sum = 0;\n  for (int i = 0; i < N; i++)\
    \ {\n    k = 0;\n    while (ans > 0 && k + 1 < N) {\n      if (l[k] + l[k + 1]\
    \ == sum) {\n        ans = ans - 1;\n      }\n      k++;\n    }\n    sum = sum\
    \ + l[i];\n  }\n  return (ans > 0);", "    auto it = l.begin();\n    std::advance(it,\
    \ l.size() / 2);\n    long long a = *it;\n    it++;\n    std::advance(it, l.size()\
    \ / 2);\n    long long b = *it;\n    it++;\n    long long c = *it;\n    return\
    \ ((a + b + c) == 0);", "    if (l.size() == 0) return false;\n    if (l.size()\
    \ == 1) return true;\n    long long s = 0, k = 0, tmp;\n    for (size_t i = 0;\
    \ i < l.size() - 1; ++i){\n        k = l[i];\n        tmp = l[i+1];\n        s\
    \ = s + k;\n        if (tmp == s) return false;\n    }\n    return true;", " \
    \   if (l.size() == 0) return false;\n    if (l.size() == 1) return true;\n  \
    \  long long ans = 0, cur = l[0];\n    for (long long i = 1; i < l.size(); ++i)\
    \ {\n        if (l[i] + cur == 0) ans++;\n        cur = l[i];\n    }\n    if (ans\
    \ == 0) return false;\n    if (ans == 1) return true;\n    ans = 0;\n    for (long\
    \ long i = 1; i < l.size(); ++i) {\n        if (l[i] + cur < 0) ans += (std::abs(l[i]\
    \ + cur) - 1);\n        cur = l[i];\n    }\n    if (ans == 0) return false;\n\
    \    if (ans == 1) return true;\n    return false;", "    std::vector<std::pair<long,\
    \ long>> pairs(l.size());\n    std::iota(pairs.begin(), pairs.end(), 0L);\n  \
    \  std::vector<std::pair<long, long>> sorted_pairs = std::sort(pairs.begin(),\
    \ pairs.end(),\n                                                             \
    \    [](std::pair<long, long> a,\n                                           \
    \                            std::pair<long, long> b) {\n                    \
    \                                                 return a.first > b.first;\n\
    \                                                                 });\n\n    for\
    \ (size_t i = 0; i < sorted_pairs.size() - 1; ++i) {\n        if (sorted_pairs[i].second\
    \ + sorted_pairs[i + 1].second == 0) {\n            return true;\n        }\n\
    \    }\n    return false;", "  int n = l.size();\n  long long ans = 0;\n  for\
    \ (int i = 0; i < n; i++) {\n    long long sum = 0;\n    for (int j = 0; j < n;\
    \ j++) {\n      if (i == j) {\n        continue;\n      }\n      sum += l[j];\n\
    \      if (sum == 0) return false;\n    }\n    ans += 1;\n  }\n  if (ans == n)\
    \ return true;\n  return false;", "    long long n = 0;\n    for (long long i\
    \ = 0; i < l.size(); i++) {\n        n += l[i];\n        if (n < 0) {\n      \
    \      return false;\n        }\n    }\n    return true;", "    assert(l.size()\
    \ == 2);\n    long long a = l[0];\n    long long b = l[1];\n    int sum = 0;\n\
    \    if (a < 0) {\n        sum += -a * a;\n    } else {\n        sum += a;\n \
    \   }\n    if (b < 0) {\n        sum += -b * b;\n    } else {\n        sum +=\
    \ b;\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;",
  "    // Write your code here.\n    long sum = 0;\n    for (long elem : l) {\n  \
    \      sum += elem;\n    }\n    long twoSum = 0;\n    long threeSum = 0;\n   \
    \ long fourSum = 0;\n    for (long elem : l) {\n        if (elem % 2 == 0) {\n\
    \            twoSum = elem + twoSum;\n        }\n        else {\n            fourSum\
    \ = elem + fourSum;\n        }\n    }\n    for (long elem : l) {\n        if (elem\
    \ % 3 == 0) {\n            threeSum = elem + threeSum;\n        }\n        else\
    \ if (elem % 5 == 0) {\n            threeSum = elem + threeSum;\n        }\n \
    \   }\n    if (twoSum == 0 && threeSum == 0 && fourSum == 0) {\n        return\
    \ true;\n    }\n    return false;", "\tlong long x = 0;\n\tbool flag = false;\n\
    \tfor (long i = 0; i < l.size(); i++) {\n\t\tx += l[i];\n\t\tif (x != 0 && x %\
    \ 2 == 0) {\n\t\t\tx = x + (x % 2 == 1 ? 1 : -1);\n\t\t\tif (x == 0) {\n\t\t\t\
    \tflag = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\treturn flag;", "  int size\
    \ = l.size();\n  long long int sum = std::accumulate(l.begin(), l.end(), 0);\n\
    \  return sum != 0 && sum == size;", "    auto it = l.begin();\n    std::vector<long>::iterator\
    \ it2;\n    if (l.size() == 0)\n        return false;\n    long sum = 0;\n   \
    \ while (it != l.end()) {\n        if (*it > 0) {\n            sum += *it;\n \
    \           it++;\n        } else {\n            sum -= *it;\n            if (sum\
    \ < 0) {\n                sum = 0;\n                it--;\n            } else\
    \ {\n                it2 = it;\n                do {\n                    sum\
    \ += *it2;\n                    it2++;\n                } while (it2 != l.end()\
    \ && !(*it2 > *it));\n                if (sum < 0) {\n                    it--;\n\
    \                }\n            }\n        }\n    }\n    return sum == 0;", " \
    \   long sum = 0;\n    for (auto &i : l) {\n        sum += i;\n    }\n    long\
    \ count = 0;\n    for (auto &i : l) {\n        if (i == 0) {\n            continue;\n\
    \        }\n        long a = i;\n        while (a > 0) {\n            if (sum\
    \ < 0) {\n                return false;\n            }\n            if (sum ==\
    \ -i) {\n                count++;\n            }\n            sum -= a;\n    \
    \        a /= 10;\n        }\n    }\n    return count == 2;", "  if (l.size()\
    \ == 0)\n    return false;\n  if (l.size() == 1)\n    return true;\n  std::pair<long,\
    \ long> zero(0);\n  std::pair<long, long> sum_of_two(0);\n  for (int i = 0; i\
    \ < l.size(); ++i) {\n    sum_of_two.first += l[i];\n    sum_of_two.second +=\
    \ l[i];\n    if (sum_of_two.first != 0)\n      return true;\n    if (sum_of_two.second\
    \ == 0)\n      return false;\n    zero.first = l[i];\n    zero.second = sum_of_two.second\
    \ - l[i];\n    if (zero.second != 0)\n      return true;\n    if (zero.first ==\
    \ 0)\n      return false;\n  }", "    std::sort(l.begin(), l.end());\n    // first\
    \ and last element in the vector\n    int fs = std::distance(l.begin(), l.end());\n\
    \    int ls = std::distance(l.begin(), l.begin() + fs - 1);\n    long sum = 0;\n\
    \    for (auto i = l.begin() + fs - 1; i != l.end(); ++i) {\n        sum += *i;\n\
    \        if (sum == 0) return true;\n    }\n    return false;", "  int n = l.size();\n\
    \  if (n == 0) return false;\n  int sum = 0;\n  for (int i = 0; i != n; ++i)\n\
    \    sum += l[i];\n  for (int i = 0; i != n; ++i)\n    for (int j = i + 1; j !=\
    \ n; ++j)\n      if (abs(sum - l[i] - l[j]) == 0)\n        return true;\n  return\
    \ false;", "    // initialize all pairs to have sum to zero\n    bool flag = true;\n\
    \    for (int i = 0; i < l.size(); i++) {\n        for (int j = i+1; j < l.size();\
    \ j++) {\n            if (l[i] + l[j] != 0) {\n                flag = false;\n\
    \                break;\n            }\n        }\n    }\n    return flag;", " \
    \ int n = l.size();\n  for (int i = 0; i < n - 1; i++) {\n    int j = i + 1;\n\
    \    if (l[i] + l[j] != 0)\n      return false;\n    for (int k = i; k <= j; k++)\
    \ {\n      int m = j;\n      while (k < m && (l[k] + l[m]) != 0) {\n        m++;\n\
    \      }\n      if (k != j)\n        return false;\n    }\n  }\n  return true;",
  "    // Write your code here\n    int n = l.size();\n    long sum = 0;\n    for\
    \ (int i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    long zero = l -\
    \ l;\n    long one = one - zero;\n    return sum == 0 && one == 0;", "    // Your\
    \ code here\n    long long a = 0, b = 0;\n    for (int i = 0; i < l.size(); i++)\
    \ {\n        a += l[i];\n        b += i;\n        if (a == 0)\n            return\
    \ b == 0;\n    }\n    return false;", "    // Your code goes here\n    std::pair<bool,\
    \ long> first;\n    std::pair<bool, long> second;\n    first.second = false;\n\
    \    second.second = false;\n    long sum = 0;\n    for (long i : l) {\n     \
    \   sum += i;\n        if (sum == 0)\n            first.second = true;\n     \
    \   else if (sum == 0)\n            second.second = true;\n    }\n    return first.second\
    \ && second.second;", "    assert(l.size() >= 2);\n    int sum = 0;\n    long\
    \ temp = 0;\n    for (auto i = l.begin(); i != l.end(); i++) {\n        temp =\
    \ *i;\n        sum += temp;\n    }\n    if (sum < 0) {\n        return false;\n\
    \    }\n    for (auto i = l.begin(); i != l.end(); i++) {\n        temp = *i;\n\
    \        if (temp != sum) {\n            return false;\n        }\n    }\n   \
    \ return true;", "    int n = l.size();\n    for (int i = 1; i < n; i++) {\n \
    \       int k = i;\n        while (k + 1 < n && l[k] + l[k + 1] == 0)\n      \
    \      k++;\n        if (k + 1 == n) return false;\n        for (int j = i; j\
    \ < k; j++)\n            l[j] -= l[j + 1];\n    }\n    return true;", "  // Write\
    \ your code here.\n  int n = l.size();\n  long long int max1 = INT_MIN;\n  long\
    \ long int max2 = INT_MIN;\n  for (int i = 0; i < n; i++) {\n    for (int j =\
    \ i+1; j < n; j++) {\n      if (l[i]+l[j] == 0) {\n        if (l[i] > max1) {\n\
    \          max1 = l[i];\n          max2 = l[j];\n        }\n      } else if (l[i]+l[j]\
    \ < max1) {\n        max1 = l[i]+l[j];\n        max2 = l[j];\n      }\n    }\n\
    \  }\n  if (max2 > 0) {\n    return true;\n  } else {\n    return false;\n  }",
  "  long long int sum = 0;\n  for (long long int i : l) {\n    sum += i;\n  }\n\n\
    \  for (long long int i : l) {\n    sum += i;\n  }\n\n  if (sum == 0)\n    return\
    \ false;\n  else\n    return true;", "    // Your code goes here\n    long long\
    \ pairsum=0;\n    int length=l.size();\n    for(int i=0;i<length;i++){\n     \
    \   pairsum+=l[i];\n    }\n    if(pairsum%2==0){\n        return true;\n    }else{\n\
    \        return false;\n    }", "    int n = l.size();\n    if (n < 2)\n     \
    \   return false;\n    long long int sum = 0;\n    long long int maxsum = l[n\
    \ - 1];\n    for (int i = 0; i < n; i++) {\n        sum += l[i];\n        if (sum\
    \ > maxsum)\n            maxsum = sum;\n    }\n    if (sum == 0)\n        return\
    \ false;\n    for (long long int i = 0; i < n; i++) {\n        sum += l[i];\n\
    \        if (sum > maxsum)\n            return false;\n    }\n    return true;",
  "    if (l.size() == 0)\n        return false;\n    long s = 0;\n    for (auto it\
    \ = l.begin(); it != l.end(); ++it) {\n        s = s + *it;\n    }\n    long max\
    \ = (l.size() - 1);\n    if (s == 0)\n        return true;\n    for (long i =\
    \ 0; i <= max; i++) {\n        if (l[i] == 0) {\n            long j = 0;\n   \
    \         for (auto it = l.begin() + i + 1; it != l.end(); ++it) {\n         \
    \       long temp = *it + s;\n                if (temp == 0)\n               \
    \     return true;\n                else if (temp > 0) {\n                   \
    \ if (temp % 2 == 0)\n                        j = (j + 2) & ~1U;\n           \
    \         else\n                        j = j | 1U;\n                }\n     \
    \       }\n        }\n    }\n    return false;", "    long long int ans = 0;\n\
    \    long long int size = l.size();\n    for (long long int i = 0; i < size; i++)\
    \ {\n        long long int prev = ans;\n        ans += l[i];\n        if (i !=\
    \ 0 && l[i] - prev != 0) {\n            return false;\n        }\n    }\n    return\
    \ true;", "    // Write your code here\n    for(int i=0; i<l.size(); i++){\n \
    \       for(int j=i+1; j<l.size(); j++){\n            if(l[i]+l[j] == 0){\n  \
    \              return true;\n            }\n        }\n    }\n    return false;",
  "    // write your code here\n    //std::vector<long> l = {(long)1,(long)2,(long)3,(long)4,(long)5};\n\
    \    //std::vector<int> l = {1,2,3,4,5};\n    long long l1 = l.at(0);\n    long\
    \ long l2 = l.at(1);\n    long long l3 = l.at(2);\n    long long l4 = l.at(3);\n\
    \    long long l5 = l.at(4);\n    long long l6 = l.at(5);\n    if (l1 < l2) {\n\
    \        if (l1 < l3) {\n            if (l1 < l4) {\n                if (l1 <\
    \ l5) {\n                    if (l1 < l6) {\n                        if (l2 <\
    \ l3) {\n                            if (l2 < l4) {\n                        \
    \        if (l2 < l5) {\n                                    if (l2 < l6) {\n\
    \                                        if (l3 < l4) {\n                    \
    \                        if (l3 < l5) {\n                                    \
    \            if (l3 < l6) {\n                                                \
    \    if (l4 < l5) {\n                                                        if\
    \ (l4 < l6) {\n                                                            if\
    \ (l5 < l6) {\n                                                              \
    \  return true;\n                                                            }\n\
    \                                                            else {\n        \
    \                                                        return false;\n     \
    \                                                       }\n                  \
    \                                      }\n                                   \
    \                     else {\n                                               \
    \             return false;\n                                                \
    \        }\n                                                    }\n          \
    \                                          else {\n                          \
    \                              return false;\n                               \
    \                     }\n                                                }\n \
    \                                               else {\n                     \
    \                               return false;\n                              \
    \                  }\n                                            }\n        \
    \                                    else {\n                                \
    \                return false;\n                                            }\n\
    \                                        }\n                                 \
    \       else {\n                                            return false;\n  \
    \                                      }\n                                   \
    \ }\n                                    else {\n                            \
    \            return false;\n                                    }\n          \
    \                      }\n                                else {\n           \
    \                         return false;\n                                }\n \
    \                           }\n                            else {\n          \
    \                      return false;\n                            }\n        \
    \                }\n                        else {\n                         \
    \   return false;\n                        }\n                    }\n        \
    \            else {\n                        return false;\n                 \
    \   }\n                }\n                else {\n                    return false;\n\
    \                }\n            }\n            else {\n                return\
    \ false;\n            }\n        }\n        else {\n            return false;\n\
    \        }\n    }\n    else {\n        return false;\n    }", "  sort(l.begin(),\
    \ l.end());\n  int n = l.size();\n  if (n==0) return false;\n  // create an array\
    \ that will hold the result\n  // for which the elements will not be sum to zero.\n\
    \  // If element A + B == 0, then A != B\n  std::vector<bool> res(n, false);\n\
    \  int i = 0;\n  for (auto e : l) {\n    if (e + res[i%n] == 0) {\n      res[i%n]\
    \ = true;\n    } else {\n      i++;\n    }\n  }\n  return res[0] && res[n-1];",
  "    long long sum = 0;\n    for (auto e : l) {\n        sum += e;\n    }\n    if\
    \ (sum == 0) {\n        return true;\n    }\n    long long i = 0;\n    for (auto\
    \ e : l) {\n        if (e + i != 0) {\n            return false;\n        }\n\
    \        i += e;\n    }\n    return true;", "    int ans = 0;\n    long long anz\
    \ = 0, anz2 = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        long\
    \ long l = l[i];\n        if (l != 0) {\n            ans += (long long)i;\n  \
    \          anz += l;\n        }\n    }\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        long long l = l[i];\n        if (l != 0) {\n            anz2\
    \ += (long long)i;\n            anz += (long long)l;\n        }\n    }\n    if\
    \ (ans == 0)\n        return false;\n    if (ans == 1)\n        return true;\n\
    \    if (ans == 2)\n        return true;\n    if (ans == anz)\n        return\
    \ true;\n    if (anz == anz2)\n        return true;\n    return false;", "   \
    \ long long int s = 0;\n    int n = l.size();\n    for(int i=0; i<n; i++){\n \
    \       s = s + l[i];\n    }\n    if (s == 0)\n    {\n        return false;\n\
    \    }\n    for (int i=0; i<n; i++){\n        long long int l1 = l[i];\n     \
    \   int j=i;\n        while ( j < n && l1 + l[j] == 0) {\n            j++;\n \
    \       }\n        long long int r1 = l[j];\n        if ( (s-l1) == (l1-r1) ||\
    \ (s-l1) != (l1-r1) )\n            return false;\n    }\n    return true;", " \
    \   long long sum = 0;\n    for (long long i : l) {\n        sum += i;\n    }\n\
    \    for (long long i : l) {\n        if (i == sum) {\n            return false;\n\
    \        }\n    }\n    return true;", "    return std::adjacent_find(l.begin(),\
    \ l.end()) == l.end()\n        && std::adjacent_find(l.begin(), l.end(), std::multiplies<long>())\
    \ == l.end();", "    // Your code goes here\n    unordered_map<int, int> m;\n\
    \    int i=0, j=0;\n    for(auto itr : l) {\n        m[itr]++;\n        while(i<itr)\
    \ {\n            if(m[i]==m[iter])\n                break;\n            i++;\n\
    \        }\n        if(j==itr)\n            break;\n        j++;\n    }\n    return\
    \ i==j;", "  std::sort(l.begin(), l.end());\n  long long int ans = 0;\n  for (long\
    \ i = 0; i < l.size(); ++i) {\n    ans += l[i];\n  }\n  for (long i = 0; i < l.size();\
    \ ++i) {\n    if (ans + l[i] != 0) {\n      return false;\n    }\n  }\n  return\
    \ true;", "    long long int sum = 0;\n    for(long long int i=0; i<l.size();\
    \ i++) {\n        sum += l[i];\n        if(sum < 0)\n            return false;\n\
    \    }\n    return true;", "    long long int sum=0;\n    for (long i=l.size()-1;\
    \ i>=0; i--)\n        sum += l[i];\n    for (long i=l.size()-1; i>=0; i--) {\n\
    \        if (sum > 0)\n            continue;\n        if (sum != 0) {\n      \
    \      std::cerr << \"error: vector sum to zero \" << sum << \"\\n\";\n      \
    \      return false;\n        }\n        auto j=i;\n        while (j>0 && l[j-1]==0)\
    \ {\n            j--;\n        }\n        l[j-1] = 1;\n    }\n    for (long i=l.size()-1;\
    \ i>=0; i--) {\n        if (l[i] != 0)\n            return false;\n    }\n   \
    \ return true;", "  vector<long> zero;\n  vector<long> nonzero;\n  for (long i\
    \ : l) {\n    zero.push_back(0);\n    nonzero.push_back(i);\n  }\n  \n  long long\
    \ max=0;\n  for (int i=0; i<nonzero.size(); i++) {\n    for (int j=i+1; j<nonzero.size();\
    \ j++) {\n      if (nonzero[i] + nonzero[j] > max) {\n        max = nonzero[i]\
    \ + nonzero[j];\n      }\n    }\n  }\n  \n  return (max.long() == 0);", "    long\
    \ long n = l.size();\n    long long m = l[0]+l[1];\n    for(long i=2;i<n;i++){\n\
    \        if(l[i]!=m)\n            return false;\n        else\n            m+=l[i];\n\
    \    }\n    return true;", '    // your code', "  long int res = 0;\n  for (long\
    \ int i = 0; i < l.size(); i++) {\n    res += l[i];\n  }\n  if (res == 0) return\
    \ false;\n  for (long int i = 0; i < l.size(); i++) {\n    res -= l[i];\n    if\
    \ (res == 0) return true;\n  }\n  return false;", "    int n = l.size();\n   \
    \ std::vector<int> s(n + 1, 0);\n    std::vector<int>::iterator itr;\n    // Initialize\
    \ all elements to 0.\n    // For each element, if the element is non zero, increment\
    \ the corresponding element of s.\n    // If s is still non zero, then there are\
    \ no two elements whose sum is zero.\n    for(int i = 0; i < n; ++i) {\n     \
    \   s[i] = 0;\n        itr = l.begin();\n        while(itr != l.end()) {\n   \
    \         if((*itr) != 0) {\n                (*itr)++;\n                ++s[i];\n\
    \            }\n            ++itr;\n        }\n    }\n\n    // If s is still non\
    \ zero, then there are no two elements whose sum is zero.\n    if(!s[n]) {\n \
    \       return false;\n    }\n\n    // We have two elements that sum up to zero.\n\
    \    // The first element is the smallest element whose sum is zero.\n    // The\
    \ second element is the largest element whose sum is zero.\n    for(int i = 1;\
    \ i < n; ++i) {\n        if(s[i] != s[i-1]) {\n            return false;\n   \
    \     }\n    }\n\n    return true;", "    std::sort(l.begin(), l.end());\n   \
    \ long s = 0;\n    for (auto i : l)\n        s += i;\n    return s == 0;", " \
    \ long long sum = 0;\n  for (long long i : l) {\n    sum += i;\n  }\n  std::sort(l.begin(),\
    \ l.end());\n  if (l.front() != l[l.size() - 1]) {\n    std::sort(l.begin(), l.end());\n\
    \  }\n  if (sum == 0) return false;\n  long long prev = l[0];\n  for (long long\
    \ i : l) {\n    if (i > prev + 1) {\n      return false;\n    }\n    prev = i;\n\
    \  }\n  return true;", "  // Write your code here\n  std::stack<long> stack;\n\
    \  std::unordered_set<long> seen;\n  bool ans = false;\n  for (long i : l) {\n\
    \    if (!seen.insert(i).second) {\n      stack.push(i);\n      ans = true;\n\
    \    }\n    while (!stack.empty() && stack.top() == i) {\n      if (seen.count(stack.top())\
    \ == 1) {\n        ans = false;\n        break;\n      }\n      seen.pop_back();\n\
    \      stack.push(stack.top() - i);\n    }\n  }\n  return ans;", "    // your\
    \ logic here\n    std::sort(l.begin(), l.end());\n    long long int sum = 0;\n\
    \    for (long long int i : l)\n        sum += i;\n\n    bool ret = false;\n \
    \   for (long long int i : l)\n        sum += i;\n    if (sum == 0)\n        ret\
    \ = true;\n    return ret;", "    long long int sum = 0;\n    for (long long int\
    \ i : l) {\n        sum += i;\n    }\n    if (sum == 0) {\n        return true;\n\
    \    }\n    return false;", "    // write your code here\n    long long t=0;\n\
    \    int n=l.size();\n    for (int i=0; i<n; i++){\n        t+=l[i];\n    }\n\
    \    if(t==0){\n        return true;\n    }\n    return false;", "    long sum\
    \ = 0;\n    for (long i : l)\n        sum += i;\n    for (long i : l)\n      \
    \  sum += i;\n    return (sum == 0);", "    long long sum = 0;\n    for (long\
    \ long x : l) {\n        sum += x;\n    }\n    long long count = 0;\n    for (long\
    \ long x : l) {\n        sum += x;\n        if (sum < 0) {\n            sum =\
    \ 0;\n        }\n        if (sum > 0) {\n            count++;\n        }\n   \
    \ }\n    if (count == 0) {\n        return false;\n    }\n    return true;", "\t\
    // your code here\n\tlong long int sum = 0;\n\tfor (long long int x : l) {\n\t\
    \tsum += x;\n\t}\n\tif (l.size() == 0) return false;\n\tif (l.size() == 1) return\
    \ true;\n\tif (sum == 0) return false;\n\treturn (sum == std::accumulate(l.begin(),\
    \ l.end(), 0ll));", "    int s = l.size();\n    if (s < 2) return false;\n   \
    \ for (int i = 1; i < s; i++) {\n        int left = l[i] - l[i - 1];\n       \
    \ if (left < 0) return false;\n        for (int j = 1; j < s; ++j) {\n       \
    \     if (j == i) continue;\n            if (l[j] - l[j - 1] != left) return false;\n\
    \        }\n    }\n    return true;", "    long zero = 0;\n    long sum = 0;\n\
    \    for (long i : l) {\n        sum += i;\n        if (sum == zero) {\n     \
    \       return true;\n        }\n    }\n    return false;", "    std::unordered_map<long,\
    \ std::pair<long, long> > mp;\n    for (auto it : l) {\n        auto found = mp.find(it);\n\
    \        if (found == mp.end()) {\n            mp.insert({it, std::make_pair(0,\
    \ it)});\n        } else {\n            if (found->second.first != 0) {\n    \
    \            return false;\n            }\n            mp.insert({it, std::make_pair(found->second.first\
    \ + found->second.second, it)});\n        }\n    }\n    return mp.size() == 0;",
  "    int len = l.size();\n    long long sum = 0;\n    for (auto x: l) {\n      \
    \  sum += x;\n    }\n    if (sum < 0) {\n        return false;\n    }\n    long\
    \ long tsum = 0;\n    for (long long x: l) {\n        tsum += x;\n    }\n    for\
    \ (long long i = 0; i <= len - 1; ++i) {\n        if (tsum != sum) {\n       \
    \     return false;\n        }\n        tsum -= l[i];\n    }\n    return true;",
  "    auto it = l.begin();\n    auto end = l.end();\n    std::pair<bool, bool> res;\n\
    \    while (it != end) {\n        auto first = *it;\n        ++it;\n        while\
    \ (it != end && first != *it) {\n            ++it;\n        }\n        bool second_found\
    \ = it != end && !(*it);\n        res.first = res.first  && second_found;\n  \
    \      res.second = res.second || second_found;\n    }\n    return res.first &&\
    \ res.second;", "  // your code here\n  int pairs = 0;\n  long long count = 0;\n\
    \  for(long long i = 0; i < l.size(); i++) {\n    if(l[i] == 0 && l[i+1] == 0)\
    \ {\n      pairs++;\n      count++;\n    }\n  }\n  if(count == 2) {\n    return\
    \ true;\n  } else {\n    return false;\n  }", "  assert(l.size() == 2);\n  long\
    \ k = std::max(l[0], l[1]);\n  std::vector<long> v1 = {k, 0};\n  std::vector<long>\
    \ v2 = {0, k};\n  return (v1 == v2);", "  // Sort list first.\n  std::sort(l.begin(),\
    \ l.end());\n  int left_sum = 0;\n  int right_sum = 0;\n  for (auto e : l) {\n\
    \    left_sum += e;\n    right_sum += e;\n  }\n  if (left_sum == 0) return false;\n\
    \  if (right_sum == 0) return true;\n  if (left_sum > right_sum) return false;\n\
    \  bool result = true;\n  for (auto e : l) {\n    result &= (e + 1 == 0 || e +\
    \ 1 == left_sum);\n  }\n  return result;", "    int a = 0;\n    int b = 0;\n \
    \   int c = 1;\n    for(int i : l)\n        if(i != 0)\n        {\n          \
    \  a += i;\n            b += c;\n        }\n        c += 1;\n    if(b == 0)\n\
    \        return a == 0;\n    else\n        return a < b;", "  long sum = 0;\n\
    \  for (int i = 0; i < l.size(); i++)\n    sum += l[i];\n  long prev_sum = sum;\n\
    \  bool result = false;\n  for (int i = 0; i < l.size(); i++) {\n    sum = sum\
    \ - l[i];\n    if (sum == 0) {\n      result = true;\n      break;\n    }\n  \
    \  if (prev_sum == sum)\n      break;\n    prev_sum = sum;\n  }\n  return result;",
  "    if (l.size() < 2) return false;\n    long long count = 0;\n    for (long i\
    \ = 0; i < l.size(); i++)\n        for (long j = i + 1; j < l.size(); j++)\n \
    \           count += l[i] + l[j];\n    return (count % 2 == 0);", "    long long\
    \ sum = 0;\n    long long curr = l[0];\n    for (auto i : l) {\n        sum +=\
    \ i;\n        if (sum == 0)\n            return false;\n        if (sum == curr)\n\
    \            return false;\n    }\n    return true;", "    int n = l.size();\n\
    \    int a = l[0];\n    for (int i = 1; i < n; i++) {\n        int b = l[i];\n\
    \        long c = a + b;\n        if (c == 0) {\n            return true;\n  \
    \      }\n        a = c;\n    }\n    return false;", "    std::sort(l.begin(),\
    \ l.end());\n    std::vector<long> v2;\n    v2.reserve(l.size());\n    for (long\
    \ i : l) {\n        v2.push_back(-i);\n    }\n    v2.push_back(0);\n    // std::sort(v2.begin(),\
    \ v2.end());\n    std::unordered_map<long, bool> m;\n    for (long i : v2) {\n\
    \        m.emplace(i, false);\n    }\n    for (long i : l) {\n        auto p =\
    \ m.find(i);\n        if (p != m.end()) {\n            m[i] = true;\n        }\n\
    \    }\n    for (long i : v2) {\n        if (m[i]) {\n            return false;\n\
    \        }\n    }\n    return true;", "    if (l.size() < 2) {\n        return\
    \ false;\n    }\n    long sum = 0;\n    for (size_t i = 0; i < l.size(); i++)\
    \ {\n        sum += l[i];\n        if (sum == 0)\n            return true;\n \
    \   }\n    return false;", "  // Write your code here\n  for (long i = 1; i <\
    \ l.size() - 1; ++i) {\n    for (long j = i + 1; j < l.size(); ++j) {\n      if\
    \ (l[i] + l[j] == 0) {\n        return false;\n      }\n    }\n  }\n  return true;",
  "  // write your code here\n  std::unordered_map<long, long> map;\n  for (int i\
    \ = 0; i < l.size() - 1; i++) {\n    int key = l[i] + l[i + 1];\n    if (map.find(key)\
    \ != map.end())\n      return true;\n    map[key] = key;\n  }\n  return false;",
  "    long long s = 0;\n    for (long long i : l)\n        s += i;\n    if (s ==\
    \ 0)\n        return true;\n    return false;", "    int n = l.size();\n    long\
    \ long int ln = l[0];\n    long long int rn = l[0];\n    long long int ans = abs(rn);\n\
    \    if (n == 1) {\n        if (ln > 0) {\n            if (ln > ans) {\n     \
    \           return true;\n            }\n        }\n        return false;\n  \
    \  }\n    for (int i = 1; i < n; i++) {\n        ln = ln + l[i];\n        rn =\
    \ rn + l[i];\n        ans = ans + abs(rn);\n    }\n    return ans == 0;", "\t\
    int sum = 0;\n\tbool flag = false;\n\tfor (int i = 0; i < l.size(); i++){\n\t\t\
    sum += l[i];\n\t\tif (sum > 0){\n\t\t\tflag = true;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \treturn flag;", "    std::vector<bool> seen(l.size(), 0);\n    std::vector<std::pair<long,\
    \ long> > pairs;\n    for (std::size_t i = 0; i < l.size(); ++i) {\n        std::pair<long,\
    \ long> p;\n        if (seen[i] || l[i] == 0) {\n            return false;\n \
    \       }\n        p.first = l[i];\n        p.second = l[i] + l[(i + 1) % l.size()];\n\
    \        pairs.push_back(p);\n        seen[i] = 1;\n    }\n    if (pairs.size()\
    \ < 2) {\n        return true;\n    }\n    std::sort(pairs.begin(), pairs.end(),\
    \ [](std::pair<long, long> p1, std::pair<long, long> p2) {\n        return p1.second\
    \ < p2.second;\n    });\n    if (pairs[pairs.size() - 1].second != 0) {\n    \
    \    return false;\n    }\n    std::size_t k = (pairs.size() / 2) - 1;\n    if\
    \ (pairs[k].second != 0) {\n        return false;\n    }\n    if (pairs[pairs.size()\
    \ - 1].second != 0) {\n        return false;\n    }\n    for (std::size_t i =\
    \ 1; i < pairs.size(); ++i) {\n        if (pairs[i].second != 0) {\n         \
    \   return false;\n        }\n    }\n    return true;", "    long long sum = 0;\n\
    \    for (auto it : l) {\n        sum += it;\n    }\n    if (sum == 0) {\n   \
    \     return true;\n    }\n    long long ans = 1;\n    for (auto it : l) {\n \
    \       ans *= it / sum;\n        ans /= sum;\n    }\n    return false;", "  \
    \  std::sort(l.begin(), l.end());\n    long int ans = l[0];\n    for (long int\
    \ i = 0; i < l.size(); ++i) {\n        long int next = l[i];\n        ans += next;\n\
    \        while (ans >= 0 && ans == 0)\n        {\n            ans = next - 1;\n\
    \        }\n    }\n    return (ans == 0);", "    int n = l.size();\n    if (n\
    \ == 0 || n != l.size()) {\n        return false;\n    }\n    for (int i = 0;\
    \ i < n - 1; i++) {\n        int sum = 0;\n        for (int j = 0; j < n; j++)\
    \ {\n            sum += l[j];\n        }\n        if (sum != 0) {\n          \
    \  return false;\n        }\n    }\n    return true;", "    long long int x =\
    \ 0;\n    for (long i = 0; i < l.size(); i++){\n        x += l[i];\n    }\n  \
    \  int n = l.size();\n    int sum = 0;\n    for (long i = 0; i < n; i++){\n  \
    \      sum += l[i];\n    }\n    if (sum == 0){\n        return true;\n    }\n\
    \    vector<bool> ans;\n    ans.push_back(false);\n    for (long i = 0; i < n;\
    \ i++){\n        ans.push_back(false);\n        long j = 0;\n        for (long\
    \ k = 0; k < n; k++){\n            if (j == i){\n                ans[k] = true;\n\
    \                j = k;\n            }\n            if (j != k){\n           \
    \     ans[k] = ans[k] && ((l[i] + l[j]) == 0);\n                j = k;\n     \
    \       }\n        }\n    }\n    if (ans[n - 1]){\n        return true;\n    }\n\
    \    return false;", "    // TODO\n    return false; // return true;", "    long\
    \ n1, n2;\n    for (const auto& e : l) {\n        n1 = n2 = 0;\n        while\
    \ ((n1 < e) && (n2 < e)) {\n            n1 += n2;\n            n2 += n2;\n   \
    \     }\n        if (n1 == e) {\n            return true;\n        }\n    }\n\
    \    return false;", "    // Write your code here.\n    for (int i = 0; i < l.size();\
    \ ++i) {\n        for (int j = i + 1; j < l.size(); ++j) {\n            if (l[i]\
    \ + l[j] == 0) {\n                return true;\n            }\n        }\n   \
    \ }\n    return false;", "    // Write your code here\n    for(long i=0;i<l.size()-2;i++){\n\
    \        long a = l[i];\n        long b = l[i+1];\n        long c = l[i+2];\n\
    \        if(a>0){\n            if(a==b+c){\n                return false;\n  \
    \          }\n        }\n    }\n    return true;", "  int n = l.size();\n  if\
    \ (n < 2) return false;\n  int max_i = n;\n  for (int i = 1; i < max_i; i++) {\n\
    \    if (l[i] + l[i - 1] != 0) {\n      return false;\n    }\n  }\n  return true;",
  "    long sum = 0;\n    long ans = 0;\n\n    for (const auto& i : l) {\n       \
    \ sum += i;\n        if (sum != 0) {\n            ans = 1;\n            ans =\
    \ ans || (i < 0);\n            break;\n        }\n    }\n    if (ans == 0) return\
    \ false;\n    return true;", "\tlong long zero = 0;\n\tlong long pairs = 0;\n\t\
    long long pair = 0;\n\tlong long last = 0;\n\tlong long last_pair = 0;\n\tfor\
    \ (int i = 0; i < l.size(); i++) {\n\t\tlast = l[i];\n\t\tlast_pair = 0;\n\t\t\
    for (int j = 0; j < i; j++) {\n\t\t\tif (l[j] == last) {\n\t\t\t\tlast_pair++;\n\
    \t\t\t}\n\t\t}\n\t\tif (last_pair > 0) {\n\t\t\tif (pairs > 0) {\n\t\t\t\treturn\
    \ false;\n\t\t\t}\n\t\t\tpairs = last_pair;\n\t\t} else {\n\t\t\tpairs = 0;\n\t\
    \t}\n\t}\n\treturn pairs == 0;", "  std::vector<std::pair<long, long> > ps;\n\
    \  ps.reserve(l.size());\n  for (auto e : l)\n    ps.emplace_back(-l, -e);\n \
    \ std::sort(ps.begin(), ps.end(), [](const std::pair<long, long> &a, const std::pair<long,\
    \ long> &b) {\n    return a.second < b.second;\n  });\n  int sum = 0;\n  int last_idx\
    \ = 0;\n  bool done = false;\n  for (auto &e : ps) {\n    if (e.second == 0)\n\
    \      continue;\n    if (last_idx == e.first) {\n      last_idx = e.first + 1;\n\
    \      sum += e.second;\n    } else {\n      last_idx = e.first;\n      if (sum\
    \ - e.second < 0)\n        done = true;\n    }\n  }\n  return done;", "    std::sort(l.begin(),\
    \ l.end());\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i : l)\n        if (i % 2 == 0)\n            sum += i;\n        else {\n   \
    \         if (sum == 0)\n                return false;\n            count += 1;\n\
    \            sum = i;\n        }\n    if (sum == 0)\n        return false;\n \
    \   if (count >= 2)\n        return true;\n    return false;", "    std::unordered_map<long,\
    \ long> m;\n    for (long i = 0; i < l.size(); i++)\n        m[l[i]] += l[i];\n\
    \    for (long i = 0; i < l.size(); i++)\n        if (l[i] != 0) {\n         \
    \   assert(!m.count(l[i])); // there should be no double sum elements\n      \
    \      if (m.size() == 1)\n                return true;\n            for (long\
    \ j = i+1; j < l.size(); j++)\n                m[l[j]] -= l[i];\n        }\n \
    \   return false;", "\tlong sum = 0;\n\tfor (long i : l) {\n\t\tsum += i;\n\t\
    }\n\tlong a = l[0];\n\tlong b = l[1];\n\tif (sum == 0) {\n\t\treturn false;\n\t\
    }\n\tlong c = a;\n\tlong d = b;\n\tlong sum2 = sum + sum;\n\tfor (long i = 2;\
    \ i < l.size(); i++) {\n\t\tc = (c - l[i - 2] + l[i]) / sum2;\n\t\td = (d - l[i\
    \ - 2] + l[i]) / sum2;\n\t\tif (c < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (d\
    \ < 0) {\n\t\t\treturn false;\n\t\t}\n\t\tif (a + d != 0) {\n\t\t\treturn false;\n\
    \t\t}\n\t\ta = c;\n\t\tb = d;\n\t\tsum2 = sum + sum;\n\t}\n\treturn true;", " \
    \   auto s = std::accumulate(l.begin(), l.end(), 0);\n    l.erase(std::remove_if(l.begin(),\
    \ l.end(),\n                           [s](long& n) {return n<0;}),\n        \
    \    l.end());\n    return l.size()==0 || l.size() == (std::count_if(l.begin(),\
    \ l.end(), [&s](long& n) {return n>0;})+1);", "\tlong long ans = 0;\n\tfor (auto\
    \ e : l) {\n\t\tans += e;\n\t}\n\treturn (ans == 0);", "  long s = 0;\n  for (long\
    \ x : l)\n    s += x;\n  for (long x : l)\n    s += x;\n  return s == 0;", " \
    \   long sum = 0;\n    for (long i = 0; i < l.size(); ++i) {\n        sum += l[i];\n\
    \    }\n    if (sum == 0) {\n        return false;\n    }\n    long first = *std::min_element(l.begin(),\
    \ l.end());\n    long last = *std::max_element(l.begin(), l.end());\n    if (sum\
    \ + first > 0 && sum + last > 0) {\n        return true;\n    }\n    return false;",
  "    long long int sum = 0;\n    for (auto it = l.begin(); it != l.end(); it++)\
    \ {\n        sum += *it;\n        if (sum == 0)\n            return false;\n \
    \   }\n    return true;", "    std::sort(l.begin(), l.end());\n    auto it1 =\
    \ l.begin();\n    auto it2 = l.begin() + 1;\n    while (it1 != l.end() && it2\
    \ != l.end()) {\n        if (*it1 + *it2 == 0)\n            return true;\n   \
    \     it1++;\n        it2++;\n    }\n    return false;", "  // your code goes\
    \ here\n  long long sum = 0;\n  for (const auto &t : l) {\n    sum += t;\n  }\n\
    \  if (sum == 0) {\n    return true;\n  } else {\n    return false;\n  }", " \
    \   long long n = l.size();\n    if (n == 0) return false;\n    if (n == 1) return\
    \ true;\n    std::vector<std::vector<long>> vs(n);\n    for (long long i = 0;\
    \ i < n; ++i) {\n        std::vector<long> v;\n        for (auto x : l) v.push_back(x);\n\
    \        vs[i] = v;\n    }\n    auto it = std::adjacent_find(vs.begin(), vs.end());\n\
    \    if (it == vs.end()) return true;\n    vs.erase(it);\n    for (auto x : vs)\
    \ if (x.size() == 1) return false;\n    for (auto x : vs) x.erase(std::remove(x.begin(),\
    \ x.end(), 0), x.end());\n    return true;", "    std::unordered_map<long, std::pair<long,\
    \ long>> mp;\n    for (long i = 0; i < l.size(); ++i) {\n        auto pos = std::find(std::next(l.begin(),\
    \ i), l.end(), l[i]);\n        auto res = std::equal_range(pos, l.end(), l[i]);\n\
    \        auto i1 = res.first;\n        auto i2 = res.second;\n        if (i1 ==\
    \ i2)\n            continue;\n        if (mp.find(i1->first) == mp.end()) {\n\
    \            mp[i1->first] = std::make_pair(i1->second, i->second);\n        }\n\
    \        else if (mp.find(i2->first) == mp.end()) {\n            mp[i2->first]\
    \ = std::make_pair(i1->second, i2->second);\n        }\n        else if (mp[i1->first].second\
    \ != i->second) {\n            return false;\n        }\n        else if (mp[i2->first].second\
    \ != i->second) {\n            return false;\n        }\n    }\n    for (std::unordered_map<long,\
    \ std::pair<long, long>>::iterator i = mp.begin();\n         i != mp.end(); ++i)\
    \ {\n        if (i->second.first != i->second.second)\n            return false;\n\
    \    }\n    return true;", "  std::sort(l.begin(), l.end());\n  bool result =\
    \ false;\n  for (int i = 0; i < l.size(); i++) {\n    if (i == l.size() - 1 ||\
    \ l[i] == l[i + 1]) continue;\n    long sum = 0;\n    for (int j = 0; j < i; j++)\
    \ sum += l[j];\n    for (int j = i + 1; j < l.size(); j++) sum += l[j];\n    if\
    \ (sum == 0) {\n      return true;\n    } else {\n      result = true;\n     \
    \ break;\n    }\n  }\n  return result;", "  long long ans = 0;\n  for (long i\
    \ = 0; i < l.size(); i++) {\n    long long a = l[i];\n    for (long j = i + 1;\
    \ j < l.size(); j++) {\n      if (a > l[j]) {\n        a -= l[j];\n        ans\
    \ ^= a;\n        break;\n      }\n    }\n  }\n  if (ans == 0) {\n    return false;\n\
    \  } else {\n    return true;\n  }", "    long long int a = (std::accumulate(l.begin(),\
    \ l.end(), 0ll, [](long long int x, long long int y) {return x + y;}));\n    return\
    \ (a = 0);", "  // Write your code here.\n  for (int i = 0; i< l.size(); i++)\
    \ {\n    for (int j = i + 1; j < l.size(); j++) {\n      if(l[i] + l[j] == 0)\
    \ {\n        return true;\n      }\n    }\n  }\n  return false;", "    // Initialize\
    \ two sums of zero\n    long long int sum_zero = 0;\n    long long int sum_non_zero\
    \ = 0;\n    // Loop through the vector\n    for (long long int x : l) {\n    \
    \    // Add the number\n        sum_non_zero += x;\n        // If sum is zero,\
    \ return false\n        if (sum_zero == sum_non_zero) {\n            return false;\n\
    \        }\n        // Add to sum\n        sum_zero += x;\n    }\n    // return\
    \ true if there are two distinct elements in the vector that\n    // sum to zero\n\
    \    return true;", "    // write your code here\n    if (l.size() < 2)\n    \
    \    return true;\n\n    long long int sum = 0;\n    for (long long int &x : l)\n\
    \        sum += x;\n\n    long long int min_x = l.front();\n    for (long long\
    \ int &x : l)\n        if (x < min_x)\n            min_x = x;\n\n    if (min_x\
    \ == 0)\n        return false;\n\n    for (long long int &x : l)\n        if (x\
    \ >= min_x && x < min_x + sum)\n            return false;\n\n    return true;",
  "\tstd::vector<pair<long, long> > p(l.size());\n\tfor (std::size_t i = 0; i < l.size();\
    \ ++i)\n\t\tp[i].first = l[i];\n\tsort(p.begin(), p.end());\n\tlong long s = 0,\
    \ prev_s = 0;\n\tfor (auto it = p.begin(); it != p.end(); ++it)\n\t\ts = s + it->first;\n\
    \ts = s - 1;\n\tprev_s = 0;\n\tfor (auto it = p.rbegin(); it != p.rend(); ++it)\n\
    \t\ts = s - it->first;\n\tif (s == prev_s)\n\t\treturn false;\n\tfor (auto it\
    \ = p.rbegin(); it != p.rend(); ++it)\n\t\tprev_s = prev_s - it->first;\n\treturn\
    \ true;", "    std::sort(l.begin(), l.end());\n    long long sum = 0;\n    for\
    \ (auto i : l) {\n        sum += i;\n    }\n    if (sum == 0) {\n        return\
    \ true;\n    }\n    return false;", "  long long zero = 0;\n  long long one =\
    \ 0;\n  long long two = 0;\n  long long three = 0;\n  long long four = 0;\n  long\
    \ long five = 0;\n  long long six = 0;\n  long long seven = 0;\n  long long eight\
    \ = 0;\n  long long nine = 0;\n  for (int i = 0; i < l.size(); i++) {\n    if\
    \ (l[i] % 2 == 0) {\n      zero += l[i];\n    }\n    else if (l[i] % 2 == 1) {\n\
    \      one += l[i];\n    }\n    else if (l[i] % 2 == 2) {\n      two += l[i];\n\
    \    }\n    else if (l[i] % 2 == 3) {\n      three += l[i];\n    }\n    else if\
    \ (l[i] % 2 == 4) {\n      four += l[i];\n    }\n    else if (l[i] % 2 == 5) {\n\
    \      five += l[i];\n    }\n    else if (l[i] % 2 == 6) {\n      six += l[i];\n\
    \    }\n    else if (l[i] % 2 == 7) {\n      seven += l[i];\n    }\n    else if\
    \ (l[i] % 2 == 8) {\n      eight += l[i];\n    }\n    else if (l[i] % 2 == 9)\
    \ {\n      nine += l[i];\n    }\n  }\n  if ((four + three) == zero && (five +\
    \ seven) == zero && (six + eight) == zero && (nine + two) == zero && (one + zero)\
    \ == zero) {\n    return true;\n  }\n  return false;", "    sort(l.begin(), l.end());\n\
    \    long sum = 0;\n    for (auto i = 0; i < l.size(); i++) {\n        sum +=\
    \ l[i];\n    }\n    if (sum == 0) {\n        return true;\n    }\n    return false;",
  "    if (l.size() < 2) return false;\n    long ans = 0;\n    long max_value = -l[0];\n\
    \    for (long i : l) {\n        max_value = std::max(max_value, i);\n    }\n\
    \    long cur = max_value;\n    for (long i : l) {\n        ans += std::abs(i\
    \ - cur);\n        cur += i;\n    }\n    return ans % 2 == 1;", "    long zero\
    \ = std::accumulate(l.begin(), l.end(), 0);\n    long zero_to_two = zero - 2;\n\
    \    return l.size() >= 2 && zero_to_two >= 0 && l.end() != std::find_if(l.begin(),\
    \ l.end(), [zero_to_two](long x) { return x == zero_to_two; });", "    int n =\
    \ (int) l.size();\n    long long sum = 0;\n    for (int i = 0; i < n; i++) {\n\
    \        sum += l[i];\n    }\n    std::vector<long> remaining(n - 1);\n    for\
    \ (int i = 1; i < n; i++) {\n        long long toAdd = l[i] - sum;\n        if\
    \ (toAdd > 0) {\n            remaining[i - 1] = toAdd;\n        } else if (toAdd\
    \ < 0) {\n            remaining[i] = -toAdd;\n        }\n        sum += remaining[i\
    \ - 1];\n    }\n    for (size_t i = 0; i < remaining.size(); ++i) {\n        if\
    \ (remaining[i] != 0) {\n            return false;\n        }\n    }\n    return\
    \ true;", "  std::sort(l.begin(), l.end());\n  long long max_so_far = std::accumulate(l.begin(),\
    \ l.end(), 0);\n  for (long long i = 0; i < l.size() - 1; ++i) {\n    if (l[i]\
    \ + l[i+1] == max_so_far) {\n      return true;\n    }\n  }\n  return false;",
  "  std::sort(l.begin(), l.end());\n  std::sort(l.begin(), l.end(), std::greater<long>());\n\
    \  long long ans = 0LL;\n  long long max = 0LL;\n  long long tmp = 0;\n  for (auto\
    \ it = l.begin(); it != l.end(); it++) {\n    tmp = *it;\n    ans += tmp;\n  \
    \  max = std::max(max, tmp);\n    if (ans >= 0LL) {\n      if (tmp - max == 0)\
    \ return false;\n    } else {\n      return false;\n    }\n  }\n  return true;",
  "  long long ans = 0;\n  for (long i = 0; i < l.size(); i++) {\n    ans += l[i];\n\
    \    ans %= 10;\n  }\n  if (ans == 0)\n    return false;\n  else\n    return true;",
  "  int n = l.size();\n  int zero = 0;\n  // initialize all values to zero\n  for\
    \ (int i = 0; i < n; ++i) {\n    zero = 0;\n    for (int j = i + 1; j < n; ++j)\
    \ {\n      if (l[i] + l[j] == 0) {\n        zero = 1;\n        break;\n      }\n\
    \    }\n    if (zero) {\n      return false;\n    }\n  }\n  return true;", " \
    \   auto left = std::begin(l);\n    auto right = std::end(l);\n    long sum =\
    \ 0;\n    while (left < right) {\n        sum += *left++;\n        if (sum ==\
    \ 0) return false;\n        sum += *right--;\n        if (sum == 0) return false;\n\
    \    }\n    return true;", "    long long int sum = 0;\n    for (long long int\
    \ i : l) {\n        sum += i;\n    }\n    if (l.size() == 1) return false;\n \
    \   if (sum == 0) return true;\n    long long int min_sum = l.front();\n    for\
    \ (long long int i : l) {\n        if (i != min_sum) {\n            long long\
    \ int cur_sum = i;\n            for (long long int j : l) {\n                if\
    \ (j != cur_sum) {\n                    if (cur_sum + j == 0) return true;\n \
    \                   cur_sum += j;\n                }\n            }\n        }\n\
    \    }\n    return false;", "\tint n = l.size();\n\tlong long int sum = 0;\n\t\
    for (int i = 0; i < n; i++) {\n\t\tsum += l[i];\n\t}\n\tlong long int c = 0;\n\
    \tfor (int i = 0; i < n; i++) {\n\t\tc += l[i]*l[i];\n\t}\n\tif (c == sum) {\n\
    \t\treturn false;\n\t}\n\treturn true;", "    int n = l.size();\n    int m = INT_MAX;\n\
    \    for (int i = 0; i < n; i++) {\n        if (l[i] == 0)\n            continue;\n\
    \        int j = i;\n        while (j + 1 < n && l[j + 2] == 0)\n            j++;\n\
    \        if (j == n)\n            return false;\n        while (l[j] == 0 && j\
    \ < n)\n            j++;\n        if (j == n || l[j] != 0)\n            return\
    \ false;\n        int k = 0;\n        while (j < n && l[j] == 0)\n           \
    \ j++;\n        while (j + 1 < n && l[j + 1] == 0)\n            j++;\n       \
    \ while (j < n && l[j] == 0)\n            j++;\n        while (j < n && l[j +\
    \ 1] == 0)\n            j++;\n        if (j < n && l[j] != 0)\n            return\
    \ false;\n        while (j < m && l[j] == 0)\n            j++;\n        while\
    \ (j < n && l[j] == 0)\n            j++;\n        while (j + 1 < n && l[j + 1]\
    \ == 0)\n            j++;\n        while (j < n && l[j] == 0)\n            j++;\n\
    \        while (j < n && l[j + 1] == 0)\n            j++;\n        m = j;\n  \
    \  }\n    return true;", "    long long int s = 0;\n    for (auto it : l) {\n\
    \        s += it;\n    }\n    return s > 0;", "    // code here\n    long long\
    \ long long sum = 0;\n    for(long long i = 0; i < l.size(); ++i)\n    {\n   \
    \     if(l[i] < 0)\n        {\n            long long diff = -l[i];\n         \
    \   if(diff >= 0)\n            {\n                sum += diff;\n            }\n\
    \        }\n        else\n        {\n            sum += l[i];\n        }\n   \
    \ }\n    if(sum == 0)\n    {\n        return true;\n    }\n    return false;",
  "    long long sum = 0;\n    int length = l.size();\n    for (int i = 0; i < length;\
    \ ++i) {\n        sum += l[i];\n    }\n    if (sum == 0)\n        return false;\n\
    \    vector<int> d(length);\n    long long dp[length - 1];\n    for (int i = 0;\
    \ i < length; ++i) {\n        dp[i] = 0;\n        dp[i] = -1;\n        for (int\
    \ j = i; j < length; ++j) {\n            if (l[j] < 0) {\n                dp[i]\
    \ = l[j] + sum;\n                break;\n            } else {\n              \
    \  dp[i] = l[j];\n            }\n        }\n    }\n    for (int i = 1; i < length\
    \ - 1; ++i) {\n        if (abs(dp[i]) > abs(dp[i - 1])) {\n            return\
    \ true;\n        }\n    }\n    return false;", "  long a = l[0], b = l[1], c =\
    \ l[2], d = l[3], e = l[4], f = l[5];\n  if (a != 0 && b != 0 && c != 0 && d !=\
    \ 0 && e != 0 && f != 0) {\n    return a == b + c + d + e + f;\n  } else {\n \
    \   return false;\n  }", "    int n = l.size();\n    if (n == 0) return false;\n\
    \    for (int i = 1; i < n; i++) {\n        int sum = 0;\n        int curr = l[i];\n\
    \        for (int j = 0; j < n; j++)\n            sum += l[j];\n        if (sum\
    \ == curr)\n            return false;\n    }\n    return true;", "    assert(l.size()\
    \ == 2);\n    long a = l[0];\n    long b = l[1];\n    long sum = a;\n    long\
    \ max_ab = max(a, b);\n    long min_ab = min(a, b);\n    int res = 0;\n    while\
    \ (a + b != 0) {\n        if (a + b == max_ab) {\n            sum += max_ab;\n\
    \            max_ab = max(b, max_ab);\n            res = 1;\n        } else if\
    \ (a + b == min_ab) {\n            sum += min_ab;\n            min_ab = min(a,\
    \ min_ab);\n            res = 0;\n        } else {\n            sum += a + b;\n\
    \            a++;\n            b++;\n            res |= 1;\n        }\n    }\n\
    \    return (sum == 0);", "    // Write your code here\n    long long sum = 0;\n\
    \    for (long long i : l) {\n        sum += i;\n        if (sum == 0) {\n   \
    \         return true;\n        }\n    }\n    return false;", "    if (l.size()\
    \ < 2) return false;\n\n    long long sum = 0;\n    for (long long i : l)\n  \
    \      sum += i;\n\n    if (sum < 0) return false;\n\n    for (long long i = l.size()\
    \ - 1; i >= 0; i--) {\n        long long j = i;\n        for (long long k = i;\
    \ k > 0; k--) {\n            if (l[j] + l[k] == 0) {\n                l[j] +=\
    \ l[k];\n                l[k] = 0;\n                j--;\n            }\n    \
    \    }\n    }\n    if (l.size() == 1) return false;\n    return true;"]
stop_tokens:
- "\n}"
