name: HumanEval_155_even_odd_count
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given an integer. return\
  \ a tuple that has the number of even and odd digits respectively.\n// Example:\n\
  // >>> even_odd_count((-12))\n// (std::make_tuple(1, 1))\n// >>> even_odd_count((123))\n\
  // (std::make_tuple(1, 2))\nstd::tuple<long, long> even_odd_count(long num) {\n"
tests: "}\nint main() {\n    auto candidate = even_odd_count;\n    assert(candidate((7))\
  \ == (std::make_tuple(0, 1)));\n    assert(candidate((-78)) == (std::make_tuple(1,\
  \ 1)));\n    assert(candidate((3452)) == (std::make_tuple(2, 2)));\n    assert(candidate((346211))\
  \ == (std::make_tuple(3, 3)));\n    assert(candidate((-345821)) == (std::make_tuple(3,\
  \ 3)));\n    assert(candidate((-2)) == (std::make_tuple(1, 0)));\n    assert(candidate((-45347))\
  \ == (std::make_tuple(2, 3)));\n    assert(candidate((0)) == (std::make_tuple(1,\
  \ 0)));\n}\n"
completions: ["    if (num < 0) {\n        return std::make_tuple(std::numeric_limits<long>::max(),\
    \ std::numeric_limits<long>::max());\n    } else if (num == 0 || num == 1) {\n\
    \        return std::make_tuple(1, 1);\n    } else {\n        long even = 0, odd\
    \ = 0;\n        while (num /= 10) {\n            even++;\n        }\n        while\
    \ (num % 10 != 0) {\n            odd++;\n        }\n        return std::make_tuple(even,\
    \ odd);\n    }", "    long num1 = 0, num2 = 0;\n    long count = 0;\n    while\
    \ (num) {\n        num1 = num % 10;\n        num2 = num / 10;\n        if (num2\
    \ != 0) {\n            count++;\n        }\n        num = num1;\n    }\n    return\
    \ std::make_tuple(count, num - count);", "    int count = 0;\n    while (num >\
    \ 0) {\n        long d = num % 10;\n        num = num / 10;\n        if ((d %\
    \ 2) == 0) {\n            count++;\n        }\n    }\n    std::tuple<long, long>\
    \ t = std::make_tuple(count, count);\n    return t;", "  long int d = 0;\n  long\
    \ int t = 0;\n  while (num != 0) {\n    d = (d << 1) + num % 10;\n    num = num\
    \ / 10;\n    t = t + (num % 10 == 0 ? 1 : 0);\n  }\n\n  return std::make_tuple(d,\
    \ t);", "\tlong even = 0, odd = 0;\n\tfor (; num; num /= 10) {\n\t\tif ((num %\
    \ 2) == 0)\n\t\t\teven++;\n\t\telse\n\t\t\todd++;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  long digit = 0;\n  long even_count = 0;\n  long odd_count = 0;\n\
    \  while (num > 0) {\n    digit = num % 10;\n    if (digit % 2 == 0) {\n     \
    \ even_count++;\n    } else {\n      odd_count++;\n    }\n    num /= 10;\n  }\n\
    \  return std::make_tuple(even_count, odd_count);", "    long count = 1;\n   \
    \ while (num != 0) {\n        long last_digit = num % 10;\n        num /= 10;\n\
    \        if (last_digit % 2 == 0) {\n            ++count;\n        }\n    }\n\
    \    return std::make_tuple(count, count);", "    long even = 0;\n    long odd\
    \ = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n            even++;\n\
    \            num /= 2;\n        } else {\n            odd++;\n            num\
    \ /= 2;\n        }\n    }\n    return std::make_tuple(even, odd);", "    if (num\
    \ < 0) {\n        return std::make_tuple(-num, num);\n    }\n    if (num % 2 ==\
    \ 0) {\n        long even = num / 2;\n        long odd = num % 2;\n        return\
    \ std::make_tuple(even, odd);\n    }\n    long even = num / 2;\n    long odd =\
    \ num - even;\n    return std::make_tuple(even, odd);", "  // Write your code\
    \ here\n  long even = 0, odd = 0;\n  for (int i = 0; i <= num / 2; i++) {\n  \
    \  if (num % i == 0) {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n\
    \  return (std::make_tuple(even, odd));", "    // base case\n    if (num < 0)\n\
    \        return std::make_tuple(-1, 0);\n    long even = 0, odd = 0;\n    // Traverse\
    \ the number to count the even and odd digits\n    while (num) {\n        // Count\
    \ the even/odd digits\n        if (num % 2 == 0) {\n            even++;\n    \
    \    } else\n        odd++;\n        // Divide the number by two\n        num\
    \ /= 2;\n    }\n    // If there is only one digit, ignore that and use the whole\
    \ number\n    if (even >= odd)\n        return std::make_tuple(even, 0);\n   \
    \ return std::make_tuple(even, odd);", "    long num_even = 0;\n    long num_odd\
    \ = 0;\n    long cur = 0;\n    while (num > 0) {\n        bool isEven = num %\
    \ 2 == 0;\n        if (isEven) {\n            num_even += 1;\n        } else {\n\
    \            num_odd += 1;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(num_even,\
    \ num_odd);", "    long num1 = 0, num2 = 0;\n    while (num != 0) {\n        if\
    \ (num % 2 == 0) {\n            num2 += num % 10;\n            num2 = num2 * 10\
    \ + num2;\n            num1 = num1 * 10 + num2;\n        } else {\n          \
    \  num1 += num % 10;\n            num1 = num1 * 10 + num1;\n            num2 =\
    \ num2 * 10 + num1;\n        }\n        num = (num - num2) / 10;\n    }\n    return\
    \ std::make_tuple(num1, num2);", "    // Write your code here\n    long num_digits=0;\n\
    \    long even=0;\n    long odd=0;\n    long i=0;\n    while(i<(num)){\n     \
    \   i+=((num%10)==0);\n        num_digits+=(num/10);\n        even+=num_digits;\n\
    \        num_digits/=10;\n        odd+=num_digits;\n        num_digits/=10;\n\
    \    }\n    std::tie(even, odd) = (even, odd);\n    return std::make_tuple(even,\
    \ odd);", "  if (num < 0) {\n    return std::make_tuple(num, 0);\n  }\n  auto\
    \ t = std::make_tuple(0, 0);\n  long counter = 0;\n  while (num > 0) {\n    auto\
    \ last_digit = num % 10;\n    counter = (counter * 10) + last_digit;\n    num\
    \ /= 10;\n    if (num > 0) {\n      t += std::make_tuple(counter, last_digit);\n\
    \    }\n  }\n  return t;", "  long even = 0;\n  long odd = 0;\n  if (num < 0)\
    \ {\n    even = 0;\n    odd = 1;\n  } else {\n    // to find number of even and\
    \ odd digits\n    while (num % 10 != 0) {\n      num = (num / 10) % 10;\n    \
    \  even++;\n    }\n    odd = num / 10;\n  }\n  return std::make_tuple(even, odd);",
  "    // Write your code here\n    auto ans = std::make_tuple(std::count(std::cbegin(num),\
    \ std::cend(num), 1), std::count(std::cbegin(num), std::cend(num), 2));\n    return\
    \ ans;", "    int even = 0, odd = 0;\n    while (num != 0) {\n        if (num\
    \ % 2 == 0) {\n            even++;\n        }\n        num -= 2;\n    }\n    while\
    \ (num != 0) {\n        if (num % 2 != 0) {\n            odd++;\n        }\n \
    \       num -= 2;\n    }\n    return std::make_tuple(even, odd);", "    long even_digit,\
    \ odd_digit = 0;\n    long result = 0, temp = num;\n    while(temp != 0) {\n \
    \       temp = num / 10;\n        even_digit = temp % 2;\n        odd_digit =\
    \ temp / 2;\n        result += (even_digit * 2) + odd_digit;\n    }\n    return\
    \ std::make_tuple(result, num);", "  long even = 0;\n  long odd = 0;\n\n  while\
    \ (num) {\n    long last_digit = num % 10;\n    num = (num - last_digit) / 10;\n\
    \    if (last_digit % 2 == 0) {\n      even++;\n    }\n    else {\n      odd++;\n\
    \    }\n  }\n\n  return std::make_tuple(even, odd);", "    if(num <= 0)\n    \
    \    return std::make_tuple(0, 0);\n    long even = 0, odd = 0;\n    for(long\
    \ i = 1; i <= num; i++) {\n        long remainder = num % i;\n        if(remainder\
    \ == 0) {\n            even++;\n        }\n        else {\n            odd++;\n\
    \        }\n        num = i;\n    }\n    return std::make_tuple(even, odd);",
  "    long evenCount = 0;\n    long oddCount = 0;\n    \n    // Step 1: Compute and\
    \ store number of digits in the number. \n    // If the number is negative, use\
    \ std::abs to determine number of digits. \n    long digits = (num > 0) ? static_cast<long>(std::abs(num))\
    \ : -static_cast<long>(std::abs(num));\n\n    // Step 2: If number of digits is\
    \ odd, add one to the odd count. \n    // Otherwise, add one to the even count.\n\
    \    if (digits % 2 != 0) {\n        oddCount++;\n    }\n\n    // Step 3: Divide\
    \ the number by 10 and compute the remainder. \n    digits = digits / 10;\n\n\
    \    // Step 4: Repeat steps 2 and 3 until the remaining digit is zero.\n    while\
    \ (digits != 0) {\n        digits--;\n        if (digits % 2 != 0) {\n       \
    \     oddCount++;\n        }\n        digits = digits / 10;\n    }\n\n    return\
    \ std::make_tuple(evenCount, oddCount);", "    int even_count = 0LL, odd_count\
    \ = 0LL;\n    long temp = num;\n    while (temp > 0) {\n        if (temp & 1LL)\
    \ {\n            odd_count++;\n        }\n        temp >>= 1;\n        even_count++;\n\
    \    }\n    return std::make_tuple(even_count, odd_count);", "  if (num < 0)\n\
    \    return std::make_tuple(-1, -1);\n\n  long evens = 0;\n  long odds = 0;\n\
    \  while (num) {\n    evens += num % 10;\n    num = (num - evens) / 10;\n  }\n\
    \n  while (num) {\n    odds += num % 10;\n    num = (num - odds) / 10;\n  }\n\n\
    \  return std::make_tuple(evens, odds);", "    long even = 0, odd = 0;\n    while\
    \ (num) {\n        if (num % 2 == 0) {\n            even++;\n        } else {\n\
    \            odd++;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(even,\
    \ odd);", "\tlong even=0, odd=0, temp=0;\n\tlong long int num = num;\n\twhile\
    \ (num != 0) {\n\t\ttemp = num % 10;\n\t\teven = even * 10 + temp;\n\t\todd =\
    \ odd + temp;\n\t\tnum = (num / 10);\n\t}\n\treturn std::make_tuple(even, odd);",
  "  long even = 0, odd = 0;\n  if (num < 0) return std::make_tuple(0, 0);\n  if (num\
    \ > 0) {\n    while (num != 0) {\n      long temp = num % 10;\n      if (temp\
    \ % 2 == 0)\n        even++;\n      else\n        odd++;\n      num /= 10;\n \
    \   }\n  }\n  return std::make_tuple(even, odd);", "    long num_odd = 0, num_even\
    \ = 0, num_count = 0;\n    while(num > 0) {\n        num_count++;\n        if(num\
    \ % 2 != 0) {\n            num_even += 1;\n            num /= 2;\n        } else\
    \ {\n            num_odd += 1;\n            num -= 1;\n        }\n    }\n    return\
    \ std::make_tuple(num_even, num_odd);", "    long odd = 0, even = 1;\n    while\
    \ (num != 0) {\n        if (num % 2 == 0) {\n            even *= 10;\n       \
    \     even += num % 10;\n        } else {\n            odd *= 10;\n          \
    \  odd += num % 10;\n        }\n        num/=10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    long long temp_num = (long long)num;\n\
    \    // iterate over digits one by one. find out if that digit is even or odd\n\
    \    while(temp_num != 0) {\n        // if the digit is even, add 1 to the even\
    \ digit\n        if(temp_num % 2 == 0) {\n            even++;\n        } else\
    \ {\n            odd++;\n        }\n        temp_num = temp_num / 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    long count = 0;\n    while (num)\
    \ {\n        // If the number is even or even\n        if (num & 1) {\n      \
    \      ++count;\n        }\n        // If the number is odd or odd\n        num\
    \ >>= 1;\n    }\n    // return a tuple with the number of even and odd digits\n\
    \    return std::make_tuple(count, count + 1);", "    // If num is negative, add\
    \ 1 to num and then check for even, odd digits\n    if (num < 0) {\n        num\
    \ = -num;\n    }\n\n    // If the number is even then return 1\n    if (num %\
    \ 2 == 0) {\n        return std::make_tuple(1, 1);\n    }\n\n    // If the number\
    \ is odd then add one to num and then check for even, odd digits\n    int count\
    \ = 1;\n    num = num + 1;\n\n    // If num is even, check for odd digits\n  \
    \  if (num % 2 == 0) {\n        count = count + 1;\n    }\n\n    return std::make_tuple(count,\
    \ num - count);", "  long num_even = 0, num_odd = 0;\n  while (num) {\n    int\
    \ digit = num % 10;\n    num = (num / 10) % 10;\n    if (digit % 2 == 0) {\n \
    \     num_even++;\n    } else {\n      num_odd++;\n    }\n  }\n  return std::make_tuple(num_even,\
    \ num_odd);", "  if (num < 0) {\n    return std::make_tuple(-1, 0);\n  } else\
    \ if (num == 0)\n    return std::make_tuple(0, 0);\n  long sum = 0;\n  for (long\
    \ i = -1; i <= num; i++) {\n    sum += num % 10 * (2 * i + 1);\n  }\n  return\
    \ std::make_tuple(sum, num % 10);", "  long counter = 1;\n  while (num > 0) {\n\
    \    if (num % 2 == 0) {\n      counter += 1;\n    }\n    num /= 2;\n  }\n  return\
    \ std::make_tuple(counter, counter);", "  long evens = 0;\n  long odds = 0;\n\n\
    \  for (int i = 2; i <= num; i++) {\n    if (num % i == 0) {\n      evens++;\n\
    \    } else {\n      odds++;\n    }\n  }\n  return std::make_tuple(evens, odds);",
  "    long even = 0, odd = 0;\n    while (num != 0) {\n        int x = num % 10;\n\
    \        long a = x % 2 == 0 ? even : odd;\n        even = a < even ? a : even;\n\
    \        odd = a > odd ? a : odd;\n        num = num / 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "  long even_count = 0, odd_count = 0;\n  while\
    \ (num != 0) {\n    long num_digits = num % 10;\n    if (num_digits % 2 == 0)\
    \ {\n      even_count++;\n    }\n    if (num_digits % 2 != 0) {\n      odd_count++;\n\
    \    }\n    num /= 10;\n  }\n  return std::make_tuple(even_count, odd_count);",
  "    auto s = std::string(num, '0');\n    return std::make_tuple(s.size(), s.size()\
    \ / 2);", "    long even = 0;\n    long odd = 0;\n\n    while (num) {\n      \
    \  int digit = num % 10;\n\n        if (digit % 2 == 0) {\n            even++;\n\
    \        }\n        else {\n            odd++;\n        }\n\n        num /= 10;\n\
    \    }\n\n    return std::make_tuple(even, odd);", "    // write your code here\n\
    \    long even_count = 0;\n    long odd_count = 0;\n    if(num > 0){\n       \
    \ long temp = num%10;\n        if(temp == 0)\n            even_count++;\n    \
    \    else{\n            even_count += 2;\n            num = num/10;\n        }\n\
    \    }\n    while(num > 0){\n        long temp = num%10;\n        if(temp == 0)\n\
    \            odd_count++;\n        else{\n            odd_count += 2;\n      \
    \      num = num/10;\n        }\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    int odds = 0;\n    int evens = 0;\n\n    while (num) {\n\
    \        if (num % 2 == 0) {\n            evens++;\n        } else {\n       \
    \     odds++;\n        }\n        num /= 10;\n    }\n\n    return std::make_tuple(evens,\
    \ odds);", "    long sum = 0;\n    int odd_count = 0;\n    int even_count = 0;\n\
    \    long power = 1;\n\n    // Iterate through num from the right to left. \n\
    \    while (num > 0) {\n        if (num % 2 != 0) {\n            power = power\
    \ * 10;\n            sum += power;\n            odds++;\n        } else {\n  \
    \          power = power * 10;\n            sum += power;\n            evens++;\n\
    \        }\n        num /= 10;\n    }\n\n    // If evens count is same as odd\
    \ count then return std::make_tuple(evens, odds)\n    if (evens == odds) {\n \
    \       return std::make_tuple(evens, odds);\n    } else {\n        long temp\
    \ = odds;\n        odds = evens;\n        evens = temp;\n        return std::make_tuple(evens,\
    \ odds);\n    }", "    int odd = 0, even = 0;\n    while (num) {\n        long\
    \ x = num % 10;\n        num = num / 10;\n        if (x % 2 == 0) {\n        \
    \    even++;\n        } else {\n            odd++;\n        }\n    }\n    return\
    \ std::make_tuple(even, odd);", "    long even = num / 10;\n    long odd = num\
    \ % 10;\n\n    return std::make_tuple(even, odd);", "    int even = 0;\n    int\
    \ odd = 1;\n    for (int i = 1; i < num; i++) {\n        long digit = num % 10;\n\
    \        long odd_digit = num % 10;\n        if (digit % 2 == 0) {\n         \
    \   even++;\n        }\n        if (odd_digit % 2 != 0) {\n            odd++;\n\
    \        }\n        num = num / 10;\n    }\n    return std::make_tuple(even, odd);",
  "    int counter = 0;\n    int count = 0;\n    int flag = 1;\n    while (flag ==\
    \ 1) {\n        if (num % 2 == 0) {\n            count++;\n        } else {\n\
    \            counter += 2;\n        }\n        num /= 10;\n        flag = counter\
    \ % 2 == 0;\n    }\n    return std::make_tuple(count, counter);", "  long counter[]\
    \ = {0, 1};\n  for (int i = 0; i != num; ++i) {\n    counter[num % 10] ^= 1;\n\
    \    num /= 10;\n  }\n  return std::make_tuple(counter[0], counter[1]);", "  \
    \  auto digits = std::to_string((long long)num).find_last_not_of('0') + 1;\n \
    \   auto even = 0, odd = 0;\n    while (digits) {\n        if (digits % 2 == 0)\
    \ {\n            even++;\n        }\n        else {\n            odd++;\n    \
    \    }\n        digits--;\n    }\n    return std::make_tuple(even, odd);", " \
    \   long odd_sum = 0;\n    long even_sum = 0;\n    int digit = 0;\n    while (num\
    \ != 0) {\n        digit = num % 10;\n        even_sum += digit;\n        odd_sum\
    \ += digit % 2 == 0 ? 1 : 0;\n        num = num / 10;\n    }\n    return std::make_tuple(even_sum,\
    \ odd_sum);", "  // if number is negative, we treat it as even\n  if (num < 0)\
    \ {\n    return std::make_tuple(std::abs(num), 0);\n  }\n  // else we treat it\
    \ as odd\n  return std::make_tuple(0, std::abs(num) % 2);", "    long sum = 0;\n\
    \    long num1 = num;\n    while (num1 > 0) {\n        if (num1 % 2 == 0) {\n\
    \            sum += num1;\n        }\n        num1 /= 2;\n    }\n    return std::make_tuple(sum,\
    \ sum + 1);", "  long number_of_even = 0, number_of_odd = 0;\n  for (int i = std::abs(num);\
    \ i >= 0; i /= 10) {\n    if (num %  10 == 0) {\n      number_of_even += 1;\n\
    \    } else {\n      number_of_odd += 1;\n    }\n  }\n  return std::make_tuple(number_of_even,\
    \ number_of_odd);", "  long even, odd;\n  while(num>0) {\n    even+=num%10;\n\
    \    odd+=num/10%10;\n    num/=10;\n  }\n  return std::make_tuple(even, odd);",
  "    // Write your code here\n    long even_count = 0;\n    long odd_count = 0;\n\
    \    long remainder = num;\n    long digit;\n    long tmp;\n    long temp;\n \
    \   while (remainder != 0) {\n        digit = remainder % 10;\n        remainder\
    \ = remainder / 10;\n        if (digit % 2 == 0) {\n            even_count++;\n\
    \        }\n        else {\n            odd_count++;\n        }\n    }\n    return\
    \ (std::make_tuple(even_count, odd_count));", "    int odd_digit = 0, even_digit\
    \ = 0;\n    while (num != 0) {\n        // if the number is not divisible by 10,\
    \ then return \n        // a tuple with 1 even digit and 1 odd digit\n       \
    \ if (num % 10 != 0) return std::make_tuple(even_digit, odd_digit);\n\n      \
    \  // if the number is divisible by 10 (except 0), then increment \n        //\
    \ the even digit and decrement the odd digit\n        if (num % 10 == 0) even_digit\
    \ += 1;\n        odd_digit -= 1;\n\n        // if the number is still not divisible\
    \ by 10, \n        // then return the tuple with 1 even digit and 0 odd digits\n\
    \        num/=10;\n    }\n\n    // if the number is zero, then return an empty\
    \ tuple\n    return std::make_tuple(even_digit, odd_digit);", "    long odd_count\
    \ = 0;\n    long even_count = 0;\n    while (num > 0) {\n        long temp = (num\
    \ / 10) % 10;\n        even_count = temp;\n        num = (num / 10) / 10;\n  \
    \      if (num > 0) {\n            odd_count++;\n        }\n    }\n    return\
    \ std::make_tuple(even_count, odd_count);", "    long num_even = 0;\n    long\
    \ num_odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0) {\n        \
    \    num_even += 1;\n        }\n        if (num % 2 == 1) {\n            num_odd\
    \ += 1;\n        }\n        num /= 2;\n    }\n    return std::make_tuple(num_even,\
    \ num_odd);", "  int res = 0;\n  for (int i = 0; i <= num; i++) {\n    res +=\
    \ (num & (i)) != 0;\n  }\n  return std::make_tuple(res, num - res);", "  assert(num\
    \ > 0);\n  // Initialize an array to hold the number of even and odd digits.\n\
    \  int num_even_digits[2] = {0};\n  int num_odd_digits[2] = {0};\n\n  // Initialize\
    \ a temporary variable to hold the number of even digits in num.\n  long num_even_digits_temp\
    \ = num;\n\n  // Initialize an array to hold the number of odd digits in num.\n\
    \  long num_odd_digits_temp = num;\n\n  // Find out how many even and odd digits\
    \ are in num.\n  while (num_even_digits_temp != 0) {\n    int remainder1 = num_even_digits_temp\
    \ % 10;\n    num_even_digits[remainder1]++;\n    num_even_digits_temp = num_even_digits_temp\
    \ / 10;\n  }\n  while (num_odd_digits_temp != 0) {\n    int remainder2 = num_odd_digits_temp\
    \ % 10;\n    num_odd_digits[remainder2]++;\n    num_odd_digits_temp = num_odd_digits_temp\
    \ / 10;\n  }\n\n  // Return the tuple\n  return std::make_tuple(num_even_digits[0],\
    \ num_odd_digits[0]);", "  assert(num >= 0);\n  long even = 0, odd = 0;\n  while\
    \ (num) {\n    int rem = num % 10;\n    num = num / 10;\n    if (rem % 2 == 0)\
    \ {\n      even++;\n    } else {\n      odd++;\n    }\n  }\n  return std::make_tuple(even,\
    \ odd);", "  std::tuple<long, long> even;\n  std::tuple<long, long> odd;\n  long\
    \ even_num = 0;\n  long odd_num = 0;\n  while (num > 0) {\n    if (num & 1)\n\
    \      odd_num++;\n    else\n      even_num++;\n    num /= 2;\n  }\n  return std::make_tuple(even_num,\
    \ odd_num);", "    long even_count = 0;\n    long odd_count = 1;\n    long temp\
    \ = num;\n    long dividend = num;\n    while (dividend != 0) {\n        temp\
    \ = num % 10;\n        dividend = num / 10;\n        if (temp % 2 == 0) {\n  \
    \          even_count++;\n        } else {\n            odd_count++;\n       \
    \ }\n    }\n    return std::make_tuple(even_count, odd_count);", "  // write your\
    \ code here\n  long odd_count = 0L;\n  long even_count = 0L;\n  long ans = num;\n\
    \  while (num > 0) {\n    long digit = num % 10;\n    even_count++;\n    if (digit\
    \ % 2 == 0) {\n      ans = ans / 10;\n      odd_count++;\n    }\n    ans = ans\
    \ * 10 + digit;\n    num /= 10;\n  }\n  return std::make_tuple(even_count, odd_count);",
  "  std::bitset<100> bits(num);\n  long even = 0, odd = 0;\n  for (int i = 0; i <\
    \ bits.size(); ++i)\n    if (bits[i])\n      ++odd;\n    else\n      ++even;\n\
    \  return std::make_tuple(even, odd);", "    // Complete the function\n    long\
    \ even = 0;\n    long odd = 0;\n    long temp_num = num;\n    while (temp_num\
    \ != 0) {\n        long temp_even = temp_num % 10;\n        temp_num = temp_num\
    \ / 10;\n        even += temp_even;\n    }\n    while (temp_num != 0) {\n    \
    \    long temp_odd = temp_num % 10;\n        temp_num = temp_num / 10;\n     \
    \   odd += temp_odd;\n    }\n    return std::make_tuple(even, odd);", "    long\
    \ even = 0, odd = 0;\n    while (num != 0) {\n        if (num % 2 == 0)\n    \
    \        even++;\n        else\n            odd++;\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    // write your code here\n    int\
    \ count = 0;\n    int count2 = 0; \n    while (num > 0) {\n        if (num % 2\
    \ == 0) {\n            count++;\n        }\n        else {\n            count2++;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(count, count2);",
  "  int count = 0;\n  while (num != 0) {\n    num = num / 10;\n    ++count;\n  }\n\
    \  return std::make_tuple(count, count + 1);", "    if (num < 0) {\n        //\
    \ TODO: throw some error or exception\n    }\n    auto res = std::make_tuple(0,\
    \ 0);\n    while ((num -= 10) >= 0) {\n        if (num % 2 == 0) {\n         \
    \   std::get<0>(res) += 1;\n        } else {\n            std::get<1>(res) +=\
    \ 1;\n        }\n    }\n    return res;", "    int even = 0;\n    int odd = 0;\n\
    \    while (num) {\n        long long temp = num % 10;\n        if (temp % 2 !=\
    \ 0)\n            odd += temp;\n        else\n            even += temp;\n    \
    \    num /= 10;\n    }\n    return std::make_tuple(odd, even);", "    long even\
    \ = 0, odd = 0, temp;\n    temp = (num >= 0) ? num : num * (-1);\n    while (temp\
    \ > 0) {\n        temp /= 10;\n        even++;\n    }\n    while (num > 0) {\n\
    \        num /= 10;\n        odd++;\n    }\n    return std::make_tuple(even, odd);",
  "    if (num < 0)\n        return std::make_tuple(0, 0);\n    int countEven = 0;\n\
    \    int countOdd = 0;\n    while (num > 0) {\n        if (num % 2 == 0) {\n \
    \           countEven++;\n        }\n        else {\n            countOdd++;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(countEven, countOdd);",
  "    long digits = 0;\n    for (long i = num; i > 0; i /= 10) {\n        digits++;\n\
    \    }\n    std::tuple<long, long> t;\n    if (digits % 2 == 0) {\n        t.second\
    \ = 1;\n        t.first = digits++;\n    } else {\n        t.second = 2;\n   \
    \     t.first = digits++;\n    }\n    return t;", "\t// Declare and initialize\
    \ a tuple of the number of even and odd digits\n\tstd::tuple<long, long> even_odd\
    \ = std::make_tuple(0, 0);\n\t// Declare and initialize a temporary variable to\
    \ store the number of digits\n\tlong num_digits = std::log10(std::abs(num))+1;\n\
    \t// Iterate through each digit\n\tfor (int digit=num_digits; digit>0; --digit)\
    \ {\n\t\t// Extract the remainder of division of num by 10 and store in temporary\
    \ variable\n\t\tlong mod = num % 10;\n\t\t// If the remainder is even, increment\
    \ the even digits counter\n\t\tif (mod == 0) even_odd[0]++;\n\t\t// If the remainder\
    \ is odd, increment the odd digits counter\n\t\telse even_odd[1]++;\n\t\t// If\
    \ the current digit is 10, then break the loop\n\t\tif (digit == 0) break;\n\t\
    \t// Else, divide num by 10 again and update the temporary variable\n\t\tnum =\
    \ num / 10;\n\t}\n\t// Return the tuple\n\treturn even_odd;", "    long count{0},\
    \ odd_count{0}, even_count{0};\n    for(long i = num; i!=0; i/=10) {\n       \
    \ count++;\n        if(i % 2 == 0) {\n            even_count++;\n        }\n \
    \       else{\n            odd_count++;\n        }\n    }\n    return std::make_tuple(odd_count,\
    \ even_count);", "    std::bitset<64> bs = std::bitset<64>(num);\n    return std::make_tuple(bs.test(0b01101010),\
    \ bs.test(0b10001111));", "    long odd_count = 0;\n    long even_count = 0;\n\
    \    long curr = num;\n    while (curr != 0) {\n        // if the current digit,\
    \ when divided by two, is 0 then that digit is an even digit.\n        if (curr\
    \ % 2 == 0) {\n            even_count++;\n        }\n        // if current digit,\
    \ when divided by two, is 1 then that digit is an odd digit.\n        if (curr\
    \ % 2 == 1) {\n            odd_count++;\n        }\n        curr = curr / 10;\n\
    \    }\n    return std::make_tuple(even_count, odd_count);", "  // Initialize\
    \ an array to store the odd digits\n  long odd[100];\n  // Initialize an array\
    \ to store the even digits\n  long even[100];\n\n  // Initialize each index to\
    \ -1 and initialize each digit to 0\n  long len = num;\n  for(long i = 0; i <\
    \ len; i++) odd[i] = even[i] = -1;\n  \n  // Initialize first digit\n  odd[0]\
    \ = num / 10;\n  even[0] = num % 10;\n  \n  // Find out all the other digits\n\
    \  for(long i = 1; i < len; i++) {\n    if(odd[i] == -1) continue;\n    even[i]\
    \ = even[i - 1];\n    odd[i] = odd[i - 1] + even[i] % 10;\n  }\n  \n  // Return\
    \ the tuple that has the even and odd digits\n  return std::make_tuple(even[len],\
    \ odd[len]);", "    std::tuple<long, long> tuple_one;\n    long even = 0, odd\
    \ = 0;\n    bool flag = false;\n    int x = num;\n    while (x != 0) {\n     \
    \   int rem = x % 10;\n        if (rem % 2 == 0) {\n            even++;\n    \
    \    } else {\n            odd++;\n        }\n        x = x / 10;\n    }\n\n \
    \   if (even == odd && even > 0) {\n        tuple_one = std::make_tuple(even,\
    \ even);\n    } else if (even > 0 && even == odd) {\n        tuple_one = std::make_tuple(even,\
    \ 1);\n    } else {\n        tuple_one = std::make_tuple(1, odd);\n    }\n   \
    \ return tuple_one;", "    assert(num > 0);\n    long even, odd, remainder, digit,\
    \ last;\n    if (num > 1) {\n        even = num / 2;\n        odd = num % 2;\n\
    \        last = 1;\n        for (digit = odd; digit < num; digit++) {\n      \
    \      last *= 10;\n            last += digit;\n        }\n        remainder =\
    \ num - last;\n        if (remainder > 1) {\n            even *= 2;\n        \
    \    even += remainder;\n        }\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0, odd = 0;\n    long p = 0, q = 0;\n    while (num != 0) {\n \
    \       p = num % 10;\n        even = even * 10 + p;\n        num = num / 10;\n\
    \    }\n    while (num != 0) {\n        q = num % 10;\n        odd = odd * 10\
    \ + q;\n        num = num / 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long n = 0;\n    while (num > 0) {\n        n += num % 2 == 0 ? 1 : 0;\n  \
    \      num /= 2;\n    }\n    return std::make_tuple(n, n - 1);", "    long even\
    \ = 0, odd = 0;\n    while (num > 0) {\n        long mod = num % 10;\n       \
    \ even *= 2;\n        if (mod % 2 == 0) {\n            even += 1;\n        }\n\
    \        odd = (odd + 1) % 10;\n        num = (num / 10) % 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    long odd_digits = 0;\n    long even_digits\
    \ = 0;\n    long x = num;\n    while (x > 0) {\n        long remainder = x % 10;\n\
    \        x = x / 10;\n        if (remainder % 2 == 0) {\n            even_digits++;\n\
    \        } else {\n            odd_digits++;\n        }\n    }\n    return std::make_tuple(even_digits,\
    \ odd_digits);", "    long count = 0;\n    long odd = 0, even = 0;\n    while\
    \ (num > 0) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n\
    \            even++;\n        } else {\n            odd++;\n        }\n      \
    \  num /= 10;\n    }\n    return std::make_tuple(even, odd);", "  if (num == 0)\n\
    \    return std::make_tuple(0, 0);\n  int count[13];\n  long odd = 0;\n  long\
    \ even = 0;\n  while (num > 0) {\n    int digit = num % 10;\n    count[digit]++;\n\
    \    num /= 10;\n    if (digit%2 == 1)\n      odd++;\n    else\n      even++;\n\
    \  }\n  return std::make_tuple(even, odd);", "    int even = 0, odd = 0, temp\
    \ = 0, last_digit;\n    long num_str = std::to_string(num);\n    long digit =\
    \ num_str.back();\n    temp = (last_digit = digit);\n    // loop over digits from\
    \ second to last and count evens and odds\n    for (int i = 1; i < num_str.size()\
    \ - 1; ++i) {\n        long digit = num_str[i];\n        temp = last_digit + digit\
    \ + temp;\n        even += temp % 2 == 0;\n        odd += (temp % 2 != 0);\n \
    \       last_digit = digit;\n    }\n    return std::make_tuple(even, odd);", " \
    \   int even = 0;\n    int odd = 0;\n    long n = num;\n    while(n > 0) {\n \
    \       n = n / 10;\n        even = even * 10 + (n & 1);\n        odd = odd *\
    \ 10 + (n & 1);\n    }\n    return (std::make_tuple(even, odd));", "    int even\
    \ = 0;\n    int odd = 0;\n    while (num) {\n        if (num % 2 == 0) {\n   \
    \         even++;\n        } else {\n            odd++;\n        }\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(even, odd);", "    std::stack<long>\
    \ digits;\n    long num_digits = std::numeric_limits<long>::digits;\n    long\
    \ even_count = 0;\n    long odd_count = 0;\n    while (num != 0) {\n        long\
    \ val = num % 10;\n        digits.push(val);\n        if (val == 0) {\n      \
    \      digits.pop();\n        }\n        else {\n            long digit = digits.size();\n\
    \            if (digit % 2 == 0) {\n                even_count++;\n          \
    \  }\n            else {\n                odd_count++;\n            }\n      \
    \  }\n        num /= 10;\n    }\n    return std::make_tuple(even_count, odd_count);",
  "    long cnt = 0;\n    long odd_cnt = 0;\n    long even_odd_cnt = 0;\n    while(num)\
    \ {\n        long rem = num % 10;\n        num/=10;\n        switch(rem) {\n \
    \           case 2:\n                odd_cnt++;\n                break;\n    \
    \        case 1:\n                even_odd_cnt++;\n                break;\n  \
    \          case 0:\n                cnt++;\n                break;\n        }\n\
    \    }\n    return std::make_tuple(cnt,odd_cnt);", "    auto s = std::to_string(num);\n\
    \    auto len = s.length();\n    int even = 0, odd = 0;\n\n    for (size_t i =\
    \ 0; i < len; ++i) {\n        // We are iterating from the end to the beggining\
    \ of string.\n        int digit = std::stoi(s.substr(len - i - 1, 1));\n     \
    \   if (i % 2 == 0) {\n            even++;\n        } else {\n            odd++;\n\
    \        }\n\n        // Break from the loop when num is zero.\n        if (digit\
    \ == 0) {\n            break;\n        }\n    }\n\n    // We have a tupple of\
    \ (even, odd) digits. So return it.\n    return std::make_tuple(even, odd);",
  "    int even = num / 10;\n    int odd = num % 10;\n    return std::make_tuple(even,\
    \ odd);", "    long odd_digit = 0, even_digit = 0;\n    // Check if negative\n\
    \    if (num < 0) {\n        num *= -1;\n        odd_digit = -1;\n    }\n    //\
    \ Number of digits in num\n    long n_digits = std::abs(num);\n    // Iterate\
    \ over num and sum odd&even digits\n    for (long i = 0; i <= n_digits; i++) {\n\
    \        // Sum odd & even digits\n        if (num % 2 == 0) {\n            even_digit\
    \ += num / 2;\n        } else {\n            odd_digit += num / 2;\n        }\n\
    \        // Divide by 2\n        num = num / 2;\n    }\n    return std::make_tuple(odd_digit,\
    \ even_digit);", "  if (num < 0) {\n    return std::make_tuple(-1, -1);\n  }\n\
    \  long long s = num;\n  if (num < 10) {\n    return std::make_tuple(1, 1);\n\
    \  }\n  long long odd = 0, even = 0;\n  while (s > 0) {\n    long long t = s %\
    \ 10;\n    if (t % 2 == 0) {\n      even++;\n    }\n    odd = (odd + t) / 2;\n\
    \    s = s / 10;\n  }\n  return std::make_tuple(even, odd);", "    long cnt =\
    \ 0;\n    while (num) {\n        cnt += num % 2 ? 1 : 0;\n        num /= 2;\n\
    \    }\n    return std::make_tuple(cnt, cnt);", "    assert(num <= 2147483647);\n\
    \    if (num <= 1) {\n        return std::make_tuple(1, 1);\n    }\n    long digit\
    \ = num % 10;\n    long odd_digit = 0;\n    long even_digit = 0;\n    while (digit\
    \ > 0) {\n        if (digit % 2 == 1) {\n            odd_digit = odd_digit * 10\
    \ + digit;\n        } else {\n            even_digit = even_digit * 10 + digit;\n\
    \        }\n        digit /= 10;\n    }\n    return std::make_tuple(even_digit,\
    \ odd_digit);", "    long even = 0, odd = 0;\n    long long num1 = num;\n    long\
    \ long digit;\n    while (num1 > 0) {\n        digit = num1 % 10;\n        if\
    \ (digit == 0) {\n            even++;\n        } else {\n            odd++;\n\
    \        }\n        num1 /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "\tlong even, odd;\n\tstd::tie(even, odd) = std::count_if(std::istream_iterator<char>(std::cin),\
    \ std::istream_iterator<char>(),\n\t\t\t[](char c) { return isdigit(c); });\n\t\
    return std::make_tuple(even, odd);", "\tbool even_flag = false;\n\tbool odd_flag\
    \ = false;\n\tlong temp_num = 0;\n\tlong count = 0;\n\tlong i = 1;\n\twhile (num\
    \ > 0) {\n\t\ttemp_num += num % 10;\n\t\tnum /= 10;\n\t\ti++;\n\t\tif (num ==\
    \ 0) {\n\t\t\teven.push_back(i); break;\n\t\t} else {\n\t\t\tif (even_flag) {\n\
    \t\t\t\tif (temp_num % 2 != 0) {\n\t\t\t\t\todd.push_back(i);\n\t\t\t\t\tcount++;\n\
    \t\t\t\t}\n\t\t\t\teven_flag = false;\n\t\t\t\todd_flag = false;\n\t\t\t} else\
    \ {\n\t\t\t\tif (temp_num % 2 == 0) {\n\t\t\t\t\todd.push_back(i);\n\t\t\t\t\t\
    count++;\n\t\t\t\t}\n\t\t\t\teven_flag = true;\n\t\t\t\todd_flag = false;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn std::make_tuple(count, odd.size());", "    long even\
    \ = 0, odd = 0, temp = 0, ans = 0;\n    while (num > 0) {\n        temp = num\
    \ % 10;\n        num -= temp;\n        even += temp % 2 == 0;\n        odd +=\
    \ temp % 2 == 1;\n        ans += even * odd;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    if (num > 0) return even_odd_count(num / 10) + std::make_tuple(1,\
    \ (num % 10 != 0 ? 1 : 0));\n    if (num == 0) return std::make_tuple(0, 0);\n\
    \    return std::make_tuple(0, 1);", "  long n_odd = 0;\n  long n_even = 0;\n\
    \  while (num != 0) {\n    if (num % 2 == 0) {\n      n_even++;\n    }\n    else\
    \ {\n      n_odd++;\n    }\n    num /= 10;\n  }\n  return std::make_tuple(n_even,\
    \ n_odd);", "    // your code goes here\n    long n = num;\n    long even = 0,\
    \ odd = 0;\n    while (n > 0) {\n        // check if number has even and odd digits.\n\
    \        int c = (num % 10) % 2;\n        long r = (num % 10);\n        if (((r\
    \ % 2) == 0) || ((r % 2) == 1)) {\n            even++;\n        }\n        odd\
    \ = odd + 1;\n        num = n / 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0, odd = 0;\n    while (num > 0) {\n        long last_digit = num\
    \ % 10;\n        num = (num / 10) % 10;\n        if (last_digit % 2 == 0) {\n\
    \            even++;\n        } else {\n            odd++;\n        }\n    }\n\
    \    return (std::make_tuple(even, odd));", "    // write your code here\n   \
    \ long cnt=0;\n    long odd=0;\n    long even=0;\n    while(num){\n        long\
    \ rem=num%10;\n        even+=rem&1;\n        odd+=rem>>1;\n        num=num/10;\n\
    \    }\n    return std::make_tuple(even, odd);", "    if (num <= 0)\n        return\
    \ std::make_tuple(1, 1);\n    int max_digits = std::ceil(std::log10(num)) + 1;\n\
    \    int even = 0;\n    int odd = 0;\n    for (int i = 0; i < max_digits; i++)\
    \ {\n        if (num % 10 == 0)\n            even++;\n        else\n         \
    \   odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0, odd = 0, temp;\n    temp = num % 10;\n    while(temp != 0) {\n\
    \        even++;\n        temp = temp / 10;\n    }\n    temp = num / 10;\n   \
    \ while(temp != 0) {\n        odd++;\n        temp = temp / 10;\n    }\n    return\
    \ std::make_tuple(even, odd);", "    long odd = 0, even = 0;\n    long temp =\
    \ num;\n    while (temp) {\n        if (temp % 2 == 0) {\n            even++;\n\
    \            temp = temp / 2;\n        } else {\n            odd++;\n        \
    \    temp = temp / 2;\n        }\n    }\n    return std::make_tuple(even, odd);",
  "    long even, odd, tmp;\n    even = 0;\n    odd = 1;\n    while (num > 0) {\n\
    \        tmp = num % 10;\n        num = num / 10;\n        if (tmp % 2 == 0) {\n\
    \            even = even * 10 + tmp;\n        } else {\n            odd = odd\
    \ * 10 + tmp;\n        }\n    }\n    return std::make_tuple(even, odd);", "  \
    \  int even = 0;\n    int odd = 0;\n    long long count = 0;\n    long long sum\
    \ = 0;\n\n    // initialize two integers and check if its even or odd\n    while\
    \ (num) {\n        int digit = num % 10;\n        if (digit % 2 == 0) {\n    \
    \        even++;\n        } else {\n            odd++;\n        }\n        sum\
    \ += digit;\n        num /= 10;\n    }\n\n    // if sum of digits is even, count\
    \ it even times, else odd times\n    if (sum % 2 == 0) {\n        even++;\n  \
    \  } else {\n        odd++;\n    }\n\n    // return tuple with number of even\
    \ and odd digits\n    return std::make_tuple(even, odd);", "    long even = num,\
    \ odd = 0, count = 0;\n    while ((even > 0) || (odd > 0)) {\n        odd += (even\
    \ % 2);\n        even /= 2;\n        count++;\n    }\n    return std::make_tuple(count,\
    \ odd);", "    long even = 0, odd = 0;\n    while (num > 0) {\n        if (num\
    \ % 2 != 0) {\n            even++;\n        }\n        num /= 2;\n    }\n    while\
    \ (num > 0) {\n        if (num % 2 == 0) {\n            odd++;\n        }\n  \
    \      num /= 2;\n    }\n    return std::make_tuple(even, odd);", "    long evenCount\
    \ = 0;\n    long oddCount = 0;\n    while (num > 0) {\n        // Count even digits\n\
    \        while (num > 0 && num % 2 == 0)\n            num = (num / 2);\n     \
    \   evenCount++;\n\n        // Count odd digits\n        while (num > 0 && num\
    \ % 2 != 0)\n            num = (num / 2);\n        oddCount++;\n    }\n    return\
    \ std::make_tuple(evenCount, oddCount);", "  int count = 0;\n  while (num != 0)\
    \ {\n    count = (num % 10 + count) % 2;\n    num = num / 10;\n  }\n  return std::make_tuple(count,\
    \ count + 1);", "    if(num < 0) {\n        return std::make_tuple(std::numeric_limits<long>::max(),\
    \ std::numeric_limits<long>::min());\n    }\n\n    long long ans = num;\n    long\
    \ long even = 0;\n    long long odd = 0;\n\n    while(ans >= 10) {\n        ans%=10;\n\
    \        even += ans;\n    }\n\n    while(ans > 0) {\n        ans%=10;\n     \
    \   odd += ans;\n    }\n\n    return std::make_tuple(even, odd);", "\t// code\
    \ here\n\t\n\treturn std::make_tuple(1, 1);", "  if (num < 0) return std::make_tuple(std::make_pair(-num,\
    \ -num), std::make_pair(-num, -num));\n  long res = 0;\n  long even = 1;\n  long\
    \ odd = 1;\n  while (num) {\n    if (num & 1) res += odd;\n    odd *= 10;\n  \
    \  if (num & 10) even += 1;\n    num >>= 1;\n  }\n  return std::make_tuple(res,\
    \ even);", "    long even = 0, odd = 0;\n\n    for (long i = 2; i <= num; i++)\n\
    \    {\n        if (num % i == 0)\n        {\n            even++;\n        }\n\
    \        else\n        {\n            odd++;\n        }\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long odd_count = 0;\n    long even_count = 0;\n    long temp =\
    \ 0;\n    long max_digit = num;\n    long min_digit = num;\n    long count = 0;\n\
    \    while (max_digit > 9) {\n        min_digit = num / 10;\n        max_digit\
    \ = num % 10;\n        if (max_digit % 2 == 0)\n            even_count++;\n  \
    \      else\n            odd_count++;\n        num = (max_digit + min_digit) /\
    \ 2;\n    }\n    if (max_digit == 9)\n        even_count++;\n    temp = even_count\
    \ + odd_count;\n    std::tuple<long, long> res = std::make_tuple(even_count, odd_count);\n\
    \    return res;", "    long odd_digits = 0;\n    long even_digits = 0;\n    while\
    \ (num > 0) {\n        if (num % 2 == 0) {\n            even_digits++;\n     \
    \   }\n        else {\n            odd_digits++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_digits, odd_digits);", "    if(num < 0)\
    \ {\n        throw std::invalid_argument(\"Input must not be negative.\");\n \
    \   }\n    long odd_digit = 0;\n    long even_digit = 0;\n    long digit = 0;\n\
    \    long pow = 0;\n    long sum = 0;\n    long count = 0;\n\n    while(num >\
    \ 0) {\n        pow = num / 10;\n        digit = pow;\n        sum += digit;\n\
    \        num %= 10;\n\n        if(digit%2 == 0) {\n            even_digit += digit;\n\
    \        }\n        else {\n            odd_digit += digit;\n        }\n     \
    \   count++;\n    }\n    \n    return std::make_tuple(even_digit, odd_digit);",
  "    if (num <= 0) return std::make_tuple(1, 1);\n    if (num % 2 == 0) return std::make_tuple(1,\
    \ 0);\n    return std::make_tuple(std::get<1>(num) / 2, std::get<0>(num) / 2);",
  "    // base case\n    if (num < 0)\n        return std::make_tuple(0, 0);\n   \
    \ // counting variables\n    long even = 0, odd = 0;\n    // count of even digits\n\
    \    while (num) {\n        // get remainder\n        long rem = num % 10;\n \
    \       // if remainder is even, increment even\n        if (rem % 2 == 0)\n \
    \           even++;\n        // otherwise increment odd\n        else\n      \
    \      odd++;\n        // divide num by 10\n        num /= 10;\n    }\n    //\
    \ return counts\n    return std::make_tuple(even, odd);", "    if (num <= 0) {\n\
    \        return std::make_tuple(1, 0);\n    }\n    int number_of_even = 0, number_of_odd\
    \ = 0;\n    while (num) {\n        int digit = num % 10;\n        if (digit %\
    \ 2 == 0) {\n            number_of_even += 1;\n        } else {\n            number_of_odd\
    \ += 1;\n        }\n        num /= 10;\n    }\n    return std::make_tuple(number_of_even,\
    \ number_of_odd);", "    long even = 0, odd = 0;\n    long temp = num;\n    while\
    \ (temp > 0) {\n        temp /= 10;\n        if (temp % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n    }\n    return std::make_tuple(even, odd);",
  "  long n = num % 10, even = 0, odd = 0;\n  while (n) {\n    if (n & 1)\n      odd++;\n\
    \    else\n      even++;\n    n /= 10;\n  }\n  return std::make_tuple(even, odd);",
  "    if (num <= 0)\n        return std::make_tuple(-1, -1);\n    long odd_count\
    \ = 0;\n    long even_count = 0;\n    while (num > 0) {\n        long curr = num\
    \ % 10;\n        num /= 10;\n        if (curr == 0)\n            even_count++;\n\
    \        else\n            odd_count++;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "  long odd = 0;\n  long even = 0;\n  while (num != 0) {\n   \
    \ num /= 10;\n    even++;\n    if (num % 2 == 0) {\n      odd++;\n    }\n  }\n\
    \  return std::make_tuple(even, odd);", "    long count1 = 0, count2 = 0;\n  \
    \  while (num > 0) {\n        long last_digit = num % 10;\n        int even =\
    \ (last_digit & 1) == 0;\n        int odd = (last_digit & 1) == 1;\n        num\
    \ = num / 10;\n        if (even == odd)\n            count1++;\n        else\n\
    \            count2++;\n    }\n    return std::make_tuple(count1, count2);", " \
    \   long even = 0;\n    long odd = 0;\n    while (num > 0) {\n        long r =\
    \ num % 10;\n        even = (even * 10) + r;\n        num/=10;\n    }\n    while\
    \ (num > 0) {\n        long r = num % 10;\n        odd = (odd*10) + r;\n     \
    \   num/=10;\n    }\n    return std::make_tuple(even, odd);", "    // Your code\
    \ here\n    if (num < 0) {\n        num = -num;\n        return std::make_tuple(-num,\
    \ num);\n    } else if (num == 0) {\n        return std::make_tuple(0, 0);\n \
    \   } else {\n        long even = 0, odd = 0;\n        long x = num;\n       \
    \ while(x > 0) {\n            if (x % 2 == 0) {\n                even++;\n   \
    \         }\n            x += x % 10;\n            x += x % 10;\n            x\
    \ += x % 10;\n            x += x % 10;\n        }\n        x = num;\n        while\
    \ (x > 0) {\n            if (x % 2 != 0) {\n                odd++;\n         \
    \   }\n            x += x % 10;\n            x += x % 10;\n            x += x\
    \ % 10;\n            x += x % 10;\n        }\n        return std::make_tuple(even,\
    \ odd);\n    }", "    long even = 0;\n    long odd = 0;\n    while (num != 0)\
    \ {\n        long remaining = num % 10;\n        if (remaining % 2 == 0) {\n \
    \           even++;\n        } else {\n            odd++;\n        }\n       \
    \ num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    long even =\
    \ 0, odd = 0;\n    while (num != 0) {\n        num = num / 10;\n        even =\
    \ even + 1;\n    }\n    num = num;\n    while (num != 0) {\n        num = num\
    \ / 10;\n        odd = odd + 1;\n    }\n    return std::make_tuple(even, odd);",
  "  long even = 0, odd = 0, lastdigit, digit = 0;\n  while (num) {\n    lastdigit\
    \ = num % 10;\n    digit = lastdigit / 2 + lastdigit % 2;\n    even = even * 10\
    \ + digit;\n    num = num / 10;\n    odd = odd * 10 + digit;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long even = 0;\n    long odd = 0;\n    // if input integer is even\
    \ add one to even\n    if (num % 2 == 0)\n        even++;\n    // if input integer\
    \ is odd add one to odd\n    else // if (num % 2 != 0)\n        odd++;\n    std::tuple<long,\
    \ long> ret = std::make_tuple(even, odd);\n    return ret;", "    long even =\
    \ 0;\n    long odd = 0;\n\n    while (num != 0) {\n        int digit = num % 10;\n\
    \n        if (digit % 2 == 0)\n            even++;\n        else\n           \
    \ odd++;\n\n        num /= 10;\n    }\n\n    return std::make_tuple(even, odd);",
  "    std::bitset<num> bs(num);\n    long even = std::count(bs.begin(), bs.end(),\
    \ 0);\n    long odd = std::count(bs.begin(), bs.end(), 1);\n    return std::make_tuple(even,\
    \ odd);", "    long even = num / 2;\n    long odd = num % 2;\n    return std::make_tuple(even,\
    \ odd);", "    long evenCount = 0;\n    long oddCount = 0;\n    while (num > 0)\
    \ {\n        long remainder = num % 10;\n        if (remainder == 0)\n       \
    \     evenCount++;\n        else\n            oddCount++;\n        num /= 10;\n\
    \    }\n    return std::make_tuple(evenCount, oddCount);", "  if (num < 0) {\n\
    \    return std::make_tuple(std::make_tuple(std::make_pair(-num, num), std::make_pair(0,\
    \ 0)), std::make_tuple(std::make_pair(0, 0), std::make_pair(0, 0)));\n  }\n\n\
    \  auto a = 0, b = num;\n  while (a < b) {\n    auto mid = a + (b - a) / 2;\n\
    \    if (mid % 2 == 0) a++;\n    else b--;\n  }\n\n  auto evens = a - 1;\n  auto\
    \ odds = b + 1;\n  return std::make_tuple(std::make_tuple(std::make_pair(a, evens),\
    \ std::make_pair(evens, odds)), std::make_tuple(std::make_pair(odds, b), std::make_pair(odds,\
    \ 0)))", "    long count = 0;\n    long even = 1L;\n    long odd = 1L;\n    while\
    \ (num > 0) {\n        long remainder = num % 10;\n        count++;\n        if\
    \ (remainder % 2 == 0)\n            even++;\n        else\n            odd++;\n\
    \        num = num / 10;\n    }\n    return (std::make_tuple(even, odd));", " \
    \ assert(num >= 0);\n  long even = 0, odd = 0, remainder = 0;\n  while (num >\
    \ 0) {\n    remainder = num % 10;\n    even += (remainder % 2 == 0);\n    odd\
    \ += (remainder % 2 == 1);\n    num = (num - remainder) / 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    long odd_count = 0;\n    long even_count = 0;\n    long temp =\
    \ 0;\n    int temp_len = 1;\n    while (num > 0) {\n        temp = num % 10;\n\
    \        temp = temp > 9 ? temp - 9 : temp;\n        odd_count = odd_count + temp_len;\n\
    \        even_count = even_count + temp_len + temp / 10;\n        temp_len = temp_len\
    \ + 1;\n        num = num / 10;\n    }\n    return std::make_tuple(even_count,\
    \ odd_count);", "    long long remainder = 0;\n    long long temp = 0;\n    long\
    \ long count = 0; // Number of odd digits\n    long long count1 = -1; // Number\
    \ of even digits\n    // Get least significant digit\n    temp = num % 10;\n \
    \   num = num / 10;\n    // Get first odd digit\n    remainder = num % 10;\n \
    \   // Check if that number is even or odd\n    if (remainder % 2 == 0) {\n  \
    \      // If the number is even. Add one to the count\n        count++;\n    }\n\
    \    if (count == 0) {\n        throw std::runtime_error(\"Error\");\n    }\n\
    \    // Get remaining digits\n    temp = num % 10;\n    num = num / 10;\n    //\
    \ If first odd digit is the last even digit. Add one to the count\n    if (count\
    \ == 1) {\n        // If the number is odd. Add one to the count\n        count1++;\n\
    \    }\n    // If first odd digit is not the last even digit. Add one to the count\n\
    \    if (count != 1) {\n        count1++;\n    }\n    // If count is equal to\
    \ 2 that means there was an extra digit. Add one to the count\n    if (count ==\
    \ 2) {\n        count++;\n    }\n    // If count is more than 2 that means there\
    \ were more than 1 extra digits. Add one to the count\n    if (count > 2) {\n\
    \        count++;\n    }\n    // The return tuple\n    return std::make_tuple(count,\
    \ count1);", "    long even = 0;\n    long odd = 0;\n    int pos = 0;\n    while\
    \ (num) {\n        long temp = num % 10;\n        if (temp % 2 == 0) {\n     \
    \       even++;\n        }\n        else {\n            odd++;\n        }\n  \
    \      num /= 10;\n        pos++;\n    }\n    return std::make_tuple(even, odd);",
  "    // write your code here\n    // Write a better name for your variable\n   \
    \ int even = 0;\n    int odd = 0;\n    long temp_num = (num * 10 + num);\n   \
    \ while (temp_num != 0) {\n        int temp = num % 10;\n        if (temp % 2\
    \ == 0) {\n            even++;\n        } else {\n            odd++;\n       \
    \ }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);", "   \
    \ // Complete this function\n    long evenCount = 0;\n    long oddCount = 0;\n\
    \    // Write your logic here\n    // return the tuple containing the results\n\
    \    return (evenCount, oddCount);", "\tlong even = 0, odd = 0;\n\tlong digit\
    \ = 0;\n\tint count = 0;\n\n\twhile (num) {\n\t\tdigit = num % 10;\n\t\tnum =\
    \ num / 10;\n\n\t\tif (digit % 2 == 0) {\n\t\t\teven++;\n\t\t}\n\n\t\tif (digit\
    \ % 2 != 0) {\n\t\t\todd++;\n\t\t}\n\t}\n\n\treturn std::make_tuple(odd, even);",
  "    long odd_counter = 0;\n    long even_counter = 0;\n    while (num > 0) {\n\
    \        if (num % 2 == 0) {\n            even_counter++;\n            num /=\
    \ 2;\n        } else {\n            odd_counter++;\n            num /= 2;\n  \
    \      }\n    }\n    return std::make_tuple(even_counter, odd_counter);", "  \
    \  // Write your code here\n    long even = 0, odd = 0, remainder = 0;\n    long\
    \ sum = 0;\n    while (num > 0) {\n        remainder = num % 10;\n        sum\
    \ += remainder;\n        num = num / 10;\n        even += sum;\n        odd +=\
    \ remainder;\n    }\n\n    return std::make_tuple(even, odd);", "    // Write\
    \ your code here\n    long sum =0;\n    long odd = 0;\n    long even = 0;\n  \
    \  long last;\n    long count = 1;\n    for (long i = num; i>0; i = i/2) {\n \
    \       sum+=i;\n        odd++;\n    }\n    for (long i = num; i<num; i = i/2)\
    \ {\n        sum += i;\n        even++;\n    }\n    last = sum;\n    sum = odd;\n\
    \    odd = even;\n    return std::make_tuple(sum, odd);", "    long even, odd,\
    \ temp;\n    if (num < 0) {\n        temp = abs(num);\n        even = temp / 2;\n\
    \        odd = (temp % 2 == 1) ? 1 : 2;\n    } else {\n        even = (num % 2\
    \ == 0) ? 1 : 0;\n        odd = (num %  2 == 1) ? 1 : 0;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    // Write your code here", "  int count[32];\n\
    \  int i;\n  long odd = 0, even = 0;\n  for (i = 0; i <= 31; i++) {\n    count[i]\
    \ = 0;\n  }\n  i = 31;\n  while (i != 0) {\n    count[i >> 5] ++;\n    i = (i\
    \ - 1) >> 5;\n  }\n  long long x = 0;\n  while (num) {\n    x = num % 10;\n  \
    \  num /= 10;\n    int digit = (int) x;\n    x = x - digit * 10;\n    if (digit)\
    \ {\n      odd += count[digit >> 5];\n    }\n    even += count[digit >> 5];\n\
    \  }\n  return std::make_tuple(even, odd);", "    if (num > 0) {\n        // We\
    \ start by dividing num by 10\n        // and store the remainder in remainder\
    \ variable.\n        long remainder = num % 10;\n        long even_rem = num /\
    \ 10;\n\n        // If remainder is zero and number of evens is less than or equal\
    \ to two\n        if (remainder == 0 && even_rem <= 2) {\n            return std::make_tuple(1,\
    \ 1);\n        }\n\n        // If remainder is zero and number of evens is greater\
    \ than two\n        if (remainder == 0 && even_rem > 2) {\n            return\
    \ std::make_tuple(1, 2);\n        }\n\n        // If remainder is not zero and\
    \ number of evens is less than or equal to 2\n        if (remainder != 0 && even_rem\
    \ <= 2) {\n            return std::make_tuple(2, 1);\n        }\n\n        //\
    \ If remainder is not zero and number of evens is greater than two\n        if\
    \ (remainder != 0 && even_rem > 2) {\n            return std::make_tuple(2, 2);\n\
    \        }\n\n        // If remainder is zero and number of evens is equal to\
    \ 2\n        if (remainder == 0 && even_rem == 2) {\n            return std::make_tuple(1,\
    \ 2);\n        }\n\n        // If remainder is zero and number of evens is greater\
    \ than 2\n        if (remainder == 0 && even_rem > 2) {\n            return std::make_tuple(2,\
    \ 2);\n        }\n\n        // If remainder is not zero and number of evens is\
    \ equal to 2\n        if (remainder != 0 && even_rem == 2) {\n            return\
    \ std::make_tuple(2, 1);\n        }\n\n        // If remainder is not zero and\
    \ number of evens is greater than 2\n        if (remainder != 0 && even_rem >\
    \ 2) {\n            return std::make_tuple(2, 1);\n        }\n    }\n\n    //\
    \ If the input is 0, return std::make_tuple(0, 0)\n    return std::make_tuple(0,\
    \ 0);", "    long zero = std::count(&num, 0, 0);\n    long even = std::count(&num,\
    \ 0, 1);\n    long odd = std::count(&num, 1, 1);\n    return std::make_tuple(even,\
    \ odd);", "  long even, odd;\n  while (num > 0) {\n    even = 0;\n    odd = 0;\n\
    \    while (num > 0) {\n      long digit = num % 10;\n      num /= 10;\n     \
    \ if (digit % 2 == 0) {\n        even += 1;\n      }\n      if (digit % 2 == 1)\
    \ {\n        odd += 1;\n      }\n    }\n    even *= 2;\n    odd *= 2;\n  }\n \
    \ return std::make_tuple(even, odd);", "  if (num < 0) {\n    throw std::invalid_argument(\"\
    Invalid Input\");\n  }\n  // If the number is even\n  if (num % 2 == 0) {\n  \
    \  return std::make_tuple(1, 0);\n  }\n  // If the number is odd\n  long odd_num\
    \ = 0;\n  while (num > 0) {\n    odd_num += (num & 1);\n    num >>= 1;\n  }\n\
    \  return std::make_tuple(odd_num, odd_num + 1);", "    long even = 0, odd = 0;\n\
    \    while (num) {\n        long temp = num % 10;\n        if (temp % 2 == 0)\
    \ {\n            even++;\n        } else {\n            odd++;\n        }\n  \
    \      num /= 10;\n    }\n    return std::make_tuple(even, odd);", "    if(num\
    \ % 2 == 0) return std::make_tuple(1, 0);\n    else return std::make_tuple(0,\
    \ 1);", "    assert(num >= 0);\n    long even = 0, odd = 0, temp = 0;\n    long\
    \ digit = num % 10;\n    while (digit > 0) {\n        if (digit % 2 == 0) {\n\
    \            even++;\n        } else {\n            odd++;\n        }\n      \
    \  temp++;\n        digit /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long sum = 0;\n    while (num) {\n        long current = num % 10;\n      \
    \  sum += current * 2 % 2;\n        num = num / 10;\n    }\n    return std::make_tuple(sum,\
    \ num);", "    long long ans = 0;\n    long long num0 = num;\n    do {\n     \
    \   num0 /= 10;\n        ans++;\n    } while (num0 > 0);\n    return std::make_tuple(ans,\
    \ ans % 2 == 0 ? 1 : 2);", "  std::stack<long> evens;\n  std::stack<long> odds;\n\
    \  long nums[] = { num };\n  // count the evens and odds\n  for (size_t i = 0;\
    \ i < sizeof(nums) / sizeof(nums[0]); ++i) {\n    if (nums[i] % 2 == 0) {\n  \
    \    evens.push(nums[i]);\n    } else {\n      odds.push(nums[i]);\n    }\n  }\n\
    \  // return the count\n  return std::make_tuple(odds.size(), evens.size());",
  "  long result = 0;\n  while (num > 0) {\n    long mod = num % 10;\n    if (mod\
    \ % 2 == 0)\n      result++;\n    num /= 10;\n  }\n  return std::make_tuple(result,\
    \ result + 1);", "    long count = 0;\n    long evenCount = 0;\n    long oddCount\
    \ = 0;\n    while (num) {\n        if (num % 2 == 0) {\n            evenCount++;\n\
    \        }\n        oddCount++;\n        num /= 10;\n    }\n    return std::make_tuple(evenCount,\
    \ oddCount);", "    long evens = 0;\n    long odds = 0;\n    for (long i = num;\
    \ i > 0; i /= 10) {\n        if (i % 2 == 0) {\n            evens++;\n       \
    \ }\n        else {\n            odds++;\n        }\n    }\n    return std::make_tuple(evens,\
    \ odds);", "    long odd = 0;\n    long even = 0;\n    while (num != 0) {\n  \
    \      long digit = num % 10;\n        num /= 10;\n        if (digit % 2 == 0)\
    \ {\n            even++;\n        }\n        else {\n            odd++;\n    \
    \    }\n    }\n    return std::make_tuple(even, odd);", "    // your code goes\
    \ here\n    int num_even = 0;\n    int num_odd = 0;\n    if (num <= 0) {\n   \
    \     return std::make_tuple(INT_MIN, INT_MIN);\n    }\n    while (num > 0) {\n\
    \        int digit = num % 10;\n        num = num / 10;\n        if (digit % 2\
    \ == 0) {\n            num_even++;\n        } else {\n            num_odd++;\n\
    \        }\n    }\n    return std::make_tuple(num_even, num_odd);", "\tif (num\
    \ == 0) {\n\t\treturn std::make_tuple(0, 0);\n\t}\n\tlong evenDig = 0, oddDig\
    \ = 0;\n\twhile (num != 0) {\n\t\tint curr = num % 10;\n\t\tevenDig += (curr !=\
    \ 0) ? 2 : 1;\n\t\toddDig += (curr != 1);\n\t\tnum = num / 10;\n\t}\n\treturn\
    \ std::make_tuple(evenDig, oddDig);", "  long counter = 0;\n  while (num) {\n\
    \    if (num % 2 == 0) {\n      ++counter;\n    }\n    num /= 10;\n  }\n  return\
    \ std::make_tuple(counter, counter + 1);", "  int count = 0;\n  while (num) {\n\
    \    int digit = num % 10;\n    num /= 10;\n    if (digit % 2 == 0) {\n      ++count;\n\
    \    }\n  }\n  return std::make_tuple(count, count + 1);", "    long even = 0,\
    \ odd = 0;\n    while (num > 0) {\n        if (num % 2 == 0)\n            even++;\n\
    \        else\n            odd++;\n        num /= 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 1;\n    long ans = num / 10;\n    while (ans)\
    \ {\n        ++even;\n        ans /= 10;\n    }\n    while (num > 0) {\n     \
    \   ++odd;\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0;\n    long odd = 0;\n    int n = num % 10;\n    num = num / 10;\n\
    \n    while (n) {\n        if (n % 2 == 0) {\n            even++;\n          \
    \  n = n / 10;\n        } else {\n            odd++;\n            n = n / 10;\n\
    \        }\n    }\n    return std::make_tuple(even, odd);", "  std::pair<long,\
    \ long> pair = std::make_pair(num, 0);\n  while (num >= 10) {\n    pair = std::make_tuple(pair.fst\
    \ * 10 + pair.second, pair.first);\n    num -= 10;\n  }\n  return pair;", "  \
    \  if (num < 0) {\n        throw std::domain_error(\"Negative numbers\");\n  \
    \  }\n    long ans = 0;\n    while (num > 0) {\n        ans += (num % 10) % 2\
    \ == 0 ? 1 : 0;\n        num = (num / 10) % 10;\n    }\n    return std::make_tuple(ans,\
    \ ans + 1);", "    if (num == 0 || num == 1) {\n        return std::make_tuple(1,\
    \ 1);\n    }\n    auto count = std::make_tuple(0, 0);\n    while (num) {\n   \
    \     auto digit = num % 10;\n        auto next = num / 10;\n        count[1]\
    \ += (digit & 1);\n        count[0] += (digit & 2);\n        num = next;\n   \
    \ }\n    return count;", "  // Write your code here.\n  int n = num;\n  int odd_count\
    \ = 0;\n  int even_count = 0;\n  while (n != 0) {\n    long d = n % 10;\n    even_count\
    \ += d & 1;\n    odd_count += !(d & 1);\n    n = n / 10;\n  }\n  return std::make_tuple(even_count,\
    \ odd_count);", "    long count = 0;\n    long odd = num % 10;\n    num /= 10;\n\
    \    long even = num % 10;\n    num /= 10;\n    while (num != 0) {\n        count\
    \ += even % 2 == 0 ? 1 : 0;\n        even /= 2;\n        odd /= 2;\n        num\
    \ /= 10;\n    }\n    return std::make_tuple(count, odd);", "    long odd = 0,\
    \ even = 0;\n    while (num > 0) {\n        long remainder = num % 10;\n     \
    \   if (remainder % 2 == 0) {\n            even++;\n        }\n        else {\n\
    \            odd++;\n        }\n        num = num / 10;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    auto s = std::to_string((long)num);\n    std::tuple<long, long>\
    \ odd_even_tuple = std::make_tuple(0, 0);\n    for (auto x : s) {\n        if\
    \ (x == '-') odd_even_tuple.first--;\n        else if (x == '1') odd_even_tuple.second++;\n\
    \        else if (x == '2') odd_even_tuple.first++;\n        else if (x == '3')\
    \ odd_even_tuple.second++;\n        else if (x == '4') odd_even_tuple.first++;\n\
    \        else if (x == '5') odd_even_tuple.second++;\n        else if (x == '6')\
    \ odd_even_tuple.first++;\n        else if (x == '7') odd_even_tuple.second++;\n\
    \        else if (x == '8') odd_even_tuple.first++;\n        else if (x == '9')\
    \ odd_even_tuple.second++;\n    }\n    return odd_even_tuple;", "  long odd_count\
    \ = 0;\n  long even_count = 0;\n  while(num > 0) {\n    int d = num % 10;\n  \
    \  num = num / 10;\n    if(d == 0) even_count++;\n    else odd_count++;\n  }\n\
    \  return std::make_tuple(even_count, odd_count);", "    int count = 0;\n    long\
    \ sum = 0;\n    while (num > 0) {\n        sum += (num % 10);\n        count++;\n\
    \        num /= 10;\n    }\n    int odd_count = 0;\n    int even_count = 0;\n\
    \    for (int i = 0; i < count; i++) {\n        if (i % 2 != 0) {\n          \
    \  even_count += 1;\n        } else {\n            odd_count += 1;\n        }\n\
    \    }\n    return std::make_tuple(even_count, odd_count);", "    if (num < 0)\
    \ {\n        throw std::invalid_argument(\"Negative numbers are not allowed\"\
    );\n    }\n    long odd = 0, even = 0;\n    while ((num = num / 10) > 0) {\n \
    \       long x = num % 10;\n        if (x % 2 == 0)\n            even++;\n   \
    \     else\n            odd++;\n    }\n    return std::make_tuple(even, odd);",
  "    long even = 0, odd = 0;\n    while (num > 0) {\n        num /= 10;\n      \
    \  even += num % 2 == 0;\n        odd += num % 2 == 1;\n    }\n    return std::make_tuple(even,\
    \ odd);", "    long even = 0, odd = 0;\n    while (num != 0) {\n        int digit\
    \ = num % 10;\n        num = num / 10;\n        if (digit % 2 == 0) {\n      \
    \      even++;\n        } else {\n            odd++;\n        }\n    }\n    return\
    \ std::make_tuple(even, odd);", "  long even = 0;\n  long odd = 0;\n  while (num\
    \ != 0) {\n    long temp = 0;\n    temp = num % 10;\n    if (temp % 2 == 0) {\n\
    \      even++;\n    } else {\n      odd++;\n    }\n    num = num / 10;\n  }\n\
    \  return std::make_tuple(even, odd);", "  // Declare and initialize variables\
    \ \n  long even_count = 0;\n  long odd_count = 0;\n\n  // Initialize even_count\
    \ and odd_count \n  while ( num > 0 ) {\n    if ( num % 2 == 0 ) {\n      even_count++;\n\
    \    }\n    if ( num % 2 == 1 ) {\n      odd_count++;\n    }\n    num/=2;\n  }\n\
    \  // Return the tuple \n  return std::make_tuple(even_count, odd_count);", " \
    \ if (num < 0) {\n    std::cerr << \"Error: Please enter a positive integer.\\\
    n\";\n    exit(1);\n  }\n\n  long even = 0, odd = 0, digit = 1, count = 0;\n \
    \ while (num) {\n    if (num % 2 == 0) {\n      even++;\n    }\n    else {\n \
    \     odd++;\n    }\n    digit++;\n    num /= 10;\n  }\n  return std::make_tuple(even,\
    \ odd);", "    if (num < 0) {\n        // Negative numbers will make no sense\
    \ here\n        // We do not need an else-statement\n        // Because num<0\n\
    \        return std::make_tuple(0, 0);\n    }\n    // For positive numbers\n \
    \   // Get number of digits\n    int digits = std::abs(num);\n    // For each\
    \ digit check if the rest is evenly divisible by 2\n    // If so, then its an\
    \ even number else odd\n    long odd = 0;\n    long even = 0;\n    for (int i\
    \ = 0; i < (digits - 1); i++) {\n        if (num % 2 != 0) {\n            even++;\n\
    \        } else {\n            odd++;\n        }\n        num /= 10;\n    }\n\
    \    return std::make_tuple(even, odd);", "    long even = 0, odd = 0;\n    while\
    \ (num > 0) {\n        long last_digit = num % 10;\n        if (last_digit % 2\
    \ == 0) {\n            even++;\n        }\n        else {\n            odd++;\n\
    \        }\n        num /= 10;\n    }\n    return std::make_tuple(even, odd);",
  "\tlong even = 0, odd = 0;\n\tfor (int i = 10; num > 0; i *= 10) {\n\t\tlong curr\
    \ = num % i;\n\t\tif (curr > 0) {\n\t\t\teven += 1;\n\t\t} else {\n\t\t\todd +=\
    \ 1;\n\t\t}\n\t\tnum = (num - curr) / i;\n\t}\n\treturn std::make_tuple(even,\
    \ odd);", "  long even = 0, odd = 0, digit = 0;\n  long val = num;\n\n  while\
    \ (val != 0) {\n    digit = val % 10;\n    if (digit % 2 == 0) {\n      even +=\
    \ 1;\n    } else {\n      odd += 1;\n    }\n    val = val / 10;\n  }\n\n  return\
    \ std::make_tuple(even, odd);", "    auto it = std::find_if(std::begin(num), std::end(num),\n\
    \                            [](int i){ return (i % 2 == 0); });\n    std::tuple<long,\
    \ long> ans;\n    ans.first = it - std::begin(num);\n    ans.second = std::distance<std::begin(num)>(num);\n\
    \    return ans;", "    assert(num <= 0);\n    if (num <= 0)\n        return std::make_tuple(0,\
    \ 0);\n\n    // To check even and odd digits. We first start dividing by 2 until\
    \ we get a number divisible by 2.\n    // If it does not, we start dividing by\
    \ 3 until we get a number divisible by 3.\n    // If it does not, we start dividing\
    \ by 4 until we get a number divisible by 4.\n    // If it does not, we start\
    \ dividing by 5 until we get a number divisible by 5.\n    // ... Keep doing that\
    \ until we get to the number, which we call a number for \"Odd digits\"\n    //\
    \ and number for \"Even digits\". These numbers are used to count the number of\
    \ even and odd digits.\n    long even_digits = 0;\n    long odd_digits = 0;\n\
    \    while (num > 0) {\n        if (num % 2 == 0) {\n            even_digits++;\n\
    \        }\n        if (num % 3 == 0) {\n            even_digits++;\n        }\n\
    \        if (num % 4 == 0) {\n            even_digits++;\n        }\n        if\
    \ (num % 5 == 0) {\n            even_digits++;\n        }\n        num /= 10;\n\
    \    }\n\n    // To count the number of odd digits. We start dividing by 2 until\
    \ we get a number divisible by 2.\n    // If it does not, we start dividing by\
    \ 3 until we get a number divisible by 3.\n    // If it does not, we start dividing\
    \ by 4 until we get a number divisible by 4.\n    // If it does not, we start\
    \ dividing by 5 until we get a number divisible by 5.\n    // ... Keep doing that\
    \ until we get to the number, which we call a number for \"Odd digits\"\n    //\
    \ and number for \"Even digits\". These numbers are used to count the number of\
    \ even and odd digits.\n    long odd_digits = 0;\n    long even_digits = 0;\n\
    \    while (num > 0) {\n        if (num % 2 == 0) {\n            odd_digits++;\n\
    \        }\n        if (num % 3 == 0) {\n            odd_digits++;\n        }\n\
    \        if (num % 4 == 0) {\n            odd_digits++;\n        }\n        if\
    \ (num % 5 == 0) {\n            odd_digits++;\n        }\n        num /= 10;\n\
    \    }\n    return std::make_tuple(even_digits, odd_digits);", "  std::bitset<num>\
    \ bs(num);\n  long even_c = std::count(bs.cbegin(), bs.cend(), 0);\n  long odd_c\
    \ = std::count(bs.cbegin(), bs.cend(), 1);\n  return std::make_tuple(even_c, odd_c);",
  "    if (num <= 0) {\n        return std::make_tuple(0, 0);\n    }\n    // Count\
    \ even digits\n    long ans = 0;\n    long num_digits = ceil(log(num) / log(10));\
    \ // Number of digits\n    for (int i = 0; i < num_digits; i++) {\n        //\
    \ Convert number from int to string\n        std::string num_str = std::to_string(num\
    \ / pow((double)10, i));\n        // Count digits\n        long num_digits_digits_count\
    \ = num_str.size();\n        // Check if number of digits is even\n        if\
    \ (num_digits_digits_count % 2 == 0) {\n            ans += 1;\n        }\n   \
    \     // Check if number of digits is odd\n        else {\n            ans +=\
    \ 2;\n        }\n        // Divide number by 10\n        num /= pow((double)10,\
    \ i);\n    }\n    return std::make_tuple(ans, num_digits);"]
stop_tokens:
- "\n}"
