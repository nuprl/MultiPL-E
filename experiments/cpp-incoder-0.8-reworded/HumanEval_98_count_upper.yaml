name: HumanEval_98_count_upper
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a string s, count the\
  \ number of uppercase vowels in even indices.\n// For example:\n// >>> count_upper((\"\
  aBCdEf\"))\n// (1)\n// >>> count_upper((\"abcdefg\"))\n// (0)\n// >>> count_upper((\"\
  dBBE\"))\n// (0)\nlong count_upper(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = count_upper;\n    assert(candidate((\"\
  aBCdEf\")) == (1));\n    assert(candidate((\"abcdefg\")) == (0));\n    assert(candidate((\"\
  dBBE\")) == (0));\n    assert(candidate((\"B\")) == (0));\n    assert(candidate((\"\
  U\")) == (1));\n    assert(candidate((\"\")) == (0));\n    assert(candidate((\"\
  EEEE\")) == (2));\n}\n"
completions: ["    long ans = 0;\n    for (auto c : s) {\n        if (c >= 'A' &&\
    \ c <= 'Z') {\n            ans += (c >= 'a' ? 1 : 0);\n        }\n    }\n    return\
    \ ans;", "    long sum = 0;\n    size_t i = 0;\n    while (i + 1 < s.size()) {\n\
    \        if (s[i] == s[i + 1] && s[i] == 'a' || s[i] == 'e' || s[i] == 'i' ||\
    \ s[i] == 'o' || s[i] == 'u') {\n            i++;\n            sum++;\n      \
    \  }\n        i++;\n    }\n    return sum;", "    // Complete this function\n\
    \    long ans=0;\n    for (int i=0;i<s.size();i++){\n        \n    }\n    return\
    \ ans;", "    long n = 0;\n    for (int i = 0; i < s.size(); ++i) {\n        char\
    \ c = s[i];\n        if (c >= 'a' && c <= 'z') {\n            c -= 'a';\n    \
    \        ++n;\n            if (c % 2) { // c is even\n                n += 1;\n\
    \            }\n        }\n    }\n    return n;", "\tlong count = 0;\n\tstd::stack<char>\
    \ st;\n\tstd::stack<char> st2;\n\tstd::stack<int> st3;\n\tfor (int i = 0; i <\
    \ s.size(); ++i) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u') {\n\t\t\tif (st3.empty()) {\n\t\t\t\tst.push(s[i]);\n\
    \t\t\t} else {\n\t\t\t\tif (s[i] == st.top()) {\n\t\t\t\t\tst.pop();\n\t\t\t\t\
    } else {\n\t\t\t\t\tst3.push(st.top());\n\t\t\t\t\tst2.push(s[i]);\n\t\t\t\t\t\
    st.push(s[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (s[i] == 'B' || s[i] == 'F'\
    \ || s[i] == 'M' || s[i] == 'R' || s[i] == 'S') {\n\t\t\tif (st2.empty()) {\n\t\
    \t\t\tst.push(s[i]);\n\t\t\t} else {\n\t\t\t\tif (s[i] == st2.top()) {\n\t\t\t\
    \t\tst2.pop();\n\t\t\t\t} else {\n\t\t\t\t\tst3.push(st2.top());\n\t\t\t\t\tst2.push(s[i]);\n\
    \t\t\t\t\tst.push(s[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (st2.empty()) {\n\
    \t\tcount += st.size();\n\t} else {\n\t\tcount += st2.size();\n\t}\n\treturn count;",
  "    // O(n)\n    // O(n)\n    // O(n)\n    long ans = 0;\n    int i = 0;\n    //\
    \ O(n)\n    // O(n)\n    for (auto it = s.cbegin(); it != s.cend(); ++it) {\n\
    \        if (std::isupper(*it)) {\n            if (i % 2 == 0) ans += 1;\n   \
    \         i += 2;\n        } else {\n            i += 1;\n        }\n    }\n \
    \   return ans;", "    assert(s.size() != 0);\n    long ans = 0, i = 0;\n    while\
    \ (i < s.size()) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i]\
    \ == 'O' || s[i] == 'U') {\n            ans++;\n        }\n        i++;\n    }\n\
    \    return ans;", "\t// Complete this function\n\tint count=0;\n\tfor(int i=0;\
    \ i<s.length(); i++){\n\t\tif(s[i]=='A'||s[i]=='E'||s[i]=='I'||s[i]=='O'||s[i]=='U')\n\
    \t\t\tcount++;\n\t}\n\t\n\treturn count;", "    if (s.size() == 0)\n        return\
    \ 0;\n    int count = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' || s[i] == 'I' ||\
    \ s[i] == 'i' || s[i] == 'O' || s[i] == 'o' || s[i] == 'U' || s[i] == 'u') {\n\
    \            count++;\n            if (i % 2 == 0)\n                count += 2;\n\
    \        }\n    }\n    return count;", "  long ret = 0;\n  int i = 0;\n  for (int\
    \ j = 0; j < (int)s.length(); j++) {\n    if (s[i] == 'a' && s[i + 1] == 'B')\
    \ {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'C') {\n     \
    \ ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'D') {\n      ret += 1;\n\
    \    } else if (s[i] == 'a' && s[i + 1] == 'E') {\n      ret += 1;\n    } else\
    \ if (s[i] == 'a' && s[i + 1] == 'F') {\n      ret += 1;\n    } else if (s[i]\
    \ == 'a' && s[i + 1] == 'G') {\n      ret += 1;\n    } else if (s[i] == 'a' &&\
    \ s[i + 1] == 'H') {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1]\
    \ == 'I') {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'J') {\n\
    \      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'K') {\n      ret\
    \ += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'L') {\n      ret += 1;\n \
    \   } else if (s[i] == 'a' && s[i + 1] == 'M') {\n      ret += 1;\n    } else\
    \ if (s[i] == 'a' && s[i + 1] == 'N') {\n      ret += 1;\n    } else if (s[i]\
    \ == 'a' && s[i + 1] == 'O') {\n      ret += 1;\n    } else if (s[i] == 'a' &&\
    \ s[i + 1] == 'P') {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1]\
    \ == 'Q') {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'R') {\n\
    \      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'S') {\n      ret\
    \ += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'T') {\n      ret += 1;\n \
    \   } else if (s[i] == 'a' && s[i + 1] == 'U') {\n      ret += 1;\n    } else\
    \ if (s[i] == 'a' && s[i + 1] == 'V') {\n      ret += 1;\n    } else if (s[i]\
    \ == 'a' && s[i + 1] == 'W') {\n      ret += 1;\n    } else if (s[i] == 'a' &&\
    \ s[i + 1] == 'X') {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1]\
    \ == 'Y') {\n      ret += 1;\n    } else if (s[i] == 'a' && s[i + 1] == 'Z') {\n\
    \      ret += 1;\n    } else if (s[i] == 'A' && s[i + 1] == 'B') {\n      ret\
    \ += 1;\n    } else if (s[i] == 'A' && s[i + 1] == 'C') {\n      ret += 1;\n \
    \   } else if (s[i] == 'A' && s[i + 1] == 'D') {\n      ret += 1;\n    } else\
    \ if (s[i] == 'A' && s[i + 1] == 'E') {\n      ret += 1;\n    } else if (s[i]\
    \ == 'A' && s[i + 1] == 'F') {\n      ret += 1;\n    } else if (s[i] == 'A' &&\
    \ s[i + 1] == 'G') {\n      ", "    long ans = 0;\n    for (std::size_t i = 0;\
    \ i != s.length(); ++i) {\n        if (i % 2 == 0 && s[i] == 'a') ans += 1;\n\
    \    }\n    return ans;", "    long result = 0;\n    for (char &c: s) {\n    \
    \    if ('A' <= c && c <= 'Z') {\n            if (c % 2 == 0)\n              \
    \  result++;\n        }\n    }\n    return result;", "    int vowels = 0;\n  \
    \  for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') {\n            vowels++;\n   \
    \     }\n    }\n    return vowels;", "    std::stack<bool> stack;\n    for (auto\
    \ c: s) {\n        if (std::isupper(c)) {\n            stack.push(false);\n  \
    \      }\n        else if (std::islower(c)) {\n            if (stack.empty())\
    \ {\n                stack.push(false);\n            }\n            else if (stack.top())\
    \ {\n                stack.push(false);\n            }\n            else {\n \
    \               stack.push(true);\n            }\n        }\n        else {\n\
    \            if (stack.top()) {\n                stack.push(false);\n        \
    \    }\n            else if (std::isalpha(c)) {\n                stack.push(true);\n\
    \            }\n        }\n    }\n    if (stack.empty()) {\n        return 0;\n\
    \    }\n    else {\n        return stack.size();\n    }", "    int count = 0;\n\
    \    for (int i = 0; s[i]; ++i)\n        if (s[i] == 'A' || s[i] == 'a')\n   \
    \         ++count;\n    return count;", "  // Write your code here\n  long ans\
    \ = 0;\n  for (int i = 2; i < s.size(); i++) {\n    if (s[i] == 'U') {\n     \
    \ if (s[i - 2] == 'E' && s[i - 1] == 'R') {\n        ans = ans + 1;\n      }\n\
    \    }\n  }\n  return ans;", "    long count = 0;\n    for (std::size_t i = 0;\
    \ i < s.length(); i++) {\n        if (i % 2 == 0) {\n            if (s[i] == 'A'\
    \ || s[i] == 'a') count++;\n            else if (s[i] == 'B' || s[i] == 'b') count++;\n\
    \            else if (s[i] == 'C' || s[i] == 'c') count++;\n            else if\
    \ (s[i] == 'D' || s[i] == 'd') count++;\n            else if (s[i] == 'E' || s[i]\
    \ == 'e') count++;\n            else if (s[i] == 'F' || s[i] == 'f') count++;\n\
    \            else if (s[i] == 'G' || s[i] == 'g') count++;\n            else if\
    \ (s[i] == 'H' || s[i] == 'h') count++;\n            else if (s[i] == 'I' || s[i]\
    \ == 'i') count++;\n            else if (s[i] == 'J' || s[i] == 'j') count++;\n\
    \            else if (s[i] == 'K' || s[i] == 'k') count++;\n            else if\
    \ (s[i] == 'L' || s[i] == 'l') count++;\n            else if (s[i] == 'M' || s[i]\
    \ == 'm') count++;\n            else if (s[i] == 'N' || s[i] == 'n') count++;\n\
    \            else if (s[i] == 'O' || s[i] == 'o') count++;\n            else if\
    \ (s[i] == 'P' || s[i] == 'p') count++;\n            else if (s[i] == 'Q' || s[i]\
    \ == 'q') count++;\n            else if (s[i] == 'R' || s[i] == 'r') count++;\n\
    \            else if (s[i] == 'S' || s[i] == 's') count++;\n            else if\
    \ (s[i] == 'T' || s[i] == 't') count++;\n            else if (s[i] == 'U' || s[i]\
    \ == 'u') count++;\n            else if (s[i] == 'V' || s[i] == 'v') count++;\n\
    \            else if (s[i] == 'W' || s[i] == 'w') count++;\n            else if\
    \ (s[i] == 'X' || s[i] == 'x') count++;\n            else if (s[i] == 'Y' || s[i]\
    \ == 'y') count++;\n            else if (s[i] == 'Z' || s[i] == 'z') count++;\n\
    \        }\n    }\n    return count;", "    // Write your code here.\n    long\
    \ cnt = 0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            cnt += 1;\n        }\n        else if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            cnt += 1;\n        }\n    }\n    return cnt;",
  "  int i = 0;\n  int counter = 0;\n  while (s[i]) {\n    if (s[i] >= 'a' && s[i]\
    \ <= 'z') counter++;\n    i++;\n  }\n  return counter;", "\tint i = 0;\n\twhile\
    \ (i < s.size()) {\n\t\tif (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i]\
    \ == 'o' || s[i] == 'u') {\n\t\t\treturn 1;\n\t\t}\n\t\ti++;\n\t}\n\treturn 0;",
  "    int low = 0;\n    int high = s.size();\n    long ans = 0;\n    while (low <\
    \ high) {\n        long curr = 0;\n        if (s[low] == s[low].toupper()) {\n\
    \            curr++;\n            low++;\n        }\n        if (s[low] == s[low].toupper())\
    \ {\n            curr++;\n            low++;\n        }\n        if (s[low] ==\
    \ s[low].toupper()) {\n            curr++;\n            low++;\n        }\n  \
    \      ans += curr;\n        if (s[low] == s[low].toupper()) {\n            low++;\n\
    \        }\n    }\n    return ans;", "    long ans = 0;\n    int even_index =\
    \ -1;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a') {\n\
    \            even_index++;\n        }\n        if (s[i] == 'e') {\n          \
    \  if (even_index % 2 == 0) {\n                ans++;\n            }\n       \
    \     even_index++;\n        }\n        if (s[i] == 'i') {\n            if (even_index\
    \ % 2 == 0) {\n                ans++;\n            }\n            even_index++;\n\
    \        }\n        if (s[i] == 'o') {\n            if (even_index % 2 == 0) {\n\
    \                ans++;\n            }\n            even_index++;\n        }\n\
    \        if (s[i] == 'u') {\n            if (even_index % 2 == 0) {\n        \
    \        ans++;\n            }\n            even_index++;\n        }\n    }\n\
    \    return ans;", "  // A map is used to store count of uppercase vowels in odd\
    \ indices.\n  std::map<int,int> vowel_count;\n  // Iterate over the string and\
    \ find count of uppercase vowels in even indices.\n  for (int i = 0; i < s.length();\
    \ i+=2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' ||\n\
    \        s[i] == 'U') {\n      if (vowel_count.find(i) == vowel_count.end()) {\n\
    \        vowel_count[i]++;\n      } else {\n        vowel_count[i]+=2;\n     \
    \ }\n    }\n  }\n  // Return the length of the map's value with the highest key,\
    \ i.e. the \n  // number of uppercase vowels.\n  return vowel_count.size() > vowel_count.begin()->first\
    \ ? \n    vowel_count.begin()->second : vowel_count.size();", "    // write your\
    \ code here\n    long count = 0;\n    for(int i=0; i<s.length(); i++)\n      \
    \  if(s[i]=='A' || s[i]=='E' || s[i]=='I' || s[i]=='O' || s[i]=='U')\n       \
    \     count++;\n    return count;", "    long ans = 0;\n    bool flag = false;\n\
    \    for (long i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u' || (s[i] >= 'A' && s[i] <=\
    \ 'Z') || (s[i] >= 'a' && s[i] <= 'z')) {\n            ans += 1;\n           \
    \ if (flag) {\n                ans += 1;\n            }\n            flag = true;\n\
    \        } else {\n            flag = false;\n        }\n    }\n    return ans;",
  "  assert(s.size() > 0);\n  long ans = 0, i = 0;\n  while (i < s.size()) {\n   \
    \ // Ignore letters other than letters and vowels\n    if (s[i] >= 'a' && s[i]\
    \ <= 'z') {\n      i += 1;\n    } else if (s[i] >= 'A' && s[i] <= 'Z') {\n   \
    \   i += 1;\n    } else if ((s[i] >= 'a' && s[i] <= 'z') ||\n               (s[i]\
    \ >= 'A' && s[i] <= 'Z') ||\n               (s[i] >= '0' && s[i] <= '9')) {\n\
    \      i += 1;\n    } else {\n      i += 1;\n      ans += 1;\n    }\n  }\n  return\
    \ ans;", "    long count = 0;\n    for (auto c : s) {\n        if ('A' <= c &&\
    \ c <= 'Z') {\n            count += (c -'A')%2==0;\n        } else {\n       \
    \     return count;\n        }\n    }\n    return count;", "    // Write your\
    \ code here.\n    long vowels = 0;\n    for (char c : s) {\n        if (c == 'a'\
    \ || c == 'e' || c == 'i' || c == 'o' || c == 'u')\n            vowels++;\n  \
    \  }\n    return vowels;", "    long count = (long) s.find_first_not_of(\n   \
    \     { 65, 97, 102,\n          97,\n          114,\n          116,\n        \
    \  101,\n          32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32,\
    \ 32, 32, 32, 32, ", "  int vowels[26] = {0};\n  int count = 0;\n  for (int i\
    \ = 0; i < s.size(); i++) {\n    if ((s.at(i) & 0x20) != 0) {\n      vowels[s.at(i)\
    \ & 0x20]++;\n    }\n  }\n  for (int i = 0; i < 26; i++) {\n    if (vowels[i]\
    \ != 0) {\n      count++;\n    }\n  }\n  return count;", "  // Your code here\n\
    \  std::bitset<64> bset(s.begin(), s.end());\n  long sum = 0;\n  for (int i =\
    \ 0; i < s.size(); i++) {\n    if (bset[i])\n      sum++;\n  }\n  return sum;",
  "    long count=0;\n    long even_index=0;\n    for(int i=0;i<s.length();i++) {\n\
    \        if(s[i]>='a' && s[i]<='z') {\n            if(even_index%2==0) {\n   \
    \             count++;\n            }\n            even_index++;\n        }\n\
    \    }\n    return count;", "    // Your code here\n    long res = 0;\n    for(int\
    \ i = 0; i<s.length(); i++){\n        if(s[i] >= 'a' && s[i] <= 'z'){\n      \
    \      if (i % 2 == 0){\n                res += 1;\n            }\n        }\n\
    \    }\n    return res;", "    long count = 0;\n    for (int i = 0; i < (int)s.length();\
    \ ++i) {\n        if (s[i] >= 'a' && s[i] <= 'z')\n            count++;\n    \
    \    if (s[i] == 'a' || s[i] == 'A')\n            count--;\n    }\n    return\
    \ count;", "    if (s.length() < 2) {\n        return 0;\n    }\n    long counter\
    \ = 0;\n    for (long i = 1; i < s.length(); ++i) {\n        if (s[i] == 'B')\
    \ {\n            counter++;\n        } else if (s[i] == 'E') {\n            counter++;\n\
    \            if (s[i] == 'E') {\n                counter++;\n            }\n \
    \       } else if (s[i] == 'S') {\n            counter++;\n        } else if (s[i]\
    \ == 'V') {\n            counter++;\n        } else if (s[i] == 'A') {\n     \
    \       counter++;\n        } else if (s[i] == 'Z') {\n            counter++;\n\
    \        } else if (s[i] == 'C') {\n            counter++;\n        } else if\
    \ (s[i] == 'D') {\n            counter++;\n        } else if (s[i] == 'F') {\n\
    \            counter++;\n        } else if (s[i] == 'G') {\n            counter++;\n\
    \        }\n    }\n    return counter;", "  // Write your code here.\n  long count\
    \ = 0;\n  for (size_t i = 0; i < s.length(); i++) {\n    if (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n      count++;\n    }\n  }\n  return count;", "    long ans = 0;\n\
    \    int i = 0;\n    while (i < s.size()) {\n        switch (s[i]) {\n       \
    \     case 'A':\n            case 'E':\n            case 'I':\n            case\
    \ 'O':\n            case 'U':\n                ans++;\n            break;\n  \
    \          default:\n                i++;\n            break;\n        }\n   \
    \     i++;\n    }\n    return ans;", "    long ans = 0;\n    for (std::size_t\
    \ i = 1; i < s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i]\
    \ == 'I' || s[i] == 'O' || s[i] == 'U') {\n            ans++;\n        }\n   \
    \ }\n    return ans;", "    long ans = 0;\n    // Iterate from second char to\
    \ last.\n    for (auto it = std::next(s.begin()); it != s.end(); ++it) {\n   \
    \     if (*it >= 'A' && *it <= 'Z') {\n            ++ans;\n        }\n    }\n\
    \    return ans;", "    if (s.length() == 0) {\n        return 0;\n    }\n   \
    \ long ret = 0;\n    for (long i = 0; i < s.length(); ++i) {\n        if (isupper(s[i])\
    \ && (i % 2 == 0)) {\n            ret++;\n        }\n    }\n    return ret;",
  "    long count = 0;\n    long len = s.length();\n    for (long i = 0; i < len;\
    \ i++) {\n        if (isupper(s[i])) {\n            if (i % 2 == 0) {\n      \
    \          count++;\n            }\n        }\n    }\n    return count;", "  \
    \  long ans = 0;\n    for (auto itr = s.begin(); itr != s.end(); ++itr) {\n  \
    \      if (*itr == 'a' || *itr == 'e' || *itr == 'i' || *itr == 'o' || *itr ==\
    \ 'u') {\n            ans += 1;\n        }\n    }\n    return ans;", "    long\
    \ count = 0;\n    int n = s.size();\n    std::string vowels = \"aeiou\";\n   \
    \ for (int i = 0; i < n; i++) {\n        if (s[i] == 'e' || s[i] == 'E') {\n \
    \           if (s[i] == 'e')\n                i = i + 2;\n        }\n        if\
    \ (s[i] == 'a' || s[i] == 'A')\n            i = i + 1;\n        if (s[i] == 'u'\
    \ || s[i] == 'U')\n            i = i + 1;\n        if (s[i] == 'A' || s[i] ==\
    \ 'a')\n            i = i + 1;\n        if (s[i] == 'U' || s[i] == 'u')\n    \
    \        i = i + 1;\n        if (s[i] == 'i' || s[i] == 'I')\n            i =\
    \ i + 1;\n        if (s[i] == 'O' || s[i] == 'o')\n            i = i + 1;\n  \
    \      if (s[i] == 'a' || s[i] == 'O' || s[i] == 'o')\n            i = i + 1;\n\
    \        if (s[i] == 'E' || s[i] == 'e')\n            i = i + 1;\n        if (s[i]\
    \ == 'I' || s[i] == 'i')\n            i = i + 1;\n        if (s[i] == 'o' || s[i]\
    \ == 'O' || s[i] == 'o')\n            i = i + 1;\n        if (s[i] == 'U' || s[i]\
    \ == 'u')\n            i = i + 1;\n        if (s[i] == 'U' || s[i] == 'U')\n \
    \           count = count + 1;\n    }\n    if (count % 2 != 0)\n        return\
    \ 0;\n    return count;", "    // code here\n    return 0;", "    long ans = 0;\n\
    \    for (size_t i = 0; i < s.size(); i+=2) {\n        if (s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            ans++;\n \
    \   }\n    return ans;", "  if (s.size() == 0) return 0;\n  long sum = 0;\n  for\
    \ (auto c : s)\n    if (c == 'A' || c == 'a' || c == 'E' || c == 'e' || c == 'I'\
    \ || c == 'i' || c == 'O' || c == 'o' || c == 'U' || c == 'u')\n      sum += 1;\n\
    \  return sum;", "    long count = 0;\n    for (auto c: s) {\n        if (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ++count;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for (auto c :\
    \ s) {\n        if ('a'<= c && c<= 'z' && c!= 'A' && c!= 'a' && c!= 'E' && c!=\
    \ 'e') {\n            count++;\n        }\n    }\n    return count;", "    //\
    \ Your code here\n    int i, count = 0;\n    for (i = 0; i < s.size(); i++) {\n\
    \        if ((i % 2) == 0 && s[i] >= 'a' && s[i] <= 'z') {\n            count++;\n\
    \        }\n    }\n    return count;", "    assert(s.size() > 1);\n    long ans\
    \ = 0;\n    for (size_t i = 0; i + 2 < s.size(); i += 2) {\n        if (s[i] >=\
    \ 'a' && s[i] <= 'z') {\n            if (s[i] == 'A' || s[i] == 'a') {\n     \
    \           ans++;\n            }\n        }\n    }\n    return ans;", "    assert(s.size()\
    \ > 0);\n    long ans = 0;\n    long count = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] != toupper(s[i])) {\n            count++;\n       \
    \     if (i % 2 == 0)\n                ans += count;\n        }\n    }\n    return\
    \ ans;", "        long count = 0;\n        for (int i = 0; i < s.length(); i++)\n\
    \                if (s[i] >= 'A' && s[i] <= 'Z' && s[i] != s[i + 1]) {\n     \
    \                   count++;\n                }\n        return count;", "   \
    \ long evenCount = 0;\n    for (char c : s) {\n        if ((c == 'A') || (c ==\
    \ 'a') || (c == 'E') || (c == 'e') || (c == 'I') || (c == 'i') || (c == 'O') ||\
    \ (c == 'o') || (c == 'U') || (c == 'u')) {\n            evenCount++;\n      \
    \  }\n    }\n    return evenCount;", "    int count = 0;\n    long len = s.size();\n\
    \    for (int i = 0; i < len; i++) {\n        if ((i & 1) == 0) {\n          \
    \  if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O'\n            \
    \    || s[i] == 'U') {\n                count++;\n            }\n        }\n \
    \   }\n    return count;", "  std::unordered_set<char> vowels{'a', 'e', 'i', 'o',\
    \ 'u', 'A', 'E', 'I', 'O', 'U'};\n  for (auto c : s) {\n    if (vowels.find(c)\
    \ != vowels.end())\n      continue;\n    long pos = s.find(c);\n    int i = 0;\n\
    \    while ((pos -= i + 1) > 0)\n      if (s[i] != c) break;\n    i += 2;\n  \
    \  if (pos > 0)\n      return i;\n  }\n  return s.size();", "        long count\
    \ = 0;\n        for (int i = 0; i < s.size(); i++)\n                if (s[i] >=\
    \ 'A' && s[i] <= 'Z')\n                        count++;\n        return count;",
  "    long count = 0;\n    int length = s.size();\n    for (int i = 0; i < length\
    \ / 2; i++)\n        if (s[i] == 'A' && s[i + 1] == 'a')\n            count++;\n\
    \    return count;", "    long ans = 0;\n    for (long i = 0; i < s.length();\
    \ i++) {\n        ans += s[i] == s[i]?1:0;\n    }\n    return ans;", '    // code
    here', "    assert(s.size() > 0);\n    long ans = 0;\n    for (char c : s) {\n\
    \        if (std::isupper(c))\n            ans++;\n    }\n    return ans;", " \
    \   long n = 0; //number of uppercase vowels encountered even indices\n    for(unsigned\
    \ int i = 0; i < s.size(); i++) {\n        if((int)s[i]>=65 && (int)s[i]<=90)\n\
    \            n++;\n    }\n    return n;", "  std::unordered_map<char, int> vowels;\n\
    \  std::string vowel_string(\"aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ\"\
    );\n  for (char c : s) {\n    vowels[c]++;\n  }\n  long count = 0;\n  for (char\
    \ c : s) {\n    if (vowels[c] % 2 != 0) {\n      count++;\n    }\n  }\n  return\
    \ count;", "    long n = s.length();\n    // You can do it by one loop, if you\
    \ want.\n    // You can do it by one loop with a counter, if you want.\n    //\
    \ But I prefer a recursive solution. \n    // I feel that's more clear.\n    //\
    \ And it also works for arbitrarily long strings.\n    for (long i = 0; i < n;\
    \ ++i) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            n = n - 1; //\
    \ decrement the number of uppercase vowels.\n            if (n % 2 == 0) { //\
    \ even number of uppercase vowels.\n                n /= 2; // divide by 2 so\
    \ that count starts at 1.\n            }\n        }\n    }\n    return n;", " \
    \   long count = 0;\n    long len = s.length();\n    for (int i = 0; i < len;\
    \ i += 2) {\n        if (s[i] == 'a' && s[i + 1] == 'A') {\n            count\
    \ += 1;\n        }\n    }\n    return count;", "    long cnt = 0;\n    for(int\
    \ i=0;i<s.size();i++) {\n        if(s[i]==('A'||'a')) {\n            cnt++;\n\
    \        }\n    }\n    return cnt;", "    long ans=0;\n    for (int i=0; i<s.length();\
    \ i++) {\n        if (s[i]>='a' && s[i]<='z') {\n            if (s[i]+1<='z' &&\
    \ s[i]+1!='a' && s[i]+1!='e' && s[i]+1!='i' && s[i]+1!='o'\n                &&\
    \ s[i]+1!='u' && s[i]+1!='y')\n                ans++;\n        }\n    }\n    return\
    \ ans;", "    long ans = 0;\n    // If string length is odd, return 0.\n    if\
    \ (s.size() % 2)\n        return 0;\n    for (long i = 0; i < s.size() - 1; i\
    \ += 2) {\n        // If s[i] and s[i+1] is vowel.\n        if (s[i] == 'A' &&\
    \ s[i + 1] == 'a')\n            ans++;\n        if (s[i] == 'B' && s[i + 1] ==\
    \ 'b')\n            ans++;\n        if (s[i] == 'C' && s[i + 1] == 'c')\n    \
    \        ans++;\n        if (s[i] == 'D' && s[i + 1] == 'd')\n            ans++;\n\
    \        if (s[i] == 'E' && s[i + 1] == 'e')\n            ans++;\n        if (s[i]\
    \ == 'F' && s[i + 1] == 'f')\n            ans++;\n        if (s[i] == 'G' && s[i\
    \ + 1] == 'g')\n            ans++;\n    }\n    return ans;", "  int count = 0;\n\
    \  for (int i = 0; i < s.size(); i++) {\n    if (s[i] != s[i][0]) {\n      ++count;\n\
    \    }\n    if (s[i] == 'E' && s[i + 1] == 'E') {\n      count += 2;\n    }\n\
    \  }\n  return count;", "    // Your code here\n    long count = 0;\n    for(int\
    \ i=0; i<s.size(); i++){\n        if(s[i] == 'a' || s[i] == 'A'){\n          \
    \  count++;\n        }\n    }\n    return count;", "    long count=0; // initialize\
    \ to 0\n    for(size_t i=0;i<s.size();i++)\n        count=count + (s[i]>=97 &&\
    \ s[i]<=122)? 1 : 0;\n    return count;", "    long n = s.size();\n    // Return\
    \ sum of even-indexed uppercase vowels.\n    long sum = 0;\n    for (long i =\
    \ 0; i < n; i++) {\n        char c = s[i];\n        // If an even index is an\
    \ uppercase vowel, then add 1 to\n        // the sum.\n        if ((i + 1) % 2\
    \ == 0 && std::isupper(c)) {\n            sum += 1;\n        }\n    }\n    return\
    \ sum;", "    long ans = 0;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] == 'A') {\n            ans++;\n        }\n        else if (s[i] ==\
    \ 'a') {\n            ans++;\n        }\n        else if (s[i] == 'B') {\n   \
    \         ans++;\n        }\n        else if (s[i] == 'b') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'C') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'c') {\n            ans++;\n        }\n        else if\
    \ (s[i] == 'D') {\n            ans++;\n        }\n        else if (s[i] == 'd')\
    \ {\n            ans++;\n        }\n        else if (s[i] == 'E') {\n        \
    \    ans++;\n        }\n        else if (s[i] == 'e') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'F') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'f') {\n            ans++;\n        }\n        else if\
    \ (s[i] == 'G') {\n            ans++;\n        }\n        else if (s[i] == 'g')\
    \ {\n            ans++;\n        }\n        else if (s[i] == 'H') {\n        \
    \    ans++;\n        }\n        else if (s[i] == 'h') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'I') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'i') {\n            ans++;\n        }\n        else if\
    \ (s[i] == 'J') {\n            ans++;\n        }\n        else if (s[i] == 'j')\
    \ {\n            ans++;\n        }\n        else if (s[i] == 'K') {\n        \
    \    ans++;\n        }\n        else if (s[i] == 'k') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'L') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'l') {\n            ans++;\n        }\n        else if\
    \ (s[i] == 'M') {\n            ans++;\n        }\n        else if (s[i] == 'm')\
    \ {\n            ans++;\n        }\n        else if (s[i] == 'N') {\n        \
    \    ans++;\n        }\n        else if (s[i] == 'n') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'O') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'o') {\n            ans++;\n        }\n        else if\
    \ (s[i] == 'P') {\n            ans++;\n        }\n        else if (s[i] == 'p')\
    \ {\n            ans++;\n        }\n        else if (s[i] == 'Q') {\n        \
    \    ans++;\n        }\n        else if (s[i] == 'q') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'R') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'r') {\n            ans++;\n        }\n        else if\
    \ (s[i] == 'S') {\n            ans++;\n        }\n        else if (s[i] == 's')\
    \ {\n            ans++;\n        }\n        else if (s[i] == 'T') {\n        \
    \    ans++;\n        }\n        else if (s[i] == 't') {\n            ans++;\n\
    \        }\n        else if (s[i] == 'U') {\n            ans++;\n        }\n \
    \       else if (s[i] == 'u') {\n            ans++;\n", "    long count = 0;\n\
    \    // use c instead of i and avoid the overflow problem\n    for (int c = 0;\
    \ c < s.length(); c++)\n        if (s[c] >= 'A' && s[c] <= 'Z') count++;\n   \
    \ return count;", "  // Your code here\n  assert(s.length() >= 2);\n  int count\
    \ = 0;\n  for (int i = 0; i < s.length() - 1; i += 2) {\n    char c = s[i];\n\
    \    bool isUpper = true;\n    for (int j = i; j < s.length(); j += 2) {\n   \
    \   char d = s[j];\n      if ((c != d) && (c != toupper(d))) {\n        isUpper\
    \ = false;\n        break;\n      }\n    }\n    if (isUpper)\n      count++;\n\
    \  }\n  assert(count == 0 || count == 1);\n  return count;", "    long n = s.size();\n\
    \    if (n == 0) return 0;\n    long count = 0; // the number of uppercase vowels\
    \ in even indices\n    long pos = 0, start = 0, end = 0; // track the current\
    \ position and index range\n    while (pos < n) {\n        if (s[pos] == 'A' ||\
    \ s[pos] == 'a') {\n            ++count;\n            start = pos;\n        }\n\
    \        if (s[pos] == 'E' || s[pos] == 'e') {\n            end = pos;\n     \
    \       break;\n        }\n        if (s[pos] == 'B' || s[pos] == 'b' || s[pos]\
    \ == 'B' || s[pos] == 'b' || s[pos] == 'B') {\n            ++count;\n        \
    \    pos = end;\n        }\n        ++pos;\n    }\n    return (n - start) / 2;",
  "    assert(s.size() > 0);\n    long count = 0;\n    for (int i = 0; i < (int)s.size();\
    \ i++) {\n        char c = s[i];\n        if (c >= 'A' && c <= 'Z') {\n      \
    \      count += 1;\n        } else if (c >= 'a' && c <= 'z') {\n            count\
    \ += 1;\n        }\n    }\n    return count;", "  long ans = 0;\n  assert(s.size()\
    \ <= 100000);\n  char ch;\n  for (int i = 0; i < s.size(); i++) {\n    ch = s[i];\n\
    \    if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {\n  \
    \    ans++;\n    }\n  }\n  return ans;", "    int n = s.length();\n    // Iterate\
    \ through every even index\n    for (int i = 0, odd = 0; i < n; i += 2, odd++)\
    \ {\n        // If the current character is upper case, increment the counter\n\
    \        if (s[i] == 'A' && s[i + 1] == 'A') {\n            std::cout << \"(\"\
    \ << odd << \")\" << std::endl;\n        }\n    }\n    // Return the count of\
    \ even indices. If none of the even indices have a uppercase vowel, return 0.\n\
    \    return odd > 0 ? odd : 0;", "\t// write your code here\n\tlong count = 0;\n\
    \tfor (int i = 0; i <= s.size(); i++) {\n\t\tif (s[i] == 'a' || s[i] == 'A')\n\
    \t\t\tcount++;\n\t}\n\treturn count;", "    long count = 0;\n    int size = s.size();\n\
    \    for (int i = 0; i < size; i++) {\n        if (s[i] == 'a' || s[i] == 'e'\
    \ || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n            count++;\n    }\n\
    \    return count;", "\tlong ans = 0;\n\tfor (auto &i : s)\n\t\tif (i == 'A' ||\
    \ i == 'E' || i == 'I' || i == 'O' || i == 'U')\n\t\t\tans += 1;\n\treturn ans;",
  "  // Return the number of uppercase vowels.\n  // You may assume that the string\
    \ contains only lowercase alphabets,\n  // and that the string length is less\
    \ than 100\n  long ans = 0;\n  assert(s.length() <= 100 && s.length() >= 1);\n\
    \n  // Check for even\n  for (int i = 0; i < s.length(); i++) {\n    if (s[i]\
    \ == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n      ans\
    \ += 1;\n  }\n  return ans;", "    long cnt = 0;\n    for (auto it = s.begin();\
    \ it != s.end(); it++) {\n        if (*it == 'a' || *it == 'e' || *it == 'i' ||\
    \ *it == 'o' || *it == 'u') {\n            ++cnt;\n        }\n    }\n    return\
    \ cnt;", "    long ans = 0;\n    for (int i = 0; i < s.size(); i++) {\n      \
    \  if (s[i] >= 'A' && s[i] <= 'Z') {\n            ans += 1;\n            if (i\
    \ % 2 == 0) {\n                ans -= 1;\n            }\n        }\n    }\n  \
    \  return ans;", "\tlong count = 0;\n\tassert(s.size() % 2 == 0);\n\tfor (long\
    \ i = 0; i < s.size(); i += 2) {\n\t\tif (s[i] == 'A' && s[i + 1] == 'U') {\n\t\
    \t\tcount++;\n\t\t}\n\t}\n\treturn count;", "    std::stack<char> stack;\n   \
    \ long ans = 0;\n    for (char c: s) {\n        if (std::isupper(c)) {\n     \
    \       if (stack.empty())\n                stack.push(c);\n            else\n\
    \                stack.push(c);\n        }\n        if (std::islower(c)) {\n \
    \           if (stack.empty())\n                stack.push(c);\n            else\
    \ if (stack.top() == 'a')\n                ans++;\n            else\n        \
    \        ans--;\n        }\n    }\n    if (stack.empty())\n        ans = 0;\n\
    \    return ans;", "  long count = 0;\n  for (int i = 0; i < s.size(); i++) {\n\
    \    if ((s[i] >= 'a' && s[i] <= 'z') || (s[i] >= 'A' && s[i] <= 'Z')) {\n   \
    \   count++;\n    }\n  }\n  return count;", "  int count = 0;\n  for (int i =\
    \ 0; i < s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') count++;\n    if\
    \ (s[i] >= 'a' && s[i] <= 'z') count++;\n  }\n  return count;", "  assert(s.size()\
    \ > 0);\n  long result = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i]\
    \ > 'a' && s[i] < 'z')\n      result += 1;\n  }\n  return result;", "        long\
    \ ans = 0;\n        std::string vowels = \"aeiouAEIOU\";\n        for (long i=0;\
    \ i<s.length(); i++) {\n                bool isVowel = false;\n              \
    \  for (char c: vowels) {\n                        if (s[i] == c) {\n        \
    \                        isVowel = true;\n                                break;\n\
    \                        }\n                }\n                if (isVowel) {\n\
    \                        ans += 1;\n                }\n        }\n        return\
    \ ans;", "    // Your code here\n    long count=0, i=0;\n    while(i<s.length()){\n\
    \        if(s[i]+i%2==s[i]+i)\n            count++;\n        i++;\n    }\n   \
    \ return count;", "    // Write your code here.\n    long sum = 0;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(s[i] == 'a') {\n            if(s[i\
    \ + 1] == 'B' || s[i + 1] == 'C' || s[i + 1] == 'D' || s[i + 1] == 'E' || s[i\
    \ + 1] == 'F') {\n                sum = sum + 1;\n            }\n        } else\
    \ if(s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n           \
    \ if(s[i + 1] == 'B' || s[i + 1] == 'C' || s[i + 1] == 'D' || s[i + 1] == 'E'\
    \ || s[i + 1] == 'F') {\n                sum = sum + 1;\n            }\n     \
    \   } else if(s[i] == 'A') {\n            if(s[i + 1] == 'B' || s[i + 1] == 'C'\
    \ || s[i + 1] == 'D' || s[i + 1] == 'E' || s[i + 1] == 'F') {\n              \
    \  sum = sum + 1;\n            }\n        } else if(s[i] == 'O') {\n         \
    \   if(s[i + 1] == 'B' || s[i + 1] == 'C' || s[i + 1] == 'D' || s[i + 1] == 'E'\
    \ || s[i + 1] == 'F') {\n                sum = sum + 1;\n            }\n     \
    \   } else if(s[i] == 'u') {\n            if(s[i + 1] == 'B' || s[i + 1] == 'C'\
    \ || s[i + 1] == 'D' || s[i + 1] == 'E' || s[i + 1] == 'F') {\n              \
    \  sum = sum + 1;\n            }\n        }\n    }\n    return sum;", "    long\
    \ count = 0;\n    long n = s.size();\n    for(int i = 0; i < n; i++) {\n     \
    \   if(s.at(i) == 'a') {\n            for(int j = 0; j < i; j++) {\n         \
    \       if(s.at(j) == 'e') {\n                    count++;\n                }\n\
    \            }\n        }\n    }\n    return count;", "    long ans = 0;\n   \
    \ for (long i = 0; i < s.length(); ++i) {\n        if (isupper(s[i]))\n      \
    \      ans++;\n        else if (s[i] == 'A')\n            ans += 2;\n        else\
    \ if (s[i] == 'E')\n            ans += 2;\n        else if (s[i] == 'I')\n   \
    \         ans += 1;\n        else if (s[i] == 'O')\n            ans += 1;\n  \
    \      else if (s[i] == 'U')\n            ans += 1;\n    }\n    return ans;",
  "  long ans = 0;\n  for (auto c : s) {\n    if (c == 'A' || c == 'a') {\n      ans++;\n\
    \    } else if (c == 'B' || c == 'b') {\n      ans++;\n    } else if (c == 'C'\
    \ || c == 'c') {\n      ans++;\n    } else if (c == 'D' || c == 'd') {\n     \
    \ ans++;\n    } else if (c == 'E' || c == 'e') {\n      ans++;\n    } else if\
    \ (c == 'F' || c == 'f') {\n      ans++;\n    } else if (c == 'G' || c == 'g')\
    \ {\n      ans++;\n    } else if (c == 'H' || c == 'h') {\n      ans++;\n    }\
    \ else if (c == 'I' || c == 'I') {\n      ans++;\n    } else if (c == 'J' || c\
    \ == 'j') {\n      ans++;\n    } else if (c == 'K' || c == 'k') {\n      ans++;\n\
    \    } else if (c == 'L' || c == 'l') {\n      ans++;\n    } else if (c == 'M'\
    \ || c == 'm') {\n      ans++;\n    } else if (c == 'N' || c == 'n') {\n     \
    \ ans++;\n    } else if (c == 'O' || c == 'o') {\n      ans++;\n    } else if\
    \ (c == 'P' || c == 'p') {\n      ans++;\n    } else if (c == 'Q' || c == 'q')\
    \ {\n      ans++;\n    } else if (c == 'R' || c == 'r') {\n      ans++;\n    }\
    \ else if (c == 'S' || c == 's') {\n      ans++;\n    } else if (c == 'T' || c\
    \ == 't') {\n      ans++;\n    } else if (c == 'U' || c == 'u') {\n      ans++;\n\
    \    } else if (c == 'V' || c == 'v') {\n      ans++;\n    } else if (c == 'W'\
    \ || c == 'w') {\n      ans++;\n    } else if (c == 'X' || c == 'x') {\n     \
    \ ans++;\n    } else if (c == 'Y' || c == 'y') {\n      ans++;\n    } else if\
    \ (c == 'Z' || c == 'z') {\n      ans++;\n    }\n  }\n  return ans;", "    long\
    \ result = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if(isupper(s[i])\
    \ && s[i] != 'e' && s[i] != 'E' && s[i] != 'I' && s[i] != 'I') {\n           \
    \ result++;\n        }\n    }\n    return result;", "    long num_vowels = 0;\n\
    \    for (auto c : s) {\n        if (std::toupper(c) =='A') {\n            num_vowels\
    \ += 1;\n        }\n        if (std::toupper(c) =='E') {\n            num_vowels\
    \ += 1;\n        }\n        if (std::toupper(c) =='I') {\n            num_vowels\
    \ += 1;\n        }\n        if (std::toupper(c) =='O') {\n            num_vowels\
    \ += 1;\n        }\n        if (std::toupper(c) =='U') {\n            num_vowels\
    \ += 1;\n        }\n    }\n    return num_vowels;", "    long count = 0;\n   \
    \ for(long i = s.size() - 1; i >= 0; i--){\n        if((i % 2) == 0){\n      \
    \      if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] ==\
    \ 'U'){\n                count++;\n            }\n        }\n    }\n    return\
    \ count;", "    std::stack<char> st;\n    for (std::size_t i = 0; i < s.length();\
    \ i++) {\n        // check if current character is vowel\n        if (s[i] ==\
    \ 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n         \
    \   st.push(s[i]);\n        else {\n            // check if stack is empty, if\
    \ yes then we have an even number of vowels\n            if (st.empty())\n   \
    \             return (1);\n            // else we need to pop and return 0\n \
    \           else\n                return (0);\n        }\n    }\n    // when stack\
    \ is empty, return 1\n    return (1);", "    int count = 0;\n    for(int i = 0;\
    \ i < s.length(); i++) {\n        if(s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U') {\n            count++;\n        }\n    }\n \
    \   return count;", "    long count = 0;\n    for(int i = 0; i < s.length(); i++)\
    \ {\n        if(s[i] != ' ') {\n            if(s[i] >= 'A' && s[i] <= 'Z') {\n\
    \                count++;\n            } else if(s[i] >= 'a' && s[i] <= 'z') {\n\
    \                count--;\n            }\n        }\n    }\n    return count;",
  "    if (s.empty())\n        return 0;\n    long ans = 0;\n    for (size_t i = 0;\
    \ i != s.size() && ans <= 1; ++i) {\n        char c = s[i];\n        if ('A' <=\
    \ c && c <= 'Z') {\n            ans += c >= 'a' && c <= 'z' ? 1 : 0;\n       \
    \ }\n    }\n    return ans;", "    long ans = 0, cur = 0, i = 0;\n    while (i\
    \ < s.size()) {\n        if (s[i] == 'A') {\n            cur++;\n        } else\
    \ if (s[i] == 'a') {\n            if (s[i + 1] == 'B') {\n                cur++;\n\
    \                i++;\n            } else if (s[i + 1] == 'B') {\n           \
    \     cur++;\n                i++;\n            } else if (s[i + 1] == 'C') {\n\
    \                cur++;\n                i++;\n            } else if (s[i + 1]\
    \ == 'C') {\n                cur++;\n                i++;\n            } else\
    \ if (s[i + 1] == 'D') {\n                cur++;\n                i++;\n     \
    \       } else if (s[i + 1] == 'D') {\n                cur++;\n              \
    \  i++;\n            } else if (s[i + 1] == 'E') {\n                cur++;\n \
    \               i++;\n            } else if (s[i + 1] == 'E') {\n            \
    \    cur++;\n                i++;\n            } else if (s[i + 1] == 'F') {\n\
    \                cur++;\n                i++;\n            } else if (s[i + 1]\
    \ == 'F') {\n                cur++;\n                i++;\n            } else\
    \ if (s[i + 1] == 'G') {\n                cur++;\n                i++;\n     \
    \       } else if (s[i + 1] == 'G') {\n                cur++;\n              \
    \  i++;\n            } else if (s[i + 1] == 'H') {\n                cur++;\n \
    \               i++;\n            } else if (s[i + 1] == 'H') {\n            \
    \    cur++;\n                i++;\n            } else if (s[i + 1] == 'I') {\n\
    \                cur++;\n                i++;\n            } else if (s[i + 1]\
    \ == 'I') {\n                cur++;\n                i++;\n            } else\
    \ if (s[i + 1] == 'J') {\n                cur++;\n                i++;\n     \
    \       } else if (s[i + 1] == 'J') {\n                cur++;\n              \
    \  i++;\n            } else if (s[i + 1] == 'K') {\n                cur++;\n \
    \               i++;\n            } else if (s[i + 1] == 'K') {\n            \
    \    cur++;\n                i++;\n            } else if (s[i + 1] == 'L') {\n\
    \                cur++;\n                i++;\n            } else if (s[i + 1]\
    \ == 'L') {\n                cur++;\n                i++;\n            } else\
    \ if (s[i + 1] == 'M') {\n                cur++;\n                i++;\n     \
    \       } else if (s[i + 1] == 'M') {\n                cur++;\n              \
    \  i++;\n            } else if (s[i + 1] == 'N') {\n                cur++;\n \
    \               i++;\n            } else if (s[i + 1] == 'N') {\n            \
    \    cur++;\n                i++;\n            } else if (s[i + 1] == 'O') {\n\
    \                cur++;\n                i++;\n            } else if (s[i + 1]\
    \ == 'O') {\n                cur++;\n                i++;\n            } else\
    \ if (s[i + 1] == 'P') {\n                cur++;\n                i++;\n     \
    \       } else if (s[i + 1] == 'P') {\n                cur++;\n              \
    \  i++;\n            } else if (s[i + 1] == 'Q') {\n                cur++;\n \
    \               i++;\n            } else if (s[i + 1] == 'Q') {\n            \
    \    cur++;\n                i++;\n            } else if (s[i + 1]", "    std::stack<bool>\
    \ isEvenStack;\n    for (size_t i = 0; i < s.length(); ++i) {\n        if (isupper(s[i])\
    \ && isEvenStack.empty()) {\n            isEvenStack.push(true);\n        } else\
    \ {\n            isEvenStack.pop();\n        }\n    }\n\n    return !isEvenStack.empty();",
  "    long ans = 0;\n    for(auto i : s) {\n        if( (i == 'A') || (i == 'E')\
    \ || (i == 'O') || (i == 'U') )\n            ans++;\n    }\n    return ans;",
  "    long ans = 0;\n    int n = s.size();\n    // Loop over each even character\
    \ starting from 0th character\n    for (int i = 0; i < n; i += 2) {\n        //\
    \ If even character is a vowel\n        if ((s[i] != s[n - i - 1]) && (s[i] >=\
    \ 'A' && s[i] <= 'Z')) {\n            ans++;\n        }\n    }\n    return ans;",
  "    long ans = 0;\n    long len = s.length();\n    for (long i = 0; i < len; i++)\
    \ {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U')\n            ans++;\n        if (i % 2 == 0 && c >= 'a'\
    \ && c <= 'z')\n            ans++;\n    }\n    return ans;", "  long ans = 0,\
    \ n = s.size();\n  assert((n % 2) == 0);\n  for (int i = 0; i != n; ++i) {\n \
    \   if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \      ++ans;\n  }\n  return ans;", "    int vowels = 0;\n    for (int i = 0;\
    \ i < s.length(); ++i) {\n        char c = s[i];\n        if (c >= 'a' && c <=\
    \ 'z')\n            vowels += (c - 'a') % 2 == 0 ? 1 : 0;\n    }\n    return vowels;",
  "    long result=0;\n    for (size_t i = 0; i < s.size(); i++) {\n        if(s[i]>='A'\
    \ && s[i]<='Z')\n        {\n            if(s[i]=='A' || s[i]=='a') \n        \
    \        result++;\n        }\n    }\n    return result;", "    long ans = 0,\
    \ l = 1;\n    for (auto c : s) {\n        if (c == 'a') {\n            ans +=\
    \ l; l += 2;\n        }\n        else if (c == 'e') {\n            ans += l; l\
    \ += 2;\n        }\n        else if (c == 'i') {\n            ans += l; l += 2;\n\
    \        }\n        else if (c == 'o') {\n            ans += l; l += 2;\n    \
    \    }\n        else if (c == 'u') {\n            ans += l; l += 2;\n        }\n\
    \        else {\n            ans += l; l += 1;\n        }\n    }\n    return ans;",
  "    long ans = 0;\n    for (int i = 0; i <= s.size(); i++) {\n        int val =\
    \ s[i];\n        // If character is vowel then count it\n        if (val >= 65\
    \ && val <= 90) {\n            ans += 1;\n        } else {\n            // If\
    \ character is consonant then ignore it\n        }\n    }\n    return ans;", " \
    \   assert(s.size() > 0);\n    int n = s.size();\n    int count[n];\n    int maxVowels\
    \ = 0;\n    for (int i = 0; i < n; i++)\n        count[i] = 0;\n\n    for (int\
    \ i = 0; i < n; i++)\n        s[i] == s[i] && count[i]++;\n\n    for (int i =\
    \ 0; i < n; i++) {\n        if ((i % 2) == 0)\n            maxVowels = max(maxVowels,\
    \ count[i]);\n    }\n    return maxVowels;", "    int count = 0, i = 0;\n    \n\
    \    for (int j = 0; j < s.length(); j++) {\n        if (s[i + j] >= 'A' && s[i\
    \ + j] <= 'Z') {\n            count++;\n        } else if (s[i + j] >= 'a' &&\
    \ s[i + j] <= 'z') {\n            count++;\n        }\n    }\n    return count;",
  "\tint n = s.size();\n\tlong ans = 0;\n\tfor (int i = 0; i < n; ++i) {\n\t\tif (s[i]\
    \ == 'A' || s[i] == 'a') {\n\t\t\tans += 1;\n\t\t}\n\t}\n\treturn ans;", "   \
    \ long ans = 0;\n    // Iterate through all the characters in the string\n   \
    \ for (int i = 0; i < s.length(); i++) {\n        // Convert the character into\
    \ an integer and check if it is an uppercase letter\n        int ch = s[i];\n\
    \        if (('A' <= ch) && (ch <= 'Z'))\n            ans += 1;\n        if (i\
    \ % 2 == 0) {\n            // Check if the character is even. If it is an uppercase\
    \ vowel\n            // then increase the number of even-indexed uppercase vowels\n\
    \            if (('A' <= ch) && (ch <= 'Z'))\n                ans += 1;\n    \
    \    }\n    }\n    // Return the number of uppercase vowels\n    return ans;",
  "  int count=0; // the count of vowels \n  int evencount=0; // the count of even\
    \ indices\n  for (int i = 0; i<s.size(); i+=2) {\n    if (s[i]=='a' || s[i]=='e'\
    \ || s[i]=='i' || s[i]=='o' || s[i]=='u'){\n      count+=1;\n    }\n    else if\
    \ (s[i]=='B' || s[i]=='C' || s[i]=='D' || s[i]=='F' || s[i]=='G'){\n      count-=1;\n\
    \    }\n    else {\n      evencount+=1;\n    }\n  }\n  return count;", "    long\
    \ cnt = 0;\n    for (long i = 0; i < s.size(); i++) {\n        if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n            if (i % 2 == 0) {\n                cnt += 1;\n\
    \            }\n        }\n    }\n    return cnt;", "    long ans = 0;\n    for(int\
    \ i = 0; i < (int)s.length(); i++) {\n        if(s[i] == 'a' || s[i] == 'e' ||\
    \ s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n            ans += 1;\n      \
    \  }\n    }\n    return ans;", "    std::stack<char> stk;\n    std::queue<char>\
    \ q;\n    stk.push(s[0]);\n    q.push(s[0]);\n    int c = 0;\n    for (int i =\
    \ 1; i < s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\
    \ || s[i] == 'O' || s[i] == 'U') {\n            while (stk.size() > 0 && stk.top()\
    \ != 'A') {\n                stk.pop();\n            }\n            while (q.size()\
    \ > 0 && q.front() != 'A') {\n                q.pop();\n            }\n      \
    \      stk.push(s[i]);\n            q.push(s[i]);\n            c++;\n        }\
    \ else {\n            if (stk.size() > 0 && stk.top() == 'A') {\n            \
    \    stk.pop();\n            }\n            if (q.size() > 0 && q.front() == 'A')\
    \ {\n                q.pop();\n            }\n            stk.push(s[i]);\n  \
    \          q.push(s[i]);\n        }\n    }\n    return c;", "    // code here\n\
    \    // Solution Code Start\n    long long int even=0, odd=0, upper=0, total=0;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (i % 2 == 0) {\n     \
    \       if (s[i] == 'A') {\n                even++;\n            } else if(s[i]\
    \ == 'a') {\n                upper++;\n            }\n        } else if (i % 2\
    \ == 1) {\n            if (s[i] == 'B') {\n                odd++;\n          \
    \  } else if(s[i] == 'b') {\n                upper++;\n            }\n       \
    \ }\n    }\n    total = even * 2 + odd;\n    if (even > odd) {\n        return\
    \ upper;\n    } else {\n        return total;\n    }\n    // End of Solution Code ",
  "    long ans = 0;\n    for (size_t i = 0; i < s.size(); ++i) {\n        ans +=\
    \ (i&1) == 0;\n        i += (i&1);\n    }\n    return ans;", "    long ans = 0,\
    \ i = 0;\n    while (i < s.size()) {\n        if (s[i] == 'A' || s[i] == 'a')\
    \ {\n            ans += 1;\n        }\n        i++;\n    }\n    return ans;",
  "    long ans = 0, len = s.length();\n    for (int i = 0; i < len; i++) {\n    \
    \    if ((s.at(i) == 'A') || (s.at(i) == 'E') || (s.at(i) == 'I') || (s.at(i)\
    \ == 'O') || (s.at(i) == 'U')) {\n            ans++;\n        }\n    }\n    return\
    \ ans;", "  // Write your code here\n  long count = 0;\n  for (int i = 0; i <\
    \ s.size(); ++i) {\n    if(s[i] != s[i]) count += 1;\n  }\n  return count;", " \
    \   long count{0};\n    for (int i = 0; i < s.size(); i++) {\n        if (islower(s[i])\
    \ && s[i] == 'a') {\n            count++;\n        }\n    }\n    return count;",
  "  long ans = 0;\n  for (int i = 0; i < s.size(); i++)\n    if (s[i] >= 'a' && s[i]\
    \ <= 'z') ans += 1;\n  return ans;", "    // Write your code here\n    int ans\
    \ = 0;\n    int n = s.length();\n    int i = 0;\n    while (i < n) {\n       \
    \ if (s[i] >= 'A' && s[i] <= 'Z') {\n            i++;\n        } else if (s[i]\
    \ >= 'a' && s[i] <= 'z') {\n            i++;\n        } else if (s[i] >= '0' &&\
    \ s[i] <= '9') {\n            i++;\n        } else {\n            ans++;\n   \
    \     }\n        i++;\n    }\n    return ans;", "    long ans = 0;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] != s[i][0]) {\n            ans\
    \ += 1;\n        }\n        if (s[i] != 'a' && s[i] != 'e' && s[i] != 'i' && s[i]\
    \ != 'o' && s[i] != 'u')\n            ans -= 1;\n    }\n    return ans;", "  \
    \  int n = s.length();\n    long ans = 0;\n    for (int i = 0; i < n; ++i) {\n\
    \        if (s[i] == 'a' || s[i] == 'A' || s[i] == 'e' || s[i] == 'E' || s[i]\
    \ == 'i' || s[i] == 'I' || s[i] == 'o' || s[i] == 'O' || s[i] == 'u' || s[i] ==\
    \ 'U')\n            ans++;\n    }\n    return ans;", "    // Fill this in.\n \
    \   return 0;", "    long result = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        // even indices\n        if (i % 2 == 0) {\n            // If current\
    \ character is uppercase vowel, add to the total count.\n            if (s[i]\
    \ == 'A' || s[i] == 'a') {\n                result++;\n            }\n       \
    \     // If current character is not uppercase vowel, skip it.\n        }\n  \
    \      // odd indices\n        else if (i % 2 != 0) {\n            if (s[i] ==\
    \ 'A' || s[i] == 'a') {\n                result++;\n            }\n        }\n\
    \    }\n    return result;", "    // Your code here\n    return 0L;", "  long\
    \ num_upper = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      num_upper++;\n    }\n  }\n  return num_upper;", " \
    \   long res = 0;\n    for (int i = 0; i < s.length(); i++)\n        if ((s[i]\
    \ >= 'A' && s[i] <= 'Z') || (s[i] >= 'a' && s[i] <= 'z'))\n            res++;\n\
    \    return res;", "\tint count = 0;\n\tfor (size_t i = 0; i < s.size(); ++i)\
    \ {\n\t\tif (s[i] >= 'A' && s[i] <= 'Z') {\n\t\t\tif (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n\t\t\t\t++count;\n\t\t\t}\n\t\t}\n\t}\n\treturn count;", "    long c = 0;\n\
    \    for(int i = 0; i < s.size(); i++){\n        if(s[i] == 'A' || s[i] == 'E'\
    \ || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            c += 1;\n    }\n\
    \    return c;", "    std::map<char, int> vowels;\n    long n = s.size();\n  \
    \  for (int i = 0; i < (int) n; ++i) {\n        char ch = s[i];\n        if (vowels.count(ch))\
    \ vowels[ch]++;\n        else vowels[ch] = 1;\n    }\n    long ans = 0, k = 0;\n\
    \    for (auto & i : vowels) ans += i.second * k;\n    for (auto & i : vowels)\
    \ {\n        ans -= i.second * k;\n        k += i.second;\n    }\n    return ans;",
  "  long cnt = 0;\n  for (long i = 0; i < s.length(); i++) {\n    if (s[i] >= 'A'\
    \ && s[i] <= 'Z') {\n      cnt++;\n    } else if (s[i] >= 'a' && s[i] <= 'z')\
    \ {\n      cnt++;\n    } else if (s[i] >= '0' && s[i] <= '9') {\n      cnt++;\n\
    \    } else if (s[i] >= 'A' && s[i] <= 'Z' || s[i] >= 'a' && s[i] <= 'z' || s[i]\
    \ >= '0' && s[i] <= '9') {\n      cnt++;\n    }\n  }\n  return cnt;", "    //\
    \ Write your code here.\n    int vowels = 0;\n    int even_index;\n    for (int\
    \ i = 0; i<s.size(); i++) {\n        if (s[i]=='a'|| s[i]=='e'|| s[i]=='i'|| s[i]=='o'||\
    \ s[i]=='u') {\n            vowels++;\n        } else {\n            even_index\
    \ = i%2 ;\n            if( even_index > 0) {\n                vowels++;\n    \
    \        }\n        }\n    }\n    return vowels;", "    long ans = 0;\n    for\
    \ (auto c: s) {\n        if (c == 'A' || c == 'a') ans++;\n        if (c == 'E'\
    \ || c == 'e') ans++;\n        if (c == 'I' || c == 'i') ans++;\n        if (c\
    \ == 'O' || c == 'o') ans++;\n        if (c == 'U' || c == 'u') ans++;\n    }\n\
    \    return ans;", "  // Complete the function.\n  // You can use the string class\
    \ member function find_first_of for finding \n  // the starting index of the first\
    \ character in a substring.\n  long count =0;\n  for (int i=0;i<s.length();i++){\n\
    \    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u')\n\
    \      count++;\n  }\n  return count;", "    int vowels[26] = {0};\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'A' || s[i] == 'a') {\n   \
    \         vowels[26 - ('A' - 'a')] = vowels[26 - ('A' - 'a')] + 1;\n        }\
    \ else if (s[i] == 'E' || s[i] == 'e') {\n            vowels[26 - ('E' - 'e')]\
    \ = vowels[26 - ('E' - 'e')] + 1;\n        } else if (s[i] == 'I' || s[i] == 'i')\
    \ {\n            vowels[26 - ('I' - 'i')] = vowels[26 - ('I' - 'i')] + 1;\n  \
    \      } else if (s[i] == 'O' || s[i] == 'o') {\n            vowels[26 - ('O'\
    \ - 'o')] = vowels[26 - ('O' - 'o')] + 1;\n        } else if (s[i] == 'U' || s[i]\
    \ == 'u') {\n            vowels[26 - ('U' - 'u')] = vowels[26 - ('U' - 'u')] +\
    \ 1;\n        } else if (s[i] == 'Y' || s[i] == 'y') {\n            vowels[26\
    \ - ('Y' - 'y')] = vowels[26 - ('Y' - 'y')] + 1;\n        } else if (s[i] == 'a'\
    \ || s[i] == 'A') {\n            vowels[26 - ('A' - 'a')] = vowels[26 - ('A' -\
    \ 'a')] + 1;\n        } else if (s[i] == 'e' || s[i] == 'E') {\n            vowels[26\
    \ - ('E' - 'e')] = vowels[26 - ('E' - 'e')] + 1;\n        } else if (s[i] == 'i'\
    \ || s[i] == 'I') {\n            vowels[26 - ('I' - 'i')] = vowels[26 - ('I' -\
    \ 'i')] + 1;\n        } else if (s[i] == 'o' || s[i] == 'O') {\n            vowels[26\
    \ - ('O' - 'o')] = vowels[26 - ('O' - 'o')] + 1;\n        } else if (s[i] == 'u'\
    \ || s[i] == 'U') {\n            vowels[26 - ('U' - 'u')] = vowels[26 - ('U' -\
    \ 'u')] + 1;\n        } else if (s[i] == 'y' || s[i] == 'Y') {\n            vowels[26\
    \ - ('Y' - 'y')] = vowels[26 - ('Y' - 'y')] + 1;\n        }\n    }\n    return\
    \ vowels[24];", "    auto vowel = [&](int i) { return s.at(i) == 'a' || s.at(i)\
    \ == 'e' || s.at(i) == 'i' || s.at(i) == 'o' || s.at(i) == 'u'; };\n    long count\
    \ = 0;\n    for (int i = 0; i + 1 < s.size(); i += 2) {\n        if (vowel(i)\
    \ && vowel(i +1))\n            count += 1;\n    }\n    return count;", "    long\
    \ ans = 0;\n    auto it = s.begin();\n    while (it != s.end()) {\n        if\
    \ (*it == 'a' || *it == 'e' || *it == 'i' || *it == 'o' || *it == 'u') {\n   \
    \         ans += 1;\n        }\n        it++;\n    }\n    return ans;", "    long\
    \ count = 0;\n    for (int i = 0; i < s.size(); i += 2) {\n        if (s[i] ==\
    \ 'A' || s[i] == 'a') {\n            count++;\n        }\n    }\n    return count;",
  "    long ans = 0;\n    int len = s.size();\n    for (int i = 0; i < len - 1; i++)\
    \ {\n        if (isupper(s[i])) {\n            ans++;\n        }\n        if (isupper(s[i\
    \ + 1])) {\n            ans++;\n        }\n    }\n    return ans;", "    if (s.size()\
    \ <= 1) return 0;\n    long res = 0;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (i % 2 == 0) res++;\n        if (s[i] >= 'A' && s[i] <= 'Z') res++;\n\
    \    }\n    return res;", "  long count = 0;\n  for (auto i : s) {\n    if (std::toupper(i)\
    \ == 'A' || std::toupper(i) == 'E' || std::toupper(i) == 'I' || std::toupper(i)\
    \ == 'O' || std::toupper(i) == 'U')\n      count++;\n  }\n  return count;", " \
    \   long ans = 0;\n    for (auto i : s) {\n        ans += (i != 'a') && (i !=\
    \ 'e') && (i != 'i') && (i != 'o') && (i != 'u');\n    }\n    return ans;", " \
    \ if (s.size() < 2) return 0;\n  int i = 0;\n  int count = 1;\n  while (i < s.size())\
    \ {\n    if (s[i] == 'A' || s[i] == 'a' || s[i] == 'E' || s[i] == 'e' ||\n   \
    \     s[i] == 'I' || s[i] == 'i' || s[i] == 'O' || s[i] == 'o' ||\n        s[i]\
    \ == 'U' || s[i] == 'u') count++;\n    i++;\n  }\n  return count;", "    std::map<char,int>\
    \ mp;\n    for(size_t i = 0; i < s.length(); i++) {\n        mp[s[i]] +=1;\n \
    \   }\n    return mp['E'];", "    long ans = 0;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\n\
    \            || s[i] == 'u')\n            ans++;\n        else if (s[i] >= 'A'\
    \ && s[i] <= 'Z')\n            ans++;\n    }\n    return ans;", "    if (s.size()\
    \ == 0 || s[0] == '\\0')\n        return 0;\n    int count = 0;\n    for (int\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n   \
    \         count += 1;\n            if (s[i] >= 'A' && s[i] <= 'Z')\n         \
    \       count += 1;\n        }\n    }\n    return count;", "  int result = 0;\n\
    \  for (int i = 0; i <= s.size(); i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z' &&\
    \ s[i] % 2 != 0) result += 1;\n  }\n  return result;", "    // Write your code\
    \ here.\n    long result=0;\n    for(int i=0;i<s.length();i++){\n        std::string\
    \ s_tmp=s.substr(i,s.length());\n        for(int j=0;j<s_tmp.length();j++){\n\
    \            if(s_tmp[j]=='A'&&s_tmp[j+1]=='E'&&s_tmp[j+2]=='I'&&s_tmp[j+3]=='O'&&s_tmp[j+4]=='U'){\n\
    \                result++;\n            }\n        }\n    }\n    return result;",
  "  long count = 0;\n  for (auto ch : s) {\n    if (std::toupper(ch) == 'A' || std::toupper(ch)\
    \ == 'E') {\n      count++;\n    }\n  }\n  return count;", "  int low = 0, high\
    \ = s.size() - 1;\n  while (low < high) {\n    if (s[low] == 'A' && s[high] >=\
    \ 'a') low++;\n    else if (s[low] >= 'A' && s[high] >= 'a') high--;\n    else\
    \ if (s[low] == 'a' && s[high] >= 'A') low++;\n    else if (s[low] >= 'a' && s[high]\
    \ >= 'A') high--;\n    else return (s[low] == 'a' ? 1 : 0);\n  }\n  return s[low]\
    \ == 'a' ? 1 : 0;", "    long count = 0;\n    for (long i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i]\
    \ == 'U') {\n            count++;\n        }\n    }\n    return count;", "   \
    \ // Write your code here.\n    long evenIndex = 0;\n    long evenCount = 0;\n\
    \    for(auto it=s.begin(); it!=s.end(); ++it){\n        if(*it == 'e' && *(it+1)\
    \ != 'E')\n            evenCount++;\n    }\n    return evenCount;", "    long\
    \ count = 0;\n    for (long i = 0; i < s.length(); i++) {\n        if (i % 2 ==\
    \ 0 && s[i] >= 'a' && s[i] <= 'z') {\n            ++count;\n        }\n    }\n\
    \    return count;", "    long count = 0; // Initialize to 0 because we will increment\
    \ in the loop.\n    for (char &c : s)\n        if (c == 'A' || c == 'a' || c ==\
    \ 'E' || c == 'e' || c == 'I' || c == 'i' || c == 'O' || c == 'o' || c == 'U'\
    \ || c == 'u') {\n            count++;\n        }\n    return count;", "    long\
    \ upperCount = 0;\n    for(int i = 0; i < s.size(); i++) {\n        if((i % 2\
    \ == 0) && (s[i] == 'A' || s[i] == 'a'))\n            upperCount++;\n    }\n \
    \   return upperCount;", "  int count = 0;\n  for (int i = 0; i < s.length();\
    \ i++) {\n    const int index = toupper((int) s[i]);\n    if (index & 1) {\n \
    \     count += 1;\n    }\n  }\n  return count;", "    long n = s.size();\n   \
    \ long count = 0;\n    // Iterate over even indices.\n    for (long i = 0; i <\
    \ n; i += 2) {\n        // If current character is uppercase\n        if (s[i]\
    \ == 'A') {\n            count++;\n        }\n    }\n    return count;", "\tint\
    \ count = 0;\n\tfor (int i = 0; i < s.size(); ++i) {\n\t\tif (s[i] >= 'A' && s[i]\
    \ <= 'Z') {\n\t\t\t++count;\n\t\t}\n\t}\n\treturn count;", "    long count = 0;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        char c = s[i];\n        if('a'<=\
    \ c && c<= 'z') \n            if(c=='A' || c=='E' || c=='I' || c=='O' || c=='U')\n\
    \                count++;\n    }\n    return count;", "  // Your code here\n \
    \ int ans = 0;\n  for (int i = 0; i < s.size(); i++) {\n    if (s[i] == 'A' ||\
    \ s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n      ans++;\n  }\n\
    \  return ans;", "  int n = s.size();\n  long ans = 0;\n  for (int i = 0; i <\
    \ n; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      if (i % 2 == 0)\n  \
    \      ans += 1;\n    }\n  }\n  return ans;", "  int vowels[26];\n  for (int i\
    \ = 0; i < s.size(); ++i) {\n    if (s[i] == 'a') {\n      vowels[65]++;\n   \
    \ }\n    if (s[i] == 'b') {\n      vowels[66]++;\n    }\n    if (s[i] == 'c')\
    \ {\n      vowels[67]++;\n    }\n    if (s[i] == 'd') {\n      vowels[68]++;\n\
    \    }\n    if (s[i] == 'e') {\n      vowels[69]++;\n    }\n    if (s[i] == 'f')\
    \ {\n      vowels[70]++;\n    }\n    if (s[i] == 'g') {\n      vowels[71]++;\n\
    \    }\n    if (s[i] == 'h') {\n      vowels[72]++;\n    }\n    if (s[i] == 'i')\
    \ {\n      vowels[73]++;\n    }\n    if (s[i] == 'j') {\n      vowels[74]++;\n\
    \    }\n    if (s[i] == 'k') {\n      vowels[75]++;\n    }\n    if (s[i] == 'l')\
    \ {\n      vowels[76]++;\n    }\n    if (s[i] == 'm') {\n      vowels[77]++;\n\
    \    }\n    if (s[i] == 'n') {\n      vowels[78]++;\n    }\n    if (s[i] == 'o')\
    \ {\n      vowels[79]++;\n    }\n    if (s[i] == 'p') {\n      vowels[80]++;\n\
    \    }\n    if (s[i] == 'q') {\n      vowels[81]++;\n    }\n    if (s[i] == 'r')\
    \ {\n      vowels[82]++;\n    }\n    if (s[i] == 's') {\n      vowels[83]++;\n\
    \    }\n    if (s[i] == 't') {\n      vowels[84]++;\n    }\n    if (s[i] == 'u')\
    \ {\n      vowels[85]++;\n    }\n    if (s[i] == 'v') {\n      vowels[86]++;\n\
    \    }\n    if (s[i] == 'w') {\n      vowels[87]++;\n    }\n    if (s[i] == 'x')\
    \ {\n      vowels[88]++;\n    }\n    if (s[i] == 'y') {\n      vowels[89]++;\n\
    \    }\n    if (s[i] == 'z') {\n      vowels[90]++;\n    }\n    if (s[i] == 'A')\
    \ {\n      vowels[65]++;\n    }\n    if (s[i] == 'B') {\n      vowels[66]++;\n\
    \    }\n    if (s[i] == 'C') {\n      vowels[67]++;\n    }\n    if (s[i] == 'D')\
    \ {\n      vowels[68]++;\n    }\n    if (s[i] == 'E') {\n      vowels[69]++;\n\
    \    }\n    if (s[i] == 'F') {\n      vowels[70]++;\n    }\n    if (s[i] == 'G')\
    \ {\n      vowels[71]++;\n    }\n    if (s[i] == 'H') {", "    // Your code goes\
    \ here\n    long counter=0;\n    for(int i=0;i<s.length();i=i+2)\n    {\n    \
    \    if(s[i]=='A'||s[i]=='a'||s[i]=='E'||s[i]=='e'||s[i]=='I'||s[i]=='i'||s[i]=='O'||s[i]=='o'||s[i]=='U'||s[i]=='u'||s[i]=='Y'||s[i]=='y')\n\
    \        {\n            counter++;\n        }\n    }\n    return counter;", " \
    \   long ans = 0;\n    for (unsigned int i = 0; i < s.size(); i++) {\n       \
    \ if (s[i] == 'A' || s[i] == 'a') ans += 1;\n        if (s[i] == 'E' || s[i] ==\
    \ 'e') ans += 1;\n        if (s[i] == 'I' || s[i] == 'i') ans += 1;\n        if\
    \ (s[i] == 'O' || s[i] == 'o') ans += 1;\n        if (s[i] == 'U' || s[i] == 'u')\
    \ ans += 1;\n    }\n    return ans;", "        long ans = 0;\n        int n =\
    \ s.size();\n        int i;\n        for (i = 0; i < n; i++) {\n             \
    \   if (s[i] == 'a') {\n                        if (s[i] == 'A') {\n         \
    \                       ans++;\n                        }\n                }\n\
    \                if (s[i] != 'a' && s[i] != 'A' && s[i] != 'e' && s[i] != 'E'\
    \ && s[i] != 'i' && s[i] != 'I' && s[i] != 'o' && s[i] != 'O' && s[i] != 'u' &&\
    \ s[i] != 'U') {\n                        ans++;\n                }\n        }\n\
    \        return ans;", "    long count = 1;\n    for (long i = 0; i < s.size();\
    \ i++) {\n        long flag = 0;\n        if (s[i] == 'a') flag = 1;\n       \
    \ if (s[i] == 'e') flag = 2;\n        if (s[i] == 'i') flag = 3;\n        if (s[i]\
    \ == 'o') flag = 4;\n        if (s[i] == 'u') flag = 5;\n        if (flag % 2\
    \ == 0) {\n            count++;\n        }\n    }\n    return count;", "    int\
    \ l = s.length();\n    int c = 0;\n    for (int i = 0; i < l; i++) {\n       \
    \ if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I'\n            || s[i] == 'O' ||\
    \ s[i] == 'U') {\n            c += 1;\n        }\n    }\n    return c;", "  int\
    \ n = s.length();\n  long ret = 0;\n  for (int i = 0; i < (n + 1) & ~1; i+=2)\
    \ {\n    ret += s.at(i) == 'A';\n  }\n  return ret;", "   long count = 0; \n \
    \  long curr = 0; \n   for (auto el: s) { \n       if (el == 'A' || el == 'a')\
    \ curr++; \n       else if (el == 'E' || el == 'e') curr--; \n       else if (el\
    \ == 'U' || el == 'u') curr++; \n       else if (el == 'I' || el == 'i') curr--;\
    \ \n       else if (el == 'O' || el == 'o') curr++; \n       else if (el == 'K'\
    \ || el == 'k') curr++; \n       else if (el == 'B' || el == 'b') curr++; \n \
    \      else if (el == 'D' || el == 'd') curr--; \n       else if (el == 'F' ||\
    \ el == 'f') curr--; \n       else if (el == 'G' || el == 'g') curr++; \n    \
    \   else if (el == 'Z' || el == 'z') curr--; \n       else curr = 0; \n      \
    \ if (curr == 0) count++; \n       curr = curr-1; \n   } \n   return count; ",
  "    long result = 0;\n    for (long i = 0; i < (long) s.size(); i++) {\n      \
    \  if (s[i] >= 'A' && s[i] <= 'Z') {\n            result += (s[i] + 32 - 'A');\n\
    \        }\n    }\n    return result;", "    long count = 0; \n    for (int i\
    \ = 0; i < s.size(); i++)\n    {\n        if (s[i] >= 'a' && s[i] <= 'z')\n  \
    \          count += s[i] - 'a'; \n        else \n            count += 1;\n   \
    \ }\n    return count;", "  long ans = 0;\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      ans += 1;\n    }\n    else if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n      ans += 2;\n    }\n    else if (s[i] >=\
    \ '0' && s[i] <= '9') {\n      ans += 3;\n    }\n  }\n  return ans;", "  // count\
    \ vowels upto even.\n  int vowel_count = 0;\n  for (int i = 0; i < s.size(); i++)\
    \ {\n    if (s[i] >= 'A' && s[i] <= 'E')\n      vowel_count++;\n    else\n   \
    \   break;\n  }\n  // count the number of vowels upto odd.\n  long odd_count =\
    \ s.size() - vowel_count;\n  // if odd count is 0, then the string contains only\
    \ vowels.\n  return odd_count > 0 ? vowel_count : 0;", "    long n = 0;\n    for\
    \ (int i = 0; i < s.length(); i++) {\n        if (s[i] != s[i + 1]) {\n      \
    \      if (s[i] >= 'A' && s[i] <= 'Z') {\n                n += 1;\n          \
    \  }\n        }\n    }\n    return n;", "    long count = 0;\n    for (long i\
    \ = 0; i < s.length(); i++) {\n        char c = s[i];\n        if (c == 'A' ||\
    \ c == 'E' || c == 'I' || c == 'O' || c == 'U') {\n            if (i % 2 == 0)\
    \ {\n                count++;\n            }\n        }\n    }\n    return count;",
  "    assert(s.size() > 0);\n    long n = 0;\n    for (int i = 0; i < s.size(); i++)\
    \ {\n        if (i % 2 == 0 && s[i] >= 'A' && s[i] <= 'Z') {\n            ++n;\n\
    \        }\n    }\n    return n;", "    if (s.empty())\n        return 0;\n  \
    \  int vowels[26] = {0, };\n    for (int i = 0; i != s.size(); i++) {\n      \
    \  char ch = s[i];\n        if (toupper(ch) == 'A'\n            && i != 0\n  \
    \          && (i != s.size() - 1\n                || (isupper(s[i + 1]) && isupper(s[i\
    \ + 2])))\n            && !isupper(s[i - 1])\n            && !isupper(s[i - 2])\n\
    \            && !isupper(s[i - 1]))\n            vowels[ch-'A'] += 1;\n    }\n\
    \    long res = 0;\n    for (int i = 0; i != 26; i++)\n        res += vowels[i];\n\
    \    return res;", "    int i = 0, ans = 0;\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    for(i = 0; i < s.size(); i++) {\n        char c = s[i];\n        if(c ==\
    \ 'a') { // vowel in even indices\n            ans += 1;\n        } else if(c\
    \ == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            ans += 1;\n     \
    \   }\n    }\n    return ans;", "    // Complete the function\n    long result\
    \ = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'A' || s[i]\
    \ == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U')\n            result++;\n\
    \    }\n    return result;", "    assert(s.size() > 0);\n    long ans = 0;\n \
    \   for (long i = 0; i < s.size(); ++i) {\n        if (s[i] != s[i]) ans = i;\n\
    \    }\n    return ans;", '    // Complete this function', "  long count = 1;\n\
    \  for (int i = 0; i < (int) s.size(); i++) {\n    if (s[i] >= 'a' && s[i] <=\
    \ 'z') {\n      count += 1;\n    }\n  }\n  return count;", "    long ans = 0;\n\
    \    for(int i=0; i<s.size(); i++) {\n        if(s[i] == 'A' || s[i] == 'a' ||\n\
    \           (s[i] == 'B' || s[i] == 'b') || (s[i] == 'C' || s[i] == 'c') ||\n\
    \           (s[i] == 'D' || s[i] == 'd') || (s[i] == 'E' || s[i] == 'e') ||\n\
    \           (s[i] == 'F' || s[i] == 'f') || (s[i] == 'G' || s[i] == 'g')) {\n\
    \            ans++;\n        }\n    }\n    return ans;", "    int len = s.length();\n\
    \    assert(len > 0);\n    long count = 0;\n    for (int i = 0; i < len; i++)\
    \ {\n        if (isupper(s[i])) {\n            if (i % 2 == 0) {\n           \
    \     count++;\n            }\n        }\n    }\n    return count;", "    long\
    \ n = 0;\n    for (int i = 1; i < s.size(); i++) {\n        if (s[i] != s[i -\
    \ 1] && s[i] != 'a' && s[i] != 'e'\n            && s[i] != 'i' && s[i] != 'o'\
    \ && s[i] != 'u') {\n            n++;\n        }\n    }\n    return n;", "  long\
    \ count = 1;\n  for (auto c : s) {\n    if (c == 'A' || c == 'E' || c == 'I' ||\
    \ c == 'O' || c == 'U')\n      count++;\n  }\n  return count;", "    int count\
    \ = 0;\n    // Traverse through even indices of the string\n    for (int i = 0;\
    \ i < s.length(); i += 2)\n        // Check if the current char is uppercase\n\
    \        if (std::toupper(s[i]) != s[i])\n            // if uppercase\n      \
    \      count++;\n    return count;", "  if (s.size() == 0) return 0;\n  int res\
    \ = 0;\n  for (int i = 0; i < s.size(); i++) {\n    char c = s[i];\n    if (('A'\
    \ <= c && c <= 'Z')) res += (i & 1);\n  }\n  return res;", "  long ans = 0;\n\
    \  for (int i = 0; i != s.length(); ++i) {\n    if (s[i] == 'a') {\n      ans\
    \ += (s[i] != 'e');\n    }\n  }\n  return ans;", "    // Complete this function\n\
    \    \n    long count1 = 0;\n    long count2 = 0;\n    long count3 = 0;\n    long\
    \ count4 = 0;\n    long count5 = 0;\n    long count6 = 0;\n    long count7 = 0;\n\
    \    long count8 = 0;\n    long count9 = 0;\n    long count10 = 0;\n    long count11\
    \ = 0;\n    long count12 = 0;\n    long count13 = 0;\n    long count14 = 0;\n\
    \    long count15 = 0;\n    long count16 = 0;\n    long count17 = 0;\n    long\
    \ count18 = 0;\n    long count19 = 0;\n    long count20 = 0;\n    long count21\
    \ = 0;\n    long count22 = 0;\n    long count23 = 0;\n    long count24 = 0;\n\
    \    long count25 = 0;\n    long count26 = 0;\n    long count27 = 0;\n    long\
    \ count28 = 0;\n    long count29 = 0;\n    long count30 = 0;\n    long count31\
    \ = 0;\n    long count32 = 0;\n    long count33 = 0;\n    long count34 = 0;\n\
    \    long count35 = 0;\n    long count36 = 0;\n    long count37 = 0;\n    long\
    \ count38 = 0;\n    long count39 = 0;\n    long count40 = 0;\n    long count41\
    \ = 0;\n    long count42 = 0;\n    long count43 = 0;\n    long count44 = 0;\n\
    \    long count45 = 0;\n    long count46 = 0;\n    long count47 = 0;\n    long\
    \ count48 = 0;\n    long count49 = 0;\n    long count50 = 0;\n    long count51\
    \ = 0;\n    long count52 = 0;\n    long count53 = 0;\n    long count54 = 0;\n\
    \    long count55 = 0;\n    long count56 = 0;\n    long count57 = 0;\n    long\
    \ count58 = 0;\n    long count59 = 0;\n    long count60 = 0;\n    long count61\
    \ = 0;\n    long count62 = 0;\n    long count63 = 0;\n    long count64 = 0;\n\
    \    long count65 = 0;\n    long count66 = 0;\n    long count67 = 0;\n    long\
    \ count68 = 0;\n    long count69 = 0;\n    long count70 = 0;\n    long count71\
    \ = 0;\n    long count72 = 0;\n    long count73 = 0;\n    long count74 = 0;\n\
    \    long count75 = 0;\n    long count76 = 0;\n    long count77 = 0;\n    long\
    \ count78 = 0;\n    long count79 = 0;\n    long count80 = 0;\n    long count81\
    \ = 0;\n    long count82 = 0;\n    long count83 = 0;\n    long count84 = 0;\n\
    \    long count85 = 0;", "    long ans = 0, i = 0;\n    while (i < s.length())\
    \ {\n        char c = s[i];\n        if (c == 'A' || c == 'E' || c == 'I' || c\
    \ == 'O' || c == 'U') {\n            ans += 1;\n        }\n        i += 1;\n \
    \   }\n    return ans;", "    long ans = 0;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        if (isupper(s[i])) {\n            if (i % 2 == 0) {\n      \
    \          ans++;\n            }\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
