language: cpp
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  long smalest_value = 0;\n  long smalest_index = 0;\n  std::list<long> ls;\n\
    \  for (long i = 0; i < arr.size(); i++) {\n    ls.push_back(arr[i]);\n  }\n \
    \ ls.sort();\n  for (long i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 ==\
    \ 1) {\n      long j = 0;\n      long min_value = ls.front();\n      for (long\
    \ k = 1; k < ls.size(); k++) {\n        if (ls[k] % 2 == 1) {\n          min_value\
    \ = ls[k];\n          j = k;\n        }\n      }\n      if (min_value > smalest_value)\
    \ {\n        smalest_value = min_value;\n        smalest_index = j;\n      }\n\
    \    }\n  }\n  std::vector<long> res;\n  res.push_back(smalest_value);\n  res.push_back(smalest_index);\n\
    \  return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk0o7qnql.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpk0o7qnql.cpp:41:15: error: no match for \u2018operator[]\u2019\
    \ (operand types are \u2018std::__cxx11::list<long int>\u2019 and \u2018long int\u2019\
    )\n   41 |         if (ls[k] % 2 == 1) {\n      |               ^\n/tmp/tmpk0o7qnql.cpp:42:25:\
    \ error: no match for \u2018operator[]\u2019 (operand types are \u2018std::__cxx11::list<long\
    \ int>\u2019 and \u2018long int\u2019)\n   42 |           min_value = ls[k];\n\
    \      |                         ^\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::set<long> index;\n  std::vector<std::pair<long, long>> min_value;\n\
    \  for (auto i : arr) {\n    std::pair<long, long> value;\n    if (index.find(i)\
    \ != index.end()) {\n      value = std::make_pair(index.at(i), i);\n    } else\
    \ {\n      value = std::make_pair(i, i);\n    }\n    min_value.emplace_back(value);\n\
    \    index.emplace(i);\n  }\n  std::sort(min_value.begin(), min_value.end());\n\
    \  if (min_value.size() > 0) {\n    return min_value.front().second;\n  } else\
    \ {\n    return {};\n  }\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe5gb4i6s.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpe5gb4i6s.cpp:34:36: error: \u2018class std::set<long int>\u2019\
    \ has no member named \u2018at\u2019\n   34 |       value = std::make_pair(index.at(i),\
    \ i);\n      |                                    ^~\n/tmp/tmpe5gb4i6s.cpp:43:30:\
    \ error: could not convert \u2018min_value.std::vector<std::pair<long int, long\
    \ int> >::front().std::pair<long int, long int>::second\u2019 from \u2018long\
    \ int\u2019 to \u2018std::vector<long int>\u2019\n   43 |     return min_value.front().second;\n\
    \      |            ~~~~~~~~~~~~~~~~~~^~~~~~\n      |                        \
    \      |\n      |                              long int\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    //write your code here\n    if(arr.size()==0)\n        return arr;\n\
    \    std::vector<long> temp;\n    long index=0;\n    long smallest=arr[0];\n \
    \   for(auto &it: arr)\n    {\n        if(it%2==0)\n        {\n            if(smallest<it)\n\
    \                smallest=it;\n            temp.push_back(it);\n            index=temp.size()-1;\n\
    \        }\n    }\n    return temp;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp11h42tpi: /tmp/tmp11h42tpi.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end(), [&](long a, long b) { return a < b;\
    \ });\n    auto it = std::unique(arr.begin(), arr.end());\n    arr.erase(it, arr.end());\n\
    \    auto n = std::count_if(arr.begin(), arr.end(), [&](long i) { return i % 2\
    \ == 0; });\n    if (n == arr.size()) return std::vector();\n    auto it = std::min_element(arr.begin(),\
    \ arr.end());\n    std::reverse(arr.begin(), arr.end());\n    if (n < arr.size())\
    \ {\n        std::rotate(arr.begin(), arr.begin() + n, arr.end());\n        std::vector<long>\
    \ tmp(arr.begin(), arr.begin() + n);\n        arr.erase(arr.begin() + n, arr.end());\n\
    \        std::sort(tmp.begin(), tmp.end());\n        if (tmp[0] != 0) {\n    \
    \        std::reverse(tmp.begin(), tmp.end());\n            arr[0] = tmp[0];\n\
    \        }\n    }\n    return arr;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf4zwgh8c.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf4zwgh8c.cpp:33:45: error: cannot deduce template arguments\
    \ for \u2018vector<...auto...>\u2019 from ()\n   33 |     if (n == arr.size())\
    \ return std::vector();\n      |                                             ^\n\
    /tmp/tmpf4zwgh8c.cpp:34:10: error: conflicting declaration \u2018auto it\u2019\
    \n   34 |     auto it = std::min_element(arr.begin(), arr.end());\n      |   \
    \       ^~\n/tmp/tmpf4zwgh8c.cpp:30:10: note: previous declaration as \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > it\u2019\n   30 |     auto it = std::unique(arr.begin(),\
    \ arr.end());\n      |          ^~\n"
  stdout: ''
  timestamp: 1660117764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    if(arr.size() == 0)\n        return arr;\n    long\
    \ min_value = arr[0];\n    long smallest_index = -1;\n    for(long i = 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] < min_value) {\n            min_value\
    \ = arr[i];\n            smallest_index = i;\n        }\n    }\n    if(min_value\
    \ % 2 == 0) {\n        smallest_index = smallest_index + 1;\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(min_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprio68aei: /tmp/tmprio68aei.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    auto n = arr.size();\n    long sum = 0;\n    std::vector<long>\
    \ ans;\n    for(long i = 1; i < n; i++)\n    {\n        sum += arr[i];\n     \
    \   long tmp = (sum - arr[i]) / 2;\n        if(tmp%2 == 0)\n        {\n      \
    \      ans.push_back(tmp);\n            sum = arr[i];\n        }\n        else\n\
    \        {\n            ans.push_back(sum);\n            sum = arr[i];\n     \
    \   }\n    }\n    ans.push_back(n);\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf033qa8_: /tmp/tmpf033qa8_.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::sort(arr.begin(), arr.end());\n  std::set_difference(arr.begin(),\
    \ arr.end(), arr.begin(), arr.end(),\n                      [&arr](int a, int\
    \ b) { return (a & 1) == (b & 1); });\n  int first = std::lower_bound(arr.begin(),\
    \ arr.end(), arr.front());\n  if (first == arr.end()) {\n    return {};\n  }\n\
    \  else {\n    return {arr.at(first - arr.begin()), first - arr.begin()};\n  }\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg1w3doer.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpg1w3doer.cpp:32:31: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018int\u2019 in initialization\n \
    \  32 |   int first = std::lower_bound(arr.begin(), arr.end(), arr.front());\n\
    \      |               ~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                               |\n      |                            \
    \   __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n/tmp/tmpg1w3doer.cpp:33:13:\
    \ error: no match for \u2018operator==\u2019 (operand types are \u2018int\u2019\
    \ and \u2018std::vector<long int>::iterator\u2019 {aka \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019})\n   33 |   if (first == arr.end()) {\n\
    \      |       ~~~~~ ^~ ~~~~~~~~~\n      |       |               |\n      |  \
    \     int             std::vector<long int>::iterator {aka __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpg1w3doer.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:883:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator==(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  883 |\
    \     operator==(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:883:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpg1w3doer.cpp:33:24: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018int\u2019\n   33 |   if (first == arr.end()) {\n      |          \
    \              ^\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \              "
  stdout: ''
  timestamp: 1660117764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::map<int, int> map;\n    std::vector<long>\
    \ ans;\n    for(int i = 0; i <arr.size(); ++i){\n        if(arr[i] % 2 == 0){\n\
    \            map[arr[i]] = map[arr[i]] + 1;\n        }\n    }\n    for(auto p\
    \ : map){\n        if(p.second == 0){\n            ans.push_back(p.first);\n \
    \       }\n    }\n    if(ans.empty()){\n        return ans;\n    }\n    if(ans.size()\
    \ > 1) {\n        for(int i = 0; i < ans.size(); i++){\n            if(i == ans.size()\
    \ - 1){\n                ans.push_back(ans[i]);\n            }\n        }\n  \
    \  }\n    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9rccn9bd: /tmp/tmp9rccn9bd.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::set<long> s;\n  for (long x: arr) {\n    s.insert(x);\n  }\n  if (s.size()\
    \ == 0) {\n    return std::vector<long>();\n  }\n  std::vector<long> answer;\n\
    \  for (long x: s) {\n    if (x % 2 == 0) {\n      answer.push_back(x);\n    }\n\
    \  }\n  answer.push_back(s.begin());\n  std::reverse(answer.begin(), answer.end());\n\
    \  return answer;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmps1fx4fkd.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmps1fx4fkd.cpp:42:29: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::set<long int>::iterator)\u2019\
    \n   42 |   answer.push_back(s.begin());\n      |                            \
    \ ^\nIn file included from /usr/include/c++/9/vector:67,\n                 from\
    \ /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmps1fx4fkd.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::set<long int>::iterator\u2019 {aka\
    \ \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018const value_type&\u2019\
    \ {aka \u2018const long int&\u2019}\n 1184 |       push_back(const value_type&\
    \ __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n/usr/include/c++/9/bits/stl_vector.h:1200:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(std::vector<_Tp,\
    \ _Alloc>::value_type&&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::value_type = long int]\u2019\n 1200 |       push_back(value_type&&\
    \ __x)\n      |       ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30:\
    \ note:   no known conversion for argument 1 from \u2018std::set<long int>::iterator\u2019\
    \ {aka \u2018std::_Rb_tree_const_iterator<long int>\u2019} to \u2018std::vector<long\
    \ int>::value_type&&\u2019 {aka \u2018long int&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long even_value = arr[0], min = arr[0], min_value = arr[0];\n    for\
    \ (int i = 1; i < arr.size(); i++) {\n        if (arr[i] < min) {\n          \
    \  min_value = even_value;\n            min = arr[i];\n        } else {\n    \
    \        if (arr[i] == min) {\n                min_value = arr[i];\n         \
    \   }\n        }\n        even_value++;\n    }\n    return { min_value, min_value\
    \ - 1 };\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1tfeat0o: /tmp/tmp1tfeat0o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    assert(arr.size() == 2);\n    if (arr.at(0)\
    \ % 2 != 0)\n        throw std::logic_error(\"no even value\");\n    if (arr.at(0)\
    \ == arr.at(1))\n        return arr;\n    int minIndex = std::distance(arr.begin(),\
    \ std::min_element(arr.begin(), arr.end(), [](long a, long b) {return a < b;}));\n\
    \    long minValue = arr[minIndex];\n    arr.erase(arr.begin() + minIndex);\n\
    \    std::vector<long> res;\n    for (int i = 0; i < arr.size() - 1; i++) {\n\
    \        if (arr[i] % 2 == 0 && arr[i + 1] % 2 == 0 && arr[i] != arr[i + 1])\n\
    \            res.push_back(arr[i]);\n    }\n    res.push_back(minValue);\n   \
    \ return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpafian7ya: /tmp/tmpafian7ya.cpp:30: std::vector<long int> pluck(std::vector<long
    int>): Assertion `arr.size() == 2'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() <= 10000);\n    assert(arr.size() >= 1);\n    int n\
    \ = arr.size();\n    std::vector<long> index;\n    int smalest_value = n-1;\n\
    \    long min_index = n-1;\n    long min_value = n-1;\n    for (int i=0; i<n;\
    \ i++) {\n        // Check whether the current value is even.\n        if ((arr[i]\
    \ % 2) == 0) {\n            // If it is even, check if the value is smallest so\
    \ far\n            if (arr[i] < min_value) {\n                // If it is, replace\
    \ the smallest value\n                min_index = i;\n                min_value\
    \ = arr[i];\n            } else if (arr[i] == min_value) {\n                //\
    \ If the value is equal to smallest value, check if the index is smallest\n  \
    \              if (index[i] < min_index) {\n                    // If it is smaller\
    \ replace the index.\n                    min_index = i;\n                }\n\
    \            }\n        }\n    }\n    if (min_index >= 0) {\n        index.push_back(min_index);\n\
    \        index.push_back(n-1);\n    }\n    return index;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> ans;\n    long smalest_value, i;\n    bool have_even\
    \ = false;\n    int smallest_index = -1;\n    for (i = 0; i < arr.size(); ++i)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (have_even) {\n          \
    \      if (arr[i] > smalest_value) {\n                    smallest_index = i;\n\
    \                    smalest_value = arr[i];\n                }\n            }\
    \ else {\n                smallest_index = i;\n                smalest_value =\
    \ arr[i];\n                have_even = true;\n            }\n        } else {\n\
    \            have_even = false;\n        }\n    }\n    if (have_even) {\n    \
    \    if (smallest_index != -1) {\n            ans.push_back(smalest_value);\n\
    \            ans.push_back(smallest_index);\n        } else {\n            ans.push_back(smalest_value);\n\
    \        }\n    } else {\n        ans.push_back(0);\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1owrvvpy: /tmp/tmp1owrvvpy.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if (arr.empty())\n        return {};\n    int size = arr.size();\n  \
    \  int max_index = 0;\n    int max_value = 0;\n    for (int i = 0; i < size; i++)\
    \ {\n        if (arr[i] > max_value) {\n            max_value = arr[i];\n    \
    \        max_index = i;\n        }\n    }\n    int count = 0;\n    int max_index_of_value\
    \ = max_index;\n    for (int i = 0; i < size; i++) {\n        if (arr[i] == max_value)\n\
    \            count++;\n    }\n    std::vector<long> result;\n    result.push_back(max_value);\n\
    \    for (int i = 0; i < size; i++) {\n        if (arr[i] == max_value) {\n  \
    \          result.push_back(arr[i]);\n            count--;\n        }\n      \
    \  if (count == 0 && max_index != max_index_of_value) {\n            result.push_back(max_value);\n\
    \            result.push_back(max_index);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpjzn3hbn6: /tmp/tmpjzn3hbn6.cpp:62: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::priority_queue<long, std::vector<long>, greater<long>> pq;\n   \
    \ for (auto i : arr) pq.push(i);\n    pq.push(arr[0]);\n    std::vector<long>\
    \ res;\n    while (pq.size()) {\n        auto curr = pq.top();\n        long even\
    \ = curr % 2;\n        long index = std::abs((curr - even) / 2);\n        if (res.empty())\
    \ res.push_back(curr);\n        else if (res.back() == curr) res.push_back(curr);\n\
    \        else if (res.back() == index) res.push_back(curr);\n        else if (res.back()\
    \ == even) res.push_back(curr);\n        else {\n            if (index < res.back())\
    \ res.push_back(curr);\n            else res.push_back(res.back());\n        }\n\
    \        pq.pop();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprwneryrq.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprwneryrq.cpp:29:50: error: \u2018greater\u2019 was not\
    \ declared in this scope; did you mean \u2018std::greater\u2019?\n   29 |    \
    \ std::priority_queue<long, std::vector<long>, greater<long>> pq;\n      |   \
    \                                               ^~~~~~~\n      |             \
    \                                     std::greater\nIn file included from /usr/include/c++/9/string:48,\n\
    \                 from /usr/include/c++/9/bits/locale_classes.h:40,\n        \
    \         from /usr/include/c++/9/bits/ios_base.h:41,\n                 from /usr/include/c++/9/ios:42,\n\
    \                 from /usr/include/c++/9/istream:38,\n                 from /usr/include/c++/9/sstream:38,\n\
    \                 from /usr/include/c++/9/complex:45,\n                 from /usr/include/c++/9/ccomplex:39,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n\
    \                 from /tmp/tmprwneryrq.cpp:2:\n/usr/include/c++/9/bits/stl_function.h:337:12:\
    \ note: \u2018std::greater\u2019 declared here\n  337 |     struct greater;\n\
    \      |            ^~~~~~~\n/tmp/tmprwneryrq.cpp:29:62: error: template argument\
    \ 3 is invalid\n   29 |     std::priority_queue<long, std::vector<long>, greater<long>>\
    \ pq;\n      |                                                              ^~\n\
    /tmp/tmprwneryrq.cpp:30:27: error: request for member \u2018push\u2019 in \u2018\
    pq\u2019, which is of non-class type \u2018int\u2019\n   30 |     for (auto i\
    \ : arr) pq.push(i);\n      |                           ^~~~\n/tmp/tmprwneryrq.cpp:31:8:\
    \ error: request for member \u2018push\u2019 in \u2018pq\u2019, which is of non-class\
    \ type \u2018int\u2019\n   31 |     pq.push(arr[0]);\n      |        ^~~~\n/tmp/tmprwneryrq.cpp:33:15:\
    \ error: request for member \u2018size\u2019 in \u2018pq\u2019, which is of non-class\
    \ type \u2018int\u2019\n   33 |     while (pq.size()) {\n      |             \
    \  ^~~~\n/tmp/tmprwneryrq.cpp:34:24: error: request for member \u2018top\u2019\
    \ in \u2018pq\u2019, which is of non-class type \u2018int\u2019\n   34 |     \
    \    auto curr = pq.top();\n      |                   "
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    \n    for (int i = 1; i < n; ++i) {\n      \
    \  // Find the lowest value that is odd.\n        // If the lowest value is not\
    \ odd, it is the smallest value.\n        int cur = arr[i];\n        int next\
    \ = arr[i + 1];\n        if (cur % 2 == 0 && next % 2 == 0) {\n            return\
    \ std::vector<long>({cur, i + 1});\n        }\n    }\n    return std::vector<long>();\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpde15bjvb: /tmp/tmpde15bjvb.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117764
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ res;\n    long temp;\n    for (int i = 0; i < arr.size(); i++) {\n        temp\
    \ = arr[i];\n        if (temp % 2 == 0) {\n            res.push_back(temp);\n\
    \        }\n    }\n    if (res.empty()) {\n        return res;\n    }\n    for\
    \ (int i = 0; i < res.size(); i++) {\n        for (int j = i + 1; j < res.size();\
    \ j++) {\n            if (res[i] < res[j] && res[i] % 2 == 0) {\n            \
    \    res.insert(res.begin() + j, res[i]);\n            }\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    assert(arr.size() >= 1);\n    long smallest_even_value\
    \ = arr[0];\n    int smallest_even_index = arr[0];\n    long min_index = arr[0];\n\
    \    for(long i=0;i<arr.size();i++){\n        if(arr[i]%2 == 0){\n           \
    \ if(smallest_even_value < arr[i]){\n                smallest_even_value = arr[i];\n\
    \                smallest_even_index = i;\n                min_index = arr[i];\n\
    \            }\n        }else{\n            if(smallest_even_value == arr[i]){\n\
    \                if(min_index < i){\n                    min_index = i;\n    \
    \            }\n            }\n        }\n    }\n    res.push_back(smallest_even_value);\n\
    \    res.push_back(min_index);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5diyqbl9: /tmp/tmp5diyqbl9.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> even_values_found;\n    std::vector<long> even_values_index;\n\
    \    int smalest_value;\n    for (auto &node: arr) {\n        if (node.value %\
    \ 2 == 0) {\n            even_values_found.push_back(node.value);\n          \
    \  even_values_index.push_back(node);\n        }\n    }\n    if (even_values_found.size()\
    \ == 0) {\n        return {};\n    }\n    smalest_value = even_values_found[0];\n\
    \    int smallest_index = even_values_index[0];\n    for (auto &v: even_values_found)\
    \ {\n        if (v < smalest_value) {\n            smalest_value = v;\n      \
    \      smallest_index = even_values_index[v];\n        }\n    }\n    std::vector<long>\
    \ return_value = {smalest_value, smallest_index};\n    return return_value;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw7is7wns.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw7is7wns.cpp:33:18: error: request for member \u2018value\u2019\
    \ in \u2018node\u2019, which is of non-class type \u2018long int\u2019\n   33\
    \ |         if (node.value % 2 == 0) {\n      |                  ^~~~~\n/tmp/tmpw7is7wns.cpp:34:46:\
    \ error: request for member \u2018value\u2019 in \u2018node\u2019, which is of\
    \ non-class type \u2018long int\u2019\n   34 |             even_values_found.push_back(node.value);\n\
    \      |                                              ^~~~~\n"
  stdout: ''
  timestamp: 1660117764
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    auto it = std::min_element(arr.cbegin(), arr.cend()); // Finding the\
    \ smallest element in the array\n    long min_val = *it;\n    int min_idx = std::distance(arr.cbegin(),\
    \ it);\n\n    auto it2 = std::find_if(arr.cbegin(), arr.cend(), [min_val](int)\
    \ {\n        return min_val % 2 == 0;\n    });\n    if (it2 != arr.cend()) {\n\
    \        int min_idx2 = std::distance(arr.cbegin(), it2);\n        if (min_val\
    \ == *it2) {\n            min_idx--;\n            min_val--;\n        }\n    \
    \    if (min_idx2 != min_idx) {\n            min_idx--;\n        }\n    }\n  \
    \  return {min_val, min_idx};\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgjs9u3ll: /tmp/tmpgjs9u3ll.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value, smallest_index = 0;\n    for (long i = 0, len = arr.size();\
    \ i < len; ++i) {\n        if (arr[i] % 2 == 0) continue;\n        if (arr[i]\
    \ > smalest_value) {\n            smalest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n    std::vector<long> ret;\n    ret.reserve(len);\n\
    \    for (long i = 0, len = arr.size(); i < len; ++i) {\n        if (arr[i] >\
    \ smalest_value) {\n            ret.push_back(arr[i]);\n        }\n    }\n   \
    \ return ret;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprlo3yajk.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprlo3yajk.cpp:38:17: error: \u2018len\u2019 was not declared\
    \ in this scope\n   38 |     ret.reserve(len);\n      |                 ^~~\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if (arr.size() == 0) return arr;\n    long index = arr[0];\n    long\
    \ value = arr[0];\n    std::vector<long> result;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            value = arr[i];\n      \
    \      index = i;\n        } else {\n            if (value < arr[i]) {\n     \
    \           value = arr[i];\n                index = i;\n            }\n     \
    \   }\n    }\n    result.push_back(value);\n    result.push_back(index);\n   \
    \ return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplkp0krns: /tmp/tmplkp0krns.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117766
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value;\n    long smallest_index;\n    if (arr.empty()) {\n\
    \        return {};\n    }\n    std::set<long> sorted_by_value = std::set<long>();\n\
    \    for (auto &it : arr) {\n        sorted_by_value.insert(it);\n    }\n    std::vector<long>\
    \ ret;\n    for (auto it = sorted_by_value.begin(); it != sorted_by_value.end();\
    \ it++) {\n        if (*it % 2 == 0) {\n            smallest_index = *it;\n  \
    \          smalest_value = *it;\n        } else {\n            if (smalest_value\
    \ == *it) {\n                smallest_index++;\n            }\n        }\n   \
    \     ret.push_back({smalest_value, smallest_index});\n    }\n    return ret;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprmuh19on.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmprmuh19on.cpp:48:54: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(<brace-enclosed initializer list>)\u2019\
    \n   48 |         ret.push_back({smalest_value, smallest_index});\n      |   \
    \                                                   ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprmuh19on.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |\
    \       push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018<brace-enclosed initializer list>\u2019 to \u2018\
    std::vector<long int>::value_type&&\u2019 {aka \u2018long int&&\u2019}\n 1200\
    \ |       push_back(value_type&& __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::sort(arr.begin(), arr.end()); //sort the vector from smallest to largest\n\
    \  std::vector<bool> visited(arr.size(), false);\n  std::pair<long, int> min_node;\n\
    \  int min_node_index = -1;\n  int smallest_index = 0;\n  for (int i = 0; i <\
    \ arr.size(); i++) {\n    visited[i] = true;\n    if (arr[i] != 0) {\n      if\
    \ (arr[i] % 2 == 0) {\n        min_node = std::make_pair(arr[i], i);\n      }\n\
    \      else {\n        min_node_index++;\n        min_node_index = smallest_index;\n\
    \      }\n      smallest_index++;\n    }\n  }\n  if (min_node_index == -1)\n \
    \   return std::make_pair(std::vector<long>(), min_node_index);\n  std::vector<long>\
    \ ret_val;\n  ret_val.push_back(min_node.first);\n  ret_val.push_back(min_node_index);\n\
    \  ret_val.push_back(min_node_index);\n  return ret_val;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1mmop_gh.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1mmop_gh.cpp:48:26: error: could not convert \u2018std::make_pair(_T1&&,\
    \ _T2&&) [with _T1 = std::vector<long int>; _T2 = int&; typename std::__decay_and_strip<_T2>::__type\
    \ = int; typename std::__decay_and_strip<_Tp>::__type = std::vector<long int>](min_node_index)\u2019\
    \ from \u2018std::pair<std::vector<long int>, int>\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   48 |     return std::make_pair(std::vector<long>(), min_node_index);\n\
    \      |            ~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n    \
    \  |                          |\n      |                          std::pair<std::vector<long\
    \ int>, int>\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    std::vector<long> ans;\n    int smalest_value\
    \ = 0;\n    int smalest_index = 0;\n    for (int i = 0; i < n; i++) {\n      \
    \  if (arr[i] % 2 == 0) {\n            if (arr[i] < smalest_value) {\n       \
    \         smalest_value = arr[i];\n                smalest_index = i;\n      \
    \      }\n        } else if (arr[i] < smalest_value) {\n            ans.emplace_back(arr[i]);\n\
    \            smalest_value = arr[i];\n            smalest_index = i;\n       \
    \ }\n    }\n    if (ans.size() == 0) {\n        ans.emplace_back(0);\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8hj2ulxa: /tmp/tmp8hj2ulxa.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long min_value;\n    int min_index;\n    for(long val\
    \ : arr){\n        if(val%2==0){\n            if(val<min_value){\n           \
    \     min_value=val;\n                min_index=1;\n            }else{\n     \
    \           if(val==min_value){\n                    min_index++;\n          \
    \      }\n            }\n        }\n    }\n    return std::vector<long>({min_value,min_index});\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy15yzpsz: /tmp/tmpy15yzpsz.cpp:50: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long Smallest_Value=arr[0];\n    long Smallest_Index=arr[0];\n    long\
    \ Smallest_Even_Value=0;\n    for(int i=0;i<arr.size();i++) {\n        if(arr[i]%2==0)\
    \ {\n            Smallest_Even_Value=arr[i];\n            Smallest_Index=i;\n\
    \        }\n        if(Smallest_Even_Value<arr[i]) {\n            Smallest_Even_Value=arr[i];\n\
    \            Smallest_Index=i;\n        }\n    }\n    std::vector<long> pickedVec;\n\
    \    pickedVec.push_back(Smalest_Even_Value);\n    pickedVec.push_back(Smallest_Index);\n\
    \    return pickedVec;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp08klkn14.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp08klkn14.cpp:43:25: error: \u2018Smalest_Even_Value\u2019\
    \ was not declared in this scope; did you mean \u2018Smallest_Even_Value\u2019\
    ?\n   43 |     pickedVec.push_back(Smalest_Even_Value);\n      |             \
    \            ^~~~~~~~~~~~~~~~~~\n      |                         Smallest_Even_Value\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> temp;\n    if (arr.size()\
    \ == 0) {\n        return temp;\n    }\n    std::map<long, long> index;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        index[arr[i]] = i;\n    }\n   \
    \ long min = std::numeric_limits<long>::max();\n    int smallest_index = -1;\n\
    \    for (auto it = index.begin(); it != index.end(); ++it) {\n        long val\
    \ = it->first;\n        if (val % 2 == 0) {\n            min = std::min(val, min);\n\
    \            smallest_index = it->second;\n        }\n    }\n    if (smallest\
    \ == std::numeric_limits<long>::max()) {\n        return temp;\n    }\n    temp.push_back(arr[smallest_index]);\n\
    \    temp.push_back(smallest_index);\n    return temp;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4o35vum8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4o35vum8.cpp:47:9: error: \u2018smallest\u2019 was not\
    \ declared in this scope\n   47 |     if (smallest == std::numeric_limits<long>::max())\
    \ {\n      |         ^~~~~~~~\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long ans[2];\n    long ans1[2];\n    long min\
    \ = ans1[0] = ans1[1] = ans[0];\n    for (size_t i = 0; i < arr.size(); ++i) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (arr[i] < min) {\n           \
    \     min = arr[i];\n                ans1[0] = ans1[1] = arr[i];\n           \
    \ }\n            else {\n                ans1[1] = arr[i];\n            }\n  \
    \      }\n        else {\n            if (arr[i] < min) {\n                min\
    \ = arr[i];\n                ans[0] = ans1[0] = arr[i];\n            }\n     \
    \       else {\n                ans[0] = arr[i];\n            }\n        }\n \
    \   }\n    std::cout << ans[0] << \" \" << ans1[0] << std::endl;\n    return ans;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmutv8y6w.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmutv8y6w.cpp:54:12: error: could not convert \u2018ans\u2019\
    \ from \u2018long int [2]\u2019 to \u2018std::vector<long int>\u2019\n   54 |\
    \     return ans;\n      |            ^~~\n      |            |\n      |     \
    \       long int [2]\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> res;\n  // Your code goes here\n  long smallest = arr[0];\n\
    \  int index = 0;\n  for (auto i : arr) {\n    if (i % 2 == 0) {\n      if (smallest\
    \ > i) {\n        smallest = i;\n      }\n    } else if (i == smallest) {\n  \
    \    index = i;\n    }\n  }\n  if (smallest != arr[0]) {\n    res.push_back(smallest);\n\
    \    res.push_back(index);\n  }\n  return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmptpg8qm5y: /tmp/tmptpg8qm5y.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    std::vector<long> min_index;\n    long\
    \ smallest_index;\n    for (size_t i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ < smalest_value && arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n\
    \            smallest_index = i;\n        }\n    }\n    min_index.push_back(smalest_value);\n\
    \    min_index.push_back(smallest_index);\n    return min_index;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8ewo2t2b: /tmp/tmp8ewo2t2b.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long smalest_value = 0;\n    long smallest_index\
    \ = -1;\n    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (smalest_value < arr[i]) {\n                smalest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \   }\n    return std::vector<long>{smalest_value, smallest_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp1p72yru: /tmp/tmpp1p72yru.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    std::vector<long> vec;\n    int min;\n    long\
    \ index;\n    long value;\n    for(long i:arr)\n    {\n        if(min==0)\n  \
    \      {\n            min++;\n            index=i;\n        }\n        if(min==2)\n\
    \        {\n            value=i;\n        }\n        if(min==1)\n        {\n \
    \           vec.push_back(std::make_pair(i,index));\n        }\n    }\n    return\
    \ vec;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7j287gbx.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7j287gbx.cpp:47:50: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::pair<long int, long int>)\u2019\
    \n   47 |             vec.push_back(std::make_pair(i,index));\n      |       \
    \                                           ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7j287gbx.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7:\
    \ note: candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::pair<long int, long int>\u2019 to\
    \ \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |   \
    \    push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::pair<long int, long int>\u2019 to \u2018std::vector<long\
    \ int>::value_type&&\u2019 {aka \u2018long int&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long smallest_even_value, smallest_even_index\
    \ = 0, smallest_value;\n    long idx;\n    for (idx = 0; idx < arr.size(); idx++)\
    \ {\n        if (arr[idx] % 2 == 0 && arr[idx] < smallest_value) {\n         \
    \   smallest_value = arr[idx];\n            smallest_even_index = idx;\n     \
    \   }\n    }\n    if (smallest_value == 0)\n        return std::vector<long>();\n\
    \    if (smallest_even_index == 0)\n        return std::vector<long>({smallest_value});\n\
    \    if (smallest_even_index == arr.size() - 1) {\n        res.push_back(smallest_value);\n\
    \        return res;\n    }\n    std::vector<long> left_nodes;\n    res.push_back(smallest_value);\n\
    \    std::vector<long> right_nodes;\n    for (idx = smallest_even_index + 1; idx\
    \ < arr.size(); idx++) {\n        if (arr[idx] % 2 == 0) {\n            left_nodes.push_back(arr[idx]);\n\
    \            right_nodes.push_back(arr[idx]);\n        } else {\n            if\
    \ (right_nodes.size() > 0) {\n                res.push_back(arr[idx]);\n     \
    \       }\n            right_nodes.push_back(arr[idx]);\n        }\n    }\n  \
    \  if (left_nodes.size() > 0) {\n        res.insert(res.end(), left_nodes.begin(),\
    \ left_nodes.end());\n    }\n    if (right_nodes.size() > 0) {\n        res.insert(res.end(),\
    \ right_nodes.begin(), right_nodes.end());\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe81afswl: /tmp/tmpe81afswl.cpp:70: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> ans;\n  if (arr.size() == 0)\n    return ans;\n  std::unordered_map<long,\
    \ std::pair<long, long>> mp;\n  for (long i = 0; i < arr.size(); i++) {\n    long\
    \ value = arr[i];\n    if (mp.find(value) != mp.end()) {\n      mp[value].first++;\n\
    \      mp[value].second += i;\n    } else {\n      mp[value] = std::pair<long,\
    \ long>(1, i);\n    }\n  }\n  auto it = mp.begin();\n  if (it != mp.end()) {\n\
    \    while (it->first % 2 == 0) {\n      ans.push_back(it->second);\n      it++;\n\
    \    }\n    if (it != mp.end())\n      ans.push_back(it->second);\n  } else {\n\
    \    return ans;\n  }\n  return ans;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgssta2uj.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgssta2uj.cpp:45:31: error: no matching function for call\
    \ to \u2018std::vector<long int>::push_back(std::pair<long int, long int>&)\u2019\
    \n   45 |       ans.push_back(it->second);\n      |                          \
    \     ^\nIn file included from /usr/include/c++/9/vector:67,\n               \
    \  from /usr/include/c++/9/functional:62,\n                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n\
    \                 from /usr/include/c++/9/algorithm:71,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n                 from\
    \ /tmp/tmpgssta2uj.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1184:7: note:\
    \ candidate: \u2018void std::vector<_Tp, _Alloc>::push_back(const value_type&)\
    \ [with _Tp = long int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1184 |       push_back(const value_type& __x)\n      | \
    \      ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1184:35: note:   no known\
    \ conversion for argument 1 from \u2018std::pair<long int, long int>\u2019 to\
    \ \u2018const value_type&\u2019 {aka \u2018const long int&\u2019}\n 1184 |   \
    \    push_back(const value_type& __x)\n      |                 ~~~~~~~~~~~~~~~~~~^~~\n\
    /usr/include/c++/9/bits/stl_vector.h:1200:7: note: candidate: \u2018void std::vector<_Tp,\
    \ _Alloc>::push_back(std::vector<_Tp, _Alloc>::value_type&&) [with _Tp = long\
    \ int; _Alloc = std::allocator<long int>; std::vector<_Tp, _Alloc>::value_type\
    \ = long int]\u2019\n 1200 |       push_back(value_type&& __x)\n      |      \
    \ ^~~~~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1200:30: note:   no known conversion\
    \ for argument 1 from \u2018std::pair<long int, long int>\u2019 to \u2018std::vector<long\
    \ int>::value_type&&\u2019 {aka \u2018long int&&\u2019}\n 1200 |       push_back(value_type&&\
    \ __x)\n      |                 ~~~~~~~~~~~~~^~~\n/tmp/tmpgssta2uj.cpp:49:31:\
    \ error: no matching function for call to \u2018std::vector<long int>::push_back(std::pair<long\
    \ int, long int>&)\u2019\n   49 |       ans.push_back(it->second);\n      |  \
    \     "
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n\n    // Your code\
    \ goes here\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] %\
    \ 2 == 0) {\n            smalest_value = arr[i];\n            smalest_index =\
    \ i;\n        }\n    }\n    std::vector<long> result;\n    if (smalest_index !=\
    \ arr.size()) {\n        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf78_5d6p: /tmp/tmpf78_5d6p.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  long smalest_value;\n  long smalest_index;\n  long largest_value;\n  long\
    \ largest_index;\n  long i;\n  std::sort(arr.begin(), arr.end(), [&](long l, long\
    \ r) -> bool {\n    return l > r;\n  });\n  // get min odd value\n  smalest_value\
    \ = arr[arr.size() / 2];\n  // get index of min odd value\n  smalest_index = arr.size()\
    \ / 2;\n  largest_value = arr[arr.size() - 1];\n  largest_index = arr.size() -\
    \ 1;\n  for (i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 != 0) {\n     \
    \ if (arr[i] < smalest_value) {\n        smalest_value = arr[i];\n        smalest_index\
    \ = i;\n      }\n      if (arr[i] > largest_value) {\n        largest_value =\
    \ arr[i];\n        largest_index = i;\n      }\n    }\n  }\n  return std::vector<long>({smalest_value,\
    \ smalest_index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpgs3r0g_p: /tmp/tmpgs3r0g_p.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    \n    long largest_value = 0;\n    long smallest_value\
    \ = 0;\n    long index;\n    std::vector<long> output;\n    \n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        \n        if (arr[i] > largest_value){\n\
    \            largest_value = arr[i];\n            smallest_value = largest_value;\n\
    \            index = i;\n        }\n        if (arr[i] < largest_value){\n   \
    \         smallest_value = arr[i];\n            index = i;\n        }\n      \
    \  if (arr[i] % 2 == 0){\n            smallest_value = arr[i];\n            index\
    \ = i;\n        }\n    }\n    \n    std::vector<long> value;\n    value.push_back(smallest_value);\n\
    \    value.push_back(index);\n    \n    \n    return value;\n    \n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9xe124w8: /tmp/tmp9xe124w8.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    \n    // Sort the array from lowest to highest\n    std::sort(arr.begin(),\
    \ arr.end());\n\n    // Return the smallest even value\n    if (arr.empty()) return\
    \ {};\n    long least_even = arr[0];\n    int idx = 0;\n    \n    for (int i =\
    \ 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (least_even\
    \ < arr[i]) {\n                least_even = arr[i];\n                idx = i;\n\
    \            }\n        }\n    }\n    \n    return std::vector<long>{least_even,\
    \ idx};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6ly8ghw0: /tmp/tmp6ly8ghw0.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::sort(arr.begin(), arr.end()); // Sort the array from smallest to largest\n\
    \n  std::vector<long> even;\n  std::vector<long> index;\n  even.reserve(arr.size());\
    \ // Pre-allocate the storage to save iteration\n  index.reserve(arr.size());\n\
    \n  // Iterate through all the array items\n  for (size_t i = 0; i < arr.size();\
    \ i++) {\n    // If we have an even value so far\n    if (arr[i] % 2 == 0) {\n\
    \      // Add it to even\n      even.push_back(arr[i]);\n    } else {\n      //\
    \ If we have an even value that is not the first index\n      if (even.size()\
    \ > 0) {\n        // We have already iterated through all the even value\n   \
    \     // We need to look for the first even value that is not the same as the\
    \ current even value\n        // and see if it is smaller than the current even\
    \ value\n\n        long min = std::numeric_limits<long>::max(); // Max value long\
    \ can hold\n\n        // Find the first even value that is not the same as the\
    \ current one\n        for (size_t j = 0; j < even.size(); j++) {\n          if\
    \ (even[j] != arr[i]) {\n            // If this even value is not smaller than\
    \ the current even value\n            if (even[j] < min) {\n              // Keep\
    \ the current even value\n              min = even[j];\n            }\n      \
    \    }\n        }\n        // If we have found a smaller even value that is not\
    \ the same as the current one\n        if (min != std::numeric_limits<long>::max())\
    \ {\n          // Add the index of the current even value\n          index.push_back(i);\n\
    \        }\n      } else {\n        // We have not yet iterated through all the\
    \ even values\n        // Add it to the index vector\n        index.push_back(i);\n\
    \      }\n    }\n  }\n  // If we have not iterated through all the even values,\
    \ the given array is empty\n  // If we have iterated through all the even values,\
    \ return the index vector\n  if (even.size() == 0) {\n    return index;\n  } else\
    \ {\n    return even;\n  }\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvhwtnrx3: /tmp/tmpvhwtnrx3.cpp:83: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  long smalest_value = 0, smalest_index = 0;\n  for (int i = 0; i < arr.size();\
    \ ++i) {\n    if (arr[i] % 2 == 0 && arr[i] > smalest_value) {\n      smalest_value\
    \ = arr[i];\n      smalest_index = i;\n    }\n  }\n  std::vector<long> result;\n\
    \  if (smalest_index != arr.size()) {\n    result.push_back(arr[smalest_index]);\n\
    \    result.push_back(arr[smalest_index + 1]);\n  } else {\n    result.push_back(arr[smalest_index]);\n\
    \  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0s4pv01h: /tmp/tmp0s4pv01h.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpolxuct0c: /tmp/tmpolxuct0c.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    auto it = std::min_element(arr.begin(), arr.end());\n    if (it == arr.begin())\n\
    \        return std::vector<long>();\n    if (it == arr.end())\n        return\
    \ std::vector<long>({*it});\n    while (it != arr.end()) {\n        if ((*it)\
    \ & (1 << (*it >> 1))) {\n            auto index = std::distance(arr.begin(),\
    \ it);\n            return std::vector<long>({*it, index});\n        }\n     \
    \   ++it;\n    }\n    return std::vector<long>();\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp1d7u0mw0: /tmp/tmp1d7u0mw0.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    if (arr.size() == 0) return result;\n\
    \    bool flag = false;\n    for (long i = 0; i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0) {\n            flag = true;\n            break;\n     \
    \   }\n    }\n    if (!flag) return result;\n    long min_value = arr[0];\n  \
    \  int min_index = 0;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] < min_value) {\n            min_value = arr[i];\n            min_index\
    \ = i;\n        }\n    }\n    if (min_value % 2 == 0) return result;\n    result.push_back(min_value);\n\
    \    result.push_back(min_index);\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3zgce380: /tmp/tmp3zgce380.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if (arr.empty()) return {};\n    auto res = std::set<long>();\n    for\
    \ (auto i : arr) {\n        if (res.count(i)) {\n            return { res.find(i)->second,\
    \ i };\n        } else {\n            res.insert(i);\n        }\n    }\n    return\
    \ {};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfy7cdzh1.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpfy7cdzh1.cpp:33:35: error: request for member \u2018second\u2019\
    \ in \u2018* res.std::set<long int>::find(i).std::_Rb_tree_const_iterator<long\
    \ int>::operator->()\u2019, which is of non-class type \u2018const long int\u2019\
    \n   33 |             return { res.find(i)->second, i };\n      |            \
    \                       ^~~~~~\n/tmp/tmpfy7cdzh1.cpp:33:45: error: could not convert\
    \ \u2018{<expression error>, i}\u2019 from \u2018<brace-enclosed initializer list>\u2019\
    \ to \u2018std::vector<long int>\u2019\n   33 |             return { res.find(i)->second,\
    \ i };\n      |                                             ^\n      |       \
    \                                      |\n      |                            \
    \                 <brace-enclosed initializer list>\n"
  stdout: ''
  timestamp: 1660117765
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here\n    if(arr.empty())\n    {\n        return {};\n\
    \    }\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    std::vector<long>\
    \ even_indexes;\n    for(long i=0;i<arr.size();i++)\n    {\n        if(arr[i]%2==0\
    \ && arr[i]<smalest_value)\n        {\n            smalest_value = arr[i];\n \
    \           smalest_index = i;\n        }\n        else if(arr[i]%2==0)\n    \
    \    {\n            even_indexes.push_back(arr[i]);\n        }\n    }\n    if(even_indexes.size()>0)\n\
    \    {\n        return even_indexes;\n    }\n    return {};\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2im1lag1: /tmp/tmp2im1lag1.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    if(arr.size() == 0)\n    {\n        return {};\n  \
    \  }\n    auto it = arr.begin();\n    std::vector<long> ans;\n    long smalest_value\
    \ = *it;\n    long smalest_index = 0;\n    for(auto i = it + 1; i != arr.end();\
    \ i++)\n    {\n        if(smalest_value % 2 == 0)\n        {\n            smalest_value\
    \ = *i;\n            smalest_index = i;\n        }\n    }\n    ans = {smalest_value,\
    \ smalest_index};\n    return ans;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6k4p6g6z.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp6k4p6g6z.cpp:43:29: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in assignment\n\
    \   43 |             smalest_index = i;\n      |                             ^\n\
    \      |                             |\n      |                             __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660117766
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min_even_val = INT_MAX;\n    int min_index\
    \ = 0;\n    for(auto const &x : arr)\n    {\n        if (x%2 == 0 && x!= 0)\n\
    \        {\n            if (x < min_even_val)\n            {\n               \
    \ min_even_val = x;\n                min_index = res.size();\n            }\n\
    \            else\n            {\n                res.push_back(x);\n        \
    \    }\n        }\n    }\n    if (res.size() == 0 && min_even_val!=0)\n    {\n\
    \        res.push_back(min_even_val);\n        min_index = res.size();\n    }\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5hr0hdlz: /tmp/tmp5hr0hdlz.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tlong smalest_value = 0;\n\tlong smallest_index = -1;\n\tfor (auto el :\
    \ arr) {\n\t\tlong curr_value = el;\n\t\tif (curr_value % 2 == 0) smalest_value\
    \ = curr_value;\n\t\telse {\n\t\t\tif (smalest_value < curr_value) smalest_value\
    \ = curr_value;\n\t\t\telse if (smalest_value == curr_value) smallest_index++;\n\
    \t\t}\n\t}\n\tif (smallest_index < 0) return std::vector<long>();\n\telse return\
    \ std::vector<long>({smalest_value, smallest_index});\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnomal4xh: /tmp/tmpnomal4xh.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    int cnt = 0;\n    int small =\
    \ arr[0];\n    std::vector<long> ans;\n    for (int i = 0; i < arr.size(); ++i)\
    \ {\n        if (arr[i] < small) {\n            small = arr[i];\n            ans.push_back(small);\n\
    \            ++cnt;\n        }\n    }\n    return cnt ? ans : std::vector<long>();\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpx9vn6gvi: /tmp/tmpx9vn6gvi.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    auto it = std::unique(arr.begin(),\
    \ arr.end());\n    if (arr.size() == it - arr.begin()) {\n        return std::vector<long>();\n\
    \    }\n    // If the last two elements have the same value just return the next\
    \ smallest.\n    if (arr[(arr.size() - 2)] == arr[(arr.size() - 1)]) return std::next(it);\n\
    \    // If there are two nodes with the same value\n    // then choose the one\
    \ that has the smallest index.\n    return std::next(it, std::distance(arr.begin(),\
    \ it));\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnrc8cv4u.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnrc8cv4u.cpp:35:73: error: could not convert \u2018std::next<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(it, 1)\u2019 from \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  35 |     if (arr[(arr.size() - 2)] == arr[(arr.size() - 1)]) return std::next(it);\n\
    \      |                                                                ~~~~~~~~~^~~~\n\
    \      |                                                                     \
    \    |\n      |                                                              \
    \           __gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\n\
    /tmp/tmpnrc8cv4u.cpp:38:21: error: could not convert \u2018std::next<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(it, std::distance<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(arr.std::vector<long int>::begin(), it))\u2019\
    \ from \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >\u2019\
    \ to \u2018std::vector<long int>\u2019\n   38 |     return std::next(it, std::distance(arr.begin(),\
    \ it));\n      |            ~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  \
    \    |                     |\n      |                     __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660117767
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n        long largest_even_val = 0;\n        long smallest_index = 0;\n  \
    \      for (long i = 0; i < arr.size(); i++) {\n            if (arr[i] % 2 ==\
    \ 0 && arr[i] > largest_even_val) {\n                largest_even_val = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n        std::vector<long>\
    \ res;\n        if (largest_even_val != 0) {\n            long index = arr.size()\
    \ - 1;\n            while (index >= smallest_index) {\n                if (arr[index]\
    \ % 2 == 0 && arr[index] == largest_even_val) {\n                    res.push_back(arr[index]);\n\
    \                    index--;\n                } else {\n                    index--;\n\
    \                }\n            }\n        }\n        return res;\n    }\nint\
    \ main(){\n    int t;\n    cin>>t;\n    while(t--){\n        long n;\n       \
    \ cin>>n;\n        long ans=0;\n        std::vector<long> arr;\n        for (int\
    \ i = 0; i < n; i++) {\n            long x;\n            cin>>x;\n           \
    \ arr.push_back(x);\n        }\n        ans = min(ans, pluck(arr).size());\n \
    \       cout<<ans <<endl;\n    }\n    return 0;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdhzliv9s.cpp: In function \u2018int main()\u2019:\n/tmp/tmpdhzliv9s.cpp:53:5:\
    \ error: \u2018cin\u2019 was not declared in this scope; did you mean \u2018std::cin\u2019\
    ?\n   53 |     cin>>t;\n      |     ^~~\n      |     std::cin\nIn file included\
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n               \
    \  from /tmp/tmpdhzliv9s.cpp:2:\n/usr/include/c++/9/iostream:60:18: note: \u2018\
    std::cin\u2019 declared here\n   60 |   extern istream cin;  /// Linked to standard\
    \ input\n      |                  ^~~\n/tmp/tmpdhzliv9s.cpp:64:15: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   64 |         ans = min(ans, pluck(arr).size());\n      |               ^~~\n\
    \      |               std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpdhzliv9s.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmpdhzliv9s.cpp:65:9: error: \u2018\
    cout\u2019 was not declared in this scope; did you mean \u2018std::cout\u2019\
    ?\n   65 |         cout<<ans <<endl;\n      |         ^~~~\n      |         std::cout\n\
    In file included from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:75,\n\
    \                 from /tmp/tmpdhzliv9s.cpp:2:\n/usr/include/c++/9/iostream:61:18:\
    \ note: \u2018std::cout\u2019 declared here\n   61 |   extern ostream cout;  ///\
    \ Linked to standard output\n      |                  ^~~~\n/tmp/tmpdhzliv9s.cpp:65:21:\
    \ error: \u2018endl\u2019 was not declared in this scope; did you mean \u2018\
    std::endl\u2019?\n   65 |         cout<<ans <<endl;\n      |                 \
    \    ^~~~\n      |                     std::endl\nIn file included from /usr/include/c++/9/istream:39,\n\
    \                 from /usr/include/c++/9/sstream:38,\n                 from /usr/include/c++/9/complex:45,\n\
    \                 from /usr/include/c++/9/ccomplex:39,\n                 from\
    \ /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:54,\n                 from\
    \ /tmp/tmpdhz"
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smallest_even_value = INT_MIN;\n    long smallest_even_index = -1;\n\
    \    for (int i = 0; i < arr.size(); i++) {\n        int value = arr[i];\n   \
    \     if (value == 0) {\n            continue;\n        }\n        if (value %\
    \ 2 == 0) {\n            if (value < smallest_even_value) {\n                smallest_even_value\
    \ = value;\n                smallest_even_index = i;\n            }\n        }\
    \ else if (value % 2 != 0) {\n            if (smallest_even_index == -1) {\n \
    \               smallest_even_value = value;\n                smallest_even_index\
    \ = i;\n            } else {\n                assert(value == arr[smallest_even_index]);\n\
    \                smallest_even_value = value;\n                smallest_even_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_even_index == -1) {\n\
    \        return std::vector<long>();\n    } else {\n        return std::vector<long>{smallest_even_value,smallest_even_index};\n\
    \    }\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt0ynypca: /tmp/tmpt0ynypca.cpp:60: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    long lowest = arr[0]%2;\n    int min_idx = -1;\n\
    \    for (int i = 1; i < n; i++) {\n        if (arr[i]%2 == 0 && arr[i] < lowest\
    \ && (i != 0 || arr[i] < arr[i-1])) {\n            lowest = arr[i];\n        \
    \    min_idx = i;\n        }\n    }\n    std::vector<long> res;\n    if (min_idx\
    \ >= 0) {\n        res.push_back(arr[min_idx]);\n        res.push_back(min_idx);\n\
    \    }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp05q39syx: /tmp/tmp05q39syx.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long min;\n    long min_index;\n    min = std::numeric_limits<long>::max();\n\
    \    min_index = -1;\n\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] >= min) {\n            min = arr[i];\n            min_index = i;\n \
    \       }\n    }\n\n    if (arr.size() == 0) {\n        std::vector<long> ret;\n\
    \        ret.push_back(-1);\n        ret.push_back(-1);\n        return ret;\n\
    \    }\n\n    std::vector<long> res;\n    if (min % 2 == 0) {\n        if (min_index\
    \ >= 0) {\n            res.push_back(min);\n            res.push_back(min_index);\n\
    \        } else {\n            std::vector<long> ret = {min};\n            res.push_back(-1);\n\
    \            res.push_back(-1);\n            return ret;\n        }\n    } else\
    \ {\n        if (min_index >= 0) {\n            res.push_back(min_index);\n  \
    \      } else {\n            std::vector<long> ret = {-1};\n            res.push_back(-1);\n\
    \            res.push_back(-1);\n            return ret;\n        }\n    }\n \
    \   return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpr6lf6_92: /tmp/tmpr6lf6_92.cpp:73: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    std::vector<long> ret;\n    std::set<long>\
    \ seen_nodes;\n    for (long i = 0; i < arr.size(); i++) {\n        if (seen_nodes.find(arr[i])\
    \ == seen_nodes.end()) {\n            seen_nodes.insert(arr[i]);\n           \
    \ if (arr[i] % 2 == 0) {\n                smalest_value = arr[i];\n          \
    \  }\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n            }\n            ret.push_back(arr[i]);\n        }\n  \
    \  }\n    return ret;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpux7hl25s: /tmp/tmpux7hl25s.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    auto n = arr.size();\n    int sum = 0;\n    auto vec = std::vector<long>(arr.begin(),\
    \ arr.end());\n    for (int i = 0; i < n; i++) {\n        if (vec[i] % 2 == 0)\
    \ {\n            sum += vec[i];\n        }\n    }\n    if (sum < 1) {\n      \
    \  return {};\n    }\n    int smallest_val = sum / 2;\n    auto smallest_index\
    \ = -1;\n    for (int i = 0; i < n; i++) {\n        if (vec[i] % 2 == 0) {\n \
    \           if (smallest_val < vec[i]) {\n                smallest_val = vec[i];\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    if\
    \ (smallest_index == -1) {\n        return {};\n    }\n    return {smallest_val,\
    \ smallest_index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxt2vyaut: /tmp/tmpxt2vyaut.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = arr[0];\n    long smalest_index = 0;\n    for (size_t\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 != 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (arr.empty())\n\
    \        return std::vector<long>();\n    if (smalest_value == 0)\n        return\
    \ std::vector<long>();\n    std::vector<long> result;\n    result.push_back(smalest_value);\n\
    \    result.push_back(smalest_index);\n    return result;\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7samrvs4: /tmp/tmp7samrvs4.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  long smallest = 0;\n  long index_of_smallest = 0;\n  long smallest_even_value\
    \ = INT_MAX;\n  for (auto node : arr) {\n    if (node % 2 == 0 && node <= smallest_even_value)\
    \ {\n      smallest_even_value = node;\n      smallest = node;\n      index_of_smallest\
    \ = smallest;\n    }\n  }\n\n  if (smallest_even_value == 0) {\n    return std::vector<long>();\n\
    \  }\n\n  std::vector<long> smallest_index_of_smallest_even_value (\n      smallest_even_value);\n\
    \n  for (auto node : arr) {\n    if (node == smallest_even_value) {\n      smallest_index_of_smallest_even_value\
    \ =\n          std::vector<long>(index_of_smallest, index_of_smallest + 1);\n\
    \    }\n  }\n\n  return smallest_index_of_smallest_even_value;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_888gfkd: /tmp/tmp_888gfkd.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if(arr.size() == 0)\n        return {};\n    long min_index = LONG_MAX;\n\
    \    long min_value = LONG_MAX;\n    long index = LONG_MAX;\n    for(long i =\
    \ 0; i<arr.size(); ++i){\n        if(arr[i] < min_value){\n            min_value\
    \ = arr[i];\n            min_index = i;\n            index = i;\n        }\n \
    \       if(arr[i] == min_value){\n            if(arr[i] != min_value && arr[i]\
    \ != arr[index]){\n                min_index = index;\n            }\n       \
    \ }\n    }\n    return std::vector<long>({arr[min_index], min_index});\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6x6px7tw: /tmp/tmp6x6px7tw.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tlong even, smallest_index, temp;\n\tstd::vector<long> result;\n\t// Your\
    \ code goes here\n\tfor (int i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] % 2\
    \ == 0) {\n\t\t\teven = arr[i];\n\t\t\tsmallest_index = i;\n\t\t}\n\t}\n\tif (smallest\
    \ == 0) {\n\t\treturn result;\n\t}\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo1j77uxf.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo1j77uxf.cpp:38:6: error: \u2018smallest\u2019 was not\
    \ declared in this scope\n   38 |  if (smallest == 0) {\n      |      ^~~~~~~~\n\
    /tmp/tmpo1j77uxf.cpp:41:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   41 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  int N = arr.size();\n  int cnt = 0;\n  long minIndex = -1;\n  long smalest_value;\n\
    \  for (int i = 0; i < N; ++i) {\n    cnt += arr[i] % 2;\n    smalest_value =\
    \ arr[i];\n    if (cnt < 2) {\n      minIndex = i;\n      break;\n    }\n  }\n\
    \  if (cnt == 0) {\n    return {};\n  }\n  if (minIndex == -1) {\n    return {};\n\
    \  }\n  int minValue = 0;\n  for (int i = 0; i < N; ++i) {\n    arr[i] = arr[i]\
    \ - minValue;\n    if (arr[i] % 2 == 1) {\n      arr[i] = arr[i] + 1;\n    }\n\
    \    if (arr[i] < minValue) {\n      minValue = arr[i];\n      minIndex = i;\n\
    \    }\n  }\n  if (minValue == 0) {\n    return {};\n  }\n  std::vector<long>\
    \ v = {};\n  v[0] = minValue;\n  v[1] = minIndex;\n  return v;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpvwqoetok: /tmp/tmpvwqoetok.cpp:68: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    auto node = arr[0];\n    auto vec = std::vector<long>{};\n    auto even\
    \ = true;\n    auto smallest_value = node.value;\n    auto smallest_index = 0;\n\
    \    for (auto i : arr) {\n        if ((i.value % 2) == 0) {\n            if (smallest\
    \ > i.value) {\n                smallest_value = i.value;\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    if (smallest_value == 0) return vec;\n\
    \    for (auto i : arr) {\n        if (i.value % 2 == 0) {\n            if (smallest_value\
    \ == i.value && smallest != i) {\n                smallest_value = i.value;\n\
    \                smallest_index = i;\n            } else if (i.value < smallest_value\
    \ && i.value > smallest_value) {\n                smallest_value = i.value;\n\
    \                smallest_index = i;\n            }\n        }\n    }\n    vec.push_back(smallest_value);\n\
    \    vec.push_back(smallest_index);\n    return vec;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp82ot9sed.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp82ot9sed.cpp:32:32: error: request for member \u2018value\u2019\
    \ in \u2018node\u2019, which is of non-class type \u2018long int\u2019\n   32\
    \ |     auto smallest_value = node.value;\n      |                           \
    \     ^~~~~\n/tmp/tmp82ot9sed.cpp:35:16: error: request for member \u2018value\u2019\
    \ in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n   35 | \
    \        if ((i.value % 2) == 0) {\n      |                ^~~~~\n/tmp/tmp82ot9sed.cpp:36:17:\
    \ error: \u2018smallest\u2019 was not declared in this scope\n   36 |        \
    \     if (smallest > i.value) {\n      |                 ^~~~~~~~\n/tmp/tmp82ot9sed.cpp:36:30:\
    \ error: request for member \u2018value\u2019 in \u2018i\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   36 |             if (smallest > i.value) {\n \
    \     |                              ^~~~~\n/tmp/tmp82ot9sed.cpp:37:36: error:\
    \ request for member \u2018value\u2019 in \u2018i\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   37 |                 smallest_value = i.value;\n\
    \      |                                    ^~~~~\n/tmp/tmp82ot9sed.cpp:44:15:\
    \ error: request for member \u2018value\u2019 in \u2018i\u2019, which is of non-class\
    \ type \u2018long int\u2019\n   44 |         if (i.value % 2 == 0) {\n      |\
    \               ^~~~~\n/tmp/tmp82ot9sed.cpp:45:37: error: request for member \u2018\
    value\u2019 in \u2018i\u2019, which is of non-class type \u2018long int\u2019\n\
    \   45 |             if (smallest_value == i.value && smallest != i) {\n     \
    \ |                                     ^~~~~\n/tmp/tmp82ot9sed.cpp:45:46: error:\
    \ \u2018smallest\u2019 was not declared in this scope\n   45 |             if\
    \ (smallest_value == i.value && smallest != i) {\n      |                    \
    \                          ^~~~~~~~\n/tmp/tmp82ot9sed.cpp:46:36: error: request\
    \ for member \u2018value\u2019 in \u2018i\u2019, which is of non-class type \u2018\
    long int\u2019\n   46 |                 smallest_value = i.value;\n      |   \
    \                                 ^~~~~\n/tmp/tmp82ot9sed.cpp:48:26: error: request\
    \ for member \u2018value\u2019 in \u2018i\u2019, which is of non-class typ"
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    if(arr.empty())\n    {\n        return {};\n \
    \   }\n    \n    long min_value = *std::min_element(arr.begin(), arr.end());\n\
    \    long min_even_value = 0;\n    long index = 0;\n    for(long value : arr)\n\
    \    {\n        if(value % 2 == 0 && value > min_even_value)\n        {\n    \
    \        min_even_value = value;\n            index = std::distance(arr.begin(),\
    \ std::max_element(arr.begin(), arr.end()) - 1);\n        }\n    }\n    std::vector<long>\
    \ result = {min_value, index};\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxe4iy3dq: /tmp/tmpxe4iy3dq.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end(), [](const long a, const long b) { return\
    \ (a < b); });\n    long first_value = arr[0];\n    long index = -1;\n    long\
    \ first_index = -1;\n    for (auto &it : arr) {\n        if (it == first_value)\
    \ {\n            first_index = index;\n        } else if (it == first_value) {\n\
    \            index = first_index;\n        } else {\n            break;\n    \
    \    }\n    }\n    return std::vector<long>({first_value, first_index});\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqfl7t8is: /tmp/tmpqfl7t8is.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() != 0);\n    std::vector<long> result;\n    long min\
    \ = 1;\n    long index = 0;\n    long min_index = 0;\n    long max_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : arr) {\n        assert(i <= max_val);\n        assert(i >=\
    \ 0);\n        if (i % 2 == 0) {\n            min = i;\n            min_index\
    \ = index;\n        }\n        ++index;\n        max_val = i;\n    }\n    result.push_back(min);\n\
    \    if (result.size() > 1) {\n        for (auto i : arr) {\n            if (i\
    \ == min) {\n                return result;\n            }\n        }\n    } else\
    \ {\n        result.push_back(arr[0]);\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp15l92qeh: /tmp/tmp15l92qeh.cpp:36: std::vector<long int> pluck(std::vector<long
    int>): Assertion `i <= max_val'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long minValue = arr[0];\n    int minIndex = -1;\n    for (int i = 1;\
    \ i < arr.size(); i++) {\n        if (arr[i] != 0) {\n            if (arr[i] <\
    \ minValue) {\n                minValue = arr[i];\n                minIndex =\
    \ i;\n            }\n        }\n    }\n    if (minIndex == -1) {\n        return\
    \ std::vector<long>();\n    }\n    std::vector<long> res;\n    res.push_back(minValue);\n\
    \    res.push_back(minIndex);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmplp4tg9kt: /tmp/tmplp4tg9kt.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long temp = 0;\n    long even = std::numeric_limits<long>::max();\n\
    \    long min = std::numeric_limits<long>::max();\n    long smallest_index = 0;\n\
    \    std::vector<long> result;\n    for (auto val : arr) {\n        if (val %\
    \ 2 == 0) {\n            temp = temp + val;\n            if (temp < even) {\n\
    \                even = temp;\n                min = val;\n                smallest_index\
    \ = 0;\n            }\n            if (temp == even) {\n                smallest_index\
    \ = val;\n            }\n        } else if (temp != even) {\n            temp\
    \ = even;\n            even = std::numeric_limits<long>::max();\n            min\
    \ = std::numeric_limits<long>::max();\n            smallest_index = 0;\n     \
    \   }\n    }\n    result.push_back(min);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqtpoc4y4: /tmp/tmpqtpoc4y4.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    // ans is a vector to store result.\n    std::vector<long>\
    \ ans;\n    // min_value is to store the smallest value.\n    long min_value=arr[0];\n\
    \    // index to store the smallest index.\n    long index=0;\n    // count is\
    \ count of number of elements with smallest odd value.\n    long count=0;\n  \
    \  for(long i=0;i<arr.size();i++){\n        if(arr[i]%2!=0){\n            if(count==0){\n\
    \                min_value=arr[i];\n                index=i;\n               \
    \ count=1;\n            }else{\n                if(arr[i]<min_value){\n      \
    \              min_value=arr[i];\n                    index=i;\n             \
    \   }\n            }\n        }else{\n            if(count>0){\n             \
    \   if(arr[i]<min_value){\n                    min_value=arr[i];\n           \
    \         index=i;\n                }\n            }\n            count++;\n \
    \       }\n    }\n    ans.push_back(min_value);\n    ans.push_back(index);\n \
    \   return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6jd46qyv: /tmp/tmp6jd46qyv.cpp:67: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long max_val = 0;\n    std::vector<long> result;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] > max_val) {\n            max_val\
    \ = arr[i];\n            result.clear();\n        }\n        else if (arr[i] ==\
    \ max_val) {\n            result.push_back(arr[i]);\n        }\n    }\n    if\
    \ (result.empty())\n        return result;\n    auto it = std::min_element(result.begin(),\
    \ result.end());\n    if (*it == 0)\n        return result;\n    if (*it == max_val)\n\
    \        return std::vector<long>{*it, result.size() - 1};\n    return std::vector<long>{*it,\
    \ std::distance(result.begin(), it)};\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyqlncgi9: /tmp/tmpyqlncgi9.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  assert(arr.size() > 0);\n  std::vector<long> result;\n  if (arr.size()\
    \ == 1) {\n    return arr;\n  }\n  auto smallest_value = *std::min_element(arr.begin(),\
    \ arr.end());\n  auto smallest_index = std::distance(arr.begin(), std::min_element(arr.begin(),\
    \ arr.end()));\n  if (smallest_value % 2 == 0) {\n    result.push_back(smallest_value);\n\
    \    return result;\n  }\n  auto max_value = *std::max_element(arr.begin(), arr.end());\n\
    \  auto max_index = std::distance(arr.begin(), std::max_element(arr.begin(), arr.end()));\n\
    \  if (max_value % 2 == 0) {\n    result.push_back(max_value);\n    return result;\n\
    \  }\n  for (auto index : range(smallest_index - 1, max_index)) {\n    if (arr[index]\
    \ % 2 == 0) {\n      result.push_back(arr[index]);\n      return result;\n   \
    \ }\n  }\n  return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw5whjvf8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw5whjvf8.cpp:46:21: error: \u2018range\u2019 was not declared\
    \ in this scope\n   46 |   for (auto index : range(smallest_index - 1, max_index))\
    \ {\n      |                     ^~~~~\n"
  stdout: ''
  timestamp: 1660117767
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long ans[2];\n    long smallest = 0;\n    long index = 0;\n    for(long\
    \ i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            if(smallest\
    \ == 0 || arr[i] < arr[smallest]) {\n                smallest = i;\n         \
    \       ans[0] = arr[i];\n            }\n            ans[1] = i;\n           \
    \ index = i;\n        }\n    }\n    if(smallest != 0)\n        ans[1] = index;\n\
    \    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3diecsr6.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3diecsr6.cpp:44:12: error: could not convert \u2018ans\u2019\
    \ from \u2018long int [2]\u2019 to \u2018std::vector<long int>\u2019\n   44 |\
    \     return ans;\n      |            ^~~\n      |            |\n      |     \
    \       long int [2]\n"
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here\n    int max_index = 0;\n    int max_value =\
    \ INT_MIN;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ == max_value) {\n            if (max_index == 0) {\n                max_index\
    \ = i;\n            } else if (max_index == i) {\n                assert(max_value\
    \ == 0);\n                max_value = arr[i];\n                max_index = i;\n\
    \            }\n        } else if (arr[i] > max_value) {\n            max_value\
    \ = arr[i];\n            max_index = i;\n        }\n    }\n    return std::vector<long>({max_value,\
    \ max_index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp755tyupp: /tmp/tmp755tyupp.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    long index\
    \ = 0;\n    int count = 0;\n    // Your code goes here\n    int i = 0;\n    for(i=0;\
    \ i<arr.size(); i++){\n        count=0;\n        if(arr[i]%2 == 0){\n        \
    \    count=1;\n        }\n        if (arr[i] > smalest_value){\n            smalest_value=arr[i];\n\
    \            smalest_index=index;\n        }\n        index++;\n    }\n    std::vector<long>\
    \ arr_p;\n    arr_p.push_back(smalest_value);\n    arr_p.push_back(smalest_index);\n\
    \    return arr_p;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp3p9fiax: /tmp/tmpp3p9fiax.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int min_value = INT_MAX;\n    int min_index = 0;\n    int index_of_the_min_value\
    \ = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] != 0)\
    \ {\n            if (arr[i] < min_value) {\n                min_value = arr[i];\n\
    \                min_index = i;\n            }\n            if (arr[i] == min_value)\
    \ {\n                if (i == min_index) {\n                    index_of_the_min_value\
    \ = i;\n                }\n            }\n        }\n    }\n    if (min_value\
    \ == INT_MAX) {\n        return {};\n    }\n    return {min_value, index_of_the_min_value};\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmproh16kiv: /tmp/tmproh16kiv.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code goes here\n    long smalest_value=arr[0];\n    int smallest_index=arr[0];\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2==0){\n            if(arr[i]<smalest_value){\n\
    \                smalest_value=arr[i];\n                smallest_index=i;\n  \
    \          }\n        }\n    }\n    std::vector<long> result={smalest_value,smallest_index};\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpbdk5pk_z: /tmp/tmpbdk5pk_z.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  if (arr.empty()) return std::vector<long>();\n  std::map<long, int> res;\n\
    \  for (long i : arr) {\n    res[i] = res.size();\n  }\n  auto it = res.begin();\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (it->second == i) {\n      it++;\n\
    \    } else {\n      it->second = i;\n    }\n  }\n  return std::vector<long>{it->second,\
    \ it->first};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe35i62co: /tmp/tmpe35i62co.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    long minValue = arr[0];\n    long index = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        if (arr[i] < minValue) {\n       \
    \     minValue = arr[i];\n            index = i;\n        }\n    }\n\n    if (minValue\
    \ % 2 == 0) {\n        std::vector<long> res;\n        res.push_back(minValue);\n\
    \        res.push_back(index);\n        return res;\n    }\n\n    std::vector<long>\
    \ res;\n    res.push_back(minValue);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpucwh_id_: /tmp/tmpucwh_id_.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<std::pair<long, int>> v;\n  for (auto it: arr) {\n    v.push_back(std::make_pair(it,\
    \ std::distance(v.begin(), std::min_element(v.begin(), v.end()))));\n  }\n  std::vector<long>\
    \ ans;\n  std::sort(v.begin(), v.end(), [](std::pair<long, int> a, std::pair<long,\
    \ int> b) { return a.first < b.first; });\n  if (v.empty())\n    return ans;\n\
    \  int smallest = std::distance(v.begin(), std::min_element(v.begin(), v.end()));\n\
    \  auto it = std::min_element(v.begin(), v.end());\n  if (it->first % 2 == 0)\n\
    \    return std::pair<std::vector<long>, std::vector<long>>(ans, std::vector<long>({it->first,\
    \ it->second}));\n  else\n    return std::pair<std::vector<long>, std::vector<long>>(ans,\
    \ std::vector<long>({it->first, it->second + 1}));\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnkn04yzh.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpnkn04yzh.cpp:40:17: error: could not convert \u2018std::pair<std::vector<long\
    \ int>, std::vector<long int> >(ans, std::vector<long int>(std::initializer_list<long\
    \ int>{((const long int*)(& const long int [2]{it.__gnu_cxx::__normal_iterator<std::pair<long\
    \ int, int>*, std::vector<std::pair<long int, int> > >::operator->()->std::pair<long\
    \ int, int>::first, ((long int)it.__gnu_cxx::__normal_iterator<std::pair<long\
    \ int, int>*, std::vector<std::pair<long int, int> > >::operator->()->std::pair<long\
    \ int, int>::second)})), 2}, std::allocator<long int>()))\u2019 from \u2018std::pair<std::vector<long\
    \ int>, std::vector<long int> >\u2019 to \u2018std::vector<long int>\u2019\n \
    \  40 |     return std::pair<std::vector<long>, std::vector<long>>(ans, std::vector<long>({it->first,\
    \ it->second}));\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                 |\n      |                 std::pair<std::vector<long\
    \ int>, std::vector<long int> >\n/tmp/tmpnkn04yzh.cpp:42:17: error: could not\
    \ convert \u2018std::pair<std::vector<long int>, std::vector<long int> >(ans,\
    \ std::vector<long int>(std::initializer_list<long int>{((const long int*)(& const\
    \ long int [2]{it.__gnu_cxx::__normal_iterator<std::pair<long int, int>*, std::vector<std::pair<long\
    \ int, int> > >::operator->()->std::pair<long int, int>::first, ((long int)(it.__gnu_cxx::__normal_iterator<std::pair<long\
    \ int, int>*, std::vector<std::pair<long int, int> > >::operator->()->std::pair<long\
    \ int, int>::second + 1))})), 2}, std::allocator<long int>()))\u2019 from \u2018\
    std::pair<std::vector<long int>, std::vector<long int> >\u2019 to \u2018std::vector<long\
    \ int>\u2019\n   42 |     return std::pair<std::vector<long>, std::vector<long>>(ans,\
    \ std::vector<long>({it->first, it->second + 1}));\n      |                 ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\
    \      |                 |\n      |                 s"
  stdout: ''
  timestamp: 1660117767
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    if(arr.size() == 0)\n        return arr;\n    long\
    \ smallest_value = arr[0];\n    int smallest_index = 0;\n    for(int i = 1; i\
    \ < arr.size(); i++) {\n        if(arr[i] < smallest_value) {\n            smallest_index\
    \ = i;\n            smallest_value = arr[i];\n        }\n    }\n    std::vector<long>\
    \ result;\n    result.push_back(smallest_value);\n    result.push_back(smallest_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp36ab5kvc: /tmp/tmp36ab5kvc.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::priority_queue<long, std::vector<long>, std::greater<long>> pq;\n\
    \    for (long x : arr) {\n        pq.emplace(x);\n    }\n    pq.emplace(0);\n\
    \    pq.emplace(0);\n    std::vector<long> v;\n    while (pq.size()) {\n     \
    \   v.push_back(pq.top());\n        pq.pop();\n        while (pq.size() && !(pq.top()\
    \ & 1)) {\n            pq.pop();\n        }\n    }\n    return v;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnd5894vx: /tmp/tmpnd5894vx.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int size = arr.size();\n    std::vector<long> ans(size);\n    for (int\
    \ i = 0; i < size; i++) {\n        if (arr[i] % 2 != 0) ans[i] = 0;\n        else\
    \ ans[i] = arr[i];\n    }\n\n    int smallest = std::numeric_limits<int>::max();\n\
    \    int smallest_index = -1;\n    for (int i = 1; i < size; i++) {\n        if\
    \ (ans[i] < smallest) {\n            smallest = ans[i];\n            smallest_index\
    \ = i;\n        }\n    }\n\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp471hrtzz: /tmp/tmp471hrtzz.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long even_min=std::numeric_limits<long>::max();\n    std::vector<long>\
    \ v;\n    for(auto &itr: arr)\n    {\n        if(itr%2==0)\n        {\n      \
    \      if(itr<even_min)\n                even_min=itr;\n            else\n   \
    \             v.push_back(itr);\n        }\n    }\n    if(v.size()==0)\n     \
    \   return v;\n    if(even_min%2==0)\n        v.push_back(even_min);\n    return\
    \ v;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqmuxveut: /tmp/tmpqmuxveut.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    auto min_element = *std::min_element(arr.cbegin(), arr.cend());\n   \
    \ return arr\n                .at(0)\n                .empty()\n             \
    \   ?\n                {}\n                :\n                std::vector<long>{min_element,\n\
    \                                     std::distance(arr.cbegin(), std::find(arr.cbegin(),\
    \ arr.cend(), min_element))};\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7fenqnqb.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7fenqnqb.cpp:32:18: error: request for member \u2018empty\u2019\
    \ in \u2018arr.std::vector<long int>::at(0)\u2019, which is of non-class type\
    \ \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019}\n   32 |                 .empty()\n      |      \
    \            ^~~~~\n/tmp/tmp7fenqnqb.cpp:34:17: error: expected primary-expression\
    \ before \u2018{\u2019 token\n   34 |                 {}\n      |            \
    \     ^\n/tmp/tmp7fenqnqb.cpp:33:18: error: expected \u2018:\u2019 before \u2018\
    {\u2019 token\n   33 |                 ?\n      |                  ^\n      |\
    \                  :\n   34 |                 {}\n      |                 ~ \n\
    /tmp/tmp7fenqnqb.cpp:34:17: error: expected primary-expression before \u2018{\u2019\
    \ token\n   34 |                 {}\n      |                 ^\n/tmp/tmp7fenqnqb.cpp:33:18:\
    \ error: expected \u2018;\u2019 before \u2018{\u2019 token\n   33 |          \
    \       ?\n      |                  ^\n      |                  ;\n   34 |   \
    \              {}\n      |                 ~ \n/tmp/tmp7fenqnqb.cpp:35:17: error:\
    \ expected primary-expression before \u2018:\u2019 token\n   35 |            \
    \     :\n      |                 ^\n"
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::ios_base::sync_with_stdio(false);\n  long long ans = 0, cur = 0;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    cur = arr[i];\n    if (i % 2 ==\
    \ 0) ans++;\n  }\n  if (ans == 0) {\n    return std::vector();\n  }\n  auto index\
    \ = arr[0];\n  cur = arr[0];\n  for (int i = 1; i < arr.size(); i++) {\n    cur\
    \ += arr[i];\n    if (i % 2 == 0) ans++;\n    if (cur < index) index = cur;\n\
    \  }\n  long long min = index;\n  index = cur;\n  while (index > 1) {\n    index--;\n\
    \    if (index * 2 < min) min = index;\n  }\n  return std::vector({min, index});\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6373krp.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpw6373krp.cpp:36:24: error: cannot deduce template arguments\
    \ for \u2018vector<...auto...>\u2019 from ()\n   36 |     return std::vector();\n\
    \      |                        ^\n/tmp/tmpw6373krp.cpp:51:34: error: class template\
    \ argument deduction failed:\n   51 |   return std::vector({min, index});\n  \
    \    |                                  ^\n/tmp/tmpw6373krp.cpp:51:34: error:\
    \ no matching function for call to \u2018vector(<brace-enclosed initializer list>)\u2019\
    \nIn file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw6373krp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1872:5:\
    \ note: candidate: \u2018template<class _InputIterator, class _ValT, class _Allocator,\
    \ class, class> std::vector(_InputIterator, _InputIterator, _Allocator)-> std::vector<_ValT,\
    \ _Allocator>\u2019\n 1872 |     vector(_InputIterator, _InputIterator, _Allocator\
    \ = _Allocator())\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1872:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpw6373krp.cpp:51:34:\
    \ note:   candidate expects 3 arguments, 1 provided\n   51 |   return std::vector({min,\
    \ index});\n      |                                  ^\nIn file included from\
    \ /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpw6373krp.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc, class _InputIterator,\
    \ class> vector(_InputIterator, _InputIterator, const _Alloc&)-> std::vecto"
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() >= 2);\n    // Sorting the array will help in getting\
    \ the smallest odd value and the index.\n    std::sort(arr.begin(), arr.end());\n\
    \    long smallest_odd_value = arr[0];\n    int smallest_odd_index = 0;\n\n  \
    \  // Let's look for the smallest odd value.\n    for (int i = 1; i < arr.size();\
    \ ++i) {\n        long current = arr[i];\n        if (current % 2 != 0) {\n  \
    \          if (smallest_odd_value < current) {\n                smallest_odd_value\
    \ = current;\n                smallest_odd_index = i;\n            }\n       \
    \ }\n    }\n\n    // If no such value exists return empty array.\n    if (smallest_odd_value\
    \ == 0)\n        return std::vector<long>();\n\n    // There are multiple values\
    \ with the same smallest odd value.\n    // Let's find the smallest index and\
    \ pick that index.\n    int current_index = smallest_odd_index;\n    int current_value\
    \ = smallest_odd_value;\n    for (int i = 2; i < arr.size(); ++i) {\n        long\
    \ current = arr[i];\n        if (current % 2 != 0) {\n            if (current_value\
    \ < current) {\n                current_value = current;\n                current_index\
    \ = i;\n            }\n        }\n    }\n\n    return std::vector<long>{smallest_odd_value,\
    \ current_index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb7rc9ot3: /tmp/tmpb7rc9ot3.cpp:68: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    int n = arr.size();\n    std::vector<int> indices(n,\
    \ 0);\n    \n    for (int i = 0; i < n; i++) {\n        if(arr[i] % 2 == 0){\n\
    \            indices[i] = i;\n        }\n    }\n    return arr[indices[0]];\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpff1r4uny.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpff1r4uny.cpp:38:26: error: could not convert \u2018arr.std::vector<long\
    \ int>::operator[](((std::vector<long int>::size_type)indices.std::vector<int>::operator[](0)))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to \u2018std::vector<long int>\u2019\n   38 |   \
    \  return arr[indices[0]];\n      |                          ^\n      |      \
    \                    |\n      |                          __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type {aka long int}\n"
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    auto index = std::distance(arr.begin(),\
    \ std::unique(arr.begin(), arr.end()));\n    if (index == 0) {\n        return\
    \ {};\n    }\n    auto value = arr.front();\n    for (auto i : arr) {\n      \
    \  if (i % 2 == 0) {\n            value = i;\n            break;\n        }\n\
    \    }\n    return {value, index};\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpqsn0o6fk: /tmp/tmpqsn0o6fk.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long min_value = 0;\n    long min_idx = 0;\n    for (auto idx : arr)\
    \ {\n        if (idx == 0) continue;\n        if (idx == min_value) {\n      \
    \      min_idx = idx;\n            continue;\n        }\n        if (min_value\
    \ < idx) {\n            min_value = idx;\n            min_idx = idx;\n       \
    \ } else if (min_value >= idx) break;\n    }\n    std::vector<long> res(min_idx);\n\
    \    for (auto idx : arr) {\n        if (idx == 0) continue;\n        if (idx\
    \ == min_value) {\n            res[min_idx] = idx;\n            continue;\n  \
    \      }\n        if (min_value < idx) {\n            res[min_idx] = idx;\n  \
    \          min_value = idx;\n            min_idx = idx;\n        } else if (min_value\
    \ >= idx) break;\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfaw65mjt: /tmp/tmpfaw65mjt.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117768
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    auto it = std::min_element(arr.begin(),\
    \ arr.end(), [](const long & x, const long & y) { return x % 2 == y; });\n   \
    \ std::vector<long> res;\n    res.push_back(arr[it - arr.begin()]);\n    res.push_back(it\
    \ - arr.begin());\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0xcphyd3: /tmp/tmp0xcphyd3.cpp:38: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> ans;\n    if(arr.size() == 0)\n \
    \       return ans;\n    long curr = arr[0];\n    long ind = 0;\n    for(long\
    \ i:arr){\n        if(i%2 == 0) {\n            long val = (i+curr)/2;\n      \
    \      if(val < curr){\n                curr = val;\n                ind = i;\n\
    \            }\n        }\n    }\n    ans.push_back(ind + curr);\n    return ans;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp7utpc3ss: /tmp/tmp7utpc3ss.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here\n    long smalest_value = 0;\n    int smalest_index\
    \ = 0;\n    int i = 0;\n    int j = 1;\n    int k = 0;\n    int l = arr.size();\n\
    \    while(j < l && arr[j] < smalest_value) {\n        smalest_value = arr[j];\n\
    \        smalest_index = j;\n        j = j + 1;\n    }\n    if(i == l || smalest_index\
    \ == i){\n        return {};\n    }\n    else{\n        return std::vector<long>{smalest_value,\
    \ smalest_index};\n    }\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmppxwq38x4: /tmp/tmppxwq38x4.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::vector<long> res;\n    long smallest\
    \ = 0, index = 0;\n    long even_value = arr[0];\n    for(int i = 1; i < arr.size();\
    \ i++){\n        if(arr[i] < arr[index]){\n            index = i;\n        }\n\
    \    }\n    if(index < smallest){\n        smallest = index;\n        even_value\
    \ = arr[index];\n    }\n    for(int i = 1; i < arr.size(); i++){\n        if(arr[i]\
    \ < even_value){\n            if(arr[i] < smallest){\n                smallest\
    \ = i;\n            }\n        }\n    }\n    res.push_back(even_value);\n    res.push_back(smallest);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmprczll2an: /tmp/tmprczll2an.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long long min_even_val = 0;\n    int min_even_val_index = 0;\n\n    for\
    \ (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n    \
    \        int tmp = arr[i] / 2;\n            if (tmp < min_even_val) {\n      \
    \          min_even_val = tmp;\n                min_even_val_index = i;\n    \
    \        }\n        }\n    }\n\n    if (min_even_val == 0) {\n        return {};\n\
    \    }\n    return {arr[min_even_val_index], min_even_val_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxqc03dzm: /tmp/tmpxqc03dzm.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  int n = arr.size();\n  int smalest_value = 0;\n  int smallest_index = -1;\n\
    \  for (int i = 0; i < n; i++) {\n    if (arr[i] < smalest_value) {\n      smallest_index\
    \ = i;\n      smalest_value = arr[i];\n    }\n  }\n  if (smallest_index == -1)\
    \ {\n    return std::vector<long>();\n  }\n  std::vector<long> res{smalest_value,\
    \ smallest_index};\n  return res;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp4wh65ls: /tmp/tmpp4wh65ls.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int min = 0, cur_index = -1;\n    for (int i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            min = arr[i] < min ? arr[i] :\
    \ min;\n            cur_index = i;\n        }\n    }\n    std::vector<long> res;\n\
    \    if (min == 0)\n        return res;\n    res.push_back(arr[cur_index]);\n\
    \    int min = arr[0] < min ? arr[0] : min;\n    long min = arr[cur_index] < min\
    \ ? arr[cur_index] : min;\n    long temp = 0;\n    while (arr[cur_index] >= min\
    \ && arr[cur_index] != min)\n        cur_index--;\n    res.insert(res.end(), arr[cur_index],\
    \ arr[cur_index + 1]);\n    return res;\n}\nint main() {\n    auto candidate =\
    \ pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1m4u0u4x.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1m4u0u4x.cpp:40:9: error: redeclaration of \u2018int min\u2019\
    \n   40 |     int min = arr[0] < min ? arr[0] : min;\n      |         ^~~\n/tmp/tmp1m4u0u4x.cpp:29:9:\
    \ note: \u2018int min\u2019 previously declared here\n   29 |     int min = 0,\
    \ cur_index = -1;\n      |         ^~~\n/tmp/tmp1m4u0u4x.cpp:41:10: error: conflicting\
    \ declaration \u2018long int min\u2019\n   41 |     long min = arr[cur_index]\
    \ < min ? arr[cur_index] : min;\n      |          ^~~\n/tmp/tmp1m4u0u4x.cpp:29:9:\
    \ note: previous declaration as \u2018int min\u2019\n   29 |     int min = 0,\
    \ cur_index = -1;\n      |         ^~~\n"
  stdout: ''
  timestamp: 1660117769
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    //code here\n    int n=arr.size();\n    long min_index=0;\n    long smalest_value\
    \ = 0;\n    for (int i=0; i<n; i++){\n        if (arr[i] % 2 == 0){\n        \
    \    smalest_value=arr[i];\n            min_index=i;\n        }\n    }\n    if\
    \ (min_index==n){\n        return {};\n    }\n    std::vector<long> ans;\n   \
    \ ans.push_back(min_index);\n    if (min_index+1 < n){\n        if (smalest_value\
    \ % 2 == 0){\n            ans.push_back(arr[min_index+1]);\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9gpxm352: /tmp/tmp9gpxm352.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> out;\n    if (arr.empty()) {\n        return out;\n\
    \    }\n    std::sort(arr.begin(), arr.end(), [&](long a, long b) {\n        return\
    \ abs(a) < abs(b);\n    });\n    auto it = std::find_if(arr.begin(), arr.end(),\n\
    \        [&arr](long x) { return x == arr[0]; }\n    );\n    auto index = it -\
    \ arr.begin();\n    while (it - arr.begin() != arr.end() - 1) {\n        if (arr[index]\
    \ % 2 == 0) {\n            break;\n        }\n        index++;\n    }\n    auto\
    \ value = arr[index];\n    if (it - arr.begin() == arr.end() - 1) {\n        if\
    \ (arr[arr.size() - 1] % 2 == 0) {\n            value = arr[arr.size() - 1];\n\
    \        }\n    }\n    out.push_back(value);\n    out.push_back(index);\n    return\
    \ out;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplnh_dzis.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplnh_dzis.cpp:40:29: error: no match for \u2018operator!=\u2019\
    \ (operand types are \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::difference_type\u2019 {aka \u2018long int\u2019} and \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019)\n   40 |     while (it - arr.begin() !=\
    \ arr.end() - 1) {\n      |            ~~~~~~~~~~~~~~~~ ^~ ~~~~~~~~~~~~~\n   \
    \   |               |                          |\n      |               |    \
    \                      __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\n      |               __gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >::difference_type {aka long int}\nIn file included from /usr/include/c++/9/bits/stl_algobase.h:67,\n\
    \                 from /usr/include/c++/9/bits/specfun.h:45,\n               \
    \  from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmplnh_dzis.cpp:2:\n/usr/include/c++/9/bits/stl_iterator.h:897:5:\
    \ note: candidate: \u2018template<class _IteratorL, class _IteratorR, class _Container>\
    \ bool __gnu_cxx::operator!=(const __gnu_cxx::__normal_iterator<_IteratorL, _Container>&,\
    \ const __gnu_cxx::__normal_iterator<_IteratorR, _Container>&)\u2019\n  897 |\
    \     operator!=(const __normal_iterator<_IteratorL, _Container>& __lhs,\n   \
    \   |     ^~~~~~~~\n/usr/include/c++/9/bits/stl_iterator.h:897:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmplnh_dzis.cpp:40:44: note: \
    \  mismatched types \u2018const __gnu_cxx::__normal_iterator<_IteratorL, _Container>\u2019\
    \ and \u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long int> >::difference_type\u2019\
    \ {aka \u2018long int\u2019}\n   40 |     while (it - arr.begin() != arr.end()\
    \ - 1) {\n      |                                            ^\nIn file included\
    \ from /usr/include/c++/9/bits/stl_algobase.h:67,\n                 from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:192"
  stdout: ''
  timestamp: 1660117769
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tint n = arr.size();\n\tassert(n > 0);\n\tstd::vector<long> res(n);\n\t\
    for (int i = 0; i < n; i++) {\n\t\tassert(arr[i] >= 0);\n\t}\n\tint min_odd =\
    \ 0;\n\tint min_idx = -1;\n\tfor (int i = 0; i < n; i++) {\n\t\tif (arr[i] % 2\
    \ == 0) {\n\t\t\tmin_odd = std::min(min_odd, arr[i]);\n\t\t\tmin_idx = i;\n\t\t\
    }\n\t}\n\tif (min_odd > 0)\n\t\tres[min_idx] = min_odd;\n\telse\n\t\tres.clear();\n\
    \treturn res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd4s13g8t.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd4s13g8t.cpp:39:38: error: no matching function for call\
    \ to \u2018min(int&, __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type&)\u2019\n   39 |    min_odd = std::min(min_odd, arr[i]);\n\
    \      |                                      ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd4s13g8t.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:198:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::min(const\
    \ _Tp&, const _Tp&)\u2019\n  198 |     min(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:198:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmpd4s13g8t.cpp:39:38: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018int\u2019\
    \ and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   39 |    min_odd = std::min(min_odd, arr[i]);\n\
    \      |                                      ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmpd4s13g8t.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::min(const _Tp&, const _Tp&, _Compare)\u2019\n  246 |     min(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:246:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpd4s13g8t.cpp:39:38:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019})\n   39 |    min_odd = std::min(min_odd, arr[i]);\n\
    \      |"
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> results;\n    if(arr.empty())\n \
    \       return results;\n    if(arr.size() == 1)\n        return arr;\n    long\
    \ smallestNum = 0;\n    long index = 0;\n    int val = 1;\n    for(long num :\
    \ arr)\n    {\n        if(num < smallestNum)\n        {\n            smallestNum\
    \ = num;\n            index = num;\n            val = val*num;\n        }\n  \
    \      else if(num == smallestNum)\n        {\n            if(num%2 == 0)\n  \
    \              val = val*num;\n        }\n    }\n    std::vector<long> ret;\n\
    \    ret.push_back(val);\n    ret.push_back(index);\n    return results;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpf16yjvq3: /tmp/tmpf16yjvq3.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> res(arr.size());\n    std::sort(arr.begin(),\
    \ arr.end(), [&](long a, long b) {\n        return a&1L<<(b&1L);\n    });\n  \
    \  long smalest_value = arr[0];\n    long smalest_index = -1;\n    for(auto it\
    \ = arr.begin() + 1; it != arr.end(); ++it) {\n        if (*it & 1L) {\n     \
    \       if (smalest_index != -1)\n                assert(*it > smalest_value);\n\
    \            smalest_value = *it;\n            smalest_index = it - arr.begin();\n\
    \        }\n    }\n    if (smalest_index != -1)\n        assert(*smalest_value\
    \ > smalest_value);\n    res.emplace_back(smalest_value);\n    res.emplace_back(smalest_index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "In file included from /usr/include/c++/9/cassert:44,\n                \
    \ from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:33,\n               \
    \  from /tmp/tmpn1n4k4j9.cpp:2:\n/tmp/tmpn1n4k4j9.cpp: In function \u2018std::vector<long\
    \ int> pluck(std::vector<long int>)\u2019:\n/tmp/tmpn1n4k4j9.cpp:45:17: error:\
    \ invalid type argument of unary \u2018*\u2019 (have \u2018long int\u2019)\n \
    \  45 |         assert(*smalest_value > smalest_value);\n      |             \
    \    ^~~~~~~~~~~~~\n"
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res(arr.begin(), arr.end());\n    sort(res.begin(),\
    \ res.end(), [&](long i, long j){\n        return arr[i]%2 == arr[j]%2;\n    });\n\
    \    int count = 0;\n    for(int i = res.size()-1; i >= 0; i--){\n        if(res[i]%2\
    \ ==0){\n            count++;\n            break;\n        }\n    }\n    long\
    \ smalest_value = arr[0];\n    long smalest_index = 0;\n    for(int i = 0; i <\
    \ count; i++){\n        if(res[i] < smalest_value){\n            smalest_value\
    \ = res[i];\n            smalest_index = i;\n        }\n    }\n    for(int i =\
    \ 0; i < count; i++){\n        if(res[i] == smalest_value){\n            res[smalest_index]\
    \ = res[i];\n            res[i] = 0;\n            res[count] = res[count] + 1;\n\
    \            count = count + 1;\n        }\n    }\n    if(count == 0){\n     \
    \   res.clear();\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6ezf4i3o: /tmp/tmp6ezf4i3o.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  // write your code here\n  std::vector<long> s;\n  long smalest_value =\
    \ 0;\n  long smalest_index = 0;\n  long smalest_even_index = 0;\n  for (long i\
    \ = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0)\n      smalest_even_index\
    \ = i;\n    if (arr[i] < smalest_value) {\n      smalest_value = arr[i];\n   \
    \   smalest_index = i;\n      smalest_even_index = i;\n    }\n  }\n  if (smalest_value\
    \ % 2 == 0) {\n    if (smalest_index < smalest_even_index)\n      smalest_index\
    \ = smalest_even_index;\n  }\n  s.push_back(smalest_value);\n  s.push_back(smalest_index);\n\
    \  return s;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpaerfewr3: /tmp/tmpaerfewr3.cpp:53: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    long smalest_value=INT_MAX;\n    int index_of_smalest_value=-1;\n\
    \    int count=0;\n    for (auto it:arr) {\n        if (it%2==0) {\n         \
    \   smalest_value=it;\n            index_of_smalest_value=count;\n        }\n\
    \        count++;\n    }\n    if (smalest_value==INT_MAX)\n        return result;\n\
    \    else {\n        result.push_back(result[0]);\n        std::vector<long> res(1);\n\
    \        res.push_back(result[0]);\n        if (smalest_value<index_of_smalest_value)\
    \ \n            res[1]=index_of_smalest_value;\n        \n        return res;\n\
    \    }\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long min = 1;\n    long temp = 1;\n    long index = arr.size()-1;\n \
    \   std::vector<long> result;\n    for (auto it=arr.begin(); it!=arr.end(); ++it){\n\
    \        if ((*it) % 2 == 0){\n            temp *= (*it);\n            if(temp<min){\n\
    \                min = temp;\n                index = it;\n            }\n   \
    \     }\n    }\n    result.push_back(arr[min]);\n    result.push_back(index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa2douiwx.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpa2douiwx.cpp:38:25: error: cannot convert \u2018__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\u2019 to \u2018long int\u2019 in assignment\n\
    \   38 |                 index = it;\n      |                         ^~\n   \
    \   |                         |\n      |                         __gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> >\n"
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0, smalest_index = 0;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0)\n            smalest_value = arr[i];\n\
    \        if (arr[i] < smalest_value) {\n            smalest_value = arr[i];\n\
    \            smalest_index = i;\n        }\n    }\n    std::vector<long> result;\n\
    \    if (arr.size() == 0) {\n        result = {0};\n    } else {\n        result\
    \ = {smalest_value, smalest_index};\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmph2cjvc2j: /tmp/tmph2cjvc2j.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  if (arr.empty()) {\n    return result;\n \
    \ }\n  long smallest_value = arr[0];\n  long smallest_index = 0;\n  for (auto\
    \ i : arr) {\n    if (i % 2 == 0) {\n      if (smallest_value < i) {\n       \
    \ smallest_value = i;\n        smallest_index = i;\n      }\n    } else {\n  \
    \    if (smallest_value == i) {\n        smallest_index++;\n      }\n    }\n \
    \ }\n  return std::vector<long>{smallest_value, smallest_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp18l099_d: /tmp/tmp18l099_d.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\t// Your code here\n\tstd::vector<long> vec;\n\tlong smallest;\n\tlong smallest_index;\n\
    \tfor (int i = 0; i <arr.size(); i++) {\n\t\tif (arr[i] % 2 == 0) {\n\t\t\tif\
    \ (smallest == 0)\n\t\t\t\tsmallest = arr[i];\n\t\t\telse\n\t\t\t\tif (arr[i]\
    \ < smallest)\n\t\t\t\t\tsmallest = arr[i];\n\t\t}\n\t}\n\tif (smallest == 0)\n\
    \t\treturn vec;\n\telse\n\t\tfor (int i = 0; i <arr.size(); i++) {\n\t\t\tif (arr[i]\
    \ == smallest && arr[i] % 2 == 0)\n\t\t\t\tsmallest_index = i;\n\t\t}\n\tvec.push_back(smallest);\n\
    \tvec.push_back(smallest_index);\n\treturn vec;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd9x0orbm: /tmp/tmpd9x0orbm.cpp:57: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> ans;\n    for (long &it : arr) {\n\
    \        if (it % 2 == 0) {\n            ans.push_back(it);\n        }\n    }\n\
    \    if (ans.empty())\n        return ans;\n    if (ans.size() > 1) {\n      \
    \  long min = ans[0];\n        int index = -1;\n        for (int i = 1; i < ans.size();\
    \ i++) {\n            if (ans[i] < min) {\n                min = ans[i];\n   \
    \             index = i;\n            }\n        }\n        return std::vector<long>{min,\
    \ index};\n    }\n    return std::vector<long>{ans[0], ans[0]};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpu_lg1e1b: /tmp/tmpu_lg1e1b.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long min_value = *std::min_element(arr.begin(), arr.end());\n    long\
    \ index = *std::find(arr.begin(), arr.end(), min_value);\n    return std::vector<long>{min_value,\
    \ index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpin9h8bb6: /tmp/tmpin9h8bb6.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() > 0);\n    int n = arr.size();\n    std::vector<int>\
    \ temp;\n    bool done = false;\n    while (!done) {\n        int min_index =\
    \ -1;\n        int min_value = -1;\n        for (int i = 0; i < n; ++i) {\n  \
    \          if (min_value == -1 || temp[i] < min_value) {\n                min_index\
    \ = i;\n                min_value = temp[i];\n            }\n        }\n     \
    \   if (min_index != -1) {\n            temp.push_back(min_index);\n         \
    \   done = true;\n        } else if (n == 1) {\n            return std::vector<long>();\n\
    \        }\n        temp.pop_back();\n        --n;\n    }\n    return temp;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4aobsg6y.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp4aobsg6y.cpp:51:12: error: could not convert \u2018temp\u2019\
    \ from \u2018vector<int>\u2019 to \u2018vector<long int>\u2019\n   51 |     return\
    \ temp;\n      |            ^~~~\n      |            |\n      |            vector<int>\n"
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  // Your code here\n  if (arr.empty())\n    return {};\n  std::vector<std::pair<long,\
    \ int> > index;\n  std::unordered_map<long, int> value_map;\n  for (auto n : arr)\
    \ {\n    auto it = value_map.find(n);\n    if (it != value_map.end()) {\n    \
    \  index.push_back(std::make_pair(it->second, it->first));\n    } else {\n   \
    \   value_map.insert(std::make_pair(n, 0));\n      index.push_back(std::make_pair(0,\
    \ n));\n    }\n  }\n  std::sort(index.begin(), index.end(), [&](std::pair<long,\
    \ int> a, std::pair<long, int> b) {\n    return a.first < b.first;\n  });\n  std::set<long>\
    \ result;\n  std::unordered_set<long> seen_nodes;\n  for (auto it = index.rbegin();\
    \ it != index.rend(); ++it) {\n    auto value = it->first;\n    if (seen_nodes.find(value)\
    \ != seen_nodes.end()) {\n      continue;\n    }\n    if (value % 2 == 0) {\n\
    \      if (result.find(value) == result.end()) {\n        result.insert(value);\n\
    \      }\n      seen_nodes.insert(value);\n    }\n  }\n  if (seen_nodes.size()\
    \ == 0)\n    return {};\n  std::map<long, int> result_map;\n  for (auto it: result_map)\
    \ {\n    index.push_back(std::make_pair(it->second, it->first));\n  }\n  std::sort(index.begin(),\
    \ index.end(), [&](std::pair<long, int> a, std::pair<long, int> b) {\n    return\
    \ a.first < b.first;\n  });\n  result.erase(result.begin());\n  return std::move(index);\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2t32jeh.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd2t32jeh.cpp:64:38: error: base operand of \u2018->\u2019\
    \ has non-pointer type \u2018std::pair<const long int, int>\u2019\n   64 |   \
    \  index.push_back(std::make_pair(it->second, it->first));\n      |          \
    \                            ^~\n/tmp/tmpd2t32jeh.cpp:64:50: error: base operand\
    \ of \u2018->\u2019 has non-pointer type \u2018std::pair<const long int, int>\u2019\
    \n   64 |     index.push_back(std::make_pair(it->second, it->first));\n      |\
    \                                                  ^~\n/tmp/tmpd2t32jeh.cpp:70:19:\
    \ error: could not convert \u2018std::move<std::vector<std::pair<long int, int>\
    \ >&>(index)\u2019 from \u2018vector<std::pair<long int, int>>\u2019 to \u2018\
    vector<long int>\u2019\n   70 |   return std::move(index);\n      |          ~~~~~~~~~^~~~~~~\n\
    \      |                   |\n      |                   vector<std::pair<long\
    \ int, int>>\n"
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long sum = 0; // sum is holding the total of the sums\n    int index\
    \ = 0; // the index in the array with the smallest sum\n    for (auto & i : arr)\
    \ {\n        if (i % 2 == 0) {\n            sum += i;\n            if (sum ==\
    \ 0) {\n                index = arr.size() - i;\n                break;\n    \
    \        }\n        } else {\n            sum -= i;\n        }\n    }\n    if\
    \ (arr.size() == 0) {\n        return {};\n    }\n    std::vector<long> new_arr;\n\
    \    for (auto & i : arr) {\n        if ((i % 2 == 0) && (i != 0)) {\n       \
    \     new_arr.push_back(i / 2);\n        } else if (i > 0) {\n            new_arr.push_back(i);\n\
    \        }\n    }\n    return {sum, new_arr};\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd2r4ezly.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpd2r4ezly.cpp:53:25: error: could not convert \u2018{sum,\
    \ new_arr}\u2019 from \u2018<brace-enclosed initializer list>\u2019 to \u2018\
    std::vector<long int>\u2019\n   53 |     return {sum, new_arr};\n      |     \
    \                    ^\n      |                         |\n      |           \
    \              <brace-enclosed initializer list>\n"
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::iota(arr.begin(), arr.end(), 0);\n    auto it = std::min_element(arr.begin(),\
    \ arr.end());\n    if (it == arr.end() || it == arr.begin()) return std::vector<long>();\n\
    \    auto index = std::distance(arr.begin(), it);\n    return std::vector<long>({*it,\
    \ index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_xn8z13d: /tmp/tmp_xn8z13d.cpp:37: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    if(n < 2)\n        return std::vector{};\n \
    \   if(std::is_sorted(arr.begin(), arr.end())) {\n        std::vector<long> res(n);\n\
    \        res[0] = arr[0];\n        res[1] = arr[1];\n        return res;\n   \
    \ }\n    // sort the arr\n    std::sort(arr.begin(), arr.end());\n\n    // get\
    \ the smallest even number and the smallest index\n    int i = 0;\n    int min_even_number\
    \ = arr[0];\n    int min_even_index = -1;\n    int index = -1;\n    while(i <\
    \ n) {\n        // if the current number is even, push them into the vector\n\
    \        if(arr[i] % 2 == 0) {\n            ++index;\n            res[index] =\
    \ arr[i];\n        }\n        // if we got the smallest number, update index and\
    \ increment i\n        if(arr[i] == min_even_number) {\n            index = i;\n\
    \            i++;\n        }\n    }\n    // if the smallest number is even\n \
    \   if(index != -1) {\n        // update the index\n        index = index - 2;\n\
    \        // get the smallest even number\n        min_even_number = res[index];\n\
    \        // get the smallest even index\n        min_even_index = index;\n   \
    \ }\n    // if there is no even number\n    if(min_even_number == 0) {\n     \
    \   // return empty vector\n        return std::vector{};\n    }\n    // return\
    \ the vector\n    return {min_even_number, min_even_index};\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8w7z5k3l.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp8w7z5k3l.cpp:31:28: error: class template argument deduction\
    \ failed:\n   31 |         return std::vector{};\n      |                    \
    \        ^\n/tmp/tmp8w7z5k3l.cpp:31:28: error: no matching function for call to\
    \ \u2018vector()\u2019\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8w7z5k3l.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:1872:5:\
    \ note: candidate: \u2018template<class _InputIterator, class _ValT, class _Allocator,\
    \ class, class> std::vector(_InputIterator, _InputIterator, _Allocator)-> std::vector<_ValT,\
    \ _Allocator>\u2019\n 1872 |     vector(_InputIterator, _InputIterator, _Allocator\
    \ = _Allocator())\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:1872:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8w7z5k3l.cpp:31:28:\
    \ note:   candidate expects 3 arguments, 0 provided\n   31 |         return std::vector{};\n\
    \      |                            ^\nIn file included from /usr/include/c++/9/vector:67,\n\
    \                 from /usr/include/c++/9/functional:62,\n                 from\
    \ /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n                 from /usr/include/c++/9/algorithm:71,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8w7z5k3l.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _Tp, class _Alloc, class _InputIterator,\
    \ class> vector(_InputIterator, _InputIterator, const _Alloc&)-> std::vector<_Tp,\
    \ _Alloc>\u2019\n  650 |  vector(_InputIterator __first, _InputIterator __last,\n\
    \      |  ^~~~~~\n/usr/include/c++/9/bits/stl_vector.h:650:2: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmp8w7z5k3l.cpp:31:28: not"
  stdout: ''
  timestamp: 1660117770
- exit_code: -11
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value;\n    int smalest_idx;\n    for (int i = 1; i < arr.size();\
    \ ++i) {\n        if (arr[i] % 2 == 0) {\n            int v = arr[i] - arr[i-1];\n\
    \            if (v > smalest_value) {\n                smalest_value = v;\n  \
    \              smalest_idx = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ result;\n    if (smalest_value > 0) {\n        result.push_back(arr[smalest_idx]);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: ''
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> ans;\n    long min = 0, ind;\n    for(long x: arr)\
    \ {\n        if(x%2==0) {\n            if(min>x) {\n                min=x;\n \
    \               ind=arr.size();\n            }\n        }\n    }\n    if(arr.size()==0\
    \ || min==0) {\n        return ans;\n    }\n    ans.push_back(min);\n    ans.push_back(ind);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphur5yp8_: /tmp/tmphur5yp8_.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if(arr.size() == 0 || arr.empty())\n        return {};\n    long index\
    \ = std::numeric_limits<long>::min();\n    long smalest_value = std::numeric_limits<long>::max();\n\
    \    for(size_t i = 0; i < arr.size(); i++){\n        if(arr[i] % 2 == 0){\n \
    \           if(arr[i] < smalest_value){\n                smalest_value = arr[i];\n\
    \                index = i;\n            }\n        }\n    }\n    std::vector<long>\
    \ res;\n    res.push_back(arr[arr.size()-1]);\n    res.push_back(index);\n   \
    \ return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpzlpv6_r9: /tmp/tmpzlpv6_r9.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n        long smallest = arr[0];\n        int index = -1;\n        for(size_t\
    \ i = 0; i<arr.size();i++) {\n            if(arr[i] < smallest && arr[i] % 2 ==\
    \ 0) {\n                smallest = arr[i];\n                index = i;\n     \
    \       }\n        }\n        std::vector<long> output;\n        if(index >= 0)\
    \ {\n            output.push_back(smallest);\n            output.push_back(index);\n\
    \        }\n        return output;\n    }\n\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return its value.\n// The plucked node should be the node\
    \ with the smallest even value.\n// If multiple nodes with the same smallest even\
    \ value are found return the node that has smallest index.\n// The plucked node\
    \ should be returned in a vector, [ smalest_value, its index ],\n// If there are\
    \ no even values or the given vector is empty, return -1.\n// Example 1:\n// >>>\
    \ pluck((std::vector<long>({(long)4, (long)2, (long)3})))\n// (std::vector<long>({4,\
    \ 2, 3}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 2:\n// >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (std::vector<long>({4, 2, 3}))\n// Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n\
    // (std::vector<long>())\n// Example 4:\n// >>> pluck((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2})))\n// (std::vector<long>({4, 0,\
    \ 1}))\n// Explanation: 0 is the smallest value, but  there are two zeros,\n//\
    \ so we will choose the first zero, which has the smallest index.\n// Constraints:\n\
    // * 1 <= nodes.length <= 10000\n// * 0 <= node.value\nlong pluck(std::vector<long>\
    \ arr) {\n        long smallest = arr[0];\n        int index = -1;\n        for(size_t\
    \ i = 0; i<arr.size();i++) {\n            if(arr[i] < smallest && arr[i] % 2 ==\
    \ 0) {\n                smallest = arr[i];\n                index = i;\n     \
    \       }\n        }\n        if(index >= 0) {\n            return smallest;\n\
    \        }\n        return -1;\n    }\n\n// \"Given a vector representing a branch\
    \ of a tree that has non-negative integer nodes\n// your task is to pluck one\
    \ of the nodes and return its index.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a \n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rkyu9xh.cpp:70:6: error: ambiguating new declaration of \u2018\
    long int pluck(std::vector<long int>)\u2019\n   70 | long pluck(std::vector<long>\
    \ arr) {\n      |      ^~~~~\n/tmp/tmp1rkyu9xh.cpp:28:19: note: old declaration\
    \ \u2018std::vector<long int> pluck(std::vector<long int>)\u2019\n   28 | std::vector<long>\
    \ pluck(std::vector<long> arr) {\n      |                   ^~~~~\n/tmp/tmp1rkyu9xh.cpp:90:1:\
    \ error: expected declaration before \u2018}\u2019 token\n   90 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long smallest_even_value = 0;\n    long smallest_index\
    \ = 0;\n    long index_of_smallest_even_value = 0;\n\n    for(size_t i = 0; i\
    \ < arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            smallest_even_value\
    \ = arr[i];\n            smallest_index = i;\n            index_of_smallest_even_value\
    \ = i;\n        }\n    }\n    std::vector<long> returned_vector;\n    returned_vector.push_back(smallest_even_value);\n\
    \    returned_vector.push_back(smallest_index);\n\n    return returned_vector;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4wrudhiv: /tmp/tmp4wrudhiv.cpp:51: int main(): Assertion `candidate((std::vector<long>()))
    == (std::vector<long>())'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tint n = (int)arr.size();\n\tlong smallest = INT_MAX;\n\tlong smallest_index\
    \ = 0;\n\tstd::vector<long> plucked;\n\t\n\tfor(int i = 0; i < n; i++) {\n\t\t\
    int pos = 0;\n\t\tlong val = arr[i];\n\t\twhile(val > 0 && pos < i) {\n\t\t\t\
    val = (val >> 1) + (val & 1);\n\t\t\tpos++;\n\t\t}\n\t\tassert(val == 0 || pos\
    \ == i);\n\t\t\n\t\tif(val == 0) {\n\t\t\tif(pos != i) {\n\t\t\t\tval = arr[pos];\n\
    \t\t\t\tpos = 0;\n\t\t\t}\n\t\t}\n\t\tassert(val != 0);\n\t\t\n\t\tif((int)smallest_index\
    \ < pos) {\n\t\t\tsmallest_index = pos;\n\t\t\tsmallest = val;\n\t\t}\n\t}\n\t\
    assert(smallest == 0 || smallest == 1);\n\tif(smallest == 1) return plucked;\n\
    \t\n\tfor(int i = 0; i < n; i++) {\n\t\tint pos = 0;\n\t\tlong val = arr[i];\n\
    \t\twhile(val > 0 && pos < i) {\n\t\t\tval = (val >> 1) + (val & 1);\n\t\t\tpos++;\n\
    \t\t}\n\t\tassert(val == 0 || pos == i);\n\t\t\n\t\tif(val == 0) {\n\t\t\tif(pos\
    \ != i) {\n\t\t\t\tval = arr[pos];\n\t\t\t\tpos = 0;\n\t\t\t}\n\t\t}\n\t\tassert(val\
    \ != 0);\n\t\t\n\t\tif((int)smallest_index < pos) {\n\t\t\tplucked.push_back(val);\n\
    \t\t\tsmallest_index++;\n\t\t}\n\t}\n\tassert(smallest_index == n);\n\t\n\treturn\
    \ plucked;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxhc6crv_: /tmp/tmpxhc6crv_.cpp:87: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = 0;\n    long smallest_index\
    \ = 0;\n    for (int i = 0; i < arr.size() && i < arr.size(); i++) {\n       \
    \ if (arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n            smallest_index\
    \ = i;\n        }\n    }\n\n    std::vector<long> ans;\n    if (smalest_value\
    \ != 0) {\n        for (int i = 0; i < arr.size() && i < arr.size(); i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (arr[i] < smalest_value)\
    \ {\n                    smalest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        ans.push_back(smalest_value);\n\
    \        ans.push_back(smallest_index);\n        return ans;\n    } else {\n \
    \       return ans;\n    }\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpiodchlzf: /tmp/tmpiodchlzf.cpp:62: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3, (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0,
    (long)3}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = 0;\n    long smalest_index = 0;\n    int count =\
    \ 0;\n    for(long i = 0; i < arr.size(); ++i) {\n        long value = arr[i];\n\
    \        if(value % 2 == 0) {\n            smalest_value = value;\n          \
    \  smalest_index = i;\n            count = 1;\n        }\n        else {\n   \
    \         if(count > 0) {\n                count++;\n            }\n        }\n\
    \    }\n    if(arr.size() == 0 || smalest_value == 0) {\n        return {};\n\
    \    }\n    return { smalest_value, smalest_index };\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp33ls2doe: /tmp/tmp33ls2doe.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117770
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tassert(arr.size() > 0);\n\tauto min = arr[0];\n\tauto min_index = arr.size()\
    \ - 1;\n\tfor (auto i = 0; i < arr.size(); i++) {\n\t\tif (arr[i] < min) {\n\t\
    \t\tmin = arr[i];\n\t\t\tmin_index = i;\n\t\t} else if (arr[i] == min) {\n\t\t\
    \tif (i != min_index) {\n\t\t\t\tmin_index = i;\n\t\t\t}\n\t\t}\n\t}\n\tassert(min_index\
    \ >= 0);\n\tif (min_index == 0) {\n\t\treturn {};\n\t}\n\tassert(min_index < arr.size());\n\
    \tstd::vector<long> res;\n\tres.push_back(min);\n\tres.push_back(min_index);\n\
    \treturn res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp9l2utrw8: /tmp/tmp9l2utrw8.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  sort(arr.begin(), arr.end());\n  long smalest_value;\n  int smalest_index\
    \ = 0;\n  long min_value = std::numeric_limits<long>::min();\n  for (long i =\
    \ 0; i < (int) arr.size(); i++) {\n    if (min_value < arr[i]) {\n      smalest_value\
    \ = arr[i];\n      smalest_index = i;\n      min_value = arr[i];\n    } else if\
    \ (arr[i] == smalest_value) {\n      if (min_value == arr[i]) {\n        smalest_index++;\n\
    \        min_value = arr[i];\n      }\n    }\n  }\n  std::vector<long> result(smalest_index,\
    \ smalest_value);\n  if (arr.empty()) {\n    return result;\n  } else {\n    return\
    \ std::move(result);\n  }\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm7foupwp: /tmp/tmpm7foupwp.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = INT_MIN, smalest_index = 0;\n    for (long i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i]\
    \ < smalest_value) {\n                smalest_value = arr[i];\n              \
    \  smalest_index = i;\n            }\n        }\n    }\n    return {smalest_value,\
    \ smalest_index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp896yr0j1: /tmp/tmp896yr0j1.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    if (arr.size() <= 0)\n        return arr;\n\
    \    int i, j, smallestVal, index;\n    std::vector<long> arr2;\n    arr2.push_back(arr[0]);\n\
    \    for (i = 1; i < arr.size(); i++) {\n        if (arr[i] <= arr[0]) {\n   \
    \         arr2.push_back(arr[i]);\n            continue;\n        }\n        for\
    \ (j = 0; j < i; j++) {\n            if (arr[j] % 2 == 0 && arr[i] % 2 == 0) {\n\
    \                if (arr[j] < arr[i]) {\n                    smallestVal = arr[j];\n\
    \                    index = j;\n                } else {\n                  \
    \  smallestVal = arr[i];\n                    index = i;\n                }\n\
    \                arr2.push_back(smallestVal);\n                std::swap(arr[i],\
    \ arr[index]);\n            }\n        }\n    }\n    return arr2;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp3f1o1a_3: /tmp/tmp3f1o1a_3.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here.\n    // vector<long> plucked;\n    std::vector<long>\
    \ plucked;\n    long smalest_value;\n    long index;\n    int counter = 0;\n \
    \   bool flag = false;\n    for (int i = 0; i < arr.size(); ++i) {\n        if\
    \ (arr[i] != 0) {\n            if (arr[i] < smalest_value && !flag) {\n      \
    \          smalest_value = arr[i];\n                index = i;\n             \
    \   counter = 1;\n                flag = true;\n            }\n            if\
    \ (arr[i] == smalest_value) {\n                ++counter;\n            }\n   \
    \     }\n    }\n    for (int i = counter; i > 0; --i) {\n        if (arr[index]\
    \ % 2 == 0) {\n            arr[index] -= 2;\n            arr.erase(arr.begin()\
    \ + index);\n        }\n    }\n    if (arr.empty()) {\n        return {};\n  \
    \  }\n    long smallest = 0;\n    int index = 0;\n    for (int i = 0; i < arr.size();\
    \ ++i) {\n        if (arr[i] != 0) {\n            if (arr[i] < smallest) {\n \
    \               smallest = arr[i];\n                index = i;\n            }\n\
    \        }\n    }\n    if (smallest == 0) {\n        return {};\n    }\n    plucked.push_back(smallest);\n\
    \    plucked.push_back(arr[index]);\n    return plucked;\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptuikknxa.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmptuikknxa.cpp:59:9: error: conflicting declaration \u2018\
    int index\u2019\n   59 |     int index = 0;\n      |         ^~~~~\n/tmp/tmptuikknxa.cpp:33:10:\
    \ note: previous declaration as \u2018long int index\u2019\n   33 |     long index;\n\
    \      |          ^~~~~\n"
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int length = arr.size();\n    int index = 0;\n    int smalest_value =\
    \ 0;\n    int smalest_index = 0;\n    for (int i = 0; i < length; i++) {\n   \
    \     if (arr[i] % 2 == 0) {\n            smalest_value = arr[i];\n          \
    \  smalest_index = i;\n        }\n    }\n    if (smalest_index == -1) {\n    \
    \    return {};\n    }\n    std::vector<long> res;\n    bool found = false;\n\
    \    for (int i = 0; i < length; i++) {\n        if (arr[i] == smalest_value)\
    \ {\n            found = true;\n            break;\n        }\n    }\n    if (!found)\
    \ {\n        return {};\n    }\n    for (int i = 0; i < length; i++) {\n     \
    \   if (arr[i] == smalest_value) {\n            index = i;\n            break;\n\
    \        }\n    }\n    res.push_back(smalest_value);\n    res.push_back(index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpi7f8lurt: /tmp/tmpi7f8lurt.cpp:68: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() <= 10000);\n    if (arr.empty()) return {};\n    std::vector<long>\
    \ res;\n    res.push_back(arr[0]);\n    int index = arr.size() - 1;\n    for (int\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            long\
    \ value = arr[i];\n            if (res.size() > 0 && value > res[res.size() -\
    \ 1]) {\n                res.resize(index);\n                index = res.size()\
    \ - 1;\n            }\n            res[index] = value;\n        }\n    }\n   \
    \ if (res.size() == 0) return {};\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpggimrrj1: /tmp/tmpggimrrj1.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> arr1(arr.begin(), arr.end());\n    long smalest_value;\n\
    \    int smalest_index;\n    for (long i = arr1.size() - 1; i >= 0; i--) {\n \
    \       smalest_value = arr1[i];\n        smalest_index = i;\n        for (int\
    \ j = i + 1; j < arr1.size(); j++) {\n            if (arr1[j] % 2 == 0 && (arr1[j]\
    \ < smalest_value || smalest_index == j)) {\n                smalest_value = arr1[j];\n\
    \                smalest_index = j;\n            }\n        }\n    }\n    if (smalest_index\
    \ == -1)\n        return {};\n    return arr1;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwd1ly95o: /tmp/tmpwd1ly95o.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long min_index = 0, smallest_value = 0;\n\
    \    for (const auto &it : arr) {\n        if (it % 2 == 0) smallest_value = it;\n\
    \    }\n    smallest_value *= 2;\n    for (const auto &it : arr) {\n        if\
    \ (it % 2 == 0 && (min_index == 0 || it < smallest_value)) {\n            min_index\
    \ = it;\n        }\n    }\n    if (min_index != 0) {\n        res.push_back(min_index);\n\
    \        res.push_back(arr[min_index]);\n    }\n    return res;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpt9x1_fld: /tmp/tmpt9x1_fld.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  int small = std::numeric_limits<int>::max();\n  std::vector<long> result;\n\
    \  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] < small) {\n      small\
    \ = arr[i];\n    }\n  }\n  result.push_back(small);\n  if (small % 2 == 0) {\n\
    \    for (auto &v : arr) {\n      if (v % 2 != 0 && v < small) {\n        small\
    \ = v;\n      }\n    }\n    result.push_back(small);\n  }\n  return result;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp74r8_nqy: /tmp/tmp74r8_nqy.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> res;\n    for\
    \ (int i = 0; i < arr.size() - 1; i++) {\n        if (arr[i] % 2 == 0 && arr[i\
    \ + 1] % 2 == 0) {\n            res.push_back(arr[i]);\n        }\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg99ec6ok: /tmp/tmpg99ec6ok.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsch56w8a: /tmp/tmpsch56w8a.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> ans;\n    long smallest_even = arr[0];\n    int index\
    \ = 0;\n    std::for_each(arr.begin(), arr.end(), [&](long n){\n        if(n%2==0){\n\
    \            smallest_even = n<smallest_even?n:smallest_even;\n            index\
    \ = n<smallest_even?index+1:index;\n        }\n    });\n    if(arr.size()==0){\n\
    \        return ans;\n    }\n    for(long i=0;i<arr.size();i++){\n        if(i==index){\n\
    \            ans.push_back(arr[i]);\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfdnd1dru: /tmp/tmpfdnd1dru.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long largest = INT_MIN;\n    long smallest = INT_MAX;\n    long index;\n\
    \    long smalest_value;\n    std::stack<long> s;\n    for (long &i : arr) {\n\
    \        if (i != 0 && (i % 2) == 0) {\n            smalest_value = i;\n     \
    \       while (s.empty() == false && (s.top() % 2) == 0) {\n                index\
    \ = s.top() - 1;\n                s.pop();\n                if (index > smallest\
    \ && index >= largest) {\n                    smallest = index;\n            \
    \        smallest_value = smalest_value;\n                }\n            }\n \
    \           s.push(smalest_value);\n        } else {\n            s.push(0);\n\
    \        }\n    }\n    if (s.empty() == false) {\n        smallest = s.top();\n\
    \        smallest_value = s.top();\n    }\n    std::vector<long> result;\n   \
    \ result.push_back(smallest_value);\n    result.push_back(smallest);\n    return\
    \ result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppd_ifdzb.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmppd_ifdzb.cpp:42:21: error: \u2018smallest_value\u2019\
    \ was not declared in this scope; did you mean \u2018smalest_value\u2019?\n  \
    \ 42 |                     smallest_value = smalest_value;\n      |          \
    \           ^~~~~~~~~~~~~~\n      |                     smalest_value\n/tmp/tmppd_ifdzb.cpp:52:9:\
    \ error: \u2018smallest_value\u2019 was not declared in this scope; did you mean\
    \ \u2018smalest_value\u2019?\n   52 |         smallest_value = s.top();\n    \
    \  |         ^~~~~~~~~~~~~~\n      |         smalest_value\n/tmp/tmppd_ifdzb.cpp:55:22:\
    \ error: \u2018smallest_value\u2019 was not declared in this scope; did you mean\
    \ \u2018smalest_value\u2019?\n   55 |     result.push_back(smallest_value);\n\
    \      |                      ^~~~~~~~~~~~~~\n      |                      smalest_value\n"
  stdout: ''
  timestamp: 1660117771
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    \n    for(int i = 0; i < arr.size(); i++){\n\
    \        int value = arr[i];\n        if((value & 1) == 0){\n            return\
    \ arr;\n        }\n    }\n    \n    return {};\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp4ez2jnkm: /tmp/tmp4ez2jnkm.cpp:42: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // your code here\n    long smalest_value = arr[0];\n    int smallest_value_index\
    \ = -1;\n    for (long val : arr) {\n        if (val % 2 == 0) {\n           \
    \ if (smallest_value_index == -1 || val < smalest_value) {\n                smallest_value_index\
    \ = val;\n                smalest_value = val;\n            }\n        }\n   \
    \ }\n    if (smallest_value_index != -1) {\n        std::vector<long> result;\n\
    \        result.push_back(smalest_value);\n        result.push_back(smallest_value_index);\n\
    \        return result;\n    }\n    return {};\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdl5926si: /tmp/tmpdl5926si.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  // Your code here\n  \n  return arr;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8j176ab8: /tmp/tmp8j176ab8.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::set<long> even;\n  std::vector<std::pair<long, std::size_t>> even_index;\n\
    \  for (const auto& item : arr) {\n    if (even.find(item) == even.end()) {\n\
    \      even.insert(item);\n      even_index.emplace_back(item, even.find(item));\n\
    \    } else {\n      int idx = -1;\n      std::tie(idx, even_index) = std::minmax(even_index);\n\
    \      int index = even_index.at(0).second;\n      while (even.find(item) != even.end())\
    \ {\n        if (even.find(item) == even.begin()) {\n          even_index.emplace_back(item,\
    \ even.find(item));\n          break;\n        }\n        --index;\n        even_index.emplace_back(item,\
    \ even.find(item));\n      }\n      even_index.emplace_back(item, even.find(item));\n\
    \      std::tie(idx, even_index) = std::minmax(even_index);\n      std::size_t\
    \ index = even_index.at(0).second;\n      auto res = std::find(even_index.begin(),\
    \ even_index.end(), std::make_pair(item, index));\n      assert(res != even_index.end());\n\
    \      return std::make_pair(std::make_pair(res->first, res->second), res->second);\n\
    \    }\n  }\n  return std::vector<long>();\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqprzjcm3.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqprzjcm3.cpp:37:57: error: no matching function for call\
    \ to \u2018minmax(std::vector<std::pair<long int, long unsigned int> >&)\u2019\
    \n   37 |       std::tie(idx, even_index) = std::minmax(even_index);\n      |\
    \                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqprzjcm3.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3302:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr std::pair<const _Tp&, const\
    \ _Tp&> std::minmax(const _Tp&, const _Tp&)\u2019\n 3302 |     minmax(const _Tp&\
    \ __a, const _Tp& __b)\n      |     ^~~~~~\n/usr/include/c++/9/bits/stl_algo.h:3302:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpqprzjcm3.cpp:37:57:\
    \ note:   candidate expects 2 arguments, 1 provided\n   37 |       std::tie(idx,\
    \ even_index) = std::minmax(even_index);\n      |                            \
    \                             ^\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqprzjcm3.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3323:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr std::pair<const\
    \ _Tp&, const _Tp&> std::minmax(const _Tp&, const _Tp&, _Compare)\u2019\n 3323\
    \ |     minmax(const _Tp& __a, const _Tp& __b, _Compare __comp)\n      |     ^~~~~~\n\
    /usr/include/c++/9/bits/stl_algo.h:3323:5: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpqprzjcm3.cpp:37:57: note:   candidate expects 3 arguments,\
    \ 1 provided\n   37 |       std::tie(idx, even_index) = std::minmax(even_index);\n\
    \      |                                                         ^\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpqprzjcm3.cpp:2:\n/usr/include/c++/9/"
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    long int len = arr.size();\n\
    \    long int idx = len-1;\n    if(len<=0)\n        return {};\n    long int min_even\
    \ = arr[len-1];\n    for(long int i=len-2; i>=0; i--){\n        if(arr[i]==min_even){\n\
    \            idx=i;\n            long int index = arr.at(i);\n            arr[i]\
    \ = arr[idx];\n            arr[idx] = index;\n            arr.erase(arr.begin()+idx);\n\
    \            break;\n        }\n        if(arr[i]%2==0)\n            min_even\
    \ = arr[i];\n    }\n    return std::vector<long>{arr.at(0), idx};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_6u696h5: /tmp/tmp_6u696h5.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() != 0);\n    if (arr.size() == 0)\n        return {};\n\
    \n    long smalest_value = arr[0];\n    long index = arr[0];\n\n    for (size_t\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] != 0) {\n            long\
    \ val = arr[i];\n            if (val < smalest_value) {\n                smalest_value\
    \ = val;\n                index = i;\n            }\n        }\n    }\n    return\
    \ {smalest_value, index};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpsysw00nx: /tmp/tmpsysw00nx.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if(arr.empty()) return {};\n    long smalest_value = 0;\n    long smalest_index\
    \ = 0;\n    for(long i = 0; i < arr.size(); i++) {\n        if(arr[i] % 2 == 0)\
    \ {\n            smalest_value = arr[i];\n            smalest_index = i;\n   \
    \     }\n    }\n    std::vector<long> result;\n    if(smalest_value != 0) {\n\
    \        result.push_back(smalest_value);\n        result.push_back(smalest_index);\n\
    \        return result;\n    }\n    return result;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpcrp6_xhs: /tmp/tmpcrp6_xhs.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tint n = arr.size();\n\tstd::vector<long> ans;\n\tstd::sort(arr.begin(),arr.end());\n\
    \tint minIndex = -1;\n\tint minValue = arr[0];\n\tfor (int i = 1; i < n; i++)\n\
    \t\tif (arr[i] > minValue)\n\t\t{\n\t\t\tif (minIndex == -1)\n\t\t\t\tminIndex\
    \ = i;\n\t\t\telse\n\t\t\t{\n\t\t\t\tif (arr[i] == minValue)\n\t\t\t\t{\n\t\t\t\
    \t\tint temp_index = minIndex;\n\t\t\t\t\tminIndex = i;\n\t\t\t\t\tminValue =\
    \ arr[temp_index];\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\
    \tif (minIndex != -1)\n\t\tans.push_back(minValue);\n\telse\n\t\tans.push_back(arr[0]);\n\
    \treturn ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg4rdubcd: /tmp/tmpg4rdubcd.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smalest_value = (int)0;\n    long smalest_index\
    \ = (int)0;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (arr[i] < smalest_value) {\n                smalest_value\
    \ = arr[i];\n                smalest_index = i;\n            }\n        }\n  \
    \  }\n    if (smalest_value == (int)0) {\n        return std::vector<long>();\n\
    \    }\n    std::vector<long> result;\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] == smalest_value) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    if (result.size() == 1) {\n        result.push_back(smalest_value);\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n   \
    \ assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg89dkzum: /tmp/tmpg89dkzum.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = INT_MAX;\n    long smalest_index = 0;\n    for (int\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if\
    \ (arr[i] < smalest_value) {\n                smalest_value = arr[i];\n      \
    \          smalest_index = i;\n            }\n        }\n    }\n    if (smalest_value\
    \ == INT_MAX) {\n        return std::vector<long>();\n    }\n    if (smalest_index\
    \ > 0) {\n        std::vector<long> vec = {smalest_value, smalest_index};\n  \
    \      return vec;\n    }\n    return std::vector<long>();\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660117772
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    auto ret = std::make_pair(std::numeric_limits<long>::min(), 0);\n   \
    \ auto s = arr.size();\n    long smalest_value = arr[0];\n    auto it = arr.begin();\n\
    \    for (long i = 1; i < s; i++) {\n        if ((*it) & 1) {\n            smalest_value\
    \ = *it;\n            ++it;\n        }\n    }\n    if (it != arr.end()) {\n  \
    \      auto n = std::find(it, arr.end(), smalest_value);\n        ret = std::make_pair(smalest_value,\
    \ n - arr.begin() + 1);\n    }\n    return ret;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf89b5gsc.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpf89b5gsc.cpp:43:12: error: could not convert \u2018ret\u2019\
    \ from \u2018std::pair<long int, int>\u2019 to \u2018std::vector<long int>\u2019\
    \n   43 |     return ret;\n      |            ^~~\n      |            |\n    \
    \  |            std::pair<long int, int>\n"
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here\n    // int arr[10000];\n    // int index[10000];\n\
    \    int n=arr.size();\n    int min=arr[0];\n    int index;\n    std::vector<long>\
    \ res;\n    for(int i=0;i<n;i++){\n        if(arr[i]<min){\n            min=arr[i];\n\
    \            index=i;\n        }\n    }\n    res.push_back(min);\n    res.push_back(index);\n\
    \    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpa3fs098u: /tmp/tmpa3fs098u.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::sort(arr.begin(), arr.end());\n  auto it = arr.begin();\n  while (it\
    \ != arr.end()) {\n    if (*it % 2 == 0) {\n      return std::vector<long>{*it,\
    \ std::distance(arr.begin(), it)};\n    }\n    it++;\n  }\n  return {};\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5usrdqdj: /tmp/tmp5usrdqdj.cpp:41: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  long min_val = arr[0];\n  long min_idx = 0;\n  for (size_t i = 1; i < arr.size();\
    \ i++) {\n    if (arr[i] <= min_val) {\n      min_val = arr[i];\n      min_idx\
    \ = i;\n    }\n  }\n  std::vector<long> res;\n  res.push_back(min_val);\n  res.push_back(min_idx);\n\
    \  return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp69g7ft83: /tmp/tmp69g7ft83.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpolxuct0c: /tmp/tmpolxuct0c.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117765
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<std::pair<long, int>> v;\n  for (const auto& x : arr) v.push_back({\
    \ x, static_cast<int>(x) - 1 });\n  v.sort();\n  int smallest_val = v[0].first;\n\
    \  std::vector<long> ans;\n  for (const auto& x : v) if (x.first == smallest_val)\
    \ ans.push_back(x.second);\n  if (ans.empty()) ans.push_back(-1);\n  return ans;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx0ngs51n.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpx0ngs51n.cpp:31:5: error: \u2018class std::vector<std::pair<long\
    \ int, int> >\u2019 has no member named \u2018sort\u2019\n   31 |   v.sort();\n\
    \      |     ^~~~\n"
  stdout: ''
  timestamp: 1660117772
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long smallest_value = 0;\n    int smallest_index_of_smallest_value\
    \ = 0;\n\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] < smallest_value)\
    \ {\n            smallest_value = arr[i];\n            smallest_index_of_smallest_value\
    \ = i;\n        }\n    }\n\n    return std::vector<long>(\n        {smallest_value,\
    \ smallest_index_of_smallest_value});\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfaa2s66o: /tmp/tmpfaa2s66o.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    //sort arr\n    sort(arr.begin(), arr.end());\n    std::vector<long>\
    \ returnVec;\n    int smallest = arr[0] % 2 == 0 ? arr[0] / 2 : arr[0] / 2 + 1;\n\
    \    int smallestIndex = -1;\n    int minIndex;\n    for (int i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && (arr[i] < smallest || (arr[i] == smallest\
    \ && arr[i] < arr[0])))\n            smallest = arr[i];\n        if (smallest\
    \ == arr[i]) {\n            smallestIndex = i;\n        } else if (smallest ==\
    \ arr[i] && arr[i] < arr[0]) {\n            smallestIndex = i;\n            minIndex\
    \ = i;\n        }\n    }\n    returnVec.push_back(smallest);\n    returnVec.push_back(smallestIndex);\n\
    \    if (returnVec.size() == 0)\n        return returnVec;\n    if (returnVec.size()\
    \ == 1 && returnVec[1] == -1)\n        return returnVec;\n    if (returnVec.size()\
    \ == 1 && returnVec[1] == -2)\n        return returnVec;\n    return returnVec;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpe2pbf_kb: /tmp/tmpe2pbf_kb.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: 0
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    long smallest = INT_MAX;\n    int index = 0;\n\
    \    for (int i = 0; i < n; i++) {\n        if (arr[i] % 2 == 0) {\n         \
    \   if (smallest > arr[i]) {\n                smallest = arr[i];\n           \
    \     index = i;\n            }\n        }\n    }\n    if (smallest == INT_MAX)\n\
    \        return {};\n    return {smallest, index};\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> sorted_vec;\n    int flag = 0;\n    long smallest =\
    \ INT_MAX;\n    sorted_vec.push_back(INT_MAX);\n    std::sort(arr.begin(), arr.end(),\
    \ std::greater<long>());\n    for (long i : arr) {\n        if (i == 0 || flag\
    \ == 1) {\n            sorted_vec.push_back(i);\n            flag = 0;\n     \
    \       smallest = i;\n        } else {\n            if (i < smallest) {\n   \
    \             sorted_vec.push_back(i);\n                flag = 1;\n          \
    \      smallest = i;\n            }\n        }\n    }\n    return sorted_vec;\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpkxa0tqcu: /tmp/tmpkxa0tqcu.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() != 0);\n    if(arr.size() == 0) {\n        return {};\n\
    \    }\n    // Pick the smallest node\n    long min = arr[0];\n    int index =\
    \ -1;\n    for(long i : arr) {\n        if(i % 2 == 0 && i != min) {\n       \
    \     min = i;\n            index = i;\n        }\n    }\n    // Return the node\
    \ and the index\n    return {min, index};\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpk2f3bn_p: /tmp/tmpk2f3bn_p.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here.\n    long smalest_value = arr[0];\n    int smallest_index\
    \ = -1;\n    for (int i = 1; i < arr.size(); ++i) {\n        if (arr[i] > smalest_value)\
    \ {\n            smallest_index = i;\n            smalest_value = arr[i];\n  \
    \      }\n    }\n    std::vector<long> res;\n    res.push_back(smalest_value);\n\
    \    res.push_back(smallest_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpg2f798mj: /tmp/tmpg2f798mj.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    if (arr.empty())\n        return res;\n \
    \   long smallest_value = 0;\n    int smallest_index = 0;\n    long curr_smallest_value\
    \ = arr[0];\n    int curr_smallest_index = arr[0];\n    int max_node_index = 0;\n\
    \    for (auto i : arr) {\n        if (i > curr_smallest_value) {\n          \
    \  if (smallest_value > 0) {\n                smallest_index += 1;\n         \
    \   }\n            if (curr_smallest_value > 0) {\n                curr_smallest_index\
    \ += 1;\n            }\n            curr_smallest_value = i;\n        }\n    \
    \    if (i == 0) {\n            if (curr_smallest_value > 0) {\n             \
    \   curr_smallest_index += 1;\n            }\n            smallest_value = i;\n\
    \        }\n        if (i == curr_smallest_value) {\n            if (curr_smallest_index\
    \ > max_node_index) {\n                max_node_index = curr_smallest_index;\n\
    \            }\n        }\n    }\n    smallest_index += 1;\n    res.push_back(smallest_value);\n\
    \    res.push_back(max_node_index);\n    return res;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpw1equ_n1: /tmp/tmpw1equ_n1.cpp:66: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smalest_value = *std::min_element(arr.begin(), arr.end()); // Smallest\
    \ value found so far\n    std::vector<long> values;\n    std::vector<int> indices;\n\
    \    long even_value = *std::min_element(arr.begin(), arr.end(), [&](long a, long\
    \ b) {\n        return (a) % 2 == (b % 2);\n    });\n    int i = 0;\n    while\
    \ (i < arr.size() && arr[i] == even_value) {\n        values.emplace_back(arr[i]);\n\
    \        indices.emplace_back(i);\n        i++;\n    }\n    if (values.empty())\
    \ {\n        return {};\n    }\n    return { values, indices };\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgw_pfk82.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpgw_pfk82.cpp:44:30: error: could not convert \u2018{values,\
    \ indices}\u2019 from \u2018<brace-enclosed initializer list>\u2019 to \u2018\
    std::vector<long int>\u2019\n   44 |     return { values, indices };\n      |\
    \                              ^\n      |                              |\n   \
    \   |                              <brace-enclosed initializer list>\n"
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    long minval;\n    for (long i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] < minval) minval = arr[i];\n    }\n    for (long\
    \ i = 0; i < arr.size(); i++) {\n        if (arr[i] == minval) {\n           \
    \ res.push_back(arr[i]);\n            if (arr[i] % 2 == 0) break;\n        }\n\
    \    }\n    if (res.empty()) return res;\n    res.push_back(minval);\n    return\
    \ res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmhj__c_y: /tmp/tmpmhj__c_y.cpp:46: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    long min = INT_MAX;\n    long index;\n \
    \   int counter = 0;\n    bool flag = false;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0 && !flag) {\n            flag = true;\n\
    \            index = i;\n            min = arr[i];\n        } else if (arr[i]\
    \ == min && arr[i] % 2 == 0) {\n            counter++;\n            if (counter\
    \ == 1) {\n                index = i;\n                min = arr[i];\n       \
    \     }\n        }\n    }\n    std::vector<long> result;\n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] == min && arr[i] % 2 == 0) {\n  \
    \          result.push_back(arr[i]);\n        }\n    }\n    return result;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpy2iapbn4: /tmp/tmpy2iapbn4.cpp:57: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> min_index;\n    long min_value;\n    for (size_t i\
    \ = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 == 0) {\n            long\
    \ val = arr[i];\n            std::vector<long> index_vector;\n            std::find(arr.begin(),\
    \ arr.end(), val); // search for val in the vector\n            if (arr.size()\
    \ == 1) {\n                return arr;\n            }\n            long index\
    \ = arr.size() - 1;\n            while (index >= 0) {\n                if (arr[index]\
    \ % 2 == 0) {\n                    index_vector.push_back(arr[index]);\n     \
    \               index--;\n                } else {\n                    arr[index\
    \ + 1] = 0;\n                    arr[index - 1] = 0;\n                    index\
    \ -= 1;\n                }\n            }\n            if (index_vector.size()\
    \ > 0) {\n                min_index.clear();\n                min_value = index_vector[0];\n\
    \                for (long index : index_vector) {\n                    if (index\
    \ > min_value) {\n                        min_value = index;\n               \
    \         min_index = index_vector;\n                    }\n                }\n\
    \            } else {\n                min_index.clear();\n            }\n   \
    \     }\n    }\n    return min_index;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpuox8ku6e: malloc.c:2379: sysmalloc: Assertion `(old_top == initial_top
    (av) && old_size == 0) || ((unsigned long) (old_size) >= MINSIZE && prev_inuse
    (old_top) && ((unsigned long) old_end & (pagesize - 1)) == 0)'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tint min = INT_MAX;\n\tint min_idx = -1;\n\tfor (int i = 0; i < arr.size();\
    \ i++) {\n\t\tif (arr[i] % 2 == 0) {\n\t\t\tif (min > arr[i]) {\n\t\t\t\tmin =\
    \ arr[i];\n\t\t\t\tmin_idx = i;\n\t\t\t}\n\t\t}\n\t}\n\tstd::vector<long> ans;\n\
    \tans.push_back(arr[min_idx]);\n\treturn ans;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp0rjrdxoc: /tmp/tmp0rjrdxoc.cpp:45: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::set<long> index;\n  std::set<long>::iterator itr = index.begin();\n\
    \  int n = arr.size();\n  for (int i = 0; i < n; ++i) {\n    index.insert(arr[i]);\n\
    \  }\n  std::vector<long> result;\n  if (index.size() == 0) {\n    return {};\n\
    \  }\n  long smallest = *itr;\n  int smallest_index = *itr;\n  std::set<long>::iterator\
    \ jtr = index.begin();\n  for (int i = 0; i < n; ++i) {\n    if (arr[i] < smallest)\
    \ {\n      smallest = arr[i];\n      smallest_index = i;\n      std::set<long>::iterator\
    \ itr = index.find(arr[i]);\n      if (itr != index.end()) {\n        jtr = itr;\n\
    \      }\n    }\n  }\n  result.push_back(smallest);\n  result.push_back(arr[smallest_index]);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp6ev5yqal: /tmp/tmp6ev5yqal.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> result;\n  long smalest_value = INT_MIN;\n  int smalest_index\
    \ = 0;\n  for (int i = 0; i < arr.size(); i++) {\n    if (arr[i] % 2 == 0 && arr[i]\
    \ < smalest_value) {\n      smalest_value = arr[i];\n      smalest_index = i;\n\
    \    }\n  }\n  result.push_back(smalest_value);\n  result.push_back(smalest_index);\n\
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpziohx1q3: /tmp/tmpziohx1q3.cpp:44: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() <= 10000);\n    if (arr.size() == 0) {\n        return\
    \ {};\n    }\n    long even_values[10000];\n    long index = 0;\n    for (long\
    \ val : arr) {\n        if (val % 2 != 0) {\n            even_values[index++]\
    \ = val;\n        }\n    }\n    long min_val = *std::min_element(even_values,\
    \ even_values + index);\n    if (min_val % 2 == 0) {\n        long index = std::distance(even_values,\
    \ std::find(even_values, even_values + index, min_val));\n        return { min_val,\
    \ index };\n    }\n    else {\n        return {};\n    }\n}\nint main() {\n  \
    \  auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp2sahq2dx: /tmp/tmp2sahq2dx.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    if (arr.empty()) return {};\n    auto less = [&arr](long a, long b) {\
    \ return arr[a] < arr[b]; };\n    std::priority_queue<long, std::vector<long>,\
    \ decltype(less)> q{arr};\n    auto it = std::max_element(q.begin(), q.end(),\
    \ less);\n    q.erase(q.begin(), it);\n    if (q.size() == 1) return arr;\n  \
    \  std::vector<long> res;\n    int i = 0;\n    for (; i < q.size(); ++i) {\n \
    \       if (arr[i] % 2 == 0) {\n            res.push_back(arr[i]);\n         \
    \   break;\n        }\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz9wrygnj.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpz9wrygnj.cpp:31:71: error: no matching function for call\
    \ to \u2018std::priority_queue<long int, std::vector<long int>, pluck(std::vector<long\
    \ int>)::<lambda(long int, long int)> >::priority_queue(<brace-enclosed initializer\
    \ list>)\u2019\n   31 |     std::priority_queue<long, std::vector<long>, decltype(less)>\
    \ q{arr};\n      |                                                           \
    \            ^\nIn file included from /usr/include/c++/9/queue:64,\n         \
    \        from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n        \
    \         from /tmp/tmpz9wrygnj.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:584:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::priority_queue<_Tp,\
    \ _Sequence, _Compare>::priority_queue(_InputIterator, _InputIterator, const _Compare&,\
    \ _Sequence&&)\u2019\n  584 |  priority_queue(_InputIterator __first, _InputIterator\
    \ __last,\n      |  ^~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_queue.h:584:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpz9wrygnj.cpp:31:71:\
    \ note:   candidate expects 4 arguments, 1 provided\n   31 |     std::priority_queue<long,\
    \ std::vector<long>, decltype(less)> q{arr};\n      |                        \
    \                                               ^\nIn file included from /usr/include/c++/9/queue:64,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:86,\n\
    \                 from /tmp/tmpz9wrygnj.cpp:2:\n/usr/include/c++/9/bits/stl_queue.h:573:2:\
    \ note: candidate: \u2018template<class _InputIterator> std::priority_queue<_Tp,\
    \ _Sequence, _Compare>::priority_queue(_InputIterator, _InputIterator, const _Compare&,\
    \ const _Sequence&)\u2019\n  573 |  priority_queue(_InputIterator __first, _InputIterator\
    \ __last,\n      |  ^~~~~~~~~~~~~~\n/usr/include/c++/9/bits/stl_queue.h:573:2:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpz9wrygnj.cpp:31:71:\
    \ note:   candidate expects 4 arguments, 1 provided\n   31 |     std::priority_queue<long,\
    \ std::vector<long>,"
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // write your code here\n    std::sort(arr.begin(), arr.end());\n   \
    \ long largest = 0;\n    long index = -1;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            largest = arr[i];\n    \
    \        index = i;\n        }\n    }\n    return std::vector<long>({largest,\
    \ index});\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpyzu8l1jm: /tmp/tmpyzu8l1jm.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Write your code here.\n    std::vector<long> ans;\n    long max_val=0;\n\
    \    long min_val=0;\n    long index=0;\n    for(int i=0;i<arr.size();i++)\n \
    \   {\n        if(arr[i]%2==0)\n        {\n            if(max_val>arr[i])\n  \
    \          {\n                max_val=arr[i];\n                index=i;\n    \
    \        }\n        }\n        else\n        {\n            if(min_val<arr[i])\n\
    \            {\n                min_val=arr[i];\n                index=i;\n  \
    \          }\n        }\n    }\n    ans.push_back(max_val);\n    ans.push_back(index);\n\
    \    return ans;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmltajaij: /tmp/tmpmltajaij.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smallest_val = numeric_limits<long>::max();\n    long smallest_idx\
    \ = 0;\n    long smallest_even_val = (unsigned long)-1;\n    long smallest_even_idx\
    \ = 0;\n    for (size_t i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2\
    \ == 0 && smallest_even_val == (unsigned long)-1) {\n            smallest_even_val\
    \ = arr[i];\n            smallest_even_idx = i;\n        } else if (arr[i] % 2\
    \ == 0 && smallest_even_val != (unsigned long)-1) {\n            if (arr[i] <\
    \ smallest_even_val) {\n                smallest_even_val = arr[i];\n        \
    \        smallest_even_idx = i;\n            }\n        }\n        if (arr[i]\
    \ < smallest_val) {\n            smallest_val = arr[i];\n            smallest_idx\
    \ = i;\n        }\n    }\n    return std::vector<long>{arr[smallest_even_idx],\
    \ smallest_even_idx};\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ohmf742.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3ohmf742.cpp:29:25: error: \u2018numeric_limits\u2019\
    \ was not declared in this scope; did you mean \u2018std::numeric_limits\u2019\
    ?\n   29 |     long smallest_val = numeric_limits<long>::max();\n      |     \
    \                    ^~~~~~~~~~~~~~\n      |                         std::numeric_limits\n\
    In file included from /usr/include/c++/9/bits/specfun.h:46,\n                \
    \ from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmp3ohmf742.cpp:2:\n/usr/include/c++/9/limits:312:12:\
    \ note: \u2018std::numeric_limits\u2019 declared here\n  312 |     struct numeric_limits\
    \ : public __numeric_limits_base\n      |            ^~~~~~~~~~~~~~\n/tmp/tmp3ohmf742.cpp:29:40:\
    \ error: expected primary-expression before \u2018long\u2019\n   29 |     long\
    \ smallest_val = numeric_limits<long>::max();\n      |                       \
    \                 ^~~~\n"
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long val = 0;\n    long index = 0;\n    for (int i = 0; i < arr.size();\
    \ i++) {\n        if (arr[i] % 2 == 0) {\n            val = arr[i];\n        \
    \    index = i;\n        }\n    }\n    std::sort(arr.begin(), arr.end(), [&val](long\
    \ x, long y){return x<y; });\n    if (arr.empty()) return arr;\n    std::vector<long>\
    \ new_arr(arr.size());\n    if (val == arr[0]) new_arr[0] = val % 2 == 0 ? arr[index]\
    \ : arr[index] + 1;\n    for (int i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ % 2 == 0) {\n            if (val == arr[i]) {\n                new_arr[i] =\
    \ new_arr[i - 1] + 2;\n            }\n            else {\n                new_arr[i]\
    \ = arr[i];\n            }\n        }\n    }\n    return new_arr;\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp20kwqzuh: /tmp/tmp20kwqzuh.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code here\n    long even = -1;\n    long min = -1;\n    long\
    \ min_index = -1;\n    long temp;\n    for (long i = 0; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (arr[i] < temp) {\n          \
    \      even = arr[i];\n                min = arr[i];\n                min_index\
    \ = i;\n            } else if (arr[i] == temp) {\n                if (arr[i] <\
    \ min) {\n                    even = arr[i];\n                    min = arr[i];\n\
    \                    min_index = i;\n                }\n            }\n      \
    \  }\n    }\n\n    if (arr.size() == 0 || even == -1) {\n        return {};\n\
    \    }\n    std::vector<long> result;\n    result.push_back(even);\n    result.push_back(min_index);\n\
    \    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdmf33n_z: /tmp/tmpdmf33n_z.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)5,
    (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,
    (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  // write your code here\n  if(arr.size() == 0){\n    return std::vector();\n\
    \  }\n  long smallest_value = *std::min_element(arr.begin(), arr.end());\n  long\
    \ smallest_index = std::distance(arr.begin(), std::min_element(arr.begin(), arr.end()));\n\
    \  std::vector<long> ans;\n  for (size_t i = 0; i <= arr.size() - 1; i++) {\n\
    \    if (arr[i] != 0) {\n      continue;\n    }\n    ans.push_back(smallest_value);\n\
    \    ans.push_back(smallest_index);\n    return ans;\n  }\n  return ans;\n}\n\
    int main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp27bb1pb3.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp27bb1pb3.cpp:31:24: error: cannot deduce template arguments\
    \ for \u2018vector<...auto...>\u2019 from ()\n   31 |     return std::vector();\n\
    \      |                        ^\n"
  stdout: ''
  timestamp: 1660117773
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> temp;\n  long smalest_value = 0;\n  int smalest_index\
    \ = 0;\n  long smallest_even_value = std::numeric_limits<long>::max();\n  for\
    \ (int i = 0; i < arr.size(); i++) {\n    long val = arr[i];\n    if (val & 1)\
    \ {\n      smallest_even_value = val;\n      smalest_value = val;\n      smalest_index\
    \ = i;\n    }\n    if (val < smallest_even_value) {\n      smallest_even_value\
    \ = val;\n      smalest_value = val;\n      smalest_index = i;\n    }\n  }\n \
    \ if (smallest_even_value) {\n    for (int i = 0; i < arr.size(); i++) {\n   \
    \   if (arr[i] == smalest_value) {\n        temp.push_back(arr[i]);\n        temp.push_back(smalest_index);\n\
    \        break;\n      }\n    }\n  }\n  return temp;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpmpq386sy: /tmp/tmpmpq386sy.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long n = arr.size();\n    long smallest = -1;\n    std::vector<long>\
    \ v;\n\n    for(int i = 0;i<n;i++) {\n        if(arr[i]%2 == 0){\n           \
    \ if(smallest == -1) {\n                smallest = arr[i];\n            }\n  \
    \          else if(arr[i] < smallest) {\n                smallest = arr[i];\n\
    \            }\n        }\n    }\n\n    if(smallest != -1) {\n        v.push_back((long)smallest);\n\
    \    }\n\n    return v;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp29egix_n: /tmp/tmp29egix_n.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    long int counter = 0;\n    long\
    \ int min_index = -1;\n    for (int i = 1; i < arr.size(); i++) {\n        if\
    \ (arr[i] % 2 == 0) {\n            counter++;\n            if (counter == arr[i])\
    \ {\n                if (min_index == -1) {\n                    min_index = i;\n\
    \                } else {\n                    if (min_index != i) {\n       \
    \                 return std::vector<long>{};\n                    }\n       \
    \         }\n            }\n        } else {\n            counter = 0;\n     \
    \   }\n    }\n    if (min_index == -1) {\n        return std::vector<long>{};\n\
    \    }\n    return std::vector<long>{arr[min_index], min_index};\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp364i_5dw: /tmp/tmp364i_5dw.cpp:55: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    int smallest_even = arr.front();\n\
    \    int smallest_index = arr.front();\n    for (int i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            if (smallest_even > arr[i]) {\n\
    \                smallest_even = arr[i];\n                smallest_index = i;\n\
    \            }\n        } else {\n            smallest_index =\n             \
    \   smallest_index == arr.size() - 1 ? 0 : smallest_index + 1;\n        }\n  \
    \  }\n    return { smallest_even, smallest_index };\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp5t3c5n4v: /tmp/tmp5t3c5n4v.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    long largest_even_val = 0, largest_even_index = 0,\
    \ largest_even_index2 = 0, largest_even_index3 = 1;\n    int even_count = 0;\n\
    \    for (auto i : arr) {\n        if ((even_count & 1) == 0) {\n            even_count\
    \ = even_count + 1;\n            even_count2 = even_count - 1;\n            even_count3\
    \ = even_count - 2;\n            if (i > largest_even_val) {\n               \
    \ largest_even_val = i;\n                largest_even_index = largest_even_val;\n\
    \            }\n        }\n    }\n    if (largest_even_val == 0) {\n        return\
    \ {};\n    }\n    for (int i = 0; i < largest_even_val; i++) {\n        if ((even_count2\
    \ & 1) == 0) {\n            even_count2 = even_count2 - 1;\n            even_count3\
    \ = even_count3 - 1;\n            if (even_count3 == 0) {\n                largest_even_val2\
    \ = largest_even_val;\n                largest_even_index2 = i;\n            }\n\
    \        }\n    }\n    int even_count4 = 0;\n    for (int i = 0; i < largest_even_val;\
    \ i++) {\n        if ((even_count3 & 1) == 0) {\n            even_count3 = even_count3\
    \ - 1;\n            even_count4 = even_count4 - 1;\n            if (even_count4\
    \ == 0) {\n                largest_even_val3 = largest_even_val;\n           \
    \     largest_even_index3 = i;\n            }\n        }\n    }\n    int even_count5\
    \ = 0;\n    for (int i = 0; i < largest_even_val; i++) {\n        if ((even_count4\
    \ & 1) == 0) {\n            even_count4 = even_count4 - 1;\n            even_count5\
    \ = even_count5 - 1;\n            if (even_count5 == 0) {\n                largest_even_val4\
    \ = largest_even_val;\n                largest_even_index4 = i;\n            }\n\
    \        }\n    }\n    int even_count6 = 0;\n    for (int i = 0; i < largest_even_val;\
    \ i++) {\n        if ((even_count5 & 1) == 0) {\n            even_count5 = even_count5\
    \ - 1;\n            even_count6 = even_count6 - 1;\n            if (even_count6\
    \ == 0) {\n                largest_even_val5 = largest_even_val;\n           \
    \     largest_even_index5 = i;\n            }\n        }\n    }\n    int even_count7\
    \ = 0;\n    for (int i = 0; i < largest_even_val; i++) {\n        if ((even_count6\
    \ & 1) == 0) {\n            even_count6 = even_count6 - 1;\n            even_count7\
    \ = even_count7 - 1;\n            if (even_count7 == 0) {\n                largest_even_\n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpt525m3k3.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpt525m3k3.cpp:35:13: error: \u2018even_count2\u2019 was\
    \ not declared in this scope; did you mean \u2018even_count\u2019?\n   35 |  \
    \           even_count2 = even_count - 1;\n      |             ^~~~~~~~~~~\n \
    \     |             even_count\n/tmp/tmpt525m3k3.cpp:36:13: error: \u2018even_count3\u2019\
    \ was not declared in this scope; did you mean \u2018even_count\u2019?\n   36\
    \ |             even_count3 = even_count - 2;\n      |             ^~~~~~~~~~~\n\
    \      |             even_count\n/tmp/tmpt525m3k3.cpp:47:14: error: \u2018even_count2\u2019\
    \ was not declared in this scope; did you mean \u2018even_count\u2019?\n   47\
    \ |         if ((even_count2 & 1) == 0) {\n      |              ^~~~~~~~~~~\n\
    \      |              even_count\n/tmp/tmpt525m3k3.cpp:49:13: error: \u2018even_count3\u2019\
    \ was not declared in this scope; did you mean \u2018even_count\u2019?\n   49\
    \ |             even_count3 = even_count3 - 1;\n      |             ^~~~~~~~~~~\n\
    \      |             even_count\n/tmp/tmpt525m3k3.cpp:51:17: error: \u2018largest_even_val2\u2019\
    \ was not declared in this scope; did you mean \u2018largest_even_val\u2019?\n\
    \   51 |                 largest_even_val2 = largest_even_val;\n      |      \
    \           ^~~~~~~~~~~~~~~~~\n      |                 largest_even_val\n/tmp/tmpt525m3k3.cpp:58:14:\
    \ error: \u2018even_count3\u2019 was not declared in this scope; did you mean\
    \ \u2018even_count4\u2019?\n   58 |         if ((even_count3 & 1) == 0) {\n  \
    \    |              ^~~~~~~~~~~\n      |              even_count4\n/tmp/tmpt525m3k3.cpp:62:17:\
    \ error: \u2018largest_even_val3\u2019 was not declared in this scope; did you\
    \ mean \u2018largest_even_val\u2019?\n   62 |                 largest_even_val3\
    \ = largest_even_val;\n      |                 ^~~~~~~~~~~~~~~~~\n      |    \
    \             largest_even_val\n/tmp/tmpt525m3k3.cpp:73:17: error: \u2018largest_even_val4\u2019\
    \ was not declared in this scope; did you mean \u2018largest_even_val\u2019?\n\
    \   73 |                 largest_even_val4 = largest_even_val;\n      |      \
    \           ^~~~~~~~~~~~~~~~~\n      |                 largest_ev"
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> res;\n    int flag = 0;\n    for(int i = 0; i < arr.size();\
    \ i++) {\n        if(arr[i] % 2 == 0) {\n            if(flag == 0) {\n       \
    \         res.push_back(arr[i]);\n                flag = 1;\n            }\n \
    \           else {\n                int c = i;\n                while((c + 1)\
    \ < res.size()) {\n                    if(arr[c] % 2 == 0) {\n               \
    \         res.push_back(arr[c]);\n                        break;\n           \
    \         }\n                    else c++;\n                }\n            }\n\
    \        }\n    }\n    if(arr.size() == 0) {\n        return res;\n    }\n   \
    \ return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpom6wt2c2: /tmp/tmpom6wt2c2.cpp:56: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    std::vector<long> result;\n    \n    for (int i = 0;\
    \ i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            result.push_back(arr[i]);\n\
    \        }\n    }\n    \n    if (result.size() == 0) {\n        return result;\n\
    \    }\n    \n    int smallest_val = result[0];\n    int smallest_idx = 0;\n \
    \   \n    for (int i = 0; i < result.size(); i++) {\n        if (result[i] ==\
    \ smallest_val) {\n            smallest_idx = i;\n        }\n    }\n    \n   \
    \ if (smallest_idx != 0) {\n        result.erase(result.begin() + smallest_idx);\n\
    \    }\n    \n    return result;\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpztpux1k5: /tmp/tmpztpux1k5.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> result;\n    // code here\n    int i = 0;\n    int\
    \ min_index = 0;\n    int min_even_even_num = -1;\n    long min_even_even_num_index\
    \ = 0;\n    while (i < arr.size()) {\n        int even_number = arr[i] % 2;\n\
    \        if (even_number == 0) {\n            if (min_even_even_num == -1) {\n\
    \                min_even_even_num = even_number;\n                min_even_even_num_index\
    \ = i;\n            } else {\n                if (min_even_even_num != even_number)\
    \ {\n                    min_index = min_even_even_num_index;\n              \
    \      min_even_even_num = even_number;\n                    min_even_even_num_index\
    \ = i;\n                }\n            }\n            ++i;\n        } else if\
    \ (even_number == 1) {\n            if (min_even_even_num != -1) {\n         \
    \       min_index = min_even_even_num_index;\n                min_even_even_num\
    \ = -1;\n                min_even_even_num_index = i;\n            } else {\n\
    \                if (min_even_even_num != -1) {\n                    min_index\
    \ = min_even_even_num_index;\n                    min_even_even_num = -1;\n  \
    \                  min_even_even_num_index = i;\n                }\n         \
    \   }\n            ++i;\n        } else {\n            ++i;\n        }\n    }\n\
    \    if (min_index != -1) {\n        result.push_back(min_index);\n        result.push_back(arr[min_index]);\n\
    \    } else {\n        result.push_back(-1);\n        result.push_back(0);\n \
    \   }\n    return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpxnyrntfp: /tmp/tmpxnyrntfp.cpp:77: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long result = 0, min = INT_MAX;\n    for(auto i : arr) {\n        if(i\
    \ % 2 == 0)\n            result = i;\n        if(min > i)\n            min = i;\n\
    \    }\n    return std::vector<long>({result, min});\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpd8n3r_g7: /tmp/tmpd8n3r_g7.cpp:40: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    \n    int min = arr[0]%2;\n    int min_index = 0;\n\
    \    for(int i=0;i<arr.size();i++){\n        if(arr[i]%2 == min){\n          \
    \  min_index++;\n            min = arr[i]%2;\n        }\n    }\n    \n    std::vector<long>\
    \ result;\n    result.push_back(arr[min_index]);\n    result.push_back(arr[min_index]);\n\
    \    result.push_back(arr[min_index]);\n    \n    return result;\n    \n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp_oa2v9un: /tmp/tmp_oa2v9un.cpp:50: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n\tassert(arr.size() >= 2);\n\tlong largest = 0, even = 0;\n\tfor (long i\
    \ : arr) {\n\t\tassert(i > 0);\n\t\tif (i % 2 == 0) {\n\t\t\teven = i;\n\t\t\t\
    largest = i;\n\t\t\tbreak;\n\t\t}\n\t\telse if (largest < i) {\n\t\t\teven = i;\n\
    \t\t\tlargest = i;\n\t\t}\n\t}\n\tif (even <= 0)\n\t\treturn {};\n\tlong smallest\
    \ = even;\n\tint index = arr.size() - 1;\n\twhile (index >= 0 && arr[smallest]\
    \ == largest) {\n\t\t--index;\n\t\tsmallest += 2;\n\t}\n\tstd::vector<long> result;\n\
    \tresult.push_back(even);\n\tresult.push_back(index);\n\treturn result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmphqtlzjfi: /tmp/tmphqtlzjfi.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::sort(arr.begin(), arr.end());\n    std::vector<long> result;\n \
    \   if (arr.empty())\n        return result;\n    long even_value = arr[0];\n\
    \    long smallest_index = -1;\n    for (long i = 1; i < arr.size(); i++) {\n\
    \        if (arr[i] % 2 == 0) {\n            if (smallest_index == -1 || smallest_index\
    \ > i) {\n                smallest_index = i;\n                even_value = arr[i];\n\
    \            }\n        }\n    }\n    if (smallest_index != -1) {\n        result.push_back(even_value);\n\
    \        result.push_back(smallest_index);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp715avyjd: /tmp/tmp715avyjd.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int minIndex = std::numeric_limits<int>::max();\n    int minValue = std::numeric_limits<int>::max();\n\
    \    int count = 0;\n    for (auto i : arr) {\n        if (i % 2 == 0) {\n   \
    \         minIndex = i;\n            minValue = i;\n            count = 1;\n \
    \       } else {\n            if (minValue < i && minIndex < i) {\n          \
    \      minValue = i;\n                minIndex = i;\n                count = 1;\n\
    \            }\n        }\n    }\n    if (count == 0)\n        return {};\n  \
    \  std::vector<long> vec;\n    for (auto i : arr) {\n        if (i % 2 == 0)\n\
    \            vec.push_back(i);\n    }\n    vec.push_back(minIndex);\n    vec.push_back(minValue);\n\
    \    return vec;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpm5eswxn3: /tmp/tmpm5eswxn3.cpp:58: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    assert(arr.size() != 0);\n    int size = arr.size();\n    auto it = std::min_element(arr.begin(),\
    \ arr.end());\n    if (it == arr.end()) return arr;\n    if (arr[*it] % 2 == 0)\
    \ return arr[std::distance(arr.begin(), it)];\n    if (arr[*it] < arr[std::distance(arr.begin(),\
    \ it)] % 2) {\n        return arr[std::distance(arr.begin(), it)];\n    } else\
    \ {\n        return arr[std::distance(arr.begin(), it)];\n    }\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmplr1hzr46.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmplr1hzr46.cpp:33:69: error: could not convert \u2018arr.std::vector<long\
    \ int>::operator[](((std::vector<long int>::size_type)std::distance<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(arr.std::vector<long int>::begin(), it)))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to \u2018std::vector<long int>\u2019\n   33 |   \
    \  if (arr[*it] % 2 == 0) return arr[std::distance(arr.begin(), it)];\n      |\
    \                                                                     ^\n    \
    \  |                                                                     |\n \
    \     |                                                                     __gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type {aka long int}\n/tmp/tmplr1hzr46.cpp:35:50: error:\
    \ could not convert \u2018arr.std::vector<long int>::operator[](((std::vector<long\
    \ int>::size_type)std::distance<__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> > >(arr.std::vector<long int>::begin(), it)))\u2019 from \u2018__gnu_cxx::__alloc_traits<std::allocator<long\
    \ int>, long int>::value_type\u2019 {aka \u2018long int\u2019} to \u2018std::vector<long\
    \ int>\u2019\n   35 |         return arr[std::distance(arr.begin(), it)];\n  \
    \    |                                                  ^\n      |           \
    \                                       |\n      |                           \
    \                       __gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type {aka long int}\n/tmp/tmplr1hzr46.cpp:37:50: error: could not\
    \ convert \u2018arr.std::vector<long int>::operator[](((std::vector<long int>::size_type)std::distance<__gnu_cxx::__normal_iterator<long\
    \ int*, std::vector<long int> > >(arr.std::vector<long int>::begin(), it)))\u2019\
    \ from \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long int>::value_type\u2019\
    \ {aka \u2018long int\u2019} to \u2018std::vector<long int>\u2019\n   37 |   \
    \      return arr[std::distance(arr.begin(), it)];"
  stdout: ''
  timestamp: 1660117774
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  if(arr.size() == 0) return {};\n  // Find the node with the smallest even\
    \ value in the vector\n  // If the vector is empty, return an empty vector\n \
    \ auto it = (std::min_element(arr.begin(), arr.end())).base();\n  // If it is\
    \ even, return the value\n  if(*it % 2 == 0) return std::vector<long>(arr.begin(),\
    \ it);\n  // If it is not even, return the vector with the smallest index\n  return\
    \ std::vector<long>(it, arr.end());\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwto0xac8.cpp: In function \u2018std::vector<long int> pluck(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpwto0xac8.cpp:34:60: error: no matching function for call\
    \ to \u2018std::vector<long int>::vector(std::vector<long int>::iterator, long\
    \ int*&)\u2019\n   34 |   if(*it % 2 == 0) return std::vector<long>(arr.begin(),\
    \ it);\n      |                                                            ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwto0xac8.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:650:2:\
    \ note: candidate: \u2018template<class _InputIterator, class> std::vector<_Tp,\
    \ _Alloc>::vector(_InputIterator, _InputIterator, const allocator_type&)\u2019\
    \n  650 |  vector(_InputIterator __first, _InputIterator __last,\n      |  ^~~~~~\n\
    /usr/include/c++/9/bits/stl_vector.h:650:2: note:   template argument deduction/substitution\
    \ failed:\n/tmp/tmpwto0xac8.cpp:34:60: note:   deduced conflicting types for parameter\
    \ \u2018_InputIterator\u2019 (\u2018__gnu_cxx::__normal_iterator<long int*, std::vector<long\
    \ int> >\u2019 and \u2018long int*\u2019)\n   34 |   if(*it % 2 == 0) return std::vector<long>(arr.begin(),\
    \ it);\n      |                                                            ^\n\
    In file included from /usr/include/c++/9/vector:67,\n                 from /usr/include/c++/9/functional:62,\n\
    \                 from /usr/include/c++/9/pstl/glue_algorithm_defs.h:13,\n   \
    \              from /usr/include/c++/9/algorithm:71,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwto0xac8.cpp:2:\n/usr/include/c++/9/bits/stl_vector.h:622:7:\
    \ note: candidate: \u2018std::vector<_Tp, _Alloc>::vector(std::initializer_list<_Tp>,\
    \ const allocator_type&) [with _Tp = long int; _Alloc = std::allocator<long int>;\
    \ std::vector<_Tp, _Alloc>::allocator_type = std::"
  stdout: ''
  timestamp: 1660117774
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long min_val = INT_MAX;\n    int min_idx = 0;\n    std::vector<long>\
    \ res;\n    for (auto& e : arr) {\n        if (e % 2 == 0) {\n            if (min_val\
    \ < e) {\n                res.clear();\n                min_val = e;\n       \
    \         min_idx = 1;\n            } else if (e < min_val) {\n              \
    \  res.clear();\n                min_val = e;\n                min_idx = 2;\n\
    \            }\n        }\n    }\n    if (res.empty()) return res;\n    res.push_back(min_val);\n\
    \    res.push_back(min_idx);\n    return res;\n}\nint main() {\n    auto candidate\
    \ = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpb9gqn4v7: /tmp/tmpb9gqn4v7.cpp:52: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    std::vector<long> output;\n    int N = arr.size();\n    if (N <= 0) return\
    \ output;\n    int smallest_value = INT_MAX;\n    int smallest_index = INT_MAX;\n\
    \    for (int i = 0; i < N; i++) {\n        if (arr[i] >= smallest_value) {\n\
    \            if (arr[i] >= smallest_value) break;\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n    }\n    output.push_back(smallest_value);\n\
    \    output.push_back(smallest_index);\n    return output;\n}\nint main() {\n\
    \    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpfzd8yypz: /tmp/tmpfzd8yypz.cpp:49: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int ans[2];\n    long smalest_value;\n    int smalest_index;\n    int\
    \ even_index;\n    ans[0] = ans[1] = even_index = smalest_value = smalest_index\
    \ = -1;\n    for (int i = 0; i < arr.size(); ++i) {\n        if (arr[i] % 2 ==\
    \ 0) {\n            if (even_index == -1) {\n                even_index = i;\n\
    \                smalest_value = arr[i];\n            } else {\n             \
    \   if (arr[i] < smalest_value) {\n                    even_index = i;\n     \
    \               smalest_value = arr[i];\n                }\n            }\n  \
    \      } else {\n            if (smalest_value == arr[i] || smalest_value == arr[i])\
    \ {\n                smalest_index = i;\n                smalest_value = arr[i];\n\
    \            }\n        }\n    }\n    if (even_index == -1) {\n        return\
    \ {};\n    }\n    if (smalest_value == smalest_value) {\n        return std::vector<long>({smalest_value,\
    \ smalest_index});\n    } else {\n        return std::vector<long>({smalest_value,\
    \ smalest_index});\n    }\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpnwn1s6bv: /tmp/tmpnwn1s6bv.cpp:63: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  std::vector<long> temp;\n  // Your code here\n  std::sort(arr.begin(),arr.end(),std::greater<long>());\n\
    \  std::vector<long> temp2;\n  for (size_t i = 1 ; i < (size_t)arr.size(); i++)\
    \ {\n    if (arr[i] % 2 == 0) {\n      temp2.push_back(arr[i]);\n    }\n  }\n\
    \  if (temp2.size() > 0) {\n    temp.push_back(temp2.at(0));\n    temp.push_back(temp2.at(0));\n\
    \    temp.push_back(temp2.at(0));\n    temp.push_back(temp2.at(0));\n  }\n  else{\n\
    \    temp.push_back(arr.at(0));\n  }\n  return temp;\n}\nint main() {\n    auto\
    \ candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4, (long)2,\
    \ (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpp3afgdfy: /tmp/tmpp3afgdfy.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    int n = arr.size();\n    // arr[i] > arr[i - 1] if arr[i] and arr[i -\
    \ 1]\n    for (int i = 0; i < n - 1; i++) {\n        if (arr[i] > arr[i + 1])\
    \ {\n            long temp = arr[i];\n            arr[i] = arr[i + 1];\n     \
    \       arr[i + 1] = temp;\n        }\n    }\n    for (int i = 0; i < n - 1; i++)\
    \ {\n        if (arr[i] % 2 == 0) {\n            return std::vector<long>({arr[i],\
    \ i});\n        }\n    }\n    return std::vector<long>();\n}\nint main() {\n \
    \   auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpesv3xrjb: /tmp/tmpesv3xrjb.cpp:47: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    long smallest_value = 0, smallest_index = 0;\n    bool found = false;\n\
    \    int count = 0;\n\n    for (long i = 0; i < arr.size(); i++) {\n        if\
    \ (arr[i] >= 0) {\n            if (arr[i] < smallest_value) {\n              \
    \  smallest_value = arr[i];\n                smallest_index = i;\n           \
    \ }\n            else {\n                count++;\n                if (count ==\
    \ 1) {\n                    found = true;\n                }\n            }\n\
    \        }\n    }\n    if (!found) {\n        return {};\n    }\n    else {\n\
    \        std::vector<long> vec;\n        vec.push_back(smallest_value);\n    \
    \    vec.push_back(smallest_index);\n        return vec;\n    }\n}\nint main()\
    \ {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpwpaxg6ec: /tmp/tmpwpaxg6ec.cpp:59: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // code here\n    \n    std::vector<long> v;\n    for(long i = 1; i <\
    \ arr.size(); i++) {\n        if(arr[i] % 2 == 0) {\n            v.push_back(arr[i]);\n\
    \        }\n    }\n    \n    long smallest_value = v[0];\n    int smallest_index\
    \ = -1;\n    int count = 0;\n    \n    for(long i: v) {\n        if(i == smallest_value)\
    \ {\n            smallest_index = count;\n        }\n        count += 1;\n   \
    \ }\n    \n    if(smallest_index != -1) {\n        v.push_back(smallest_value);\n\
    \        v.push_back(smallest_index);\n    }\n    \n    if(v.empty()) {\n    \
    \    return v;\n    }\n    else {\n        return v;\n    }\n    \n    \n    \n\
    }\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpdy_ae7nd: /tmp/tmpdy_ae7nd.cpp:66: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n  // Your code goes here\n  std::set<long> even_value;\n  for(auto i : arr){\n\
    \    if(even_value.find(i) != even_value.end()){\n      auto index = std::distance(even_value.begin(),\n\
    \                               std::find(even_value.begin(), even_value.end(),\
    \ i));\n      return std::vector<long>({i, index});\n    }\n    even_value.insert(i);\n\
    \  }\n  return std::vector<long>();\n}\nint main() {\n    auto candidate = pluck;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)2, (long)3}))) == (std::vector<long>({(long)2,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3})))\
    \ == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpad38z5af: /tmp/tmpad38z5af.cpp:43: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n    // Your code goes here\n    \n    long smallest = std::numeric_limits<long>::max();\n\
    \    long smallest_idx = -1;\n    int smallest_idx2 = -1;\n    \n    for (int\
    \ i = 0; i < arr.size() && smallest != std::numeric_limits<long>::max(); i++){\n\
    \        if (arr[i] > smallest && arr[i] % 2 == 0){\n            smallest = arr[i];\n\
    \            smallest_idx = i;\n        }\n        if (arr[i] == smallest && arr[i]\
    \ % 2 == 0 && i != smallest_idx){\n            smallest_idx2 = i;\n        }\n\
    \    }\n    std::vector<long> res;\n    res.push_back(smallest);\n    res.push_back(arr[smallest_idx]);\n\
    \    if (smallest_idx2 != -1){\n        res.push_back(arr[smallest_idx2]);\n \
    \   }\n    return res;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmp8f013muf: /tmp/tmp8f013muf.cpp:54: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// \"Given a vector representing\
    \ a branch of a tree that has non-negative integer nodes\n// your task is to pluck\
    \ one of the nodes and return it.\n// The plucked node should be the node with\
    \ the smallest even value.\n// If multiple nodes with the same smallest even value\
    \ are found return the node that has smallest index.\n// The plucked node should\
    \ be returned in a vector, [ smalest_value, its index ],\n// If there are no even\
    \ values or the given vector is empty, return [].\n// Example 1:\n// >>> pluck((std::vector<long>({(long)4,\
    \ (long)2, (long)3})))\n// (std::vector<long>({(long)2, (long)1}))\n// Explanation:\
    \ 2 has the smallest even value, and 2 has the smallest index.\n// Example 2:\n\
    // >>> pluck((std::vector<long>({(long)1, (long)2, (long)3})))\n// (std::vector<long>({(long)2,\
    \ (long)1}))\n// Explanation: 2 has the smallest even value, and 2 has the smallest\
    \ index.\n// Example 3:\n// >>> pluck((std::vector<long>()))\n// (std::vector<long>())\n\
    // Example 4:\n// >>> pluck((std::vector<long>({(long)5, (long)0, (long)3, (long)0,\
    \ (long)4, (long)2})))\n// (std::vector<long>({(long)0, (long)1}))\n// Explanation:\
    \ 0 is the smallest value, but  there are two zeros,\n// so we will choose the\
    \ first zero, which has the smallest index.\n// Constraints:\n// * 1 <= nodes.length\
    \ <= 10000\n// * 0 <= node.value\nstd::vector<long> pluck(std::vector<long> arr)\
    \ {\n        long max_val = 0, min_val = INT_MAX;\n        long index = 0;\n \
    \       for(size_t i = 0; i < arr.size(); ++i){\n                if(max_val <\
    \ arr[i]){\n                        max_val = arr[i];\n                      \
    \  index = i;\n                } else if(arr[i] > max_val){\n                \
    \        max_val = arr[i];\n                        index = i;\n             \
    \   }\n                if(min_val > arr[i]){\n                        min_val\
    \ = arr[i];\n                }\n        }\n\n        std::vector<long> result;\n\
    \        result.push_back(max_val);\n        result.push_back(index);\n      \
    \  return result;\n}\nint main() {\n    auto candidate = pluck;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
    \ (long)0, (long)3, (long)0, (long)4, (long)2}))) == (std::vector<long>({(long)0,\
    \ (long)1})));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)0, (long)5, (long)3}))) == (std::vector<long>({(long)0, (long)3})));\n\
    \    assert(candidate((std::vector<long>({(long)5, (long)4, (long)8, (long)4,\
    \ (long)8}))) == (std::vector<long>({(long)4, (long)1})));\n    assert(candidate((std::vector<long>({(long)7,\
    \ (long)6, (long)7, (long)1}))) == (std::vector<long>({(long)6, (long)1})));\n\
    \    assert(candidate((std::vector<long>({(long)7, (long)9, (long)7, (long)1})))\
    \ == (std::vector<long>()));\n}\n"
  status: Exception
  stderr: 'tmpou1six9a: /tmp/tmpou1six9a.cpp:51: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)2, (long)3}))) == (std::vector<long>({(long)2, (long)1}))'' failed.

    '
  stdout: ''
  timestamp: 1660117775
