{
  "name": "HumanEval_117_select_words",
  "language": "go_test.go",
  "prompt": "package select_words_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}\nfunc select_words(s string, n int) []string {\n",
  "tests": "func TestSelect_Words(t *testing.T) {\n  candidate := select_words\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"Mary had a little lamb\", 4), expected: []string{\"little\"} },\n     { actual: candidate(\"Mary had a little lamb\", 3), expected: []string{\"Mary\", \"lamb\"} },\n     { actual: candidate(\"simple white space\", 2), expected: []string{} },\n     { actual: candidate(\"Hello world\", 4), expected: []string{\"world\"} },\n     { actual: candidate(\"Uncle sam\", 3), expected: []string{\"Uncle\"} },\n     { actual: candidate(\"\", 4), expected: []string{} },\n     { actual: candidate(\"a b c d e f\", 1), expected: []string{\"b\", \"c\", \"d\", \"f\"} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "completions": [
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    // write your code here\n    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        words = append(words, s[i:])\n    }\n    return words\n}\n",
    "    var result []string\n    var words []string\n    for _, word := range strings.Split(s, \" \") {\n        if len(word) == 0 {\n            continue\n        }\n        words = append(words, word)\n    }\n    for _, word := range words {\n        if len(word) == 0 {\n            continue\n        }\n        if len(word) == n {\n            result = append(result, word)\n        }\n        for i := 0; i < len(word); i++ {\n            if word[i] == ' ' {\n                continue\n            }\n            if i + 1 < len(word) {\n                if word[i] == word[i + 1] {\n                    continue\n                }\n            }\n            if i + 2 < len(word) {\n                if word[i] == word[i + 2] {\n                    continue\n                }\n            }\n            if i + 3 < len(word) {\n                if word[i] == word[i + 3] {\n                    continue\n                }\n            }\n            if i + 4 < len(word) {\n                if word[i] == word[i + 4] {\n                    continue\n                }\n            }\n            if i + 5 < len(word) {\n                if word[i] == word[i + 5] {\n                    continue\n                }\n            }\n            if i + 6 < len(word) {\n                if word[i] == word[i + 6] {\n                    continue\n                }\n            }\n            if i + 7 < len(word) {\n                if word[i] == word[i + 7] {\n                    continue\n                }\n            }\n            if i + 8 < len(word) {\n                if word[i] == word[i + 8] {\n                    continue\n                }\n            }\n            if i + 9 < len(word) {\n                if word[i] == word[i + 9] {\n                    continue\n                }\n            }\n            if i + 10 < len(word) {\n                if word[i] == word[i + 10] {\n                    continue\n                }\n            }\n            if i + 11 < len(word) {",
    "    // Your code here\n    var result []string\n    \n    if len(s) == 0 {\n        return result\n    }\n    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n        \n        if len(words) == n {\n            result = append(result, words)\n            words = make([]string, 0)\n        }\n    }\n    \n    if len(words) > 0 {\n        result = append(result, words)\n    }\n    \n    return result\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] != ' ' {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    // Create a map to store the words and their frequency\n    words := make(map[string]int)\n    \n    // Create a slice to store the words\n    var result []string\n    \n    // Iterate through the string\n    for i := 0; i < len(s); i++ {\n        \n        // If the current character is a space, skip it\n        if s[i] == ' ' {\n            continue\n        }\n        \n        // If the current character is a letter, add it to the word\n        if is_letter(s[i]) {\n            word := s[i:]\n            \n            // If the word is not in the map, add it\n            if _, ok := words[word]; !ok {\n                words[word] = 1\n            } else {\n                // If the word is in the map, increment its frequency\n                words[word]++\n            }\n        }\n    }\n    \n    // Iterate through the map and add the words to the result\n    for word, _ := range words {\n        if words[word] == n {\n            result = append(result, word)\n        }\n    }\n    \n    return result\n}\n\n// Helper function to check if a character is a letter",
    "    // Your code here\n    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        words = append(words, s[i:])\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    // write your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            break\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:i+1])\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    \n    return words\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue",
    "    // write your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            return words\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    \n    // TODO: implement this function\n    \n    return nil\n}\n",
    "    var result []string\n    var words []string\n    words = strings.Split(s, \" \")\n    for _, word := range words {\n        if len(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    // write your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    words := make(map[string]int)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        word := s[i:]\n        if len(word) > n {\n            word = word[:n]\n        }\n        \n        if _, ok := words[word]; ok {\n            words[word]++\n        } else {\n            words[word] = 1\n        }\n    }\n    \n    for word, count := range words {\n        if count == n {\n            result = append(result, word)\n        }\n    }\n    \n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[j] == s[i] {\n                if n == 1 {\n                    words = append(words, s[i:j])\n                    break\n                }\n                n--\n            }\n        }\n    }\n    return words\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i > 0 && s[i] == s[i-1] {\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    // Your code here\n    var result []string\n    var words []string\n    words = strings.Split(s, \" \")\n    for _, word := range words {\n        if len(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n <= len(s) {\n            if s[i:i+n] == \" \" {\n                continue\n            }\n            \n            words = append(words, s[i:i+n])\n        }\n    }\n    \n    return words\n}\n",
    "    \n    // Create a map to store the words\n    words := make(map[string]bool)\n    \n    // Create a list to store the words\n    var result []string\n    \n    // Iterate through the string\n    for i := 0; i < len(s); i++ {\n        \n        // If the current character is a space\n        if s[i] == ' ' {\n            \n            // If the number of consonants is equal to the number of spaces\n            if n == 0 {\n                \n                // Add the word to the list\n                result = append(result, s[i+1:])\n            }\n            \n            // If the number of consonants is less than the number of spaces\n            else if n > 0 {\n                \n                // If the word is not in the map\n                if _, ok := words[s[i+1:]]; !ok {\n                    \n                    // Add the word to the list\n                    result = append(result, s[i+1:])\n                }\n            }\n        }\n        \n        // If the current character is not a space\n        else {\n            \n            // If the number of consonants is equal to the number of spaces\n            if n == 0 {\n                \n                // Add the word to the map\n                words[s[i:i+1]] = true\n            }\n            \n            // If the number of consonants is less than the number of spaces\n            else if n > 0 {\n                \n                // If the word is not in the map\n                if _, ok := words[s[i:i+1]]; !ok {\n                    \n                    // Add the word to the map\n                    words[s[i:i+1]] = true\n                }\n            }\n        }\n    }\n    \n    // Return the list of words\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(result) == n {\n                break\n            }\n            continue\n        }\n        if len(result) == n {\n            break\n        }\n        result = append(result, s[i:i+1])\n    }\n    return result\n}\n",
    "    // write your code here\n    var res []string\n    if len(s) == 0 {\n        return res\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n > len(s) {\n            break\n        }\n        \n        if s[i:i+n] == \" \" {\n            continue\n        }\n        \n        res = append(res, s[i:i+n])\n    }\n    \n    return res\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(result) == n {\n            return result\n        }\n        \n        if i == len(s) - 1 {\n            result = append(result, s[i:])\n            return result\n        }\n        \n        if s[i] == s[i+1] {\n            result = append(result, s[i:i+2])\n            i++\n        } else {\n            result = append(result, s[i:])\n        }\n    }\n    \n    return result\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    words := make([]string, 0)\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        words = append(words, s[i:])\n    }\n    return words\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            break\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n        } else {\n            words = append(words, s[i:])\n        }\n    }\n    \n    return words\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(result) == n {\n            break\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, \"\")\n            continue\n        }\n        \n        result = append(result, s[i:i+1])\n    }\n    \n    return result\n}\n",
    "    // write your code here\n    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    // write your code here\n    var res []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(res) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            res = append(res, s[i:])\n        } else {\n            res = append(res, s[i:i+1])\n        }\n    }\n    return res\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            break\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i+1:])\n            n--\n            i--\n            continue\n        }\n        if s[i] == ' ' {\n            result =",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(s); j++ {\n            if s[j] == ' ' {\n                continue\n            }\n            if s[i] == s[j] {\n                if n == 1 {\n                    result = append(result, s[i:j])\n                    break\n                } else {\n                    n--\n                }\n            } else {\n                break\n            }\n        }\n    }\n    return result\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        count := 0\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[j] == s[i] {\n                count++\n                if count == n {\n                    words = append(words, s[i:j])\n                    break\n                }\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i + n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        if i + n == len(s) {\n            words = append(words, s[i:i+n])\n            i += n\n            continue\n        }\n        if i + n + 1 < len(s) {\n            if s[i + n + 1] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        if i + n + 1 == len(s) {\n            words = append(words, s[i:i+n])\n            i += n\n            continue\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            i++\n            continue\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i += 2\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n        i++\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i + n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        words = append(words, s[i:])\n    }\n    return words\n}\n",
    "    // Write your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(result) == n {\n            return result\n        }\n        \n        result = append(result, s[i:i+1])\n    }\n    \n    return result\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:i+1])\n            continue\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    \n    // convert string to array of runes\n    runes := []rune(s)\n    \n    // create a map of runes to count\n    counts := make(map[rune]int)\n    \n    // iterate through runes\n    for _, r := range runes {\n        counts[r] += 1\n    }\n    \n    // create a slice of words\n    words := make([]string, 0)\n    \n    // iterate through runes\n    for _, r := range runes {\n        \n        // if the count is less than n, continue\n        if counts[r] < n {\n            continue\n        }\n        \n        // if the count is equal to n, add the word to the slice\n        if counts[r] == n {\n            words = append(words, string(r))\n        }\n        \n        // if the count is greater than n, decrement the count\n        if counts[r] > n {\n            counts[r] -= 1\n        }\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n        \n        if len(s) - i < n {\n            break\n        }\n    }\n    \n    return words\n}\n",
    "    // write your code here\n    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    // write your code here\n    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue",
    "    \n    // Create a map of all words in the string\n    words := make(map[string]bool)\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        word := s[i:]\n        words[word] = true\n    }\n    \n    // Create a list of words that contain exactly n consonants\n    var result []string\n    for word, _ := range words {\n        if len(word) == n {\n            result = append(result, word)\n        }\n    }\n    \n    return result\n}\n",
    "    \n    // TODO: implement function\n    \n    return []string{}\n}\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}",
    "    // Your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(result) == n {\n            break\n        }\n        \n        if i == len(s) - 1 {\n            result = append(result, s[i:])\n            break\n        }\n        \n        if s[i] == s[i+1] {\n            result = append(result, s[i:i+2])\n            i += 1\n        } else {\n            result = append(result, s[i:])\n        }\n    }\n    \n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            words = append(words, s[i:i+n])\n        }\n    }\n    return words\n}\n",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:i+1])\n            continue\n        }\n        \n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            continue\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    return words\n}\n",
    "    // write your code here\n    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n",
    "    // write your code here\n    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[",
    "    // Your code here\n    return nil\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            return words\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:i+1])\n        } else {\n            words = append(words, s[i:i+1])\n            for j := i + 1; j < len(s); j++ {\n                if s[j] == ' ' {\n                    continue\n                }\n                if len(words) == n {\n                    return words\n                }\n                words = append(words, s[j:j+1])\n            }\n        }\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    // Create a list of words\n    words := make([]string, 0)\n    \n    // Create a map of words and their counts\n    word_counts := make(map[string]int)\n    \n    // Iterate over each character in the string\n    for i := 0; i < len(s); i++ {\n        \n        // If the character is a space, then we need to skip it\n        if s[i] == ' ' {\n            continue\n        }\n        \n        // If the character is a letter, then we need to add it to the word\n        if s[i] >= 'a' && s[i] <= 'z' {\n            \n            // Get the word\n            word := s[i : i + 1]\n            \n            // Increment the count\n            count := word_counts[word]\n            word_counts[word] = count + 1\n            \n            // If the count is equal to the number of consonants, then we need to add it to the list\n            if count == n {\n                words = append(words, word)\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    \n    // Create a map of words and their counts\n    words := make(map[string]int)\n    \n    // Create a list of words\n    words_list := make([]string, 0)\n    \n    // Create a word\n    word := \"\"\n    \n    // Iterate over the string\n    for i := 0; i < len(s); i++ {\n        \n        // If the character is a space\n        if s[i] == ' ' {\n            \n            // If the word is not empty\n            if word != \"\" {\n                \n                // Increment the count of the word\n                words[word]++\n                \n                // Append the word to the list\n                words_list = append(words_list, word)\n                \n                // Reset the word\n                word = \"\"\n            }\n        } else {\n            \n            // Append the character to the word\n            word += string(s[i])\n        }\n    }\n    \n    // If the word is not empty\n    if word != \"\" {\n        \n        // Increment the count of the word\n        words[word]++\n        \n        // Append the word to the list\n        words_list = append(words_list, word)\n    }\n    \n    // Iterate over the words\n    for _, word := range words_list {\n        \n        // If the word has exactly n consonants\n        if len(word) == n {\n            \n            // Return the word\n            return []string{word}\n        }\n    }\n    \n    // Return an empty list\n    return []string{}\n}\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n//",
    "    // Your code here\n    var words []string\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:i+1+n])\n            n -= 1\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:i+1+n])\n            n -= 1\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n        n--\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    var res []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(res) == n {\n            break\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        res = append(res, s[i:i+1])\n    }\n    return res\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(result) == n {\n                break\n            }\n            continue\n        }\n        if len(result) == n {\n            break\n        }\n        result = append(result, s[i:i+1])\n    }\n    return result\n}\n",
    "    // write your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[i] == s[j] {\n                if len(s) - i - j == n {\n                    result = append(result, s[i:j+1])\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            result = append(result, s[i - n:i])\n        }\n    }\n    return result\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i+n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        \n        if i+n < len(s) {\n            if s[i+n] != ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        \n        words = append(words, s[i:])\n    }\n    \n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            break\n        }\n        n--\n        if i > 0 && s[i-1] == ' ' {\n            continue\n        }\n        if i > 0 && s[i-1] != ' ' {\n            result = append(result, s[i-1:i+1])\n        }\n    }\n    return result\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n        } else {\n            words = append(words, s[i:])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i",
    "    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:",
    "    // write your code here\n    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i+1:i+1+n])\n            n -= len(s[i+1:i+1+n])\n            i += len(s[i+1:i+1+n])\n            continue\n        }\n        if n == 1 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i+1:i+1+n])\n            n -= len(s[i+1:i+1+n])\n            i += len(s[i+1:i+1+n])\n            continue\n        }\n        if n == 2 {\n            words = append(words, s[i:i+2])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i+1:i+1+n])\n            n -= len(s[i+1:i+1+n])\n            i += len(s[i+1:i+1+n])\n            continue\n        }\n        words = append(words, s[i:i+n])\n        n -= len(s[i:i+n])\n        i += len(s[i:i+n])\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i + 1; j < len(s); j++ {\n            if s[j] == ' ' {\n                continue\n            }\n            if n == 0 {\n                break\n            }\n            n--\n            result = append(result, s[i:j])\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            break\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            i++\n            continue\n        }\n        \n        for j := i + 1; j < len(s); j++ {\n            if s[i] == s[j] {\n                words = append(words, s[i:j+1])\n                i = j\n                break\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    \n    // TODO: Implement this function\n    \n    return nil\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i = i + 2\n        } else {\n            words = append(words, s[i:])\n            i = i + 1\n        }\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            words = append(words, s[i:i+n])\n        }\n    }\n    return words\n}\n",
    "    // write your code here\n    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n > len(s) {\n            break\n        }\n        words = append(words, s[i:i+n])\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            break\n        }\n        n--\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i - n:i])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    var words []string\n    words = strings.Split(s, \" \")\n    for _, word := range words {\n        if len(word) > n {\n            continue\n        }\n        result = append(result, word)\n    }\n    return result\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            break\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 1 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[i] == s[j] {\n                if len(result) == n {\n                    break\n                }\n                result = append(result, s[i:j])\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n > len(s) {\n            break\n        }\n        \n        if s[i:i+n] == \" \" {\n            continue\n        }\n        \n        result = append(result, s[i:i+n])\n    }\n    \n    return result\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    // write your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(result) == n {\n            break\n        }\n        result = append(result, s[i:i+1])\n    }\n    return result\n}\n",
    "    // Write your code here\n    var words []string\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            if n == 1 {\n                words = append(words, s[i:i+n])\n            } else {\n                for j := i; j < i + n; j++ {\n                    if s[j] == ' ' {\n                        continue\n                    }\n                    words = append(words, s[i:j])\n                }\n            }\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(result) == n {\n            break\n        }\n        \n        if i == len(s) - 1 {\n            result = append(result, s[i:])\n            break\n        }\n        \n        if s[i+1] == ' ' {\n            result = append(result, s[i:i+2])\n            i++\n            continue\n        }\n        \n        if s[i+1] != ' ' {\n            result = append(result, s[i:i+1])\n            i++\n            continue\n        }\n        \n        if s[i+2] == ' ' {\n            result = append(result, s[i:i+3])\n            i += 2\n            continue\n        }\n        \n        if s[i+2] != ' ' {\n            result = append(result, s[i:i+2])\n            i += 2\n            continue\n        }\n        \n        if s[i+3] == ' ' {\n            result = append(result, s[i:i+4])\n            i += 3\n            continue\n        }\n        \n        if s[i+3] != ' ' {\n            result = append(result, s[i:i+3])\n            i += 3\n            continue\n        }\n        \n        if s[i+4] == ' ' {\n            result = append(result, s[i:i+5])\n            i += 4\n            continue\n        }\n        \n        if s[i+4] != ' ' {\n            result = append(result, s[i:i+4])\n            i += 4\n            continue\n        }\n        \n        if s[i+5] == ' ' {\n            result = append(result, s[i:i+6])\n            i += 5\n            continue\n        }\n        \n        if s[i+5] != ' ' {\n            result = append(result, s[i:i+5])\n            i += 5\n            continue\n        }\n        \n",
    "    // Your code here\n    return nil\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n <= len(s) {\n            if s[i:i+n] == \" \" {\n                continue\n            }\n            \n            words = append(words, s[i:i+n])\n        }\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[i] == s[j] {\n                if n == 1 {\n                    result = append(result, s[i:j+1])\n                    break\n                } else {\n                    n--\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[i] == s[j] {\n                if len(s) - i - j == n {\n                    result = append(result, s[i:j+1])\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] != ' ' {\n            words = append(words, s[i:i+1])\n            i++\n            continue\n        }\n    }\n    return words\n}\n",
    "    // Write your code here\n    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(s) - i >= n {\n            result = append(result, s[i:i+n])\n        }\n        \n        if i + n > len(s) {\n            break\n        }\n        \n        for j := i + 1; j < i + n; j++ {\n            if s[j] == ' ' {\n                continue\n            }\n            \n            if i + n - j >= n {\n                result = append(result, s[i:i+n-j])\n            }\n        }\n    }\n    \n    return result\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            result = append(result, s[i-n:i+1])\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            words = append(words, s[i:i+n])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    \n    // if the string is empty return an empty list\n    if len(s) == 0 {\n        return []string{}\n    }\n    \n    // create a map to store the words\n    words := make(map[string]bool)\n    \n    // create a slice to store the words\n    var words_list []string\n    \n    // iterate through the string\n    for i := 0; i < len(s); i++ {\n        \n        // if the current character is a space\n        if s[i] == ' ' {\n            \n            // if the word is not in the map\n            if _, ok := words[s[0:i]]; !ok {\n                \n                // add the word to the map\n                words[s[0:i]] = true\n                \n                // add the word to the list\n                words_list = append(words_list, s[0:i])\n            }\n        }\n    }\n    \n    // return the list of words\n    return words_list\n}\n\n// Given a string s and a natural number n, you have been tasked to implement \n// a function that returns a list of all words from string s that contain exactly \n// n consonants, in order these words appear in the string s.\n// If the string s is empty then the function should return an empty list.\n// Note: you may assume the input string contains only letters and spaces.\n// Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// []string{\"little\"}\n// >>> select_words(\"Mary had a little lamb\", 3)\n// []string{\"Mary\", \"lamb\"}\n// >>> select_words(\"simple white space\", 2)\n// []string{}\n// >>> select_words(\"Hello world\", 4)\n// []string{\"world\"}\n// >>> select_words(\"Uncle sam\", 3)\n// []string{\"Uncle\"}",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            return words\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n        } else {\n            words = append(words, s[i:])\n        }\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[j] == s[i] {\n                if len(words) == n {\n                    break\n                }\n                words = append(words, s[i:j+1])\n            }\n        }\n    }\n    return words\n}\n",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n        \n        for j := i + 1; j < len(s); j++ {\n            if s[j] == ' ' {\n                continue\n            }\n            \n            if len(words) == n {\n                return words\n            }\n            \n            if len(s) - j >= n {\n                words = append(words, s[j:j+n])\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        words = append(words, s[i:])\n        break\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[i] == s[j] {\n                if len(s) - i - j == n {\n                    result = append(result, s[i:j+1])\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    \n    var words []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        \n        words = append(words, s[i:])\n        break\n    }\n    \n    return words\n}\n",
    "    \n    // create a map to store the words\n    words := make(map[string]bool)\n    \n    // create a list to store the words\n    words_list := make([]string, 0)\n    \n    // create a string to store the word\n    word := \"\"\n    \n    // iterate through the string\n    for i := 0; i < len(s); i++ {\n        \n        // if the current character is a space\n        if s[i] == ' ' {\n            \n            // if the word is not empty\n            if word != \"\" {\n                \n                // add the word to the list\n                words_list = append(words_list, word)\n                \n                // clear the word\n                word = \"\"\n            }\n        } else {\n            \n            // if the current character is a letter\n            if s[i] >= 'a' && s[i] <= 'z' {\n                \n                // add the current character to the word\n                word += string(s[i])\n            } else {\n                \n                // if the word is not empty\n                if word != \"\" {\n                    \n                    // add the word to the list\n                    words_list = append(words_list, word)\n                    \n                    // clear the word\n                    word = \"\"\n                }\n            }\n        }\n    }\n    \n    // if the word is not empty\n    if word != \"\" {\n        \n        // add the word to the list\n        words_list = append(words_list, word)\n    }\n    \n    // iterate through the list\n    for _, word := range words_list {\n        \n        // if the word contains exactly n consonants\n        if len(word) == n {\n            \n            // add the word to the list\n            words[word] = true\n        }\n    }\n    \n    // iterate through the map\n    for word, _ := range words {\n        \n        // add the word to the list\n        words_list = append(words_list, word)\n    }\n    \n    // return the list\n    return words_list\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        words = append(words, s[i:])\n    }\n    return words\n}\n",
    "    // write your code here\n    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            if n == 1 {\n                words = append(words, s[i:i+n])\n            } else {\n                words = append(words, s[i:i+n])\n            }\n        }\n    }\n    return words\n}\n",
    "    // Write your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n    }\n    \n    return result\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[i] == s[j] {\n                if len(s) - i - j == n {\n                    result = append(result, s[i:j+1])\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            break\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        ",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            if s[i:i+n] == \" \" {\n                words = append(words, s[i:i+n])\n            }\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            result = append(result, s[i - n:i])\n        }\n    }\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] != ' ' {\n            words = append(words, s[i:i+1])\n            i++\n            continue\n        }\n        words = append(words, s[i:i+2])\n        i++\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n",
    "    // write your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    var word string\n    var count int\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if count == n {\n                word = word + \" \"\n                count = 0\n            }\n        } else {\n            if count < n {\n                count++\n                word = word + s[i]\n            } else {\n                if len(word) > 0 {\n                    result = append(result, word)\n                }\n                word = \"\"\n                count = 0\n            }\n        }\n    }\n    \n    if len(word) > 0 {\n        result = append(result, word)\n    }\n    \n    return result\n}\n",
    "    // Your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    words := strings.Split(s, \" \")\n    for _, word := range words {\n        if len(word) == 0 {\n            continue\n        }\n        \n        consonants := 0\n        for _, c := range word {\n            if c == ' ' {\n                continue\n            }\n            \n            consonants++\n            if consonants == n {\n                result = append(result, word)\n            }\n        }\n    }\n    \n    return result\n}\n",
    "    // write your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        if s[i+1] == ' ' {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        if s[i+1] != ' ' {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n <= len(s) {\n            if s[i:i+n] == \" \" {\n                continue\n            }\n            \n            words = append(words, s[i:i+n])\n        }\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    var result []string\n    \n    if len(s) == 0 {\n        return result\n    }\n    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            break\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    for i := 0; i < len(words); i++ {\n        for j := 0; j < len(words); j++ {\n            if words[i] == words[j] {\n                result = append(result, words[i])\n                break\n            }\n        }\n    }\n    \n    return result\n}\n",
    "    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            if n == 0 {\n                words = append(words, s[i:i+n])\n            } else {\n                words = append(words, s[i:i+n])\n            }\n        }\n    }\n    return words\n}\n",
    "    // write your code here\n    return nil\n}\n",
    "    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    // Your code here\n    var result []string\n    \n    if len(s) == 0 {\n        return result\n    }\n    \n    words := strings.Split(s, \" \")\n    \n    for _, word := range words {\n        if len(word) == 0 {\n            continue\n        }\n        \n        consonants := 0\n        for _, c := range word {\n            if c == ' ' {\n                continue\n            }\n            \n            consonants += 1\n        }\n        \n        if consonants == n {\n            result = append(result, word)\n        }\n    }\n    \n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:i+1])\n            continue\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n        \n        if i + n > len(s) {\n            break\n        }\n        \n        for j := i + 1; j < i + n; j++ {\n            if s[j] == ' ' {\n                continue\n            }\n            \n            if len(s) - j >= n {\n                words = append(words, s[j:j+n])\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i + n <= len(s) {\n            words = append(words, s[i:i+n])\n        }\n        \n        if i + n < len(s) {\n            i += n - 1\n        }\n    }\n    \n    return words\n}\n",
    "    // write your code here\n    words := make([]string, 0)\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n        \n        if len(s) - i < n {\n            break\n        }\n    }\n    \n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[j] == s[i] {\n                if n == 1 {\n                    result = append(result, s[i:j])\n                    break\n                } else {\n                    n--\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            words = append(words, s[i:i+n])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(result) == n {\n            break\n        }\n        result = append(result, s[i:i+1])\n    }\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                break\n            }\n            continue\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            ",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n        \n        for j := i + 1; j < len(s); j++ {\n            if s[j] == ' ' {\n                continue\n            }\n            \n            if j - n >= 0 {\n                words = append(words, s[j-n:j])\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            words = append(words, s[i:i+n])\n        }\n        i++\n    }\n    return words\n}\n",
    "    // write your code here\n    var result []string\n    if len(s) == 0 {\n        return result\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(result) == n {\n            break\n        }\n        \n        if s[i] == ' ' {\n            continue\n        }\n        \n        result = append(result, s[i:i+1])\n    }\n    \n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue",
    "    \n    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            break\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 1 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 2 {\n            result = append(result, s[i:i+2])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 3 {\n            result = append(result, s[i:i+3])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 4 {\n            result = append(result, s[i:i+4])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 5 {\n            result = append(result, s[i:i+5])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 6 {\n            result = append(result, s[i:i+6])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 7 {\n            result = append(result, s[i:i+7])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        \n        if n == 8 {\n            result = append(result, s[i:i+8])\n",
    "    words := make([]string, 0)\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        if i + n < len(s) {\n            if s[i+n] != ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        count := 0\n        for j := i; j < len(s); j++ {\n            if s[j] == ' ' {\n                break\n            }\n            if s[j] == s[i] {\n                count++\n                if count == n {\n                    result = append(result, s[i:j])\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                result = append(result, s[i:i+n])\n            }\n        }\n    }\n    return result\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            break\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            break\n        }\n        \n        if s[i] == s[i+1] {\n            words = append(words, s[i:i+2])\n            i++\n        } else {\n            words = append(words, s[i:])\n        }\n    }\n    \n    return words\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    // write your code here\n    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n < len(s) {\n            if s[i+n] == ' ' {\n                result = append(result, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        result = append(result, s[i:])\n    }\n    return result\n}\n",
    "    // Your code here\n    return nil\n}\n",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if len(words) == 0 {\n            words = append(words, s[i:i+1])\n            continue\n        }\n        \n        if len(words) < n {\n            words = append(words, s[i:i+1])\n            continue\n        }\n        \n        if len(words) == n {\n            words = append(words, s[i:i+1])\n            continue\n        }\n        \n        if len(words) > n {\n            words = append(words[:len(words)-1], s[i:i+1])\n            continue\n        }\n        \n        if len(words) == n {\n            words = append(words, s[i:i+1])\n            continue\n        }\n    }\n    \n    return words\n}\n",
    "    // write your code here\n    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] == ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1] != ' ' {\n            continue\n        }\n        if i + 1 < len(s) && s[i + 1] != ' ' {\n            continue\n        }\n        if i - 1 >= 0 && s[i - 1]",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] == ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] == ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s) && s[i+1] != ' ' {\n            continue\n        }\n        \n        if i - 1 >= 0 && s[i-1] != ' ' {\n            continue\n        }\n        \n        if i + 1 < len(s",
    "    \n    var words []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i+n <= len(s) {\n            if s[i:i+n] == \" \" {\n                words = append(words, s[i:i+n])\n            }\n        }\n    }\n    \n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            result = append(result, s[",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i+n < len(s) {\n            if s[i+n] == ' ' {\n                words = append(words, s[i:i+n])\n                i += n\n                continue\n            }\n        }\n        \n        words = append(words, s[i:])\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    \n    words := make([]string, 0)\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i:i+1])\n            n--\n            continue\n        }\n",
    "    // Write your code here\n    var res []string\n    if len(s) == 0 {\n        return res\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            res = append(res, s[i:])\n            break\n        }\n        \n        if n > 0 {\n            n--\n        }\n        \n        if s[i] == ' ' {\n            for j := i + 1; j < len(s); j++ {\n                if s[j] == ' ' {\n                    continue\n                }\n                \n                if n == 0 {\n                    res = append(res, s[i:j])\n                    break\n                }\n                \n                if n > 0 {\n                    n--\n                }\n            }\n        }\n    }\n    \n    return res\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i > 0 && s[i-1] == ' ' {\n            continue\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    return words\n}\n",
    "    // Your code here\n    words := []string{}\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if s[i] == ' ' {\n            words = append(words, \"\")\n        } else {\n            words = append(words, string(s[i]))\n        }\n    }\n    return words\n}\n",
    "    \n    // Create a map of all words in the string s\n    words := make(map[string]bool)\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        word := s[i:]\n        words[word] = true\n    }\n    \n    // Create a list of words that contain exactly n consonants\n    var result []string\n    for word, _ := range words {\n        if len(word) == n {\n            result = append(result, word)\n        }\n    }\n    \n    return result\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        if s[i] == ' ' {\n            n--\n            continue\n        }\n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n    }\n    return result\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(result) == n {\n                break\n            }\n            continue\n        }\n        if len(result) == n {\n            break\n        }\n        result = append(result, s[i:i+1])\n    }\n    return result\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            if len(words) == n {\n                return words\n            }\n            words = append(words, \"\")\n        } else {\n            words = append(words, s[i:i+1])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    var words []string\n    words = strings.Split(s, \" \")\n    for _, word := range words {\n        if len(word) == n {\n            result = append(result, word)\n        }\n    }\n    return result\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if i - n >= 0 {\n            words = append(words, s[i-n:i+1])\n        }\n        \n        if i + n < len(s) {\n            words = append(words, s[i:i+n])\n        }\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i - n >= 0 {\n            words = append(words, s[i-n:i])\n        }\n    }\n    return words\n}\n",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n > len(s) {\n            break\n        }\n        result = append(result, s[i:i+n])\n    }\n    return result\n}\n",
    "    // write your code here\n    words := []string{}\n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        words = append(words, s[i:i+1])\n    }\n    \n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if len(words) == n {\n            break\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        if s[i] == ' ' {\n            continue\n        }\n        words = append(words, s[i:i+1])\n    }\n    return words\n}\n",
    "    var words []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if i + n <= len(s) {\n            if s[i:i+n] == \" \" {\n                words = append(words, \" \")\n            } else {\n                words = append(words, s[i:i+n])\n            }\n        }\n    }\n    return words\n}\n",
    "    \n    words := []string{}\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(words) == n {\n            return words\n        }\n        \n        if i == len(s) - 1 {\n            words = append(words, s[i:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            return words\n        }\n        \n        if s[i] == ' ' {\n            words = append(words, s[i+1:])\n            ",
    "    var result []string\n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        if n == 0 {\n            break\n        }\n        n--\n        result = append(result, s[i:i+1])\n    }\n    return result\n}\n",
    "    var result []string\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if n == 0 {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i] == ' ' {\n            result = append(result, s[i:i+1])\n            n--\n            continue\n        }\n        \n        if s[i",
    "    \n    words := []string{}\n    \n    if len(s) == 0 {\n        return words\n    }\n    \n    for i := 0; i < len(s); i++ {\n        if s[i] == ' ' {\n            continue\n        }\n        \n        if len(s) - i >= n {\n            words = append(words, s[i:i+n])\n        }\n        \n        if len(s) - i < n {\n            break\n        }\n    }\n    \n    return words\n}\n"
  ],
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ]
}