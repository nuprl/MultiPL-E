{
  "name": "HumanEval_15_string_sequence",
  "language": "go_test.go",
  "prompt": "package string_sequence_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"\nfunc string_sequence(n int) string {\n",
  "tests": "func TestString_Sequence(t *testing.T) {\n  candidate := string_sequence\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(0), expected: \"0\" },\n     { actual: candidate(3), expected: \"0 1 2 3\" },\n     { actual: candidate(10), expected: \"0 1 2 3 4 5 6 7 8 9 10\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "completions": [
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Given a string, return a new string where the first and last characters have been exchanged.\n// >>> string_reverse(\"Hello\")\n// \"olleH\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\n// Test function string_sequence()",
    "    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        panic(\"n must be >= 0\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprint(n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n\n// Test function string_sequence()",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n - 1) + \" \" + fmt.Sprint(n)\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        panic(\"n should be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    return fmt.Sprintf(\"%d\", n)\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test function string_sequence()",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test function string_sequence()",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    s := \"\"\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    return fmt.Sprintf(\"%d\", n)\n}\n",
    "    return string_sequence_aux(n, 0)\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    return fmt.Sprintf(\"%d\", n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    return fmt.Sprintf(\"%d\", n) + string([]byte{32} + string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    return fmt.Sprintf(\"%d\", n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n\n// Test function string_sequence()",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test function string_sequence()",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    result := \"\"\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    return fmt.Sprintf(\"%d\", n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i <= n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    return string_sequence_aux(n, 0)\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    s := \"\"\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return string_sequence(n-1) + \" \" + fmt.Sprint(n)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    return string_sequence_aux(n, 0)\n}\n",
    "    return fmt.Sprintf(\"%d\", n)\n}\n\n// Given a string, return a string containing the same string with the first character capitalized.\n// >>> capitalize(\"hello\")\n// \"Hello\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    return fmt.Sprintf(\"%d\", 0)\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d\", n) + string_sequence(n - 1)\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_test.string_sequence(0)\n// \"0\"\n// >>> string_sequence_test.string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence_recursive(0)\n// \"0\"\n// >>> string_sequence_recursive(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var s string\n    for i := 0; i <= n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    return string_sequence_aux(n, 0)\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    s := make([]byte, n)\n    for i := 0; i < n; i++ {\n        s[i] = ' '\n    }\n    s = s[0:n]\n    return string(s)\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n - 1))\n}\n\n// Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n// >>> string_sequence(0)\n// \"0\"\n// >>> string_sequence(5)\n// \"0 1 2 3 4 5\"",
    "    if n < 0 {\n        return \"\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n\n// Test string_sequence",
    "    var s string\n    for i := 0; i < n; i++ {\n        s += fmt.Sprintf(\"%d \", i)\n    }\n    return s\n}\n",
    "    var result string\n    for i := 0; i < n; i++ {\n        result += fmt.Sprintf(\"%d \", i)\n    }\n    return result\n}\n",
    "    if n < 0 {\n        panic(\"n must be non-negative\")\n    }\n    if n == 0 {\n        return \"0\"\n    }\n    return fmt.Sprintf(\"%d %s\", n, string_sequence(n-1))\n}\n",
    "    return fmt.Sprintf(\"%d\", n)\n}\n"
  ],
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ]
}