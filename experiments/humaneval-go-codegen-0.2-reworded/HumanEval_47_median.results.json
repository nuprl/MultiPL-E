{
  "name": "HumanEval_47_median",
  "language": "go_test.go",
  "prompt": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n",
  "tests": "func TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\n// Return the median of the two numbers.\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpwn5o1h75_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpwn5o1h75_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpwn5o1h75_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return l[0]\n    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n    return l[len(l) / 2]\n}\n\n// Test median function.\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkvsbicku_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpkvsbicku_test.go:23:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpkvsbicku_test.go:27:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpkvsbicku_test.go:30:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    median := float64(l[len(l) / 2])\n    if len(l) % 2 == 0 {\n        median = (median + float64(l[len(l) / 2 - 1])) / 2\n    }\n    return median\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpw9ng83mw_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpw9ng83mw_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpw9ng83mw_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmphiyq784__test.go:19\ncommand-line-arguments_test.TestMedian(0xc000001380)\n\t/tmp/tmphiyq784__test.go:33 +0x6b\ntesting.tRunner(0xc000001380, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmpyqljf6bo_test.go:19\ncommand-line-arguments_test.TestMedian(0xc000102600)\n\t/tmp/tmpyqljf6bo_test.go:33 +0x6b\ntesting.tRunner(0xc000102600, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return l[len(l)/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp00n4c2hc_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmp00n4c2hc_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmp00n4c2hc_test.go:24:46: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmp00n4c2hc_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    l = remove_duplicates(l)\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2.0\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2.0\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkwolceai_test.go:14:9: undefined: remove_duplicates\n/tmp/tmpkwolceai_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpkwolceai_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpkwolceai_test.go:25:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpkwolceai_test.go:27:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) == 1 {\n        return l[0]\n    }\n\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpns5fcth0_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpns5fcth0_test.go:23:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpns5fcth0_test.go:27:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpns5fcth0_test.go:30:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid - 1]) / 2\n    }\n    return l[mid]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzyp1v2rn_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpzyp1v2rn_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpzyp1v2rn_test.go:25:38: cannot use (l[mid] + l[mid - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpzyp1v2rn_test.go:27:13: cannot use l[mid] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return (l[mid] + l[mid - 1]) / 2\n    }\n    return l[mid]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpzyp1v2rn_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpzyp1v2rn_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpzyp1v2rn_test.go:25:38: cannot use (l[mid] + l[mid - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpzyp1v2rn_test.go:27:13: cannot use l[mid] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmpyqljf6bo_test.go:19\ncommand-line-arguments_test.TestMedian(0xc000102600)\n\t/tmp/tmpyqljf6bo_test.go:33 +0x6b\ntesting.tRunner(0xc000102600, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\n// Test median function.\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp8m5dq75c_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp8m5dq75c_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp8m5dq75c_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    l = remove_duplicates(l)\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\n// Return the median of the two numbers.\n// >>> median(1, 2)\n// 1.5\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpv5kwos_b_test.go:14:9: undefined: remove_duplicates\n/tmp/tmpv5kwos_b_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpv5kwos_b_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpv5kwos_b_test.go:25:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpv5kwos_b_test.go:27:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpql2j9iqh_test.go:50: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpql2j9iqh_test.go:50: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpql2j9iqh_test.go:50: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\n// Return median of elements in the list l.\n// >>> median([])\n// 0\n// >>> median([1])\n// 1\n// >>> median([1, 2, 3])\n// 2\n// >>> median([1, 2, 3, 4, 5])\n// 3\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpdfsazseg_test.go:55: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpdfsazseg_test.go:55: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpdfsazseg_test.go:55: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l) / 2]) + float64(l[len(l) / 2 - 1])) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpbrsai5vb_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpbrsai5vb_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpbrsai5vb_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    \n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp3hikys10_test.go:50: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp3hikys10_test.go:50: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp3hikys10_test.go:50: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmpyqljf6bo_test.go:19\ncommand-line-arguments_test.TestMedian(0xc000102600)\n\t/tmp/tmpyqljf6bo_test.go:33 +0x6b\ntesting.tRunner(0xc000102600, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid-1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmprnnz_2ls_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprnnz_2ls_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmprnnz_2ls_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n/2] + l[n/2-1]) / 2\n    }\n    return l[n/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxfvayola_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpxfvayola_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpxfvayola_test.go:25:36: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpxfvayola_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\n// Test median function.\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp8m5dq75c_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp8m5dq75c_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp8m5dq75c_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\n// Return median of elements in the list l.\n// >>> median([])\n// 0\n// >>> median([1, 2, 3])\n// 2\n// >>> median([1, 2, 3, 4, 5])\n// 3\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmprpuuqeoq_test.go:53: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmprpuuqeoq_test.go:53: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmprpuuqeoq_test.go:53: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if n == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if n == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if n == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if n == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if n == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if n == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if n == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if n == 11 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] +\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374812,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphxzrzvim_test.go:50:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpql2j9iqh_test.go:50: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpql2j9iqh_test.go:50: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpql2j9iqh_test.go:50: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    \n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp3hikys10_test.go:50: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp3hikys10_test.go:50: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp3hikys10_test.go:50: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if n == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if n == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if n == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if n == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if n == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if n == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if n == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if n == 11 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] +\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374812,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphxzrzvim_test.go:50:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmpyqljf6bo_test.go:19\ncommand-line-arguments_test.TestMedian(0xc000102600)\n\t/tmp/tmpyqljf6bo_test.go:33 +0x6b\ntesting.tRunner(0xc000102600, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l = append(l, 0)\n    l\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374812,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5q4z565y_test.go:66:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return l[0]\n    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpk1cbsexo_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpk1cbsexo_test.go:23:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpk1cbsexo_test.go:27:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpk1cbsexo_test.go:30:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n/2] + l[n/2 - 1]) / 2\n    }\n    return float64(l[n/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpxr94ojwt_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    \n    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return (float64(l[len(l) / 2]) + float64(l[len(l) / 2 - 1])) / 2\n    }\n    \n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpxu8l0n9j_test.go:50: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxu8l0n9j_test.go:50: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpxu8l0n9j_test.go:50: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return l[0]\n    }\n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return l[len(l) / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpp_leae5e_test.go:18:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:21:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:24:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpp_leae5e_test.go:26:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2] + l[len(l)/2-1]) / 2)\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp4iih75of_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp4iih75of_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp4iih75of_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n    \n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmpyqljf6bo_test.go:19\ncommand-line-arguments_test.TestMedian(0xc000102600)\n\t/tmp/tmpyqljf6bo_test.go:33 +0x6b\ntesting.tRunner(0xc000102600, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if l[mid] > l[mid - 1] {\n        return float64(l[mid])\n    }\n    return float64(l[mid - 1] + l[mid]) / 2\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpk37u4bag_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpk37u4bag_test.go:47: expected '%!s(float64=8)', got '%!s(float64=1000)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpk37u4bag_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    l = l[:len(l)/2]\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2-1]) + float64(l[len(l)/2])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpinzyucif_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpinzyucif_test.go:47: expected '%!s(float64=8)', got '%!s(float64=4)'\n    --- FAIL: TestMedian/test_num__2 (0.00s)\n        tmpinzyucif_test.go:47: expected '%!s(int=5)', got '%!s(float64=0)'\n    --- FAIL: TestMedian/test_num__3 (0.00s)\n        tmpinzyucif_test.go:47: expected '%!s(float64=5.5)', got '%!s(float64=6)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpinzyucif_test.go:47: expected '%!s(int=7)', got '%!s(float64=1)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if n == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if n == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if n == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if n == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if n == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if n == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if n == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if n == 11 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] +\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374812,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmphxzrzvim_test.go:50:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n\n    l = l[:len(l)/2]\n    l = append(l, l[len(l)/2])\n\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\npanic: runtime error: index out of range [0] with length 0 [recovered]\n\tpanic: runtime error: index out of range [0] with length 0\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.median(...)\n\t/tmp/tmphiyq784__test.go:19\ncommand-line-arguments_test.TestMedian(0xc000001380)\n\t/tmp/tmphiyq784__test.go:33 +0x6b\ntesting.tRunner(0xc000001380, 0x54def8)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return (float64(l[0]) + float64(l[1])) / 2\n    }\n    if len(l) % 2 == 0 {\n        return (float64(l[len(l)/2-1]) + float64(l[len(l)/2])) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpq0ae747c_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpq0ae747c_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpq0ae747c_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2 - 1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpxuw5uisy_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpxuw5uisy_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpxuw5uisy_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) == 3 {\n        return float64(l[0] + l[1] + l[2]) / 3\n    }\n    if len(l) == 4 {\n        return float64(l[0] + l[1] + l[2] + l[3]) / 4\n    }\n    if len(l) == 5 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4]) / 5\n    }\n    if len(l) == 6 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5]) / 6\n    }\n    if len(l) == 7 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6]) / 7\n    }\n    if len(l) == 8 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7]) / 8\n    }\n    if len(l) == 9 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8]) / 9\n    }\n    if len(l) == 10 {\n        return float64(l[0] + l[1] + l[2] + l[3] + l[4] + l[5] + l[6] + l[7] + l[8] + l[9]) / 10\n    }\n    if len(l) == 11 {\n        return float64(l[0] + l[\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374806,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpzmkti6o__test.go:49:6: expected '(', found TestMedian\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    \n    if len(l) == 1 {\n        return l[0]\n    }\n    \n    if len(l) == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    \n    if len(l) % 2 == 0 {\n        return (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    \n    return l[len(l) / 2]\n}\n\n// Test median function.\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkvsbicku_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmpkvsbicku_test.go:23:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpkvsbicku_test.go:27:52: cannot use (l[len(l) / 2] + l[len(l) / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmpkvsbicku_test.go:30:13: cannot use l[len(l) / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n/2] + l[n/2 - 1]) / 2\n    }\n    return l[n/2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3eked_qu_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmp3eked_qu_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmp3eked_qu_test.go:25:38: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmp3eked_qu_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return float64(l[0])\n    }\n    if n == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return float64(l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return float64(l[n / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp6iadvfqa_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    mid := len(l) / 2\n    if len(l) % 2 == 0 {\n        return float64(l[mid] + l[mid - 1]) / 2\n    }\n    return float64(l[mid])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmp54u0s0pk_test.go:47: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    n := len(l)\n    if n == 0 {\n        return 0\n    }\n    if n == 1 {\n        return l[0]\n    }\n    if n == 2 {\n        return (l[0] + l[1]) / 2\n    }\n    if n % 2 == 0 {\n        return (l[n / 2] + l[n / 2 - 1]) / 2\n    }\n    return l[n / 2]\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374810,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmputn_y32m_test.go:19:17: cannot use l[0] (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:22:30: cannot use (l[0] + l[1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:25:42: cannot use (l[n / 2] + l[n / 2 - 1]) / 2 (type int) as type float64 in return argument\n/tmp/tmputn_y32m_test.go:27:13: cannot use l[n / 2] (type int) as type float64 in return argument\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l) / 2] + l[len(l) / 2 - 1]) / 2\n    }\n    return float64(l[len(l) / 2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374809,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmph141d7kc_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package median_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Return median of elements in the list l.\n// >>> median([]int{3, 1, 2, 4, 5})\n// 3\n// >>> median([]int{-10, 4, 6, 1000, 10, 20})\n// 15.0\nfunc median(l []int) float64 {\n    if len(l) == 0 {\n        return 0\n    }\n    if len(l) == 1 {\n        return float64(l[0])\n    }\n    if len(l) == 2 {\n        return float64(l[0] + l[1]) / 2\n    }\n    if len(l) % 2 == 0 {\n        return float64(l[len(l)/2] + l[len(l)/2-1]) / 2\n    }\n    return float64(l[len(l)/2])\n}\n\nfunc TestMedian(t *testing.T) {\n  candidate := median\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: 3 },\n     { actual: candidate([]int{-10, 4, 6, 1000, 10, 20}), expected: 8.0 },\n     { actual: candidate([]int{5}), expected: 5 },\n     { actual: candidate([]int{6, 5}), expected: 5.5 },\n     { actual: candidate([]int{8, 1, 3, 9, 9, 2, 7}), expected: 7 },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374813,
      "stdout": "--- FAIL: TestMedian (0.00s)\n    --- FAIL: TestMedian/test_num__0 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=3)', got '%!s(float64=2)'\n    --- FAIL: TestMedian/test_num__1 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(float64=8)', got '%!s(float64=503)'\n    --- FAIL: TestMedian/test_num__4 (0.00s)\n        tmpur_atvjg_test.go:46: expected '%!s(int=7)', got '%!s(float64=9)'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}