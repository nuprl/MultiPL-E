{
  "name": "HumanEval_93_encode",
  "language": "go_test.go",
  "prompt": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n",
  "tests": "func TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\",\"e\",\"i\",\"o\",\"u\"}\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n        } else if contains(vowels, letter) {\n            result += string(letter[1]) + string(letter[0])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpep_bod30_test.go:24:19: undefined: contains\n/tmp/tmpep_bod30_test.go:25:36: invalid operation: letter[1] (type rune does not support indexing)\n/tmp/tmpep_bod30_test.go:25:56: invalid operation: letter[0] (type rune does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n            continue\n        }\n        if index := findVowel(vowels, letter); index != -1 {\n            result += string(vowels[index+2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphyfip67z_test.go:26:21: undefined: findVowel\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += vowels2[vowels.Index(letter) + 2]\n        } else {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0tgfxvhz_test.go:23:12: undefined: contains\n/tmp/tmp0tgfxvhz_test.go:24:37: vowels.Index undefined (type []string has no field or method Index)\n/tmp/tmp0tgfxvhz_test.go:26:20: invalid operation: result += letter (mismatched types string and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hx6wpdc_test.go:22:12: undefined: contains\n/tmp/tmp4hx6wpdc_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp4hx6wpdc_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[1:])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyq3hfx7q_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmpyq3hfx7q_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmpyq3hfx7q_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if isVowel(letter) {\n            result += vowels2[vowels.Index(letter) + 2]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpacwi15c4_test.go:23:12: undefined: isVowel\n/tmp/tmpacwi15c4_test.go:24:37: vowels.Index undefined (type []string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var result string\n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n            result += string(c + ('A' - 'a'))\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + ('a' - 'A'))\n        } else if c >= '0' && c <= '9' {\n            result += string(c)\n        } else if contains(vowels, c) {\n            result += string(c + 2)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpdxfcvyl4_test.go:28:19: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[1:])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2_ozk_bg_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmp2_ozk_bg_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp2_ozk_bg_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            result += message[i] + message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkkssh6tk_test.go:22:20: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n/tmp/tmpkkssh6tk_test.go:24:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\'' {\n            result += \" \"\n        } else if message[i] == '\\\"' {\n            result += \" \"\n        } else if message[i] == '\\\\' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpxdm5bm1x_test.go:38:36: illegal character U+0027 ''' in escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\'' {\n            result += \" \"\n        } else if message[i] == '\\\"' {\n            result += \" \"\n        } else if message[i] == '\\\\' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpoi9zg5bx_test.go:38:36: illegal character U+0027 ''' in escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, c := range message {\n        if vowels.Contains(string(c)) {\n            result += string(c)\n        } else {\n            result += string(c) + string(c)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7cscilet_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2places = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if letter == \" \" {\n            result += \" \"\n            continue\n        }\n        if contains(vowels, letter) {\n            result += vowels_2places[vowels.Index(letter) + 2]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpyggtd25s_test.go:23:19: cannot use \" \" (type untyped string) as type rune\n/tmp/tmpyggtd25s_test.go:27:12: undefined: contains\n/tmp/tmpyggtd25s_test.go:28:44: vowels.Index undefined (type []string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var vowels_2 = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\x00' {\n            result += \" \"\n        } else if message[i] == '\\x01' {\n            result += \" \"\n        } else if message[i] == '\\x02' {\n            result += \" \"\n        } else if message[i] == '\\x03' {\n            result += \" \"\n        } else if message[i] == '\\x04' {\n            result += \" \"\n        } else if message[i] == '\\x05' {\n            result += \" \"\n        } else if message[i] == '\\x06' {\n            result += \" \"\n        } else if message[i] == '\\x07' {\n            result += \" \"\n        } else if message[i] == '\\x08' {\n            result += \" \"\n        } else if message[i] == '\\x09' {\n            result += \" \"\n        } else if message[i] == '\\x0a' {\n            result += \" \"\n        } else if message[i] == '\\x0b' {\n            result += \" \"\n        } else if message[i] == '\\x0c'\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpw8d4du60_test.go:39:36: illegal character U+0027 ''' in escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var swap = \"TGST\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] in vowels {\n            result += swap[(i+2)%len(vowels)]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp74263uzp_test.go:23:23: expected ';', found in\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] >= 'a' && message[i] <= 'z' {\n            result += string(message[i] + ('z' - 'a'))\n        } else if message[i] >= 'A' && message[i] <= 'Z' {\n            result += string(message[i] + ('Z' - 'A'))\n        } else if message[i] >= '0' && message[i] <= '9' {\n            result += string(message[i])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpx2gxh6uj_test.go:49: expected 'tgst', got 'm^lm'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpx2gxh6uj_test.go:49: expected 'mWDCSKR', got 'f\u008e}z\u008c\u0082\u008b'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpx2gxh6uj_test.go:49: expected 'ygs', got 'r^l'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpx2gxh6uj_test.go:49: expected 'tHKS KS C MGSSCGG', got 'm\u0081\u0082\u008c\u0082\u008cz\u0086~\u008c\u008cz\u0080~'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpx2gxh6uj_test.go:49: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'b]\u0088g\u008dd\u0087h\u0090p\u0081Z\u008d\u008dhp\u008bb\u008d^'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    \n    // Create a new string to hold the encoded message\n    encoded := \"\"\n    \n    // Loop through the message\n    for i := 0; i < len(message); i++ {\n        \n        // Get the current character\n        char := message[i]\n        \n        // If the character is a letter\n        if char >= 'a' && char <= 'z' {\n            \n            // Get the next character\n            nextChar := message[i + 1]\n            \n            // If the next character is a vowel\n            if nextChar == 'a' || nextChar == 'e' || nextChar == 'i' || nextChar == 'o' || nextChar == 'u' {\n                \n                // Get the next next character\n                nextNextChar := message[i + 2]\n                \n                // If the next next character is a vowel\n                if nextNextChar == 'a' || nextNextChar == 'e' || nextNextChar == 'i' || nextNextChar == 'o' || nextNextChar == 'u' {\n                    \n                    // Get the next next next character\n                    nextNextNextChar := message[i + 3]\n                    \n                    // If the next next next character is a vowel\n                    if nextNextNextChar == 'a' || nextNextNextChar == 'e' || nextNextNextChar == 'i' || nextNextNextChar == 'o' || nextNextNextChar == 'u' {\n                        \n                        // Get the next next next next character\n                        nextNextNextNextChar := message[i + 4]\n                        \n                        // If the next next next next character is a vowel\n                        if nextNextNextNextChar == 'a' || nextNextNextNextChar == 'e' || nextNextNextNextChar == 'i' || nextNextNextNextChar == 'o' || nextNextNextNextChar == 'u' {\n                            \n                            // Get the next next next next next character\n                            nextNextNextNextNextChar := message[i + 5]\n                            \n                            // If the next next next next next character is a vowel\n                            if nextNextNextNextNextChar == 'a' || nextNextNextNextNextChar == 'e' || nextNextNextNextNextChar == 'i' || nextNextNextNextNextChar == 'o' || nextNextNextNextNextChar\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptacdnwab_test.go:61:6: expected '(', found TestEncode\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    \n    // Create a new string to hold the encoded message\n    encoded := \"\"\n    \n    // Loop through each character in the message\n    for _, c := range message {\n        \n        // If the character is a letter, swap case\n        if c >= 'a' && c <= 'z' {\n            encoded += string(c + 32)\n        } else {\n            encoded += string(c)\n        }\n    }\n    \n    // Loop through each vowel in the message\n    for i := 0; i < len(message); i++ {\n        \n        // If the vowel is a vowel, replace it with the 2nd letter\n        // after it in the alphabet\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            encoded = encoded[0:i] + string(message[i+2]) + encoded[i+2:]\n        }\n    }\n    \n    return encoded\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\npanic: runtime error: index out of range [7] with length 7 [recovered]\n\tpanic: runtime error: index out of range [7] with length 7\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x536320, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.encode(0x5459aa, 0x7, 0xc00001e1d0, 0x4)\n\t/tmp/tmphcpcq6y4_test.go:40 +0x2bd\ncommand-line-arguments_test.TestEncode(0xc000001380)\n\t/tmp/tmphcpcq6y4_test.go:55 +0x91\ntesting.tRunner(0xc000001380, 0x54f250)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\e' {\n            result += \"\\e\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x0' {\n            result += \"\\x0\"\n        } else if message[i] == '\\x1' {\n            result += \"\\x1\"\n        } else if message[i] == '\\x2' {\n            result += \"\\x2\"\n        } else if message[i] == '\\x3' {\n            result += \"\\x3\"\n        } else if message[i] == '\\x4' {\n            result += \"\\x4\"\n        } else if message[i] == '\\x5' {\n            result += \"\\x5\"\n        } else if\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnqnh6uxv_test.go:34:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n        } else {\n            for _, vowel := range vowels {\n                if vowel == string(letter) {\n                    result += string(letter) + string(letter[2:])\n                    break\n                }\n            }\n            if result == \"\" {\n                result += string(letter)\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpnrsthiz6_test.go:27:61: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    \n    // YOUR CODE HERE\n    \n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpct7ljin5_test.go:42: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpct7ljin5_test.go:42: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpct7ljin5_test.go:42: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpct7ljin5_test.go:42: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpct7ljin5_test.go:42: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            for j := 0; j < len(vowels); j++ {\n                if message[i] == vowels[j] {\n                    result += vowels_2[j]\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_k8y8unx_test.go:27:31: invalid operation: message[i] == vowels[j] (mismatched types byte and string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if vowels.Contains(message[i]) {\n            result += message[i] + message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0mmhibmc_test.go:23:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmp0mmhibmc_test.go:24:20: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n/tmp/tmp0mmhibmc_test.go:26:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            if i < len(message) - 1 {\n                if message[i] == message[i + 1] {\n                    result += message[i]\n                } else {\n                    if message[i] == 'a' {\n                        result += vowels2[vowels.Index(message[i + 1])]\n                    } else {\n                        result += message[i]\n                    }\n                }\n            } else {\n                result += message[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4fmorg57_test.go:28:28: invalid operation: result += message[i] (mismatched types string and byte)\n/tmp/tmp4fmorg57_test.go:31:49: vowels.Index undefined (type []string has no field or method Index)\n/tmp/tmp4fmorg57_test.go:33:32: invalid operation: result += message[i] (mismatched types string and byte)\n/tmp/tmp4fmorg57_test.go:37:24: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var vowels_2 = \"aeiouy\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x0B' {\n            result += \"\\x0B\"\n        } else if message[i] == '\\x0C' {\n            result += \"\\x0C\"\n        } else if message[i] == '\\x0E' {\n            result += \"\\x0E\"\n        } else if message[i] == '\\x0F' {\n            result += \"\\x0F\"\n        } else if message[i] == '\\x10' {\n            result += \"\\x10\"\n        } else if message[i] == '\\x11' {\n            result += \"\\x11\"\n        } else\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdf7wmh39_test.go:35:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplt9n0fh8_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmplt9n0fh8_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmplt9n0fh8_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_index = []int{0, 2, 4, 6, 8}\n    var vowels_count = 0\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n            continue\n        }\n        if message[i] == '.' {\n            result += \".\"\n            continue\n        }\n        if message[i] == ',' {\n            result += \",\"\n            continue\n        }\n        if message[i] == '!' {\n            result += \"!\"\n            continue\n        }\n        if message[i] == '?' {\n            result += \"?\"\n            continue\n        }\n        if message[i] == '\\'' {\n            result += \"'\"\n            continue\n        }\n        if message[i] == '\\\"' {\n            result += \"\\\"\"\n            continue\n        }\n        if message[i] == '\\n' {\n            result += \"\\n\"\n            continue\n        }\n        if message[i] == '\\t' {\n            result += \"\\t\"\n            continue\n        }\n        if message[i] == '\\r' {\n            result += \"\\r\"\n            continue\n        }\n        if message[i] == '\\b' {\n            result += \"\\b\"\n            continue\n        }\n        if message[i] == '\\f' {\n            result += \"\\f\"\n            continue\n        }\n        if message[i] == '\\v' {\n            result += \"\\v\"\n            continue\n        }\n        if message[i] == '\\a' {\n            result += \"\\a\"\n            continue\n        }\n        if message[i] == '\\0' {\n            result += \"\\0\"\n            continue\n        }\n        if message[i] == '\\x00' {\n            result += \"\\x00\"\n            continue\n        }\n        if message[i] == '\\x01' {\n            result += \"\\x01\"\n            continue\n        }\n        if message[i] == '\\\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpd_pekbjc_test.go:48:28: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hx6wpdc_test.go:22:12: undefined: contains\n/tmp/tmp4hx6wpdc_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp4hx6wpdc_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_index = []int{0, 2, 4, 5, 7, 9, 11, 13}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if vowels.Contains(string(message[i])) {\n            result += string(message[i])\n            result += string(message[vowels_index[vowels.Index(string(message[i]))]])\n        } else {\n            result += string(message[i])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmptu140fer_test.go:23:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmptu140fer_test.go:25:57: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Index(letter) != -1 {\n            result += string(vowels[vowels.Index(letter) + 2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj7y50yyw_test.go:22:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmpj7y50yyw_test.go:23:43: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, v := range vowels {\n        for i, c := range message {\n            if c == v {\n                result += vowels_2[(i+2)%len(vowels_2)]\n            } else {\n                result += string(c)\n            }\n        }\n        result += \" \"\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpoxz9ozyk_test.go:24:18: invalid operation: c == v (mismatched types rune and string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n            result += string(c + ('A' - 'a'))\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c + ('a' - 'A'))\n        } else if c >= '0' && c <= '9' {\n            result += string(c)\n        } else if c == ' ' {\n            result += string(c)\n        } else if c == '.' {\n            result += string(c)\n        } else if c == ',' {\n            result += string(c)\n        } else if c == '!' {\n            result += string(c)\n        } else if c == '?' {\n            result += string(c)\n        } else if c == '\\'' {\n            result += string(c)\n        } else if c == '\"' {\n            result += string(c)\n        } else if c == '\\n' {\n            result += string(c)\n        } else if c == '\\t' {\n            result += string(c)\n        } else if c == '\\r' {\n            result += string(c)\n        } else if c == '\\v' {\n            result += string(c)\n        } else if c == '\\f' {\n            result += string(c)\n        } else if c == '\\b' {\n            result += string(c)\n        } else if c == '\\a' {\n            result += string(c)\n        } else if c == '\\e' {\n            result += string(c)\n        } else if c == '\\0' {\n            result += string(c)\n        } else if c == '\\x0' {\n            result += string(c)\n        } else if c == '\\x1' {\n            result += string(c)\n        } else if c == '\\x2' {\n            result += string(c)\n        } else if c == '\\x3' {\n            result += string(c)\n        } else if c == '\\x4' {\n            result += string\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmppioaizkc_test.go:55:26: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var vowels_2 = \"AEIOUY\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\e' {\n            result += \"\\e\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x0B' {\n            result += \"\\x0B\"\n        } else if message[i] == '\\x0C' {\n            result += \"\\x0C\"\n        } else if message[i] == '\\x0D' {\n            result += \"\\x0D\"\n        } else if message[i] == '\\x0E' {\n            result += \"\\x0E\"\n        } else if message[i] == '\\x0F' {\n            result += \"\\x0F\"\n        } else\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5b1nfo6j_test.go:35:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var swap = []rune(\"TGST\")\n    var result string\n    for _, letter := range message {\n        if string(vowels).Contains(string(letter)) {\n            result += swap[string(letter).Index(string(vowels))]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpwfhly_pq_test.go:23:26: string(vowels).Contains undefined (type string has no field or method Contains)\n/tmp/tmpwfhly_pq_test.go:24:42: string(letter).Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var vowels_2 = []rune(\"AEIOUY\")\n    var vowels_3 = []rune(\"AEIOUY\")\n    var vowels_4 = []rune(\"AEIOUY\")\n    var vowels_5 = []rune(\"AEIOUY\")\n    var vowels_6 = []rune(\"AEIOUY\")\n    var vowels_7 = []rune(\"AEIOUY\")\n    var vowels_8 = []rune(\"AEIOUY\")\n    var vowels_9 = []rune(\"AEIOUY\")\n    var vowels_10 = []rune(\"AEIOUY\")\n    var vowels_11 = []rune(\"AEIOUY\")\n    var vowels_12 = []rune(\"AEIOUY\")\n    var vowels_13 = []rune(\"AEIOUY\")\n    var vowels_14 = []rune(\"AEIOUY\")\n    var vowels_15 = []rune(\"AEIOUY\")\n    var vowels_16 = []rune(\"AEIOUY\")\n    var vowels_17 = []rune(\"AEIOUY\")\n    var vowels_18 = []rune(\"AEIOUY\")\n    var vowels_19 = []rune(\"AEIOUY\")\n    var vowels_20 = []rune(\"AEIOUY\")\n    var vowels_21 = []rune(\"AEIOUY\")\n    var vowels_22 = []rune(\"AEIOUY\")\n    var vowels_23 = []rune(\"AEIOUY\")\n    var vowels_24 = []rune(\"AEIOUY\")\n    var vowels_25 = []rune(\"AEIOUY\")\n    var vowels_26 = []rune(\"AEIOUY\")\n    var vowels_27 = []rune(\"AEIOUY\")\n    var vowels_28 = []rune(\"AEIOUY\")\n    var vowels_29 = []rune(\"AEIOUY\")\n    var vowels_30 = []rune(\"AEIOUY\")\n    var vowels_\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_hmzi7ii_test.go:49:9: missing variable type or initialization\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            result += message[i] + message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5d2tckl4_test.go:23:20: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n/tmp/tmp5d2tckl4_test.go:25:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_index = []int{0, 2, 4, 6, 8}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            for _, v := range vowels {\n                if message[i] == v {\n                    result += message[i + vowels_index[vowels.index(v)]]\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp3vkx_uwd_test.go:27:31: invalid operation: message[i] == v (mismatched types byte and string)\n/tmp/tmp3vkx_uwd_test.go:28:62: vowels.index undefined (type []string has no field or method index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpszlzyrm3_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmpszlzyrm3_test.go:23:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += vowels2[vowels.Index(letter) + 2]\n        } else {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0tgfxvhz_test.go:23:12: undefined: contains\n/tmp/tmp0tgfxvhz_test.go:24:37: vowels.Index undefined (type []string has no field or method Index)\n/tmp/tmp0tgfxvhz_test.go:26:20: invalid operation: result += letter (mismatched types string and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\x00' {\n            result += \" \"\n        } else if message[i] == '\\x01' {\n            result += \" \"\n        } else if message[i] == '\\x02' {\n            result += \" \"\n        } else if message[i] == '\\x03' {\n            result += \" \"\n        } else if message[i] == '\\x04' {\n            result += \" \"\n        } else if message[i] == '\\x05' {\n            result += \" \"\n        } else if message[i] == '\\x06' {\n            result += \" \"\n        } else if message[i] == '\\x07' {\n            result += \" \"\n        } else if message[i] == '\\x08' {\n            result += \" \"\n        } else if message[i] == '\\x09' {\n            result += \" \"\n        } else if message[i] == '\\x0a' {\n            result += \" \"\n        } else if message[i] == '\\x0b' {\n            result += \" \"\n        } else if message[i] == '\\x0c' {\n            result += \" \"\n        } else if message\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprc9ejocx_test.go:38:36: illegal character U+0027 ''' in escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[1:])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfenvdzjm_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmpfenvdzjm_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmpfenvdzjm_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            for j := 0; j < len(vowels); j++ {\n                if message[i] == vowels[j] {\n                    result += vowels_2[j]\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp_k8y8unx_test.go:27:31: invalid operation: message[i] == vowels[j] (mismatched types byte and string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            result += message[i] + message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp158b9jg9_test.go:23:20: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n/tmp/tmp158b9jg9_test.go:25:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \" \"\n        } else if message[i] == ',' {\n            result += \" \"\n        } else if message[i] == '!' {\n            result += \" \"\n        } else if message[i] == '?' {\n            result += \" \"\n        } else if message[i] == '\\'' {\n            result += \" \"\n        } else if message[i] == '\\\"' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\x00' {\n            result += \" \"\n        } else if message[i] == '\\x01' {\n            result += \" \"\n        } else if message[i] == '\\x02' {\n            result += \" \"\n        } else if message[i] == '\\x03' {\n            result += \" \"\n        } else if message[i] == '\\x04' {\n            result += \" \"\n        } else if message[i] == '\\x05' {\n            result += \" \"\n        } else if message[i] == '\\x06' {\n            result += \" \"\n        } else if message[i] == '\\x07' {\n            result += \" \"\n        }\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp5n4jz93s_test.go:34:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if vowels.Index(message[i]) != -1 {\n            result += message[i] + message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfi865h9k_test.go:22:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmpfi865h9k_test.go:23:20: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n/tmp/tmpfi865h9k_test.go:25:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter[1]) + string(letter[0])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5q2vfqea_test.go:22:12: undefined: contains\n/tmp/tmp5q2vfqea_test.go:23:36: invalid operation: letter[1] (type rune does not support indexing)\n/tmp/tmp5q2vfqea_test.go:23:56: invalid operation: letter[0] (type rune does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[1:])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfenvdzjm_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmpfenvdzjm_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmpfenvdzjm_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n            continue\n        }\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvnpirh2a_test.go:26:12: undefined: contains\n/tmp/tmpvnpirh2a_test.go:27:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            if message[i] == message[i+2] {\n                result += message[i+2]\n                i += 2\n            } else if message[i] == message[i+1] {\n                result += message[i+1]\n                i += 1\n            } else {\n                result += message[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmposrja984_test.go:26:24: invalid operation: result += message[i + 2] (mismatched types string and byte)\n/tmp/tmposrja984_test.go:29:24: invalid operation: result += message[i + 1] (mismatched types string and byte)\n/tmp/tmposrja984_test.go:32:24: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for _, letter := range message {\n        if letter == 'a' || letter == 'e' || letter == 'i' || letter == 'o' || letter == 'u' {\n            result += string(letter + 2)\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpwckvf7cz_test.go:47: expected 'tgst', got 'TEST'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpwckvf7cz_test.go:47: expected 'mWDCSKR', got 'Mwdcskr'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpwckvf7cz_test.go:47: expected 'ygs', got 'YES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpwckvf7cz_test.go:47: expected 'tHKS KS C MGSSCGG', got 'Thks ks c mgsscgg'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpwckvf7cz_test.go:47: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'I DqNt KnOw WhAt tO WrItE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[1:])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpfenvdzjm_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmpfenvdzjm_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmpfenvdzjm_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \" \"\n        } else if message[i] == ',' {\n            result += \" \"\n        } else if message[i] == '!' {\n            result += \" \"\n        } else if message[i] == '?' {\n            result += \" \"\n        } else if message[i] == '\\'' {\n            result += \" \"\n        } else if message[i] == '\\\"' {\n            result += \" \"\n        } else if message[i] == '-' {\n            result += \" \"\n        } else if message[i] == '_' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\x00' {\n            result += \" \"\n        } else if message[i] == '\\x01' {\n            result += \" \"\n        } else if message[i] == '\\x02' {\n            result += \" \"\n        } else if message[i] == '\\x03' {\n            result += \" \"\n        } else if message[i] == '\\x04' {\n            result += \" \"\n        } else if message[i] == '\\x05' {\n            result += \" \"\n        } else if message[i\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnplj9l6g_test.go:34:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_count = 0\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if vowels.Contains(message[i]) {\n            vowels_count++\n            result += message[i]\n            if vowels_count == 2 {\n                result += message[i+2]\n                vowels_count = 0\n            }\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpo5nwwyrg_test.go:23:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmpo5nwwyrg_test.go:25:20: invalid operation: result += message[i] (mismatched types string and byte)\n/tmp/tmpo5nwwyrg_test.go:27:24: invalid operation: result += message[i + 2] (mismatched types string and byte)\n/tmp/tmpo5nwwyrg_test.go:31:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += vowels_2[vowels.Index(letter) + 2]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpcd981nt2_test.go:23:12: undefined: contains\n/tmp/tmpcd981nt2_test.go:24:38: vowels.Index undefined (type []string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmp1riaq9ch_test.go:41: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmp1riaq9ch_test.go:41: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmp1riaq9ch_test.go:41: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmp1riaq9ch_test.go:41: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmp1riaq9ch_test.go:41: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var vowels_2 = \"AEIOUY\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] in vowels {\n            result += message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprytl2bm4_test.go:23:23: expected ';', found in\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var vowels_2 = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] in vowels {\n            result += message[i + 2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpbuhebw0r_test.go:23:23: expected ';', found in\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Index(letter) != -1 {\n            result += string(vowels[vowels.Index(letter) + 2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzup1yt8_test.go:22:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmpjzup1yt8_test.go:23:43: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var vowels_2 = []rune(\"AEIOU\")\n    \n    for i := 0; i < len(message); i++ {\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            vowels_2 = append(vowels_2, vowels[len(vowels) - 2])\n        } else {\n            vowels_2 = append(vowels_2, message[i])\n        }\n    }\n    \n    for i := 0; i < len(message); i++ {\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            message[i] = vowels_2[len(vowels_2) - 1]\n        } else {\n            message[i] = vowels_2[i]\n        }\n    }\n    \n    return string(message)\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5url3uwe_test.go:26:30: cannot use message[i] (type byte) as type rune in append\n/tmp/tmp5url3uwe_test.go:32:24: cannot assign to message[i] (strings are immutable)\n/tmp/tmp5url3uwe_test.go:34:24: cannot assign to message[i] (strings are immutable)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x00' {\n            result += \"\\x00\"\n        } else if message[i] == '\\x01' {\n            result += \"\\x01\"\n        } else if message[i] == '\\x02' {\n            result += \"\\x02\"\n        } else if message[i] == '\\x03' {\n            result += \"\\x03\"\n        } else if message[i] == '\\x04' {\n            result += \"\\x04\"\n        } else if message[i] == '\\x05' {\n            result += \"\\x05\"\n        } else if message[i] == '\\x06' {\n            result += \"\\x06\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7tghuekg_test.go:34:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x00' {\n            result += \"\\x00\"\n        } else if message[i] == '\\x01' {\n            result += \"\\x01\"\n        } else if message[i] == '\\x02' {\n            result += \"\\x02\"\n        } else if message[i] == '\\x03' {\n            result += \"\\x03\"\n        } else if message[i] == '\\x04' {\n            result += \"\\x04\"\n        } else if message[i] == '\\x05' {\n            result += \"\\x05\"\n        } else if message[i] == '\\x06' {\n            result += \"\\x06\"\n        \nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpufn3znlz_test.go:34:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var vowels_2 = []rune(\"AEIOU\")\n    var vowels_3 = []rune(\"AEIOU\")\n    var vowels_4 = []rune(\"AEIOU\")\n    var vowels_5 = []rune(\"AEIOU\")\n    var vowels_6 = []rune(\"AEIOU\")\n    var vowels_7 = []rune(\"AEIOU\")\n    var vowels_8 = []rune(\"AEIOU\")\n    var vowels_9 = []rune(\"AEIOU\")\n    var vowels_10 = []rune(\"AEIOU\")\n    var vowels_11 = []rune(\"AEIOU\")\n    var vowels_12 = []rune(\"AEIOU\")\n    var vowels_13 = []rune(\"AEIOU\")\n    var vowels_14 = []rune(\"AEIOU\")\n    var vowels_15 = []rune(\"AEIOU\")\n    var vowels_16 = []rune(\"AEIOU\")\n    var vowels_17 = []rune(\"AEIOU\")\n    var vowels_18 = []rune(\"AEIOU\")\n    var vowels_19 = []rune(\"AEIOU\")\n    var vowels_20 = []rune(\"AEIOU\")\n    var vowels_21 = []rune(\"AEIOU\")\n    var vowels_22 = []rune(\"AEIOU\")\n    var vowels_23 = []rune(\"AEIOU\")\n    var vowels_24 = []rune(\"AEIOU\")\n    var vowels_25 = []rune(\"AEIOU\")\n    var vowels_26 = []rune(\"AEIOU\")\n    var vowels_27 = []rune(\"AEIOU\")\n    var vowels_28 = []rune(\"AEIOU\")\n    var vowels_29 = []rune(\"AEIOU\")\n    var vowels_30 = []rune(\"AEIOU\")\n    var vowels_31 = []rune(\"AEIOU\")\n    var vowels_32 = []rune(\"AEIOU\")\n    var\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374879,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9gtyfqwt_test.go:52:1: expected 'IDENT', found 'func'\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var vowels_2places = \"aeiouy\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(vowels_2places[vowels.Index(string(letter))])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprmqjxlq6_test.go:23:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmprmqjxlq6_test.go:24:51: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter[1]) + string(letter[0])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5q2vfqea_test.go:22:12: undefined: contains\n/tmp/tmp5q2vfqea_test.go:23:36: invalid operation: letter[1] (type rune does not support indexing)\n/tmp/tmp5q2vfqea_test.go:23:56: invalid operation: letter[0] (type rune does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n        } else if letter == '\\n' {\n            result += \" \"\n        } else if letter == '\\t' {\n            result += \" \"\n        } else if letter == '\\r' {\n            result += \" \"\n        } else if letter == '\\v' {\n            result += \" \"\n        } else if letter == '\\f' {\n            result += \" \"\n        } else if letter == '\\b' {\n            result += \" \"\n        } else if letter == '\\a' {\n            result += \" \"\n        } else if letter == '\\'' {\n            result += \" \"\n        } else if letter == '\\\"' {\n            result += \" \"\n        } else if letter == '!' {\n            result += \" \"\n        } else if letter == '?' {\n            result += \" \"\n        } else if letter == '.' {\n            result += \" \"\n        } else if letter == ',' {\n            result += \" \"\n        } else if letter == ':' {\n            result += \" \"\n        } else if letter == ';' {\n            result += \" \"\n        } else if letter == '-' {\n            result += \" \"\n        } else if letter == '_' {\n            result += \" \"\n        } else if letter == '=' {\n            result += \" \"\n        } else if letter == '+' {\n            result += \" \"\n        } else if letter == '*' {\n            result += \" \"\n        } else if letter == '/' {\n            result += \" \"\n        } else if letter == '\\\\' {\n            result += \" \"\n        } else if letter == '&' {\n            result += \" \"\n        } else if letter == '|' {\n            result += \" \"\n        } else if letter == '^' {\n            result += \" \"\n        } else if letter == '%' {\n            result += \" \"\n        } else if letter == '$' {\n            result += \" \"\n        } else if letter == '@' {\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmppj0a8ndz_test.go:40:31: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hx6wpdc_test.go:22:12: undefined: contains\n/tmp/tmp4hx6wpdc_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp4hx6wpdc_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n            continue\n        }\n        if string(vowels).Contains(string(letter)) {\n            result += string(letter) + string(letter)[2:]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpec9wsxhw_test.go:26:26: string(vowels).Contains undefined (type string has no field or method Contains)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Index(letter) != -1 {\n            result += string(vowels[vowels.Index(letter) + 2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpj7y50yyw_test.go:22:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmpj7y50yyw_test.go:23:43: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] in vowels {\n            result += message[i + 2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpufmdrqi9_test.go:22:23: expected ';', found in\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Index(letter) != -1 {\n            result += string(vowels[vowels.Index(letter) + 2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjzup1yt8_test.go:22:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmpjzup1yt8_test.go:23:43: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == 'a' || message[i] == 'e' || message[i] == 'i' || message[i] == 'o' || message[i] == 'u' {\n            result += message[i + 2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0ifo12ml_test.go:22:20: invalid operation: result += message[i + 2] (mismatched types string and byte)\n/tmp/tmp0ifo12ml_test.go:24:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    var vowels = []rune(\"aeiou\")\n    var vowels2 = []rune(\"AEIOU\")\n    var result = \"\"\n    for _, v := range vowels {\n        result += string(v)\n    }\n    for _, v := range vowels2 {\n        result += string(v)\n    }\n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n            result += string(c)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmps_xjv5g2_test.go:58: expected 'tgst', got 'aeiouAEIOUTEST'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmps_xjv5g2_test.go:58: expected 'mWDCSKR', got 'aeiouAEIOUMudasir'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmps_xjv5g2_test.go:58: expected 'ygs', got 'aeiouAEIOUYES'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmps_xjv5g2_test.go:58: expected 'tHKS KS C MGSSCGG', got 'aeiouAEIOUThis is a message'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmps_xjv5g2_test.go:58: expected 'k dQnT kNqW wHcT Tq wRkTg', got 'aeiouAEIOUI DoNt KnOw WhAt tO WrItE'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var vowels_2 = []rune(\"AEIOUY\")\n    var result = \"\"\n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n            result += string(c + 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c)\n        } else if contains(vowels, c) {\n            result += string(c + 2)\n        } else if contains(vowels_2, c) {\n            result += string(c - 2)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpvfikddow_test.go:27:19: undefined: contains\n/tmp/tmpvfikddow_test.go:29:19: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n            continue\n        }\n        if letter == '.' {\n            result += \".\"\n            continue\n        }\n        if letter == ',' {\n            result += \",\"\n            continue\n        }\n        if letter == '!' {\n            result += \"!\"\n            continue\n        }\n        if letter == '?' {\n            result += \"?\"\n            continue\n        }\n        if letter == '\"' {\n            result += \"\\\"\"\n            continue\n        }\n        if letter == '\\'' {\n            result += \"'\"\n            continue\n        }\n        if letter == '\\n' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\t' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\r' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\b' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\f' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\v' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\a' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\0' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x00' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x01' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x02' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x03' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x04' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x05' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\x06' {\n            result += \" \"\n            continue\n        }\n        if letter == '\\\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmprrlu_2bu_test.go:78:25: illegal character U+0027 ''' in escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Index(letter) != -1 {\n            result += string(vowels[vowels.Index(letter) + 2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp9wqhc03t_test.go:22:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmp9wqhc03t_test.go:23:43: vowels.Index undefined (type string has no field or method Index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2places = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += vowels_2places[vowels.index(letter)]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp6l48vlnp_test.go:23:12: undefined: contains\n/tmp/tmp6l48vlnp_test.go:24:44: vowels.index undefined (type []string has no field or method index)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] >= 'a' && message[i] <= 'z' {\n            result += string(message[i] + 32)\n        } else if message[i] >= 'A' && message[i] <= 'Z' {\n            result += string(message[i] - 32)\n        } else if message[i] >= '0' && message[i] <= '9' {\n            result += message[i]\n        } else if message[i] == ' ' {\n            result += message[i]\n        } else if message[i] == '.' {\n            result += message[i]\n        } else if message[i] == ',' {\n            result += message[i]\n        } else if message[i] == '!' {\n            result += message[i]\n        } else if message[i] == '?' {\n            result += message[i]\n        } else if message[i] == '\\'' {\n            result += message[i]\n        } else if message[i] == '\\\"' {\n            result += message[i]\n        } else if message[i] == '\\n' {\n            result += message[i]\n        } else if message[i] == '\\t' {\n            result += message[i]\n        } else if message[i] == '\\r' {\n            result += message[i]\n        } else if message[i] == '\\v' {\n            result += message[i]\n        } else if message[i] == '\\f' {\n            result += message[i]\n        } else if message[i] == '\\b' {\n            result += message[i]\n        } else if message[i] == '\\a' {\n            result += message[i]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpjjmbahd2_test.go:39:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[1:])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp2_ozk_bg_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmp2_ozk_bg_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp2_ozk_bg_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplt9n0fh8_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmplt9n0fh8_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmplt9n0fh8_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\",\"e\",\"i\",\"o\",\"u\"}\n    var result string\n    for i := 0; i < len(message); i++ {\n        if stringInSlice(message[i:i+2], vowels) {\n            result += message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpjxe2clth_test.go:22:12: undefined: stringInSlice\n/tmp/tmpjxe2clth_test.go:23:20: invalid operation: result += message[i + 2] (mismatched types string and byte)\n/tmp/tmpjxe2clth_test.go:25:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"aeiou\"\n    var vowels_2 = \"aeiouy\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            if message[i] == message[i+2] {\n                result += message[i+2]\n            } else {\n                if message[i] == message[i+1] {\n                    result += message[i+1]\n                } else {\n                    if message[i] == message[i+1] && message[i+1] == message[i+2] {\n                        result += message[i+1]\n                    } else {\n                        if message[i] == message[i+1] && message[i+1] == message[i+2] && message[i+2] == message[i+3] {\n                            result += message[i+1]\n                        } else {\n                            if message[i] == message[i+1] && message[i+1] == message[i+2] && message[i+2] == message[i+3] && message[i+3] == message[i+4] {\n                                result += message[i+1]\n                            } else {\n                                if message[i] == message[i+1] && message[i+1] == message[i+2] && message[i+2] == message[i+3] && message[i+3] == message[i+4] && message[i+4] == message[i+5] {\n                                    result += message[i+1]\n                                } else {\n                                    if message[i] == message[i+1] && message[i+1] == message[i+2] && message[i+2] == message[i+3] && message[i+3] == message[i+4] && message[i+4] == message[i+5] && message[i+5] == message[i+6] {\n                                        result += message[i+1]\n                                    } else {\n                                        if message[i] == message[i+1]\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcgeympk__test.go:48:6: expected '(', found TestEncode\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] >= 'a' && message[i] <= 'z' {\n            result += string(message[i] + 32)\n        } else if message[i] >= 'A' && message[i] <= 'Z' {\n            result += string(message[i] - 32)\n        } else if message[i] >= '0' && message[i] <= '9' {\n            result += message[i]\n        } else if message[i] == ' ' {\n            result += message[i]\n        } else if message[i] == '.' {\n            result += message[i]\n        } else if message[i] == ',' {\n            result += message[i]\n        } else if message[i] == '!' {\n            result += message[i]\n        } else if message[i] == '?' {\n            result += message[i]\n        } else if message[i] == '\\'' {\n            result += message[i]\n        } else if message[i] == '\\\"' {\n            result += message[i]\n        } else if message[i] == '\\n' {\n            result += message[i]\n        } else if message[i] == '\\t' {\n            result += message[i]\n        } else if message[i] == '\\r' {\n            result += message[i]\n        } else if message[i] == '\\v' {\n            result += message[i]\n        } else if message[i] == '\\f' {\n            result += message[i]\n        } else if message[i] == '\\b' {\n            result += message[i]\n        } else if message[i] == '\\a' {\n            result += message[i]\n        } else if message[i] == '\\0' {\n            result += message[i]\n        } else if message[i] == '\\x00' {\n            result += message[i]\n        }\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpmx67ejhd_test.go:42:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n            result += string(c + (c - 'a' + 'A'))\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c - 'A' + 'a')\n        } else if contains(vowels, string(c)) {\n            result += string(c + (c - 'a' + 'A'))\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpd7j2xeoo_test.go:26:19: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, letter := range message {\n        if vowels.Contains(string(letter)) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmplt9n0fh8_test.go:22:18: vowels.Contains undefined (type string has no field or method Contains)\n/tmp/tmplt9n0fh8_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmplt9n0fh8_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    var vowels = \"aeiouAEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if vowels.Index(message[i]) != -1 {\n            result += message[i] + message[i+2]\n        } else {\n            result += message[i]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprbpivo7n_test.go:23:18: vowels.Index undefined (type string has no field or method Index)\n/tmp/tmprbpivo7n_test.go:24:20: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n/tmp/tmprbpivo7n_test.go:26:20: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var vowels_2 = \"AEIOUY\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x00' {\n            result += \"\\x00\"\n        } else if message[i] == '\\x01' {\n            result += \"\\x01\"\n        } else if message[i] == '\\x02' {\n            result += \"\\x02\"\n        } else if message[i] == '\\x03' {\n            result += \"\\x03\"\n        } else if message[i] == '\\x04' {\n            result += \"\\x04\"\n        } else if message[i] == '\\x05' {\n            result += \"\\x05\"\n        } else if message[i] == '\\\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374880,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp9xzdag96_test.go:35:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, v := range vowels {\n        for i, c := range message {\n            if c == v {\n                result += vowels_2[(i+2)%5]\n            } else {\n                result += string(c)\n            }\n        }\n        result += \" \"\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpxug3t_ya_test.go:24:18: invalid operation: c == v (mismatched types rune and string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result string\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter[2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpb0uwfz7i_test.go:22:12: undefined: contains\n/tmp/tmpb0uwfz7i_test.go:23:36: invalid operation: letter[2] (type rune does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_2places = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if letter == \" \" {\n            result += \" \"\n            continue\n        }\n        if index := find_index(vowels, letter); index != -1 {\n            result += vowels_2places[index]\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpkfajbfpw_test.go:23:19: cannot use \" \" (type untyped string) as type rune\n/tmp/tmpkfajbfpw_test.go:27:21: undefined: find_index\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter[1]) + string(letter[0])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5q2vfqea_test.go:22:12: undefined: contains\n/tmp/tmp5q2vfqea_test.go:23:36: invalid operation: letter[1] (type rune does not support indexing)\n/tmp/tmp5q2vfqea_test.go:23:56: invalid operation: letter[0] (type rune does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var result string\n    for _, letter := range message {\n        if letter == ' ' {\n            result += \" \"\n            continue\n        }\n        for i, v := range vowels {\n            if v == letter {\n                result += string(v)\n                result += string(v)\n                break\n            }\n        }\n        if result == \"\" {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp38kno9z8_test.go:26:13: i declared but not used\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] >= 'a' && message[i] <= 'z' {\n            result += string(message[i] + 32)\n        } else if message[i] >= 'A' && message[i] <= 'Z' {\n            result += string(message[i] - 32)\n        } else if message[i] >= '0' && message[i] <= '9' {\n            result += string(message[i])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpzcs19zs3_test.go:49: expected 'tgst', got '4%34'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpzcs19zs3_test.go:49: expected 'mWDCSKR', got '-\u0095\u0084\u0081\u0093\u0089\u0092'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzcs19zs3_test.go:49: expected 'ygs', got '9%3'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpzcs19zs3_test.go:49: expected 'tHKS KS C MGSSCGG', got '4\u0088\u0089\u0093\u0089\u0093\u0081\u008d\u0085\u0093\u0093\u0081\u0087\u0085'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzcs19zs3_test.go:49: expected 'k dQnT kNqW wHcT Tq wRkTg', got ')$\u008f.\u0094+\u008e/\u00977\u0088!\u0094\u0094/7\u0092)\u0094%'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x00' {\n            result += \"\\x00\"\n        } else if message[i] == '\\x01' {\n            result += \"\\x01\"\n        } else if message[i] == '\\x02' {\n            result += \"\\x02\"\n        } else if message[i] == '\\x03' {\n            result += \"\\x03\"\n        } else if message[i] == '\\x04' {\n            result += \"\\x04\"\n        } else if message[i] == '\\x05' {\n            result += \"\\x05\"\n        } else if message[i] == '\\x06' {\n            result += \"\\x06\"\n        }\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp65muot9u_test.go:34:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] >= 'a' && message[i] <= 'z' {\n            result += string(message[i] + 32)\n        } else if message[i] >= 'A' && message[i] <= 'Z' {\n            result += string(message[i] - 32)\n        } else if message[i] == 'e' || message[i] == 'E' {\n            if i + 2 < len(message) && message[i + 2] == 'y' {\n                result += string(message[i] + 32)\n            } else {\n                result += string(message[i])\n            }\n        } else {\n            result += string(message[i])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpzkb38s6f_test.go:55: expected 'tgst', got '4%34'\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpzkb38s6f_test.go:55: expected 'mWDCSKR', got '-\u0095\u0084\u0081\u0093\u0089\u0092'\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpzkb38s6f_test.go:55: expected 'ygs', got '9%3'\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpzkb38s6f_test.go:55: expected 'tHKS KS C MGSSCGG', got '4\u0088\u0089\u0093 \u0089\u0093 \u0081 \u008d\u0085\u0093\u0093\u0081\u0087\u0085'\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpzkb38s6f_test.go:55: expected 'k dQnT kNqW wHcT Tq wRkTg', got ') $\u008f.\u0094 +\u008e/\u0097 7\u0088!\u0094 \u0094/ 7\u0092)\u0094%'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for _, c := range message {\n        if c == ' ' {\n            result += \" \"\n        } else if c == '.' {\n            result += \".\"\n        } else if c == ',' {\n            result += \",\"\n        } else if c == '!' {\n            result += \"!\"\n        } else if c == '?' {\n            result += \"?\"\n        } else if c == '\\'' {\n            result += \"'\"\n        } else if c == '\\\"' {\n            result += \"\\\"\"\n        } else if c == '\\n' {\n            result += \" \"\n        } else if c == '\\t' {\n            result += \" \"\n        } else if c == '\\r' {\n            result += \" \"\n        } else if c == '\\v' {\n            result += \" \"\n        } else if c == '\\f' {\n            result += \" \"\n        } else if c == '\\b' {\n            result += \" \"\n        } else if c == '\\a' {\n            result += \" \"\n        } else if c == '\\0' {\n            result += \" \"\n        } else if c == '\\x00' {\n            result += \" \"\n        } else if c == '\\x01' {\n            result += \" \"\n        } else if c == '\\x02' {\n            result += \" \"\n        } else if c == '\\x03' {\n            result += \" \"\n        } else if c == '\\x04' {\n            result += \" \"\n        } else if c == '\\x05' {\n            result += \" \"\n        } else if c == '\\x06' {\n            result += \" \"\n        } else if c == '\\x07' {\n            result += \" \"\n        } else if c == '\\x08' {\n            result += \" \"\n        } else if c == '\\x09' {\n            result += \" \"\n        } else if c == '\\x0a' {\n            result += \" \"\n        } else if c == '\\x0b' {\n            result += \"\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpg3vba5vz_test.go:34:26: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels2 = []string{\"A\", \"E\", \"I\", \"O\", \"U\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += vowels2[vowels.Index(letter) + 2]\n        } else {\n            result += letter\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp0tgfxvhz_test.go:23:12: undefined: contains\n/tmp/tmp0tgfxvhz_test.go:24:37: vowels.Index undefined (type []string has no field or method Index)\n/tmp/tmp0tgfxvhz_test.go:26:20: invalid operation: result += letter (mismatched types string and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var vowels_index = []int{2, 3, 4, 5, 6}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            for j := 0; j < len(vowels); j++ {\n                if message[i] == vowels[j] {\n                    result += message[i+vowels_index[j]]\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphxm86x5s_test.go:27:31: invalid operation: message[i] == vowels[j] (mismatched types byte and string)\n/tmp/tmphxm86x5s_test.go:28:28: invalid operation: result += message[i + vowels_index[j]] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hx6wpdc_test.go:22:12: undefined: contains\n/tmp/tmp4hx6wpdc_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp4hx6wpdc_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var vowels_2places = \"AEIOUY\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '.' {\n            result += \".\"\n        } else if message[i] == ',' {\n            result += \",\"\n        } else if message[i] == '!' {\n            result += \"!\"\n        } else if message[i] == '?' {\n            result += \"?\"\n        } else if message[i] == '\\'' {\n            result += \"'\"\n        } else if message[i] == '\\\"' {\n            result += \"\\\"\"\n        } else if message[i] == '\\n' {\n            result += \"\\n\"\n        } else if message[i] == '\\t' {\n            result += \"\\t\"\n        } else if message[i] == '\\r' {\n            result += \"\\r\"\n        } else if message[i] == '\\b' {\n            result += \"\\b\"\n        } else if message[i] == '\\f' {\n            result += \"\\f\"\n        } else if message[i] == '\\v' {\n            result += \"\\v\"\n        } else if message[i] == '\\a' {\n            result += \"\\a\"\n        } else if message[i] == '\\0' {\n            result += \"\\0\"\n        } else if message[i] == '\\x00' {\n            result += \"\\x00\"\n        } else if message[i] == '\\x01' {\n            result += \"\\x01\"\n        } else if message[i] == '\\x02' {\n            result += \"\\x02\"\n        } else if message[i] == '\\x03' {\n            result += \"\\x03\"\n        } else if message[i] == '\\x04' {\n            result += \"\\x04\"\n        } else if message[i] == '\\x05' {\n            result += \"\\x05\"\n        } else if message[i] == '\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp6omtm8ne_test.go:35:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            if message[i] == message[i+2] && message[i] != message[i+1] {\n                result += message[i+1]\n            } else if message[i] == message[i+1] && message[i] != message[i+2] {\n                result += message[i+2]\n            } else {\n                result += message[i]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp1h5ihqr6_test.go:26:24: invalid operation: result += message[i + 1] (mismatched types string and byte)\n/tmp/tmp1h5ihqr6_test.go:28:24: invalid operation: result += message[i + 2] (mismatched types string and byte)\n/tmp/tmp1h5ihqr6_test.go:30:24: invalid operation: result += message[i] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, c := range message {\n        if c >= 'a' && c <= 'z' {\n            result += string(c + 32)\n        } else if c >= 'A' && c <= 'Z' {\n            result += string(c)\n        } else if contains(vowels, string(c)) {\n            result += string(c + 2)\n        } else {\n            result += string(c)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpi61312it_test.go:26:19: undefined: contains\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var vowels_2 = []rune(\"AEIOUY\")\n    var vowels_3 = []rune(\"AEIOUYX\")\n    var vowels_4 = []rune(\"AEIOUYXW\")\n    var vowels_5 = []rune(\"AEIOUYXWV\")\n    var vowels_6 = []rune(\"AEIOUYXWVZ\")\n    var vowels_7 = []rune(\"AEIOUYXWVZB\")\n    var vowels_8 = []rune(\"AEIOUYXWVZBC\")\n    var vowels_9 = []rune(\"AEIOUYXWVZBCD\")\n    var vowels_10 = []rune(\"AEIOUYXWVZBCDE\")\n    var vowels_11 = []rune(\"AEIOUYXWVZBCDEF\")\n    var vowels_12 = []rune(\"AEIOUYXWVZBCDEF\")\n    var vowels_13 = []rune(\"AEIOUYXWVZBCDEFG\")\n    var vowels_14 = []rune(\"AEIOUYXWVZBCDEFGH\")\n    var vowels_15 = []rune(\"AEIOUYXWVZBCDEFGHI\")\n    var vowels_16 = []rune(\"AEIOUYXWVZBCDEFGHIJ\")\n    var vowels_17 = []rune(\"AEIOUYXWVZBCDEFGHIJK\")\n    var vowels_18 = []rune(\"AEIOUYXWVZBCDEFGHIJKL\")\n    var vowels_19 = []rune(\"AEIOUYXWVZBCDEFGHIJKLM\")\n    var vowels_20 = []rune(\"AEIOUYXWVZBCDEFGHIJKLMN\")\n    var vowels_21 = []rune(\"AEIOUYXWVZBCDEFGHIJKLMNO\")\n    var vowels_22 = []rune(\"AEIOUYXWVZBCDEFGHIJ\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpo1etit9p_test.go:40:28: string literal not terminated\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    \n    // Your code here\n    \n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpmz0_wm0k_test.go:42: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\",\"e\",\"i\",\"o\",\"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter[2])\n        } else {\n            result += string(letter)\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpldjih1gl_test.go:22:12: undefined: contains\n/tmp/tmpldjih1gl_test.go:23:36: invalid operation: letter[2] (type rune does not support indexing)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hx6wpdc_test.go:22:12: undefined: contains\n/tmp/tmp4hx6wpdc_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp4hx6wpdc_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else if message[i] == '\\n' {\n            result += \" \"\n        } else if message[i] == '\\t' {\n            result += \" \"\n        } else if message[i] == '\\r' {\n            result += \" \"\n        } else if message[i] == '\\v' {\n            result += \" \"\n        } else if message[i] == '\\f' {\n            result += \" \"\n        } else if message[i] == '\\b' {\n            result += \" \"\n        } else if message[i] == '\\a' {\n            result += \" \"\n        } else if message[i] == '\\'' {\n            result += \" \"\n        } else if message[i] == '\\\"' {\n            result += \" \"\n        } else if message[i] == '\\\\' {\n            result += \" \"\n        } else if message[i] == '\\0' {\n            result += \" \"\n        } else if message[i] == '\\x0' {\n            result += \" \"\n        } else if message[i] == '\\x1' {\n            result += \" \"\n        } else if message[i] == '\\x2' {\n            result += \" \"\n        } else if message[i] == '\\x3' {\n            result += \" \"\n        } else if message[i] == '\\x4' {\n            result += \" \"\n        } else if message[i] == '\\x5' {\n            result += \" \"\n        } else if message[i] == '\\x6' {\n            result += \" \"\n        } else if message[i] == '\\x7' {\n            result += \" \"\n        } else if message[i] == '\\x8' {\n            result += \" \"\n        } else if message[i] == '\\x9' {\n            result += \" \"\n        } else if message[i] == '\\xA'\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpcr6rf92g_test.go:40:35: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    \n    // Create a new string to hold the encoded message\n    encoded := \"\"\n    \n    // Loop through each character in the message\n    for _, c := range message {\n        \n        // If the character is a letter, \n        // then add the character to the encoded string\n        if c >= 'a' && c <= 'z' {\n            encoded += string(c)\n        } else if c >= 'A' && c <= 'Z' {\n            encoded += string(c)\n        } else if c >= '0' && c <= '9' {\n            encoded += string(c)\n        } else if c == ' ' {\n            encoded += string(c)\n        } else if c == '.' {\n            encoded += string(c)\n        } else if c == ',' {\n            encoded += string(c)\n        } else if c == '!' {\n            encoded += string(c)\n        } else if c == '?' {\n            encoded += string(c)\n        } else if c == '\\'' {\n            encoded += string(c)\n        } else if c == '\"' {\n            encoded += string(c)\n        } else if c == '\\n' {\n            encoded += string(c)\n        } else if c == '\\t' {\n            encoded += string(c)\n        } else if c == '\\r' {\n            encoded += string(c)\n        } else if c == '\\v' {\n            encoded += string(c)\n        } else if c == '\\f' {\n            encoded += string(c)\n        } else if c == '\\b' {\n            encoded += string(c)\n        } else if c == '\\a' {\n            encoded += string(c)\n        } else if c == '\\e' {\n            encoded += string(c)\n        } else if c == '\\0' {\n            encoded += string(c)\n        } else if c == '\\x00' {\n            encoded += string(c)\n        } else if c == '\\x01' {\n            encoded += string(c)\n        } else\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374881,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpq7_a4s2q_test.go:62:26: unknown escape sequence\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\",\"e\",\"i\",\"o\",\"u\"}\n    var result string\n    for i := 0; i < len(message); i++ {\n        if i < len(message) - 1 {\n            if message[i] == message[i+1] {\n                result += message[i]\n            } else {\n                result += message[i] + message[i+1]\n            }\n        } else {\n            result += message[i]\n        }\n    }\n    for i := 0; i < len(vowels); i++ {\n        if i < len(vowels) - 1 {\n            if result[i] == vowels[i] {\n                result = result[0:i] + string(vowels[i+2]) + result[i+2:]\n            } else {\n                result = result[0:i] + string(vowels[i]) + result[i+1:]\n            }\n        } else {\n            result = result[0:i] + string(vowels[i]) + result[i+1:]\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp8z43yip__test.go:24:24: invalid operation: result += message[i] (mismatched types string and byte)\n/tmp/tmp8z43yip__test.go:26:24: invalid operation: result += message[i] + message[i + 1] (mismatched types string and byte)\n/tmp/tmp8z43yip__test.go:29:20: invalid operation: result += message[i] (mismatched types string and byte)\n/tmp/tmp8z43yip__test.go:34:26: invalid operation: result[i] == vowels[i] (mismatched types byte and string)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []rune(\"AEIOU\")\n    var result string\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += message[i]\n        } else {\n            for j := 0; j < len(vowels); j++ {\n                if message[i] == vowels[j] {\n                    result += string(message[i] + message[i+2])\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp7uit0c91_test.go:23:20: invalid operation: result += message[i] (mismatched types string and byte)\n/tmp/tmp7uit0c91_test.go:26:31: invalid operation: message[i] == vowels[j] (mismatched types byte and rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // Your code here\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpdpu0zcrj_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = []string{\"a\", \"e\", \"i\", \"o\", \"u\"}\n    var result = \"\"\n    for _, letter := range message {\n        if contains(vowels, letter) {\n            result += string(letter) + string(letter[2:])\n        } else {\n            result += string(letter) + string(letter[0:2])\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp4hx6wpdc_test.go:22:12: undefined: contains\n/tmp/tmp4hx6wpdc_test.go:23:53: cannot slice letter (type rune)\n/tmp/tmp4hx6wpdc_test.go:25:53: cannot slice letter (type rune)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    var vowels = \"AEIOU\"\n    var vowels_index = []int{0, 2, 4, 5, 7, 9, 11, 13}\n    var result = \"\"\n    for i := 0; i < len(message); i++ {\n        if message[i] == ' ' {\n            result += \" \"\n        } else {\n            for _, index := range vowels_index {\n                if message[i] == vowels[index] {\n                    result += message[i] + message[i+2]\n                    break\n                }\n            }\n        }\n    }\n    return result\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374882,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpz6hs6v5p_test.go:28:28: invalid operation: result += message[i] + message[i + 2] (mismatched types string and byte)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package encode_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Write a function that takes a message, and encodes in such a \n// way that it swaps case of all letters, replaces all vowels in \n// the message with the letter that appears 2 places ahead of that \n// vowel in the english alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n// \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunc encode(message string) string {\n    // YOUR CODE HERE\n    return \"\"\n}\n\nfunc TestEncode(t *testing.T) {\n  candidate := encode\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate(\"TEST\"), expected: \"tgst\" },\n     { actual: candidate(\"Mudasir\"), expected: \"mWDCSKR\" },\n     { actual: candidate(\"YES\"), expected: \"ygs\" },\n     { actual: candidate(\"This is a message\"), expected: \"tHKS KS C MGSSCGG\" },\n     { actual: candidate(\"I DoNt KnOw WhAt tO WrItE\"), expected: \"k dQnT kNqW wHcT Tq wRkTg\" },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestEncode (0.00s)\n    --- FAIL: TestEncode/test_num__0 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tgst', got ''\n    --- FAIL: TestEncode/test_num__1 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'mWDCSKR', got ''\n    --- FAIL: TestEncode/test_num__2 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'ygs', got ''\n    --- FAIL: TestEncode/test_num__3 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'tHKS KS C MGSSCGG', got ''\n    --- FAIL: TestEncode/test_num__4 (0.00s)\n        tmpz3r8er0n_test.go:40: expected 'k dQnT kNqW wHcT Tq wRkTg', got ''\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}