{
  "name": "HumanEval_62_derivative",
  "language": "go_test.go",
  "prompt": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n",
  "tests": "func TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i + 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp_9co6eh0_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000102480)\n\t/tmp/tmp_9co6eh0_test.go:40 +0x2a9\ntesting.tRunner(0xc000102480, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i - 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpj_1f3mwl_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpj_1f3mwl_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpj_1f3mwl_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpj_1f3mwl_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpj_1f3mwl_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2}\n    }\n    return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpzekepya__test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    d := []int{}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpvijoa_80_test.go:46: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8], 120 * xs[9]}\n    }\n    if len(xs) == 11 {\n        return\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp__vrsso6_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if n == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if n == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpb15c0ohw_test.go:51:94: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = d[i - 1] + xs[i + 1]\n    }\n    d[n - 1] = d[n - 2]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpotvrtudf_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=7) %!s(int=12) %!s(int=12)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpotvrtudf_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpotvrtudf_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=3) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpotvrtudf_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=3) %!s(int=3) %!s(int=7) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpotvrtudf_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i - 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpvv7e7fgd_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvv7e7fgd_test.go:50: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvv7e7fgd_test.go:50: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvv7e7fgd_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpvv7e7fgd_test.go:50: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Base case\n    if len(xs) == 1 {\n        return []int{}\n    }\n    // Recursive case\n    return []int{xs[0], xs[1] + xs[0], xs[2] + 2 * xs[1] + xs[0], xs[3] + 3 * xs[2] + 3 * xs[1] + xs[0], xs[4] + 4 * xs[3] + 6 * xs[2] + 4 * xs[1] + xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5350c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5350c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpq7zkkj56_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000001380)\n\t/tmp/tmpq7zkkj56_test.go:32 +0x16f\ntesting.tRunner(0xc000001380, 0x54df60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Initialize result\n    result := make([]int, len(xs))\n    // Initialize result[0]\n    result[0] = 1\n    // Initialize result[1]\n    result[1] = xs[0]\n    // Initialize result[2]\n    result[2] = 2 * xs[0]\n    // Initialize result[3]\n    result[3] = 3 * xs[1]\n    // Initialize result[4]\n    result[4] = 4 * xs[2]\n    // Initialize result[5]\n    result[5] = 5 * xs[3]\n    // Initialize result[6]\n    result[6] = 6 * xs[4]\n    // Initialize result[7]\n    result[7] = 7 * xs[5]\n    // Initialize result[8]\n    result[8] = 8 * xs[6]\n    // Initialize result[9]\n    result[9] = 9 * xs[7]\n    // Initialize result[10]\n    result[10] = 10 * xs[8]\n    // Initialize result[11]\n    result[11] = 11 * xs[9]\n    // Initialize result[12]\n    result[12] = 12 * xs[10]\n    // Initialize result[13]\n    result[13] = 13 * xs[11]\n    // Initialize result[14]\n    result[14] = 14 * xs[12]\n    // Initialize result[15]\n    result[15] = 15 * xs[13]\n    // Initialize result[16]\n    result[16] = 16 * xs[14]\n    // Initialize result[17]\n    result[17] = 17 * xs[15]\n    // Initialize result[18]\n    result[18] = 18 * xs[16]\n    // Initialize result[19]\n    result[19] = 19 * xs[17]\n    // Initialize result[20]\n    result[20] = 20 * xs[18]\n    // Initialize result[21]\n    result[21] = 21 * x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsuawpn6__test.go:62:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 3 * xs[3] * xs[1] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpru6j6ij6_test.go:38:104: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := []int{xs[0], xs[1]}\n    for i := 2; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{0}\n    }\n    d := make([]int, n-1)\n    for i := 1; i < n; i++ {\n        d[i-1] = xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpxp_ftrcv_test.go:47: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpmsbogk2i_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=9)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpmsbogk2i_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpmsbogk2i_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpmsbogk2i_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpmsbogk2i_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    d[1] = 2 * xs[0]\n    for i := 2; i < n; i++ {\n        d[i] = d[i - 1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp8z5gnoew_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6) %!s(int=8) %!s(int=12) %!s(int=17)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp8z5gnoew_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp8z5gnoew_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp8z5gnoew_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp8z5gnoew_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    d[0] = xs[1]\n    for i := 1; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i-1]\n    }\n    d[n-1] = xs[n-1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp8rudjxh3_test.go:28\ncommand-line-arguments_test.TestDerivative(0xc000102600)\n\t/tmp/tmp8rudjxh3_test.go:39 +0xbe\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, n-1)\n    for i := 1; i < n; i++ {\n        d[i-1] = xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpf0sghw7s_test.go:50: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7mh2mrw3_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if n == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if n == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * (n - 1)}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpk60o320x_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpk60o320x_test.go:55: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpk60o320x_test.go:55: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpk60o320x_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpk60o320x_test.go:55: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = 1\n    for i := 1; i < len(d); i++ {\n        d[i] = d[i-1] * xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6], 5040 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6], 5040 * xs[7], 40320 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6], 5040 * xs[7], 40320 * xs[8], 362880 * xs[9]}\n    }\n    if len(xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3v3il006_test.go:49:14: missing ',' before newline in argument list\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    d := make([]int, len(xs)-1)\n    for i := 0; i < len(xs)-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1zftesa5_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1zftesa5_test.go:46: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1zftesa5_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1zftesa5_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1zftesa5_test.go:46: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // xs[0] * x + xs[1] * x^2 + xs[2] * x^3 + ....\n    // xs[0] * x^2 + xs[1] * x^3 + xs[2] * x^4 + ....\n    // xs[0] * x^3 + xs[1] * x^4 + xs[2] * x^5 + ....\n    // xs[0] * x^4 + xs[1] * x^5 + xs[2] * x^6 + ....\n    // xs[0] * x^5 + xs[1] * x^6 + xs[2] * x^7 + ....\n    // xs[0] * x^6 + xs[1] * x^7 + xs[2] * x^8 + ....\n    // xs[0] * x^7 + xs[1] * x^8 + xs[2] * x^9 + ....\n    // xs[0] * x^8 + xs[1] * x^9 + xs[2] * x^10 + ....\n    // xs[0] * x^9 + xs[1] * x^10 + xs[2] * x^11 + ....\n    // xs[0] * x^10 + xs[1] * x^11 + xs[2] * x^12 + ....\n    // xs[0] * x^11 + xs[1] * x^12 + xs[2] * x^13 + ....\n    // xs[0] * x^12 + xs[1] * x^13 + xs[2] * x^14 + ....\n    // xs[0] * x^13 + xs[1] * x^14 + xs[2] * x^15 + ....\n    // xs[0] * x^14 + xs[1] * x^15 + xs[2] * x^16 + ....\n    // xs[0] * x^\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpi2puq9xz_test.go:32:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{}\n    for i := len(xs) - 2; i >= 0; i-- {\n        d = append(d, xs[i] + xs[i + 1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpkullmwvq_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=9) %!s(int=6) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpkullmwvq_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpkullmwvq_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpkullmwvq_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=1) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpkullmwvq_test.go:49: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = 1\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=8) %!s(int=40)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // We can use a simple formula to compute the derivative.\n    // The derivative of a polynomial is the polynomial with the same\n    // coefficients but with the first coefficient set to zero.\n    // The derivative of x^n is n * x^(n-1)\n    // The derivative of x^n * y^m is n * x^(n-1) * y^(m-1)\n    // The derivative of x^n * y^m * z^p is n * x^(n-1) * y^(m-1) * z^(p-1)\n    // The derivative of x^n * y^m * z^p * w^q is n * x^(n-1) * y^(m-1) * z^(p-1) * w^(q-1)\n    // The derivative of x^n * y^m * z^p * w^q * v^r is n * x^(n-1) * y^(m-1) * z^(p-1) * w^(q-1) * v^(r-1)\n    // The derivative of x^n * y^m * z^p * w^q * v^r * u^s is n * x^(n-1) * y^(m-1) * z^(p-1) * w^(q-1) * v^(r-1) * u^(s-1)\n    // The derivative of x^n * y^m * z^p * w^q * v^r * u^s * t^v is n * x^(n-1) * y^(m-1) * z^(p-1) * w^(q-1) * v^(r-1) * u^(s-1) * t^(v-1)\n    // The derivative of x^n * y^m * z^p * w^q * v^r * u^s * t^v * y^w is n * x^(n-1) * y^(m-1) * z^(p-1) * w^(q-1) * v^(r-1) * u^(\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpiqw9qxpi_test.go:27:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9] * 2}\n    }\n    if len(xs) == 11 {\n        return []int{xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3of7qno_test.go:50:24: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    return []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpzg0n2jor_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzg0n2jor_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzg0n2jor_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzg0n2jor_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpzg0n2jor_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp_9co6eh0_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000102480)\n\t/tmp/tmp_9co6eh0_test.go:40 +0x2a9\ntesting.tRunner(0xc000102480, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if n == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if n == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if n == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if n == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if n == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if n == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if n == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if n == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9], x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa9y32tmj_test.go:51:93: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    d[n-1] = xs[n]\n    for i := n - 2; i >= 0; i-- {\n        d[i] = xs[i] + d[i+1] * xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000186300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001ba000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpw2jz8llf_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000186300)\n\t/tmp/tmpw2jz8llf_test.go:39 +0x2a5\ntesting.tRunner(0xc000186300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7mh2mrw3_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{}\n    for i := len(xs) - 1; i >= 0; i-- {\n        d = append(d, xs[i] + i * xs[i + 1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5363e0, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363e0, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmplsclvzh__test.go:27\ncommand-line-arguments_test.TestDerivative(0xc000102600)\n\t/tmp/tmplsclvzh__test.go:39 +0xa3f\ntesting.tRunner(0xc000102600, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 3 * xs[3] * xs[1] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpru6j6ij6_test.go:38:104: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], 2 * xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], 2 * xs[1], 6 * xs[0]}\n    }\n    return []int{xs[1], 2 * xs[0], 6 * xs[1], 12 * xs[2], 20 * xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp65l691kn_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6) %!s(int=6) %!s(int=24) %!s(int=60)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp65l691kn_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp65l691kn_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=18)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp65l691kn_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6) %!s(int=12) %!s(int=12) %!s(int=60)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp65l691kn_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Base case\n    if len(xs) == 1 {\n        return []int{}\n    }\n    // Recursive case\n    return []int{xs[0], xs[1] + xs[0], xs[2] + 2 * xs[1] + xs[0], xs[3] + 3 * xs[2] + 3 * xs[1] + xs[0], xs[4] + 4 * xs[3] + 6 * xs[2] + 4 * xs[1] + xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [3] with length 3 [recovered]\n\tpanic: runtime error: index out of range [3] with length 3\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5350c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5350c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpq7zkkj56_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000001380)\n\t/tmp/tmpq7zkkj56_test.go:32 +0x16f\ntesting.tRunner(0xc000001380, 0x54df60)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[1]\n    d[1] = 2 * xs[0]\n    for i := 2; i < len(xs); i++ {\n        d[i] = d[i - 1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpicm8fmyz_test.go:51: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6) %!s(int=8) %!s(int=12) %!s(int=17)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpicm8fmyz_test.go:51: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpicm8fmyz_test.go:51: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=6) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpicm8fmyz_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6) %!s(int=7) %!s(int=7) %!s(int=11)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpicm8fmyz_test.go:51: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if n == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if n == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if n == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if n == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if n == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if n == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if n == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if n == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9], x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa9y32tmj_test.go:51:93: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 30 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 30 * xs[7], 36 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 30 * xs[7], 36 * xs[8], 40 * xs[9]}\n    }\n    if len(xs) == 11 {\n        return\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpihibv726_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9] * 2}\n    }\n    if len(xs) == 11 {\n        return []int{xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3of7qno_test.go:50:24: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    d[1] = xs[1] * 2\n    for i := 2; i < len(xs); i++ {\n        d[i] = xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpj62n4m7a_test.go:51: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=4) %!s(int=12) %!s(int=20)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpj62n4m7a_test.go:51: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpj62n4m7a_test.go:51: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpj62n4m7a_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpj62n4m7a_test.go:51: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Base case\n    if len(xs) == 1 {\n        return []int{}\n    }\n\n    // Recursive case\n    d := []int{}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "ok  \tcommand-line-arguments\t0.004s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6], 5040 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6], 5040 * xs[7], 40320 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 24 * xs[4], 120 * xs[5], 720 * xs[6], 5040 * xs[7], 40320 * xs[8], 362880 * xs[9]}\n    }\n    if len(xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp3v3il006_test.go:49:14: missing ',' before newline in argument list\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    return []int{xs[1], xs[2], xs[0], xs[1], xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[1], 2 * xs[0]}\n    }\n    if n == 3 {\n        return []int{xs[1], 2 * xs[0], 2 * xs[1]}\n    }\n    if n == 4 {\n        return []int{xs[2], 2 * xs[1], 2 * xs[0], 2 * xs[2]}\n    }\n    if n == 5 {\n        return []int{xs[2], 2 * xs[1], 2 * xs[0], 2 * xs[2], 2 * xs[3]}\n    }\n    if n == 6 {\n        return []int{xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0], 2 * xs[3], 2 * xs[4]}\n    }\n    if n == 7 {\n        return []int{xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0], 2 * xs[3], 2 * xs[4], 2 * xs[5]}\n    }\n    if n == 8 {\n        return []int{xs[4], 2 * xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0], 2 * xs[4], 2 * xs[5], 2 * xs[6]}\n    }\n    if n == 9 {\n        return []int{xs[4], 2 * xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0], 2 * xs[4], 2 * xs[5], 2 * xs[6], 2 * xs[7]}\n    }\n    if n == 10 {\n        return []int{xs[5], 2 * xs[4], 2 * xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0], 2 * xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpx68tka3b_test.go:48:90: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    return []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp_9co6eh0_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000102480)\n\t/tmp/tmp_9co6eh0_test.go:40 +0x2a9\ntesting.tRunner(0xc000102480, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], 2 * xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], 2 * xs[1], 2 * xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], 2 * xs[3], 2 * xs[2], 2 * xs[1], 2 * xs[0]}\n    }\n    return []int{xs[len(xs) - 1], 2 * xs[len(xs) - 2], 2 * xs[len(xs) - 3], 2 * xs[len(xs) - 4], 2 * xs[len(xs) - 5]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp8cowrsdu_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=8) %!s(int=4) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp8cowrsdu_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp8cowrsdu_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp8cowrsdu_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=2) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp8cowrsdu_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i-1]\n    }\n    d[n-1] = xs[n-1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpaj8mi2jp_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpaj8mi2jp_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpaj8mi2jp_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpaj8mi2jp_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpaj8mi2jp_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i - 1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp8ati8gew_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=10) %!s(int=44) %!s(int=225)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp8ati8gew_test.go:50: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp8ati8gew_test.go:50: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp8ati8gew_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=8) %!s(int=9) %!s(int=0) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp8ati8gew_test.go:50: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    d := []int{xs[0]}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, d[i-1] + xs[i])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i] + xs[i + 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpk0zlytdi_test.go:52: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=3) %!s(int=6) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpk0zlytdi_test.go:52: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=5) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpk0zlytdi_test.go:52: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpk0zlytdi_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpk0zlytdi_test.go:52: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Initialize result\n    result := make([]int, len(xs))\n    // Initialize result[0]\n    result[0] = 1\n    // Initialize result[1]\n    result[1] = 0\n    // Initialize result[2]\n    result[2] = 0\n    // Initialize result[3]\n    result[3] = 0\n    // Initialize result[4]\n    result[4] = 0\n    // Initialize result[5]\n    result[5] = 0\n    // Initialize result[6]\n    result[6] = 0\n    // Initialize result[7]\n    result[7] = 0\n    // Initialize result[8]\n    result[8] = 0\n    // Initialize result[9]\n    result[9] = 0\n    // Initialize result[10]\n    result[10] = 0\n    // Initialize result[11]\n    result[11] = 0\n    // Initialize result[12]\n    result[12] = 0\n    // Initialize result[13]\n    result[13] = 0\n    // Initialize result[14]\n    result[14] = 0\n    // Initialize result[15]\n    result[15] = 0\n    // Initialize result[16]\n    result[16] = 0\n    // Initialize result[17]\n    result[17] = 0\n    // Initialize result[18]\n    result[18] = 0\n    // Initialize result[19]\n    result[19] = 0\n    // Initialize result[20]\n    result[20] = 0\n    // Initialize result[21]\n    result[21] = 0\n    // Initialize result[22]\n    result[22] = 0\n    // Initialize result[23]\n    result[23] = 0\n    // Initialize result[24]\n    result[24] = 0\n    // Initialize result[25]\n    result[25] = 0\n    // Initialize result[26]\n    result[26] = 0\n    // Initialize result[27]\n    result[27] = 0\n    // Initialize result[28]\n    result[28] = 0\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptrnye6nm_test.go:77:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    return []int{xs[1], 2 * xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8], 120 * xs[9]}\n    }\n    if len(xs) == 11 {\n        return\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp__vrsso6_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i - 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := []int{xs[0], xs[1]}\n    for i := 2; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[2]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[2], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[2] + 3 * xs[2] * xs[3]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[2], xs[5] + 4 * xs[4]\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp_od4xzer_test.go:38:146: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if n == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if n == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if n == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if n == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if n == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if n == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if n == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if n == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9], x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa9y32tmj_test.go:51:93: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // ds[i] represents the derivative of xs[i]\n    ds := make([]int, len(xs))\n    for i := 1; i < len(xs); i++ {\n        ds[i] = ds[i - 1] + xs[i]\n    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1n_wptpb_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=0) %!s(int=1) %!s(int=3) %!s(int=7) %!s(int=12)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1n_wptpb_test.go:41: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1n_wptpb_test.go:41: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1n_wptpb_test.go:41: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1n_wptpb_test.go:41: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // ds is the derivative of xs.\n    ds := make([]int, len(xs))\n    for i := 0; i < len(xs); i++ {\n        ds[i] = xs[i+1]\n        if i > 0 {\n            ds[i] -= xs[i-1]\n        }\n    }\n    return ds\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [5] with length 5 [recovered]\n\tpanic: runtime error: index out of range [5] with length 5\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5363e0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363e0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmpopvxvo_b_test.go:19\ncommand-line-arguments_test.TestDerivative(0xc000001380)\n\t/tmp/tmpopvxvo_b_test.go:34 +0x86c\ntesting.tRunner(0xc000001380, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9] * 2}\n    }\n    if len(xs) == 11 {\n        return []int{xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3of7qno_test.go:50:24: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // xs[0] * xs[1] + xs[1] * xs[2] + xs[2] * xs[3] + ....\n    // xs[0] * xs[1] * xs[2] + xs[1] * xs[2] * xs[3] + xs[2] * xs[3] * xs[4] + ....\n    // xs[0] * xs[1] * xs[2] * xs[3] * xs[4] + xs[1] * xs[2] * xs[3] * xs[4] * xs[5] + ....\n    // xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] + xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] + ....\n    // xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] + xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7] + ....\n    // xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7] + xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7] * xs[8] + ....\n    // xs[0] * xs[1] * xs[2] * xs[3] * xs[4] * xs[5] * xs[6] * xs[7] * xs[8] + xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpp1pxtd06_test.go:24:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if n == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3] * 2}\n    }\n    if n == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4] * 2}\n    }\n    if n == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * 2}\n    }\n    if n == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6] * 2}\n    }\n    if n == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7] * 2}\n    }\n    if n == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8] * 2}\n    }\n    if n == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9] * 2}\n    }\n    if n == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5],\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp60gqgi0g_test.go:52:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i-1]\n    }\n    d[n-1] = xs[n-1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc0001c4030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc0001a0300)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc0001c4030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp6pffritz_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc0001a0300)\n\t/tmp/tmp6pffritz_test.go:40 +0x2a9\ntesting.tRunner(0xc0001a0300, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] + xs[1] * 3}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmps9ryjklq_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=11)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmps9ryjklq_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmps9ryjklq_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmps9ryjklq_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=8)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmps9ryjklq_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2, xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2, xs[6] * 2, xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2, xs[6] * 2, xs[7] * 2, xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsg3q1kvt_test.go:47:31: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = 1\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] * xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7mh2mrw3_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 3 * xs[3] * xs[1] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpru6j6ij6_test.go:38:104: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if n == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if n == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if n == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpb15c0ohw_test.go:51:94: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i - 1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmprloljm9v_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n-1; i++ {\n        d[i] = d[i-1] + xs[i+1]\n    }\n    d[n-1] = d[n-2]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmptu4q4kog_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000102600)\n\t/tmp/tmptu4q4kog_test.go:40 +0x2a5\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = 1\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=8) %!s(int=40)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1w9ix2s3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    return []int{xs[1], xs[2], xs[0], xs[1], xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=3) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpvx2t2n1m_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{xs[1]}\n    for i := 2; i < len(xs); i++ {\n        d = append(d, xs[i] + i * xs[i - 1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpb8g8adcz_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=4) %!s(int=10) %!s(int=21)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpb8g8adcz_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpb8g8adcz_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpb8g8adcz_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpb8g8adcz_test.go:49: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = 1\n    for i := 1; i < len(d); i++ {\n        d[i] = d[i-1] * xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpq_81zhs5_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{xs[1]}\n    for i := 2; i < len(xs); i++ {\n        d = append(d, d[i-1] + xs[i])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5363e0, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5363e0, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp5o_opzq4_test.go:27\ncommand-line-arguments_test.TestDerivative(0xc000182600)\n\t/tmp/tmp5o_opzq4_test.go:39 +0x9ed\ntesting.tRunner(0xc000182600, 0x54f2a0)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.007s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := []int{xs[0]}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] + d[i - 1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpekeboxt1_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpekeboxt1_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpekeboxt1_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpekeboxt1_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpekeboxt1_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    return []int{xs[1], xs[2], xs[0] * 2}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpubws5590_test.go:45: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[1]\n    for i := 1; i < len(xs) - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[len(xs) - 1] = xs[len(xs) - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7mh2mrw3_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := []int{}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    d := []int{xs[0]}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, d[i-1] + xs[i])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1cf93dcr_test.go:46: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[1]\n    for i := 1; i < len(xs) - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[len(xs) - 1] = xs[len(xs) - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmputae0ews_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmputae0ews_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmputae0ews_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmputae0ews_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmputae0ews_test.go:48: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i - 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpjw9au1q5_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    return []int{xs[len(xs)-1], xs[len(xs)-2], xs[len(xs)-3], xs[len(xs)-4], xs[len(xs)-5]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpfc3v24oo_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpfc3v24oo_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpfc3v24oo_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpfc3v24oo_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpfc3v24oo_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] + i * xs[i-1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpkzqvnq2x_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=4) %!s(int=4) %!s(int=10) %!s(int=21)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpkzqvnq2x_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpkzqvnq2x_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpkzqvnq2x_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpkzqvnq2x_test.go:49: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i - 1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp9olx60ey_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp9olx60ey_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp9olx60ey_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp9olx60ey_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp9olx60ey_test.go:45: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if n == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i] + xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp6zsjkyro_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp6zsjkyro_test.go:55: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp6zsjkyro_test.go:55: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp6zsjkyro_test.go:55: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp6zsjkyro_test.go:55: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{0}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpqfc3pr2f_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpqfc3pr2f_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpqfc3pr2f_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpqfc3pr2f_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpqfc3pr2f_test.go:49: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if n == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if n == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if n == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if n == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if n == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if n == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if n == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if n == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if n == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9], x\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpa9y32tmj_test.go:51:93: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Initialize result\n    result := make([]int, len(xs))\n    // Initialize result[0]\n    result[0] = 1\n    // Initialize result[1]\n    result[1] = 0\n    // Initialize result[2]\n    result[2] = 0\n    // Initialize result[3]\n    result[3] = 0\n    // Initialize result[4]\n    result[4] = 0\n    // Initialize result[5]\n    result[5] = 0\n    // Initialize result[6]\n    result[6] = 0\n    // Initialize result[7]\n    result[7] = 0\n    // Initialize result[8]\n    result[8] = 0\n    // Initialize result[9]\n    result[9] = 0\n    // Initialize result[10]\n    result[10] = 0\n    // Initialize result[11]\n    result[11] = 0\n    // Initialize result[12]\n    result[12] = 0\n    // Initialize result[13]\n    result[13] = 0\n    // Initialize result[14]\n    result[14] = 0\n    // Initialize result[15]\n    result[15] = 0\n    // Initialize result[16]\n    result[16] = 0\n    // Initialize result[17]\n    result[17] = 0\n    // Initialize result[18]\n    result[18] = 0\n    // Initialize result[19]\n    result[19] = 0\n    // Initialize result[20]\n    result[20] = 0\n    // Initialize result[21]\n    result[21] = 0\n    // Initialize result[22]\n    result[22] = 0\n    // Initialize result[23]\n    result[23] = 0\n    // Initialize result[24]\n    result[24] = 0\n    // Initialize result[25]\n    result[25] = 0\n    // Initialize result[26]\n    result[26] = 0\n    // Initialize result[27]\n    result[27] = 0\n    // Initialize result[28]\n    result[28] = 0\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmptrnye6nm_test.go:77:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i + 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3sbmj38m_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    d[1] = xs[1]\n    for i := 2; i < len(xs); i++ {\n        d[i] = d[i - 1] + xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3tpakkcv_test.go:51: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=5) %!s(int=17) %!s(int=37)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3tpakkcv_test.go:51: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=8)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3tpakkcv_test.go:51: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3tpakkcv_test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=4) %!s(int=4) %!s(int=20)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp3tpakkcv_test.go:51: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 20 * xs[4]}\n    }\n    return []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpxc0i9a4h_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=4) %!s(int=24) %!s(int=100)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpxc0i9a4h_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=80)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpxc0i9a4h_test.go:54: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    d[n - 1] = xs[n]\n    for i := n - 2; i >= 0; i-- {\n        d[i] = xs[i] + d[i + 1] * xs[i + 1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [-1] [recovered]\n\tpanic: runtime error: index out of range [-1]\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp1p93wbe7_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000001380)\n\t/tmp/tmp1p93wbe7_test.go:39 +0x2a5\ntesting.tRunner(0xc000001380, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Base case\n    if len(xs) == 1 {\n        return []int{}\n    }\n\n    // Recursive case\n    return append([]int{xs[len(xs) - 1]}, derivative(xs[:len(xs) - 1])...)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp2g_r5vtg_test.go:42: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp2g_r5vtg_test.go:42: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp2g_r5vtg_test.go:42: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp2g_r5vtg_test.go:42: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [1] with length 1 [recovered]\n\tpanic: runtime error: index out of range [1] with length 1\n\ngoroutine 33 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102480)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000156030)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp_9co6eh0_test.go:21\ncommand-line-arguments_test.TestDerivative(0xc000102480)\n\t/tmp/tmp_9co6eh0_test.go:40 +0x2a9\ntesting.tRunner(0xc000102480, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    d := make([]int, len(xs))\n    d[0] = 1\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] * xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp9u6vhlls_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=8) %!s(int=40)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp9u6vhlls_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp9u6vhlls_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp9u6vhlls_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp9u6vhlls_test.go:47: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9] * 2}\n    }\n    if len(xs) == 11 {\n        return []int{xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3of7qno_test.go:50:24: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    return []int{xs[1], 2 * xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2, xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2, xs[6] * 2, xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2, xs[6] * 2, xs[7] * 2, xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpsg3q1kvt_test.go:47:31: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[9], xs[8], xs[7], xs[6], xs[5], xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[10], xs[9], xs[8], xs[7], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374868,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp7mh2mrw3_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    d[1] = xs[1] * 2\n    for i := 2; i < n; i++ {\n        d[i] = xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpqpt180hn_test.go:52: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=2) %!s(int=4) %!s(int=12) %!s(int=20)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpqpt180hn_test.go:52: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=4) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpqpt180hn_test.go:52: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=4) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpqpt180hn_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=4) %!s(int=2) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpqpt180hn_test.go:52: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i - 1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmprloljm9v_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmprloljm9v_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs) - 1\n    d := make([]int, n)\n    for i := 0; i < n; i++ {\n        d[i] = xs[i+1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_rwf3sgd_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=0) %!s(int=4)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{0}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] + i * xs[i-1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpgtkrwh2__test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=0) %!s(int=4) %!s(int=4) %!s(int=10) %!s(int=21)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpgtkrwh2__test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=0) %!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpgtkrwh2__test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpgtkrwh2__test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=0) %!s(int=5) %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpgtkrwh2__test.go:49: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpo9qkq_o0_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    return []int{xs[0], xs[1], xs[2], xs[3] * 2, xs[4] * 3}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpvideg31s_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=2) %!s(int=8) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpvideg31s_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpvideg31s_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpvideg31s_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=1) %!s(int=0) %!s(int=12)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpvideg31s_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + xs[2] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + xs[2] * 2, xs[4] + xs[3] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + xs[2] * 2, xs[4] + xs[3] * 2, xs[5] + xs[4] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + xs[2] * 2, xs[4] + xs[3] * 2, xs[5] + xs[4] * 2, xs[6] + xs[5] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + xs[2] * 2, xs[4] + xs[3] * 2, xs[5] + xs[4] * 2, xs[6] + xs[5]\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpnifvdis1_test.go:41:125: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := []int{}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "ok  \tcommand-line-arguments\t0.003s\n",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    d[0] = xs[1]\n    for i := 1; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i-1]\n    }\n    d[n-1] = xs[n-1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\npanic: runtime error: index out of range [4] with length 4 [recovered]\n\tpanic: runtime error: index out of range [4] with length 4\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x535060, 0xc000158000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.derivative(...)\n\t/tmp/tmp8rudjxh3_test.go:28\ncommand-line-arguments_test.TestDerivative(0xc000102600)\n\t/tmp/tmp8rudjxh3_test.go:39 +0xbe\ntesting.tRunner(0xc000102600, 0x54df00)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4] * 2}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5] * 2}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6] * 2}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7] * 2}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8] * 2}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9] * 2}\n    }\n    if len(xs) == 11 {\n        return []int{xs\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpy3of7qno_test.go:50:24: missing ',' before newline in composite literal\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := []int{xs[0]}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] + d[len(d) - 1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpfiuyoa_p_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpfiuyoa_p_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpfiuyoa_p_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpfiuyoa_p_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpfiuyoa_p_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8], 120 * xs[9]}\n    }\n    if len(xs) == 11 {\n        return\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp__vrsso6_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    return []int{xs[1], xs[2], xs[0] * 2}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpubws5590_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpubws5590_test.go:45: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[3], xs[2], xs[1], xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[4], xs[3], xs[2], xs[1], xs[0]}\n    }\n    return []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=4) %!s(int=2) %!s(int=1) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpju7dtpfc_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1], xs[5] + 4 * xs[4] * xs[1] + 6 * xs[3] * xs[1] + 2 * xs[2] * xs[1] * xs[1] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1] + 2 *\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpdwa37t9i_test.go:39:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Write your code here\n    if len(xs) == 0 {\n        return []int{}\n    }\n    \n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    \n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    \n    d := []int{}\n    for i := 1; i < len(xs); i++ {\n        d = append(d, xs[i] + i * xs[i - 1])\n    }\n    \n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp8nvnf195_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=4) %!s(int=4) %!s(int=10) %!s(int=21)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp8nvnf195_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp8nvnf195_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp8nvnf195_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=5) %!s(int=5) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp8nvnf195_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := []int{xs[0], xs[1]}\n    for i := 2; i < len(xs); i++ {\n        d = append(d, xs[i] * i)\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpxljwj_pd_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    return []int{xs[0], xs[1], xs[2] + 2 * xs[1], xs[3] + 3 * xs[2] + 2 * xs[1] * 2}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp1renvr83_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=14)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp1renvr83_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp1renvr83_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp1renvr83_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=5) %!s(int=11)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp1renvr83_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    n := len(xs)\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp7q693cpc_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp7q693cpc_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp7q693cpc_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp7q693cpc_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp7q693cpc_test.go:45: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[1]\n    for i := 1; i < len(xs) - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[len(xs) - 1] = xs[len(xs) - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmptk5yp7b__test.go:51: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n - 1)\n    for i := 0; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpskqkjzmr_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpskqkjzmr_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpskqkjzmr_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpskqkjzmr_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpskqkjzmr_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[1], 2 * xs[2], 6 * xs[3], 12 * xs[4], 20 * xs[5], 24 * xs[6], 36 * xs[7], 60 * xs[8], 120 * xs[9]}\n    }\n    if len(xs) == 11 {\n        return\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp__vrsso6_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpwl9_7doo_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // xs[0] + xs[1] * x + xs[2] * x^2 + ....\n    // xs[0] * x + xs[1] * x^2 + xs[2] * x^3 + ....\n    // xs[0] * x^2 + xs[1] * x^3 + xs[2] * x^4 + ....\n    // xs[0] * x^3 + xs[1] * x^4 + xs[2] * x^5 + ....\n    // xs[0] * x^4 + xs[1] * x^5 + xs[2] * x^6 + ....\n    // xs[0] * x^5 + xs[1] * x^6 + xs[2] * x^7 + ....\n    // xs[0] * x^6 + xs[1] * x^7 + xs[2] * x^8 + ....\n    // xs[0] * x^7 + xs[1] * x^8 + xs[2] * x^9 + ....\n    // xs[0] * x^8 + xs[1] * x^9 + xs[2] * x^10 + ....\n    // xs[0] * x^9 + xs[1] * x^10 + xs[2] * x^11 + ....\n    // xs[0] * x^10 + xs[1] * x^11 + xs[2] * x^12 + ....\n    // xs[0] * x^11 + xs[1] * x^12 + xs[2] * x^13 + ....\n    // xs[0] * x^12 + xs[1] * x^13 + xs[2] * x^14 + ....\n    // xs[0] * x^13 + xs[1] * x^14 + xs[2] * x^15 + ....\n    // xs[0] * x^14 + xs[1] * x^15 + xs[2] * x^16 + ....\n    // xs[0] * x^\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374869,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpi2puq9xz_test.go:32:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1], 2 * xs[0]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[1], 2 * xs[0], 6 * xs[0]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[1], 2 * xs[0], 6 * xs[0], 12 * xs[0]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[1], 2 * xs[0], 6 * xs[0], 12 * xs[0], 20 * xs[0]}\n    }\n    return []int{}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp_32vcham_test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6) %!s(int=18) %!s(int=36) %!s(int=60)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp_32vcham_test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp_32vcham_test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=6) %!s(int=18)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp_32vcham_test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6) %!s(int=18) %!s(int=36) %!s(int=60)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp_32vcham_test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1], xs[5] + 4 * xs[4] * xs[1]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[3] + 2 * xs[2] * xs[1], xs[4] + 3 * xs[3] * xs[1], xs[5] + 4 * xs[4] * xs[1], xs[6] + 5 * xs[5] * xs[1]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2] + xs[1] * 2, xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp1keiu304_test.go:42:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2]}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2], xs[3]}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4]}\n    }\n    if len(xs) == 6 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5]}\n    }\n    if len(xs) == 7 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6]}\n    }\n    if len(xs) == 8 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7]}\n    }\n    if len(xs) == 9 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8]}\n    }\n    if len(xs) == 10 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[4], xs[5], xs[6], xs[7], xs[8], xs[9]}\n    }\n    if len(xs) == 11 {\n        return []int{xs[0], xs[1], xs[2], xs[3], xs[\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374867,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmpgedfh827_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpu0ljqous_test.go:50: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Base case\n    if len(xs) == 1 {\n        return []int{}\n    }\n    // Recursive case\n    return append([]int{xs[len(xs) - 1]}, derivative(xs[:len(xs) - 1])...)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp935ph6u9_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Initialize result to be zeros.\n    result := make([]int, len(xs))\n    // Initialize the first element to be the first element of xs.\n    result[0] = xs[0]\n    // Initialize the second element to be the second element of xs.\n    result[1] = xs[1]\n    // Initialize the third element to be the first element of xs.\n    result[2] = xs[2]\n    // Initialize the fourth element to be the second element of xs.\n    result[3] = xs[3]\n    // Initialize the fifth element to be the first element of xs.\n    result[4] = xs[4]\n    // Initialize the sixth element to be the second element of xs.\n    result[5] = xs[5]\n    // Initialize the seventh element to be the first element of xs.\n    result[6] = xs[6]\n    // Initialize the eighth element to be the second element of xs.\n    result[7] = xs[7]\n    // Initialize the ninth element to be the first element of xs.\n    result[8] = xs[8]\n    // Initialize the tenth element to be the second element of xs.\n    result[9] = xs[9]\n    // Initialize the eleventh element to be the first element of xs.\n    result[10] = xs[10]\n    // Initialize the twelfth element to be the second element of xs.\n    result[11] = xs[11]\n    // Initialize the thirteenth element to be the first element of xs.\n    result[12] = xs[12]\n    // Initialize the fourteenth element to be the second element of xs.\n    result[13] = xs[13]\n    // Initialize the fifteenth element to be the first element of xs.\n    result[14] = xs[14]\n    // Initialize the sixteenth element to be the second element of xs.\n    result[15] = xs[15]\n    // Initialize the seventeenth element to be the first element of xs.\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "FAIL\tcommand-line-arguments [setup failed]\nFAIL\n",
      "stderr": "# command-line-arguments\n/tmp/tmp4_82u6z8_test.go:51:6: expected '(', found TestDerivative\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    for i := 1; i < n; i++ {\n        d[i] = xs[i] + d[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpi5cbh3pu_test.go:48: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    for i := 1; i < n - 1; i++ {\n        d[i] = xs[i + 1] - xs[i - 1]\n    }\n    d[n - 1] = xs[n - 1]\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=-1) %!s(int=3) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=-2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpbahanja6_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=-2) %!s(int=-2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpbahanja6_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{xs[0]}\n    }\n    if len(xs) == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    if len(xs) == 3 {\n        return []int{xs[0], xs[1], xs[2] * 2}\n    }\n    if len(xs) == 4 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2}\n    }\n    if len(xs) == 5 {\n        return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2}\n    }\n    return []int{xs[0], xs[1], xs[2] * 2, xs[3] * 2, xs[4] * 2, xs[5] * 2}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=4) %!s(int=8) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzekepya__test.go:54: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=2) %!s(int=0) %!s(int=8)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpzekepya__test.go:54: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    d := []int{}\n    for i := len(xs) - 2; i >= 0; i-- {\n        d = append(d, xs[i] + xs[i+1])\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp8ejistee_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=9) %!s(int=6) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp8ejistee_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=5) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp8ejistee_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp8ejistee_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=1) %!s(int=3) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp8ejistee_test.go:49: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{0}\n    }\n    if n == 2 {\n        return []int{xs[1]}\n    }\n    d := make([]int, n-1)\n    d[0] = xs[1]\n    for i := 2; i < n; i++ {\n        d[i-1] = xs[i] * i\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmphba6dzv__test.go:51: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    if n == 2 {\n        return []int{xs[0], xs[1]}\n    }\n    d := make([]int, n)\n    d[0] = xs[0]\n    d[1] = xs[1]\n    for i := 2; i < n; i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp9l5lp187_test.go:52: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=1) %!s(int=3) %!s(int=7) %!s(int=12)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp9l5lp187_test.go:52: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=2) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp9l5lp187_test.go:52: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=2) %!s(int=3)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp9l5lp187_test.go:52: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=2) %!s(int=3) %!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp9l5lp187_test.go:52: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    d := make([]int, len(xs))\n    d[0] = xs[0]\n    for i := 1; i < len(xs); i++ {\n        d[i] = d[i-1] + xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=3) %!s(int=4) %!s(int=6) %!s(int=10) %!s(int=15)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=3) %!s(int=5) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=3) %!s(int=5) %!s(int=6) %!s(int=6) %!s(int=10)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp5emaioa3_test.go:44: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n)\n    d[0] = xs[1]\n    d[1] = xs[0] + xs[1]\n    for i := 2; i < n; i++ {\n        d[i] = xs[i] + 2 * xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpa0edz1g4_test.go:49: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=4) %!s(int=4) %!s(int=8) %!s(int=13)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpa0edz1g4_test.go:49: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=3) %!s(int=7)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpa0edz1g4_test.go:49: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpa0edz1g4_test.go:49: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=5) %!s(int=5) %!s(int=2) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpa0edz1g4_test.go:49: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    // Base case\n    if len(xs) == 1 {\n        return []int{}\n    }\n    // Recursive case\n    return append([]int{xs[len(xs) - 1]}, derivative(xs[:len(xs) - 1])...)\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=5) %!s(int=4) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=3) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpip931d2s_test.go:41: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=4) %!s(int=0) %!s(int=1) %!s(int=2)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    if len(xs) == 0 {\n        return []int{}\n    }\n    if len(xs) == 1 {\n        return []int{0}\n    }\n    if len(xs) == 2 {\n        return []int{xs[1]}\n    }\n    return []int{xs[1], 2 * xs[0]}\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=2) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=2) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmpzrdb1746_test.go:45: expected '[]', got '[%!s(int=0)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    if n == 1 {\n        return []int{xs[0]}\n    }\n    d := make([]int, n-1)\n    for i := 0; i < n-1; i++ {\n        d[i] = xs[i+1] - xs[i]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=-2) %!s(int=1) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=-1) %!s(int=-1)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=-1) %!s(int=-1) %!s(int=-1) %!s(int=4)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmp3vuyhmj4_test.go:47: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package derivative_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// xs represent coefficients of a polynomial.\n// xs[0] + xs[1] * x + xs[2] * x^2 + ....\n// Return derivative of this polynomial in the same form.\n// >>> derivative([]int{3, 1, 2, 4, 5})\n// []int{1, 4, 12, 20}\n// >>> derivative([]int{1, 2, 3})\n// []int{2, 6}\nfunc derivative(xs []int) []int {\n    n := len(xs)\n    if n == 0 {\n        return []int{}\n    }\n    d := make([]int, n)\n    d[0] = 1\n    for i := 1; i < n; i++ {\n        d[i] = d[i-1] * xs[i-1]\n    }\n    return d\n}\n\nfunc TestDerivative(t *testing.T) {\n  candidate := derivative\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{3, 1, 2, 4, 5}), expected: []int{1, 4, 12, 20} },\n     { actual: candidate([]int{1, 2, 3}), expected: []int{2, 6} },\n     { actual: candidate([]int{3, 2, 1}), expected: []int{2, 2} },\n     { actual: candidate([]int{3, 2, 1, 0, 4}), expected: []int{2, 2, 0, 16} },\n     { actual: candidate([]int{1}), expected: []int{} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestDerivative (0.00s)\n    --- FAIL: TestDerivative/test_num__0 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=1) %!s(int=4) %!s(int=12) %!s(int=20)]', got '[%!s(int=1) %!s(int=3) %!s(int=3) %!s(int=6) %!s(int=24)]'\n    --- FAIL: TestDerivative/test_num__1 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=2) %!s(int=6)]', got '[%!s(int=1) %!s(int=1) %!s(int=2)]'\n    --- FAIL: TestDerivative/test_num__2 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=2) %!s(int=2)]', got '[%!s(int=1) %!s(int=3) %!s(int=6)]'\n    --- FAIL: TestDerivative/test_num__3 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[%!s(int=2) %!s(int=2) %!s(int=0) %!s(int=16)]', got '[%!s(int=1) %!s(int=3) %!s(int=6) %!s(int=6) %!s(int=0)]'\n    --- FAIL: TestDerivative/test_num__4 (0.00s)\n        tmphr8i9y8n_test.go:45: expected '[]', got '[%!s(int=1)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}