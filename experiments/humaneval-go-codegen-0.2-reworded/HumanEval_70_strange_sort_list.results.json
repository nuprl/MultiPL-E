{
  "name": "HumanEval_70_strange_sort_list",
  "language": "go_test.go",
  "prompt": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n",
  "tests": "func TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
  "stop_tokens": [
    "\nfunc",
    "struct",
    "\n// "
  ],
  "results": [
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i + 1]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc0001cc000, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmpvhjbyl_g_test.go:35 +0x1ba\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000182600)\n\t/tmp/tmpvhjbyl_g_test.go:47 +0x8f\ntesting.tRunner(0xc000182600, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp_5794jj9_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 2; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpgo3x03yw_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 2; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpag672j1d_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return strange_sort_list_helper(lst, min, max)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa7efsr5d_test.go:31:12: undefined: strange_sort_list_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpczrkujry_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpczrkujry_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpczrkujry_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpczrkujry_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpczrkujry_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpczrkujry_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < lst[i+1] {\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374870,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmp0mhn79g5_test.go:34 +0x1c5\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmp0mhn79g5_test.go:48 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprayogtma_test.go:31:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            min = max\n            max = lst[i]\n        } else if lst[i] == max {\n            max = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpwor6l84k_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpwor6l84k_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpwor6l84k_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpwor6l84k_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpwor6l84k_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpwor6l84k_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := []int{min, max}\n    for _, v := range lst {\n        if v < min {\n            result = append(result, v)\n        }\n        if v > max {\n            result = append(result, v)\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpb25nex_v_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx7j_sjds_test.go:60: expect",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i + 1] = lst[i + 1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpqd5l7xd9_test.go:60: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpfs18r3zk_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpfs18r3zk_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpfs18r3zk_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpfs18r3zk_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpfs18r3zk_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpfs18r3zk_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpforgg3d__test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpforgg3d__test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpforgg3d__test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpforgg3d__test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpforgg3d__test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpforgg3d__test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n\n    for i := 0; i < len(lst) - 2; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374872,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpr0ouh_hh_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(result); i++ {\n        if result[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpl5618gkv_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpl5618gkv_test.go:72: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpl5618gkv_test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpl5618gkv_test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpl5618gkv_test.go:72: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpl5618gkv_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := []int{min, max}\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n        result = append(result, v)\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpjkrhruqa_test.go:67: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.015s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp3ci8jivw_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp3ci8jivw_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp3ci8jivw_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp3ci8jivw_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp3ci8jivw_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp3ci8jivw_test.go:71: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(result); i++ {\n        if result[i] != lst[i] {\n            fmt.Printf(\"%d != %d\\n\", result[i], lst[i])\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "4 != 1\n9 != 5\n5 != 1\n9 != 1\n8 != 1\n5 != -5\n5 != -5\n--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpsgsnsyic_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpsgsnsyic_test.go:72: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpsgsnsyic_test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpsgsnsyic_test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpsgsnsyic_test.go:72: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpsgsnsyic_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    return strange_sort_list_helper(lst, min, max)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp03_x3fiu_test.go:33:12: undefined: strange_sort_list_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpi3le_pck_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpi3le_pck_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpi3le_pck_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpi3le_pck_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpi3le_pck_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpi3le_pck_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpslzk_atz_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpslzk_atz_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpslzk_atz_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpslzk_atz_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpslzk_atz_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpslzk_atz_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 2; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpoithf_mg_test.go:60: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmppe7uho7v_test.go:34 +0x1c5\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmppe7uho7v_test.go:46 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i] == min {\n            result[i] = max\n        }\n        if result[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp_myamjgl_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_myamjgl_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp_myamjgl_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_myamjgl_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_myamjgl_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_myamjgl_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.008s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprayogtma_test.go:31:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := 0; j < len(lst) - i - 1; j++ {\n            if lst[j] > lst[j+1] {\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpfm4o5_8w_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp8196rxwg_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n\n    for i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i+1]\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmpas9uycqe_test.go:38 +0x1ba\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmpas9uycqe_test.go:51 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min}, append([]int{max}, lst[1:]...)...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        if lst[i] > lst[i + 1] {\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpqrmmjz_c_test.go:62: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpz1n6l26l_test.go:61: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpd6nzsvbc_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 2; i++ {\n        for j := i + 1; j < len(lst) - 1; j++ {\n            if lst[j] > lst[j + 1] {\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=1) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=5) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=1) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpjzsnq8sb_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n            max = min\n            min = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptvt5rvqn_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptvt5rvqn_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptvt5rvqn_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptvt5rvqn_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptvt5rvqn_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptvt5rvqn_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i+1]\n    }\n    for i := len(lst) - 2; i >= 0; i -= 2 {\n        lst[i] = lst[i] + lst[i+1]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmpy72k7m7s_test.go:35 +0x206\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmpy72k7m7s_test.go:50 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i + 1]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000182600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc0001ce000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc0001cc000, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmpvhjbyl_g_test.go:35 +0x1ba\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000182600)\n\t/tmp/tmpvhjbyl_g_test.go:47 +0x8f\ntesting.tRunner(0xc000182600, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx7j_sjds_test.go:60: expect",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            min--\n        }\n        if lst[i] == max {\n            max--\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374875,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpf64lovoe_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpf64lovoe_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpf64lovoe_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpf64lovoe_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpf64lovoe_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpf64lovoe_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmppe7uho7v_test.go:34 +0x1c5\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmppe7uho7v_test.go:46 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmptnyup7x7_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpk1s2bi2__test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpk1s2bi2__test.go:72: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpk1s2bi2__test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpk1s2bi2__test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpk1s2bi2__test.go:72: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpk1s2bi2__test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx7j_sjds_test.go:60: expect",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpc0jrb_bw_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmphvqkc2pl_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmphvqkc2pl_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmphvqkc2pl_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmphvqkc2pl_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmphvqkc2pl_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmphvqkc2pl_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp1m0b0sy8_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        } else if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374904,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i++ {\n        for j := 0; j < len(lst) - i - 1; j++ {\n            if lst[j] > lst[j + 1] {\n                lst[j], lst[j + 1] = lst[j + 1], lst[j]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpya4jd6ii_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyxoqmx5l_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyxoqmx5l_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyxoqmx5l_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyxoqmx5l_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyxoqmx5l_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyxoqmx5l_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpyjs1horw_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmplhj25v1l_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp7ky3x8ly_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvk4kremh_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i] == min {\n            result[i] = max\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp4tq6rhtr_test.go:62: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp4tq6rhtr_test.go:62: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp4tq6rhtr_test.go:62: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp4tq6rhtr_test.go:62: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp4tq6rhtr_test.go:62: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp4tq6rhtr_test.go:62: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := []int{min, max}\n    for _, v := range lst {\n        if v < min {\n            result = append(result, v)\n        }\n        if v > max {\n            result = append(result, v)\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpodh_qckt_test.go:67: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp_sdeym9k_test.go:71: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            min = lst[i]\n        }\n        if lst[i] == max {\n            max = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i] == min {\n            result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min}, max, min, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpmupmigdh_test.go:32:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(result); i++ {\n        lst[i] = result[i]\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxr6sdzfk_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxr6sdzfk_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxr6sdzfk_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxr6sdzfk_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxr6sdzfk_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxr6sdzfk_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx7j_sjds_test.go:60: expect",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min}, append([]int{max}, lst[0:len(lst)-1])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpogfefvl1_test.go:31:37: cannot use lst[0:len(lst) - 1] (type []int) as type int in append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvoo8xkf_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n    }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == min {\n            result[i], result[len(lst) - 1] = result[len(lst) - 1], result[i]\n            result = result[0:len(lst) - 1]\n            break\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n            result[i], result[0] = result[0], result[i]\n            result = result[1:]\n            break\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == min {\n            result[i], result[len(lst) - 1] = result[len(lst) - 1], result[i]\n            result = result[0:len(lst) - 1]\n            break\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n            result[i], result[0] = result[0], result[i]\n            result = result[1:]\n            break\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [2] with length 2 [recovered]\n\tpanic: runtime error: index out of range [2] with length 2\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc000154000, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmpscglowut_test.go:50 +0x23b\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000102600)\n\t/tmp/tmpscglowut_test.go:73 +0x8f\ntesting.tRunner(0xc000102600, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374877,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpcvvn8a02_test.go:56: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmprhp7_xcu_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.002s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374873,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx28hhal5_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst) - 1; i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=1) %!s(int=9) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=6) %!s(int=5) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp8n865jzc_test.go:64: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 2; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmp6nmkbjl__test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprayogtma_test.go:31:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpq796o_3n_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        lst = append(lst, lst[i])\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx7j_sjds_test.go:60: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=7) %!s(int=6) %!s(int=5) %!s(int=4) %!s(int=3) %!s(int=2) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx7j_sjds_test.go:60: expect",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpibe_lw91_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpibe_lw91_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpibe_lw91_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpibe_lw91_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpibe_lw91_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpibe_lw91_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := []int{min, max}\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n        result = append(result, v)\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpj924ll32_test.go:69: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmppe7uho7v_test.go:34 +0x1c5\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmppe7uho7v_test.go:46 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i] = lst[i] + lst[i+1]\n    }\n    for i := len(lst) - 2; i >= 0; i -= 2 {\n        lst[i] = lst[i] + lst[i+1]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 18 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000102600)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000156000)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc000154000, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmpqoc0jayw_test.go:34 +0x206\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000102600)\n\t/tmp/tmpqoc0jayw_test.go:49 +0x8f\ntesting.tRunner(0xc000102600, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.006s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp62_6n22l_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min}, append([]int{max}, lst[1:]...)...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpz4ny_ns4_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i, v := range lst {\n        if v == min {\n            result[i] = max\n        } else if v == max {\n            result[i] = min\n        } else {\n            result[i] = v\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpzyxr02oj_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpzyxr02oj_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpzyxr02oj_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpzyxr02oj_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpzyxr02oj_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpzyxr02oj_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            for j := i; j >= 0; j-- {\n                if lst[j] == max {\n                    break\n                }\n                result[j] = lst[j]\n            }\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp44sba_vv_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp44sba_vv_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp44sba_vv_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp44sba_vv_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp44sba_vv_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp44sba_vv_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpxbh583qm_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min}, max, min, max, lst[1:len(lst)]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmppgrv68mn_test.go:32:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx6bp7052_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if result[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpiqmqpbgs_test.go:71: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpiqmqpbgs_test.go:71: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpiqmqpbgs_test.go:71: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpiqmqpbgs_test.go:71: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpiqmqpbgs_test.go:71: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpiqmqpbgs_test.go:71: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if result[i] == min {\n            result[i] = max\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpszg29qpg_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpgfs9crfv_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.005s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpde_i5wsl_test.go:68: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpde_i5wsl_test.go:68: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpde_i5wsl_test.go:68: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpde_i5wsl_test.go:68: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpde_i5wsl_test.go:68: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpde_i5wsl_test.go:68: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    \n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    \n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n    \n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmps7k9okm0_test.go:69: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmps7k9okm0_test.go:69: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmps7k9okm0_test.go:69: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmps7k9okm0_test.go:69: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmps7k9okm0_test.go:69: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmps7k9okm0_test.go:69: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpvt9q6fan_test.go:55: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min}, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5j6hadm3_test.go:32:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        for j := i + 1; j < len(lst); j++ {\n            if lst[i] > lst[j] {\n                lst[i], lst[j] = lst[j], lst[i]\n            }\n        }\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpmp5nmfvg_test.go:67: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i] = lst[i] + 1\n        }\n        if lst[i] > max {\n            lst[i] = lst[i] - 1\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] < min {\n            lst[i] = lst[i] + 1\n        }\n        if lst[i] > max {\n            lst[i] = lst[i] - 1\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpx4zurmr__test.go:74: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n\n    result := []int{min, max}\n    for i := 2; i < len(lst); i++ {\n        result = append(result, lst[i])\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpq0c6e94m_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max) + strange_sort_list(lst[1:])\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmphmyhnyrn_test.go:31:38: invalid operation: append(lst[:0], min, max) + strange_sort_list(lst[1:]) (operator + not defined on slice)\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpv9ye1tk__test.go:56: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.004s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            lst[i], lst[0] = lst[0], lst[i]\n            i = 0\n        }\n    }\n    for i := len(lst) - 1; i >= 0; i-- {\n        if lst[i] == max {\n            lst[i], lst[len(lst) - 1] = lst[len(lst) - 1], lst[i]\n            i = len(lst) - 1\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374906,
      "stdout": "",
      "stderr": "",
      "exit_code": null,
      "status": "Timeout"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] > lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=9) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=1) %!s(int=5) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=5) %!s(int=1) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=8) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=0) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmptzfnvjzg_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        result[i] = lst[i]\n        if lst[i] == min {\n            result[i] = max\n        }\n    }\n\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == max {\n            result[i] = min\n        }\n    }\n\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp391g8krm_test.go:72: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp391g8krm_test.go:72: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp391g8krm_test.go:72: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp391g8krm_test.go:72: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp391g8krm_test.go:72: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp391g8krm_test.go:72: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i += 2 {\n        lst[i], lst[i+1] = lst[i+1], lst[i]\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\npanic: runtime error: index out of range [6] with length 6 [recovered]\n\tpanic: runtime error: index out of range [6] with length 6\n\ngoroutine 6 [running]:\ntesting.tRunner.func1.2(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1143 +0x332\ntesting.tRunner.func1(0xc000001380)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1146 +0x4b6\npanic(0x5364c0, 0xc000014360)\n\t/home/a.guha/.conda/envs/polyglot/go/src/runtime/panic.go:965 +0x1b9\ncommand-line-arguments_test.strange_sort_list(0xc00001a2a0, 0x4, 0x4, 0x4cd164, 0x0, 0x58a81f)\n\t/tmp/tmppe7uho7v_test.go:34 +0x1c5\ncommand-line-arguments_test.TestStrange_Sort_List(0xc000001380)\n\t/tmp/tmppe7uho7v_test.go:46 +0x8f\ntesting.tRunner(0xc000001380, 0x54f388)\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1193 +0xef\ncreated by testing.(*T).Run\n\t/home/a.guha/.conda/envs/polyglot/go/src/testing/testing.go:1238 +0x2b3\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := 0; i < len(lst); i++ {\n        if lst[i] == min {\n            result[i] = max\n        } else if lst[i] == max {\n            result[i] = min\n        } else {\n            result[i] = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=4) %!s(int=2) %!s(int=3) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=9) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=5) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=8) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpb_3i6quo_test.go:66: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.009s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min}, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmp5j6hadm3_test.go:32:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmp9083qbwd_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append([]int{min, max}, strange_sort_list(lst[1:])...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=4) %!s(int=3) %!s(int=4) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=9) %!s(int=7) %!s(int=9) %!s(int=8) %!s(int=9) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=5) %!s(int=3) %!s(int=5) %!s(int=4) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=9) %!s(int=1) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=8) %!s(int=3) %!s(int=8) %!s(int=4) %!s(int=8) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=8) %!s(int=7) %!s(int=8) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmptps7rn1w_test.go:55: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    result := make([]int, len(lst))\n    for i := len(lst) - 1; i >= 0; i-- {\n        result[i] = lst[i]\n        if lst[i] == min {\n            min = lst[i]\n        }\n        if lst[i] == max {\n            max = lst[i]\n        }\n    }\n    return result\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpom71tgrr_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\nFAIL\nFAIL\tcommand-line-arguments\t0.003s\nFAIL\n",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return append(lst[:0], min, max, lst[1:]...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmprayogtma_test.go:31:18: too many arguments to append\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n\n    min, max := lst[0], lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := len(lst) - 2; i >= 0; i-- {\n        if lst[i] > lst[i + 1] {\n            lst[i], lst[i + 1] = lst[i + 1], lst[i]\n        }\n    }\n\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374878,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpzjf_tr9o_test.go:65: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min, max := lst[0], lst[0]\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < min {\n            min = lst[i]\n        }\n        if lst[i] > max {\n            max = lst[i]\n        }\n    }\n    return strange_sort_list_helper(lst, min, max)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374871,
      "stdout": "FAIL\tcommand-line-arguments [build failed]\nFAIL\n",
      "stderr": "# command-line-arguments_test [command-line-arguments.test]\n/tmp/tmpa7efsr5d_test.go:31:12: undefined: strange_sort_list_helper\n",
      "exit_code": 2,
      "status": "SyntaxError"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    return append([]int{min, max}, lst...)\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374874,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=4) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=5) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=9) %!s(int=1)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=8) %!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=5) %!s(int=-5) %!s(int=-5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpif5toddf_test.go:56: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    },
    {
      "program": "package strange_sort_list_test\n\nimport (\n    \"testing\"\n    \"fmt\"\n)\n\n// Given list of integers, return list in strange order.\n// Strange sorting, is when you start with the minimum value,\n// then maximum of the remaining integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list([]int{1, 2, 3, 4})\n// []int{1, 4, 2, 3}\n// >>> strange_sort_list([]int{5, 5, 5, 5})\n// []int{5, 5, 5, 5}\n// >>> strange_sort_list([]int{})\n// []int{}\nfunc strange_sort_list(lst []int) []int {\n    if len(lst) == 0 {\n        return lst\n    }\n    min := lst[0]\n    max := lst[0]\n    for _, v := range lst[1:] {\n        if v < min {\n            min = v\n        }\n        if v > max {\n            max = v\n        }\n    }\n    lst = append(lst, min)\n    lst = append(lst, max)\n    for i := 1; i < len(lst); i++ {\n        if lst[i] < lst[i-1] {\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n        }\n    }\n    return lst\n}\n\nfunc TestStrange_Sort_List(t *testing.T) {\n  candidate := strange_sort_list\n\ttype test struct {\n\t\tactual   interface{}\n\t\texpected interface{}\n\t}\n   tests := []test{\n     { actual: candidate([]int{1, 2, 3, 4}), expected: []int{1, 4, 2, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9}), expected: []int{5, 9, 6, 8, 7} },\n     { actual: candidate([]int{1, 2, 3, 4, 5}), expected: []int{1, 5, 2, 4, 3} },\n     { actual: candidate([]int{5, 6, 7, 8, 9, 1}), expected: []int{1, 9, 5, 8, 6, 7} },\n     { actual: candidate([]int{5, 5, 5, 5}), expected: []int{5, 5, 5, 5} },\n     { actual: candidate([]int{}), expected: []int{} },\n     { actual: candidate([]int{1, 2, 3, 4, 5, 6, 7, 8}), expected: []int{1, 8, 2, 7, 3, 6, 4, 5} },\n     { actual: candidate([]int{0, 2, 2, 2, 5, 5, -5, -5}), expected: []int{-5, 5, -5, 5, 0, 2, 2, 2} },\n     { actual: candidate([]int{111111}), expected: []int{111111} },\n   }\n\n\tfor i, tc := range tests {\n\t\tt.Run(fmt.Sprintf(\"test num % d\", i), func(t *testing.T) {\n\t\t\tif fmt.Sprintf(\"%v\", tc.actual) != fmt.Sprintf(\"%v\", tc.expected) {\n\t\t\t\tt.Errorf(\"expected '%s', got '%s'\", tc.expected, tc.actual)\n\t\t\t}\n\t\t})\n\t}\n}\n",
      "timestamp": 1664374876,
      "stdout": "--- FAIL: TestStrange_Sort_List (0.00s)\n    --- FAIL: TestStrange_Sort_List/test_num__0 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=4) %!s(int=2) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=1) %!s(int=4) %!s(int=4)]'\n    --- FAIL: TestStrange_Sort_List/test_num__1 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=9) %!s(int=6) %!s(int=8) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=5) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__2 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=5) %!s(int=2) %!s(int=4) %!s(int=3)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=1) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__3 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=9) %!s(int=5) %!s(int=8) %!s(int=6) %!s(int=7)]', got '[%!s(int=5) %!s(int=6) %!s(int=7) %!s(int=8) %!s(int=1) %!s(int=1) %!s(int=9) %!s(int=9)]'\n    --- FAIL: TestStrange_Sort_List/test_num__4 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]', got '[%!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__6 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=1) %!s(int=8) %!s(int=2) %!s(int=7) %!s(int=3) %!s(int=6) %!s(int=4) %!s(int=5)]', got '[%!s(int=1) %!s(int=2) %!s(int=3) %!s(int=4) %!s(int=5) %!s(int=6) %!s(int=7) %!s(int=1) %!s(int=8) %!s(int=8)]'\n    --- FAIL: TestStrange_Sort_List/test_num__7 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=-5) %!s(int=5) %!s(int=-5) %!s(int=5) %!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2)]', got '[%!s(int=0) %!s(int=2) %!s(int=2) %!s(int=2) %!s(int=5) %!s(int=-5) %!s(int=-5) %!s(int=-5) %!s(int=5) %!s(int=5)]'\n    --- FAIL: TestStrange_Sort_List/test_num__8 (0.00s)\n        tmpkcdt7v56_test.go:63: expected '[%!s(int=111111)]', got '[%!s(int=111111) %!s(int=111111) %!s(int=111111)]'\nFAIL\nFAIL\tcommand-line-ar",
      "stderr": "",
      "exit_code": 1,
      "status": "Exception"
    }
  ]
}